
" https://github.com/rafi/vim-config
" Maintainer: Rafael Bodill

" Runtime and Plugins
" ===

if &compatible
	" vint: -ProhibitSetNoCompatible
	set nocompatible
	" vint: +ProhibitSetNoCompatible
endif

" Set main configuration directory as parent directory
let $VIM_PATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')
let $CACHE_PATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache'))
let $DATA_PATH = expand($XDG_DATA_HOME.'/nvim')

" When using VIMINIT trick for exotic MYVIMRC locations, add path now.
if &runtimepath !~# $VIM_PATH
  set runtimepath^=$VIM_PATH
endif

" Disable vim distribution plugins
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_logiPat = 1
let g:loaded_matchit = 1
let g:loaded_matchparen = 1
let g:netrw_nogx = 1 " disable netrw's gx mapping.
let g:loaded_netrwPlugin = 1
let g:loaded_rrhelper = 1
let g:loaded_shada_plugin = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_2html_plugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zip = 1
let g:loaded_zipPlugin = 1

function! s:source_file(path, ...)
	" Source user configuration files with set/global sensitivity
	let use_global = get(a:000, 0, ! has('vim_starting'))
	let abspath = resolve($VIM_PATH . '/' . a:path)
	if ! use_global
		execute 'source' fnameescape(abspath)
		return
	endif

	let tempfile = tempname()
	let content = map(readfile(abspath),
		\ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
	try
		call writefile(content, tempfile)
		execute printf('source %s', fnameescape(tempfile))
	finally
		if filereadable(tempfile)
			call delete(tempfile)
		endif
	endtry
endfunction

" Initialize startup settings
if has('vim_starting')
	" Use spacebar as leader and ; as secondary-leader
	" Required before loading plugins!
	let g:mapleader="\<Space>"
	let g:maplocalleader=';'

	" Release keymappings prefixes, evict entirely for use of plug-ins.
	nnoremap <Space>  <Nop>
	xnoremap <Space>  <Nop>
	nnoremap ,        <Nop>
	xnoremap ,        <Nop>
	nnoremap ;        <Nop>
	xnoremap ;        <Nop>

	" Ensure data directories
	for s:path in [
			\ $DATA_PATH . '/undo',
			\ $DATA_PATH . '/backup',
			\ $DATA_PATH . '/session',
			\ $DATA_PATH . '/spell' ]
		if ! isdirectory(s:path)
			call mkdir(s:path, 'p')
		endif
	endfor

	" Search and use virtual environments specifically made for Neovim.
	" Disable python 2
	let g:loaded_python_provider = 0
	" Add python 3 to path, and tell neovim to use it when possible
	let s:python_venv = $CACHE_PATH . '/pyenv/versions/neovim3/bin'
	if has('nvim') && isdirectory(s:python_venv)
		let g:python3_host_prog = s:python_venv . '/python'
		let $PATH = s:python_venv . ':' . $PATH
	endif

	if ! has('nvim') && has('pythonx')
		if has('python3')
			set pyxversion=3
		elseif has('python')
			set pyxversion=2
		endif
	endif

	" Vim only, Linux terminal settings
	if ! has('nvim') && ! has('gui_running') && ! has('win32') && ! has('win64')
		call s:source_file('core/terminal.vim')
	endif
endif

" Load user scripts with confidential information
" or pre-settings like g:elite_mode
if filereadable($VIM_PATH . '/.vault.vim')
	call s:source_file('.vault.vim')
endif

" Initialize plugin-manager and load main config files
call s:source_file('core/init.vim')
call s:source_file('core/general.vim')
call s:source_file('core/filetype.vim')
call s:source_file('core/keymappings_plugins.vim')
call s:source_file('core/keymappings_general.vim')
call s:source_file('core/colorscheme.vim')

set secure

" vim: set ts=2 sw=2 tw=80 noet :

