[{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date","title":"Date","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean","title":"Boolean","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects","title":"Global Objects","description":"Standard global objects (by category) General-purpose constructors  Array Boolean Date Function Iterator Number Object RegExp String  Typed array constructors  ArrayBuffer Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray  Error constructors  Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError  Non-constructor functions  decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval  Other  Infinity JSON Math NaN undefined  General-purpose constructors  Array Boolean Date Function Iterator Number Object RegExp String  Typed array constructors  ArrayBuffer Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray  Error constructors  Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError  Non-constructor functions  decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval  Other  Infinity JSON Math NaN undefined  Standard global objects (alphabetically)  Array ArrayBuffer Boolean Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error eval EvalError Float32Array Float64Array Function Infinity Int16Array Int32Array Int8Array isFinite isNaN Iterator JSON Math NaN Number Object parseFloat parseInt RangeError ReferenceError RegExp StopIteration String SyntaxError TypeError Uint16Array Uint32Array Uint8Array Uint8ClampedArray undefined uneval URIError  Other objects in the global scope are either created by the user script or provided by the host application. The host objects available in Gecko-based browsers are documented in the Gecko DOM Reference. For more information about the distinction between the DOM and core JavaScript, see The DOM and JavaScript article."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array","title":"Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function","title":"Function","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number","title":"Number","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object","title":"Object","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp","title":"RegExp","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String","title":"String","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/ArrayBuffer","title":"ArrayBuffer","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Float32Array","title":"Float32Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Float64Array","title":"Float64Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int16Array","title":"Int16Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int32Array","title":"Int32Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int8Array","title":"Int8Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint16Array","title":"Uint16Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint32Array","title":"Uint32Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint8Array","title":"Uint8Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error","title":"Error","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/EvalError","title":"EvalError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RangeError","title":"RangeError","description":"Represents an error when a number is not within the correct range allowed. Syntax new RangeError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description A RangeError is thrown when trying to pass a number as an argument to a function that does not allow a range that includes that number. This can be encountered when to create an array of an illegal length with the Array constructor, or when passing bad values to the numeric methods toExponential, toFixed, or toPrecision. Properties For properties available on RangeError instances, see Properties of RangeError instances.             prototype Allows the addition of properties to an RangeError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on RangeError instances, see Methods of RangeError instances.            The global RangeError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    RangeError instances Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  Array Error RangeError.prototype toExponential toFixed toPrecision"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError","title":"ReferenceError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/SyntaxError","title":"SyntaxError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/TypeError","title":"TypeError","description":"Represents an error when a value is not of the expected type. Syntax new TypeError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description A TypeError is thrown when an operand or argument passed to a function is incompatible with the type expected by that operator or function. Properties For properties available on TypeError instances, see Properties of TypeError instances.             prototype Allows the addition of properties to an TypeError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on TypeError instances, see Methods of TypeError instances.            The global TypeError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    TypeError instances All TypeError instances inherit from TypeError.prototype. You can use the prototype to add properties or methods to all instances. Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Note: Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the TypeError prototype object does not contain any methods of its own, TypeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  Error apply call TypeError.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/URIError","title":"URIError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/decodeURI","title":"decodeURI","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/decodeURIComponent","title":"decodeURIComponent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseFloat","title":"parseFloat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseInt","title":"parseInt","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Infinity","title":"Infinity","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON","title":"JSON","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math","title":"Math","description":"A built-in object that has properties and methods for mathematical constants and functions. Description Unlike the other global objects, Math is not a constructor. All properties and methods of Math are static. You refer to the constant pi as Math.PI and you call the sine function as Math.sin(x), where x is the method's argument. Constants are defined with the full precision of real numbers in JavaScript.Properties  E Euler's constant and the base of natural logarithms, approximately 2.718.   LN2 Natural logarithm of 2, approximately 0.693.   LN10 Natural logarithm of 10, approximately 2.302.   LOG2E Base 2 logarithm of E, approximately 1.442.   LOG10E Base 10 logarithm of E, approximately 0.434.   PI Ratio of the circumference of a circle to its diameter, approximately 3.14159.   SQRT1_2 Square root of 1\/2; equivalently, 1 over the square root of 2, approximately 0.707.   SQRT2 Square root of 2, approximately 1.414.    Properties inherited from  Object:constructor, __parent__, __proto__   Methods   Note that the trigonometric functions (sin, cos, tan, asin, acos, atan, atan2) expect or return angles in radians - to convert radians to degrees divide by (Math.PI \/ 180), and multiply by this to convert the other way. abs Returns the absolute value (modulus) of a number.   acos Returns the arccosine of a number.   asin Returns the arcsine of a number.   atan Returns the arctangent of a number.   atan2 Returns the arctangent of the quotient of its arguments.   ceil Returns the smallest integer greater than or equal to a number.   cos Returns the cosine of a number.   exp Returns Enumber, where number is the argument, and E is Euler's constant (2.718...), the base of the natural logarithm.   floor Returns the largest integer less than or equal to a number.   log Returns the natural logarithm (loge, also ln) of a number.   max Returns the largest of zero or more numbers.   min Returns the smallest of zero or more numbers.   pow Returns base to the exponent power, that is, baseexponent.   random Returns a pseudo-random number between 0 and 1.   round Returns the value of a number rounded to the nearest integer.   sin Returns the sine of a number.   sqrt Returns the positive square root of a number.   tan Returns the tangent of a number.   toSource Non-standard      Returns the string \"Math\".    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, toString, unwatch, valueOf, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/NaN","title":"NaN","description":"A value representing Not-A-Number.    Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax NaN Description NaN is a property of the global object. The initial value of NaN is Not-A-Number - the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use NaN in a program. It is the returned value when Math functions fail (Math.sqrt(-1)) or when a function trying to parse a number fails (parseInt(\"blabla\")). Testing against NaN Equality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead. \r           NaN === NaN;        \/\/ false Number.NaN === NaN; \/\/ false isNaN(NaN);         \/\/ true isNaN(Number.NaN);  \/\/ true\r          Testing against NaN Equality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead. \r           NaN === NaN;        \/\/ false Number.NaN === NaN; \/\/ false isNaN(NaN);         \/\/ true isNaN(Number.NaN);  \/\/ true\r          See also isNaN"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/undefined","title":"undefined","description":"The value undefined.    Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax  undefined  Description undefined is a property of the global object, i.e. it is a variable in global scope. The initial value of undefined is the primitive value undefined.   JavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), undefined is non-writable, as per the ECMAScript 5 specification. A variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. A function returns undefined if a value was not returned. You can use undefined and the strict equality and inequality operators to determine whether a variable has a value. In the following code, the variable x is not defined, and the if statement evaluates to true. \r           var x; if (x === undefined) {    \/\/ these statements execute } if (x !== undefined) {    \/\/ these statements do not execute }\r          Note: The strict equality operator rather than the standard equality operator must be used here, because x == undefined also checks whether x is null, while strict equality doesn't. null is not equivalent to undefined. See comparison operators for details. Alternatively, typeof can be used: \r           var x; if (typeof x == 'undefined') {    \/\/ these statements execute }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/block","title":"block","description":"A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets. Version Information    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax \r           {    statement_1    statement_2    ...    statement_n }\r          Parameters  statement_1, statement_2, statement_n Statements grouped within the block statement.  Description This statement is commonly used with control flow statements (e.g. if, for, while). For example: \r           while (x < 10) {    x++; }\r          Important: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although \"standalone\" blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java. For example: \r           var x = 1; {    var x = 2; } alert(x); \/\/ outputs 2\r          This outputs 2 because the var x statement within the conditional is in the same scope as the var x statement before the conditional. In C or Java, the equivalent code would have outputted 1."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/break","title":"break","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/const","title":"const","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/continue","title":"continue","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/debugger","title":"debugger","description":"Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.    Statement   Implemented in JavaScript 1.0   ECMAScript Edition ECMA-262 5th Edition   Syntax debugger; Examples  The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.  function potentiallyBuggyCode() {   debugger;   \/\/ do potentially buggy stuff to examine, step through, etc. }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/do...while","title":"do...while","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/export","title":"export","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for","title":"for","description":"Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax for ([initialization]; [condition]; [final-expression])    statement  Parameters  initialization An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the var keyword. These variables are not local to the loop, i.e. they are in the same scope the for loop is in. The result of this expression is discarded.   condition An expression to be evaluated before each loop iteration. If this expression evaluates to true, statement is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the for construct.   final-expression An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of condition. Generally used to update or increment the counter variable.   statement A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.  Examples Example: Using for The following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop. \r           for (var i = 0; i < 9; i++) {    n += i;    myfunc(n); }\r          Example: Using for without the statement section The following for cycle calculates the offset position of a node in the [final-expression] section, and therefore it does not require the use of a statement or block statement section: \r           function showOffsetPos (sId) {   var nLeft = 0, nTop = 0;   for (var oItNode = document.getElementById(sId); oItNode; nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent);   alert(\"Offset position of \\\"\" + sId + \"\\\" element:\\n left: \" + nLeft + \"px;\\n top: \" + nTop + \"px;\"); }\r          Note: In this case, when you do not use the statement section, a semicolon is put immediately after the declaration of the cycle. Example: Using for The following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop. \r           for (var i = 0; i < 9; i++) {    n += i;    myfunc(n); }\r          Example: Using for without the statement section The following for cycle calculates the offset position of a node in the [final-expression] section, and therefore it does not require the use of a statement or block statement section: \r           function showOffsetPos (sId) {   var nLeft = 0, nTop = 0;   for (var oItNode = document.getElementById(sId); oItNode; nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent);   alert(\"Offset position of \\\"\" + sId + \"\\\" element:\\n left: \" + nLeft + \"px;\\n top: \" + nTop + \"px;\"); }\r          Note: In this case, when you do not use the statement section, a semicolon is put immediately after the declaration of the cycle. See also while, do...while, for...in"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for...in","title":"for...in","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for_each...in","title":"for each...in","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/function","title":"function","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/if...else","title":"if...else","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/import","title":"import","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/label","title":"label","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/let","title":"let","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/return","title":"return","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/switch","title":"switch","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/throw","title":"throw","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/try...catch","title":"try...catch","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/while","title":"while","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/var","title":"var","description":"Declares a variable, optionally initializing it to a value.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax var varname1 [= value1 [, varname2 [, varname3 ... [, varnameN]]]]; Parameters  varnameN Variable name. It can be any legal identifier.   valueN Initial value of the variable. It can be any legal expression.  Description The scope of a variable declared with var is the enclosing function or, for variables declared outside a function, the global scope (which is bound to the global object). Using var outside a function is optional; assigning a value to an undeclared variable implicitly declares it as a global variable (also a property of the global object). The difference is that z declared variable is a non-configurable property of the global object while an undeclared is configurable. \r           var a = 1; b = 2;  delete this.a; \/\/ Throws a TypeError in strict mode. Fails silently otherwise. delete this.b;  console.log(a, b); \/\/ Throws a ReferenceError. Since the 'b' property doesn't exist in the global object, \/\/ the 'b' variable stops being a variable\r          Consequently, it is recommended to always declare your variables, regardless of being in the global scope or in a function Failure to declare the variable in these cases will very likely lead to unexpected results. For that reason, in ECMAScript 5 strict mode, assigning a value an undeclared variable inside a function throws an error. var hoisting In JavaScript, variable can be declared after being used. \r           bla = 2 var bla; \/\/ ...  \/\/ is implicitly understood as:  var bla; bla = 2;\r          For that reason, it is recommanded to always declare variable at the top of functions. Otherwise, it may lead to confusing cases: \r           var cells = document.getElementsByTagName('td');  for(var i=0; i<cells.length; i++){   var cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F'; \/\/ which 'cell' ?   }, false); }\r          Here, while the intention is to capture the 'local' cell within the loop, what happened is the following: \r           var i, cell; var cells = document.getElementsByTagName('td');  for(i=0; i<cells.length; i++){   cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F';   }, false); }\r          The 'cell' captured in the event listener is the global 'cell' variable which, at the end of the loop contains the last cell traversed in the loop. Consequently, clicking on any cell will only affect the last cell.var hoisting In JavaScript, variable can be declared after being used. \r           bla = 2 var bla; \/\/ ...  \/\/ is implicitly understood as:  var bla; bla = 2;\r          For that reason, it is recommanded to always declare variable at the top of functions. Otherwise, it may lead to confusing cases: \r           var cells = document.getElementsByTagName('td');  for(var i=0; i<cells.length; i++){   var cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F'; \/\/ which 'cell' ?   }, false); }\r          Here, while the intention is to capture the 'local' cell within the loop, what happened is the following: \r           var i, cell; var cells = document.getElementsByTagName('td');  for(i=0; i<cells.length; i++){   cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F';   }, false); }\r          The 'cell' captured in the event listener is the global 'cell' variable which, at the end of the loop contains the last cell traversed in the loop. Consequently, clicking on any cell will only affect the last cell.Examples Declaring and initializing two variables: \r           var a = 0, b = 0;\r          Assigning 2 variables with single string value. \r           var a = \"A\"; var b = a;  \/\/ Equivalent to:  var a, b = a = \"A\";\r          Be careful of the order though: \r           var x = y, y = 'A'; console.log(x + y); \/\/ undefinedA  \/\/ Here, x is declared. y declaration (but not initialisation!) is hoisted \/\/ so, at the time of \"x = y\", y is declared (no ReferenceError is thrown) and its value is 'undefined' \/\/ then, y is assigned its value. \/\/ Consequently, after the first line, x === undefined && y === 'A'. Hence the concatenation\r          Be careful of initialization of several variables: \r           var x = 0;  function f(){   var x = y = 1; \/\/ x is declared locally. y is not! } f();  console.log(x, y); \/\/ 0, 1 \/\/ x is the global one as expected \/\/ y leaked outside of the function, though!\r          See also  let const How One Missing `var` Ruined our Launch."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/with","title":"with","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Arithmetic_Operators","title":"Arithmetic Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Assignment_Operators","title":"Assignment Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Bitwise_Operators","title":"Bitwise Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Comparison_Operators","title":"Comparison Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Logical_Operators","title":"Logical Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/String_Operators","title":"String Operators","description":"Summary  In addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together, returning another string that is the union of the two operand strings. For example, \"my \" + \"string\" returns the string \"my string\". The shorthand assignment operator += can also be used to concatenate strings. For example, if the variable mystring has the value \"alpha\", then the expression mystring += \"bet\" evaluates to \"alphabet\" and assigns this value to mystring.    Operator   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Member_Operators","title":"Member Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Conditional_Operator","title":"Conditional Operator","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Comma_Operator","title":"Comma Operator","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/delete","title":"delete","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/get","title":"get","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/in","title":"in","description":"The in operator returns true if the specified property is in the specified object.    Operator   Implemented in: JavaScript 1.4    Syntax  prop in objectName  Parameters  prop A string or numeric expression representing a property name or array index.   objectName Name of an object.  Description The following examples show some uses of the in operator.  \/\/ Arrays var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); 0 in trees        \/\/ returns true 3 in trees        \/\/ returns true 6 in trees        \/\/ returns false \"bay\" in trees    \/\/ returns false (you must specify the index number,                   \/\/ not the value at that index) \"length\" in trees \/\/ returns true (length is an Array property)  \/\/ Predefined objects \"PI\" in Math          \/\/ returns true  \/\/ Custom objects var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; \"make\" in mycar  \/\/ returns true \"model\" in mycar \/\/ returns true  You must specify an object on the right side of the in operator. For example, you can specify a string created with the String constructor, but you cannot specify a string literal.  var color1 = new String(\"green\"); \"length\" in color1 \/\/ returns true var color2 = \"coral\"; \"length\" in color2 \/\/ generates an error (color is not a String object)  Using in with deleted or undefined properties If you delete a property with the delete operator, the in operator returns false for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; delete mycar.make; \"make\" in mycar;  \/\/ returns false  var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); delete trees[3]; 3 in trees; \/\/ returns false  If you set a property to undefined but do not delete it, the in operator returns true for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; mycar.make = undefined; \"make\" in mycar;  \/\/ returns true   var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); trees[3] = undefined; 3 in trees; \/\/ returns true  Inherited properties The in operator returns true for properties in the prototype chain.  \"toString\" in {}; \/\/ returns true Using in with deleted or undefined properties If you delete a property with the delete operator, the in operator returns false for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; delete mycar.make; \"make\" in mycar;  \/\/ returns false  var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); delete trees[3]; 3 in trees; \/\/ returns false  If you set a property to undefined but do not delete it, the in operator returns true for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; mycar.make = undefined; \"make\" in mycar;  \/\/ returns true   var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); trees[3] = undefined; 3 in trees; \/\/ returns true  Inherited properties The in operator returns true for properties in the prototype chain.  \"toString\" in {}; \/\/ returns true See also  delete Object.prototype.hasOwnProperty"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/instanceof","title":"instanceof","description":"The instanceof operator tests whether an object has in its prototype chain the prototype property of a constructor.    Operator     Implemented in: JavaScript 1.4   ECMAScript Edition: ECMA-262 ? Edition    Syntax object instanceof constructorParameters  object The object to test.   constructor Function to test against  Description The instanceof operator tests presence of constructor.prototype in object prototype chain. \r           function C(){} \/\/ defining a constructor function D(){} \/\/ defining another constructor  var o = new C(); o instanceof C; \/\/ true, because: Object.getPrototypeOf(o) === C.prototype o instanceof D; \/\/ false, because D.prototype is nowhere in o's prototype chain o instanceof Object; \/\/ true, because: C.prototype instanceof Object \/\/ true  C.prototype = {}; var o2 = new C(); o2 instanceof C; \/\/ true o instanceof C; \/\/ false, because C.prototype is nowhere in o's prototype chain anymore  D.prototype = Object.getPrototypeOf(o); o instanceof D; \/\/ true\r          Note that if the value of an instanceof test can change based on changes to the prototype property of constructors, it cannot be changed by changing an object prototype, because changing an object prototype is not possible in standard ECMAScript. It is however possible using the non-standard __proto__ pseudo-property. instanceof and multiple context (e.g. frames or windows) Different scope have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, if Array2 is the Array constructor of another context, [] instanceof Array2 will return false, because Array.prototype !== Array2.prototype and arrays inherit from the former.Mozilla developers In code using XPCOM instanceof has special effect: obj instanceof xpcomInterface (e.g. Components.interfaces.nsIFile) calls obj.QueryInterface(xpcomInterface) and returns true if QueryInterface succeeded. A side effect of such call is that you can use xpcomInterface's properties on obj after a successful instanceof test. Unlike standard JavaScript globals, the test obj instanceof xpcomInterface works as expected even if obj is from a different scope. instanceof and multiple context (e.g. frames or windows) Different scope have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, if Array2 is the Array constructor of another context, [] instanceof Array2 will return false, because Array.prototype !== Array2.prototype and arrays inherit from the former.Mozilla developers In code using XPCOM instanceof has special effect: obj instanceof xpcomInterface (e.g. Components.interfaces.nsIFile) calls obj.QueryInterface(xpcomInterface) and returns true if QueryInterface succeeded. A side effect of such call is that you can use xpcomInterface's properties on obj after a successful instanceof test. Unlike standard JavaScript globals, the test obj instanceof xpcomInterface works as expected even if obj is from a different scope. Examples Also see the examples for throw. Example: Determining whether theDay is a Date object The following code uses instanceof to determine whether theDay is a Date object. Because theDay is a Date object, the statements in the if statement execute.  var theDay = new Date(1995, 11, 17); \/\/ Dec. 17, 1995 if (theDay instanceof Date) {   print(\"theDay is a Date object\");   \/\/ whatever else... }   Example: Demonstrating that String and Date are of type Object The following code uses instanceof to demonstrate that String and Date objects are also of type Object (they are derived from Object). \r           var myString = new String(); var myDate = new Date();  myString instanceof String; \/\/ returns true myString instanceof Object; \/\/ returns true myString instanceof Date;   \/\/ returns false  myDate instanceof Date;     \/\/ returns true myDate instanceof Object;   \/\/ returns true myDate instanceof String;   \/\/ returns false\r          Example: Demonstrating that mycar is of type Car and type Object The following code creates an object type Car and an instance of that object type, mycar. The instanceof operator demonstrates that the mycar object is of type Car and of type Object. \r           function Car(make, model, year) {   this.make = make;   this.model = model;   this.year = year; } var mycar = new Car(\"Honda\", \"Accord\", 1998); var a = mycar instanceof Car;    \/\/ returns true var b = mycar instanceof Object; \/\/ returns true\r          Example: Determining whether theDay is a Date object The following code uses instanceof to determine whether theDay is a Date object. Because theDay is a Date object, the statements in the if statement execute.  var theDay = new Date(1995, 11, 17); \/\/ Dec. 17, 1995 if (theDay instanceof Date) {   print(\"theDay is a Date object\");   \/\/ whatever else... }   Example: Demonstrating that String and Date are of type Object The following code uses instanceof to demonstrate that String and Date objects are also of type Object (they are derived from Object). \r           var myString = new String(); var myDate = new Date();  myString instanceof String; \/\/ returns true myString instanceof Object; \/\/ returns true myString instanceof Date;   \/\/ returns false  myDate instanceof Date;     \/\/ returns true myDate instanceof Object;   \/\/ returns true myDate instanceof String;   \/\/ returns false\r          Example: Demonstrating that mycar is of type Car and type Object The following code creates an object type Car and an instance of that object type, mycar. The instanceof operator demonstrates that the mycar object is of type Car and of type Object. \r           function Car(make, model, year) {   this.make = make;   this.model = model;   this.year = year; } var mycar = new Car(\"Honda\", \"Accord\", 1998); var a = mycar instanceof Car;    \/\/ returns true var b = mycar instanceof Object; \/\/ returns true"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/set","title":"set","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/new","title":"new","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/this","title":"this","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/typeof","title":"typeof","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/void","title":"void","description":"Syntax void expression The void operator evaluates the given expression and then returns undefined.    Operator   Implemented in: JavaScript 1.1   ECMA Version: ECMA-262    Uses This operator allows inserting expressions that produce side effects into places where an expression that evaluates to undefined is desired. The void operator is often used merely to obtain the undefined primitive value, usually using \"void(0)\" (which is equivalent to \"void 0\"). In these cases, the global variable undefined can be used instead (assuming it has not been assigned to a non-default value). JavaScript URIs When a browser follows a javascript: URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is undefined. The void operator can be used to return undefined. For example:  <a href=\"javascript:void(0);\">Click here to do nothing<\/a> <a href=\"javascript:void(document.body.style.backgroundColor='green');\">Click here for green background<\/a>  Note, however, that the javascript: pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Operator_Precedence","title":"Operator Precedence","description":"Operator precedence determines the order in which operators are evaluated. Operators with higher precedence are evaluated first. A common example:  3 + 4 * 5 \/\/ returns 23\t   The multiplication operator (\"*\") has higher precedence than the addition operator (\"+\") and thus will be evaluated first. Associativity Associativity determines the order in which operators of the same precedence are processed. For example, consider an expression:  a OP b OP c  Left-associativity (left-to-right) means that it is processed as (a OP b) OP c, while right-associativity (right-to-left) means it is interpreted as a OP (b OP c). Assignment operators are right-associative, so you can write:  a = b = 5;  with the expected result that a and b get the value 5. This is because the assignment operator returns the value that it assigned. First, b is set to 5. Then the a is set to the value of b. Table The following table is ordered from highest (1) to lowest (17) precedence.    Precedence Operator type Associativity Individual operators   1 member left-to-right .   []   new right-to-left new   2 function call left-to-right ()   3 increment n\/a ++   decrement n\/a --   4 logical-not right-to-left !   bitwise not right-to-left ~   unary + right-to-left +   unary negation right-to-left -   typeof right-to-left typeof   void right-to-left void   delete right-to-left delete   5 multiplication left-to-right *   division left-to-right \/   modulus left-to-right    6 addition left-to-right +   subtraction left-to-right -   7 bitwise shift left-to-right <<   >>   >>>   8 relational left-to-right <   <=   >   >=   in left-to-right in   instanceof left-to-right instanceof   9 equality left-to-right ==   !=   ===   !==   10 bitwise-and left-to-right &   11 bitwise-xor left-to-right ^   12 bitwise-or left-to-right |   13 logical-and left-to-right &&   14 logical-or left-to-right ||   15 conditional right-to-left ?:   16 assignment right-to-left =   +=   -=   *=   \/=   %=   <<=   >>=   >>>=   &=   ^=   |=   17 comma left-to-right ,"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/parse","title":"Date.parse","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/prototype","title":"Date.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Arity","title":"Function.Arity","description":"Specifies the number of arguments expected by the function.    Property of Function     Implemented in JavaScript 1.2   ECMAScript Edition None    Description The arity property no longer exists and has been replaced by the Function.prototype.length property."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Caller","title":"Function.Caller","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Constructor","title":"Function.Constructor","description":"Summary  Returns a reference to the Function function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Length","title":"Function.Length","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Name","title":"Function.Name","description":"The name of the function.    Property of Function     Implemented in JavaScript ?   ECMAScript Edition None    Description The name property returns the name of a function, or an empty string for anonymous functions: function doSomething() {} alert(doSomething.name); \/\/ alerts \"doSomething\"  Functions created with the syntax new Function(...) or just Function(...) have their name property set to \"anonymous\" on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer. Note that in these examples anonymous functions are created, so name returns an empty string: var f = function() { }; var object = {   someMethod: function() {} };  alert(f.name == \"\"); \/\/ true alert(object.someMethod.name == \"\"); \/\/ also true  You can define a function with a name in a function expression: var object = {   someMethod: function object_someMethod() {} }; alert(object.someMethod.name); \/\/ alerts \"object_someMethod\"  try { object_someMethod } catch(e) { alert(e); } \/\/ ReferenceError: object_someMethod is not defined  You cannot change the name of a function, this property is read-only: var object = {   \/\/ anonymous   someMethod: function(){} }; object.someMethod.name = \"someMethod\"; alert(object.someMethod.name); \/\/ empty string, someMethod is anonymous  Examples You can use obj.constructor.name to check the \"class\" of an object: function a() { }  var b = new a(); alert(b.constructor.name); \/\/Alerts \"a\""},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/now","title":"Date.now","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/UTC","title":"Date.UTC","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Apply","title":"Function.Apply","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Call","title":"Function.Call","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/ToSource","title":"Function.ToSource","description":"Summary  Returns a string representing the source code for the function.     Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  var sourceString = function.toSource();   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Function object, toSource returns the following string indicating that the source code is not available:  function Function() {    [native code] }   For custom functions, toSource returns the JavaScript source that defines the object as a string.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an object.   See Also  toString Object.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/ToString","title":"Function.ToString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getFullYear","title":"Date.getFullYear","description":"Summary  Returns the year of the specified date according to local time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getFullYear()    Parameters  None.   Description  The value returned by getFullYear is an absolute number. For dates between the years 1000 and 9999, getFullYear returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000. Use this method instead of the getYear method.   Examples   Example: Using getFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var today = new Date(); var yr = today.getFullYear();    Example: Using getFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var today = new Date(); var yr = today.getFullYear();    See Also  getYear, getUTCFullYear, setFullYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setFullYear","title":"Date.setFullYear","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCFullYear","title":"Date.getUTCFullYear","description":"Summary  Returns the year in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCFullYear()    Parameters  None.   Description  The value returned by getUTCFullYear is an absolute number that is compliant with year-2000, for example, 1995.   Examples   Example: Using getUTCFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var yr; Today = new Date(); yr = Today.getUTCFullYear();    Example: Using getUTCFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var yr; Today = new Date(); yr = Today.getUTCFullYear();    See Also  getFullYear, setFullYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCFullYear","title":"Date.setUTCFullYear","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/constructor","title":"Date.constructor","description":"Summary  Returns a reference to the Date function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Parent","title":"Object.Parent","description":"Points to an object's context. Syntax obj.__parent__ Description For top-level objects, this is the e.g. window. See Also  SpiderMonkey change du jour: the special __parent__ property has been removed"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Proto","title":"Object.Proto","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getDate","title":"Date.getDate","description":"Summary  Returns the day of the month for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   getDate()    Parameters  None.   Description  The value returned by getDate is an integer between 1 and 31.   Examples   Example: Using getDate  The second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") day = Xmas95.getDate()    Example: Using getDate  The second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") day = Xmas95.getDate()    See Also  getUTCDate, getUTCDay, setDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getDay","title":"Date.getDay","description":"Summary  Returns the day of the week for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getDay()    Parameters  None.   Description  The value returned by getDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.   Examples   Example: Using getDay  The second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.   Xmas95 = new Date(\"December 25, 1995 23:15:00\"); weekday = Xmas95.getDay();   Example: Using getDay  The second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.   Xmas95 = new Date(\"December 25, 1995 23:15:00\"); weekday = Xmas95.getDay();   See Also  getUTCDay, setDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getHours","title":"Date.getHours","description":"Summary  Returns the hour for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getHours()    Parameters  None.   Description  The value returned by getHours is an integer between 0 and 23.   Examples   Example: Using getHours  The second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") hours = Xmas95.getHours()    Example: Using getHours  The second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") hours = Xmas95.getHours()    See Also  getUTCHours, setHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMilliseconds","title":"Date.getMilliseconds","description":"Summary  Returns the milliseconds in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMilliseconds()    Parameters  None.   Description  The value returned by getMilliseconds is a number between 0 and 999.   Examples   Example: Using getMilliseconds  The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getMilliseconds();    Example: Using getMilliseconds  The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getMilliseconds();    See Also  getUTCMilliseconds, setMilliseconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMinutes","title":"Date.getMinutes","description":"Summary  Returns the minutes in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMinutes()    Parameters  None.   Description  The value returned by getMinutes is an integer between 0 and 59.   Examples   Example: Using getMinutes  The second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") minutes = Xmas95.getMinutes()   Example: Using getMinutes  The second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") minutes = Xmas95.getMinutes()   See Also  getUTCMinutes, setMinutes"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMonth","title":"Date.getMonth","description":"Summary  Returns the month in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMonth()    Parameters  None.   Description  The value returned by getMonth is an integer between 0 and 11. 0 corresponds to January, 1 to February, and so on.   Examples   Example: Using getMonth  The second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") month = Xmas95.getMonth()    Example: Using getMonth  The second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") month = Xmas95.getMonth()    See Also  getUTCMonth, setMonth"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getSeconds","title":"Date.getSeconds","description":"Summary  Returns the seconds in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getSeconds()    Parameters  None.   Description  The value returned by getSeconds is an integer between 0 and 59.   Examples   Example: Using getSeconds  The second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:30\") secs = Xmas95.getSeconds()   Example: Using getSeconds  The second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:30\") secs = Xmas95.getSeconds()   See Also  getUTCSeconds, setSeconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getTime","title":"Date.getTime","description":"Returns the numeric value corresponding to the time for the specified date according to universal time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  getTime()  Parameters None. Description The value returned by the getTime method is the number of milliseconds since 1 January 1970 00:00:00 UTC. You can use this method to help assign a date and time to another Date object. This method is functionally equivalent to the valueOf method. Examples Using getTime for copying dates Constructing a date object with the identical time value. \r           var birthday = new Date(1994, 12, 10); var copy = new Date(); copy.setTime(birthday.getTime());\r          Measuring execution time Subtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations. \r           var end, start;  start = new Date(); for (var i = 0; i < 1000; i++)   Math.sqrt(i); end = new Date();  console.log(\"Operation took \" + (end.getTime() - start.getTime()) + \" msec\");\r         Using getTime for copying dates Constructing a date object with the identical time value. \r           var birthday = new Date(1994, 12, 10); var copy = new Date(); copy.setTime(birthday.getTime());\r          Measuring execution time Subtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations. \r           var end, start;  start = new Date(); for (var i = 0; i < 1000; i++)   Math.sqrt(i); end = new Date();  console.log(\"Operation took \" + (end.getTime() - start.getTime()) + \" msec\");\r         See also getUTCHours, setTime, valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getTimezoneOffset","title":"Date.getTimezoneOffset","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCDate","title":"Date.getUTCDate","description":"Summary  Returns the day (date) of the month in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCDate()    Parameters  None.   Description  The value returned by getUTCDate is an integer between 1 and 31.   Examples   Example: Using getUTCDate  The following example assigns the day portion of the current date to the variable d.   var d; Today = new Date(); d = Today.getUTCDate();    Example: Using getUTCDate  The following example assigns the day portion of the current date to the variable d.   var d; Today = new Date(); d = Today.getUTCDate();    See Also  getDate, getUTCDay, setUTCDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCDay","title":"Date.getUTCDay","description":"Summary  Returns the day of the week in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCDay()    Parameters  None.   Description  The value returned by getUTCDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.   Examples   Example: Using getUTCDay  The following example assigns the weekday portion of the current date to the variable weekday.   var weekday; Today = new Date() weekday = Today.getUTCDay()   Example: Using getUTCDay  The following example assigns the weekday portion of the current date to the variable weekday.   var weekday; Today = new Date() weekday = Today.getUTCDay()   See Also  getDay, getUTCDate, setUTCDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCHours","title":"Date.getUTCHours","description":"Summary  Returns the hours in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCHours    Parameters  None.   Description  The value returned by getUTCHours is an integer between 0 and 23.   Examples   Example: Using getUTCHours  The following example assigns the hours portion of the current time to the variable hrs.   var hrs; Today = new Date(); hrs = Today.getUTCHours();   Example: Using getUTCHours  The following example assigns the hours portion of the current time to the variable hrs.   var hrs; Today = new Date(); hrs = Today.getUTCHours();   See Also  getHours, setUTCHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMilliseconds","title":"Date.getUTCMilliseconds","description":"Summary  Returns the milliseconds in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMilliseconds()    Parameters  None.   Description  The value returned by getUTCMilliseconds is an integer between 0 and 999.   Examples   Example: Using getUTCMilliseconds = The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getUTCMilliseconds();   See Also  getMilliseconds, setUTCmilliseconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMinutes","title":"Date.getUTCMinutes","description":"Summary  Returns the minutes in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMinutes()    Parameters  None.   Description  The value returned by getUTCMinutes is an integer between 0 and 59.   Examples   Example: Using getUTCMinutes  The following example assigns the minutes portion of the current time to the variable min.   var min; Today = new Date(); min = Today.getUTCMinutes();   Example: Using getUTCMinutes  The following example assigns the minutes portion of the current time to the variable min.   var min; Today = new Date(); min = Today.getUTCMinutes();   See Also  getMinutes, setUTCMinutes"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMonth","title":"Date.getUTCMonth","description":"Summary  Returns the month of the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMonth()    Parameters  None.   Description  The value returned by getUTCMonth is an integer between 0 and 11 corresponding to the month. 0 for January, 1 for February, 2 for March, and so on.   Examples   Example: Using getUTCMonth  The following example assigns the month portion of the current date to the variable mon.   var mon; Today = new Date(); mon = Today.getUTCMonth();   Example: Using getUTCMonth  The following example assigns the month portion of the current date to the variable mon.   var mon; Today = new Date(); mon = Today.getUTCMonth();   See Also  getMonth, setUTCMonth"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCSeconds","title":"Date.getUTCSeconds","description":"Summary  Returns the seconds in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCSeconds()    Parameters  None.   Description  The value returned by getUTCSeconds is an integer between 0 and 59.   Examples   Example: Using getUTCSeconds  The following example assigns the seconds portion of the current time to the variable sec.   var sec; Today = new Date(); sec = Today.getUTCSeconds();   Example: Using getUTCSeconds  The following example assigns the seconds portion of the current time to the variable sec.   var sec; Today = new Date(); sec = Today.getUTCSeconds();   See Also  getSeconds, setUTCSeconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getYear","title":"Date.getYear","description":"Returns the year in the specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getYear()    Parameters  None.   Description  getYear is no longer used and has been replaced by the getFullYear method. The getYear method returns the year minus 1900; thus:   For years greater than or equal to 2000, the value returned by getYear is 100 or greater. For example, if the year is 2026, getYear returns 126.   For years between and including 1900 and 1999, the value returned by getYear is between 0 and 99. For example, if the year is 1976, getYear returns 76.   For years less than 1900, the value returned by getYear is less than 0. For example, if the year is 1800, getYear returns -100.  To take into account years before and after 2000, you should use getFullYear instead of getYear so that the year is specified in full.   Backward Compatibility   JavaScript 1.2 and earlier  The getYear method returns either a 2-digit or 4-digit year:   For years between and including 1900 and 1999, the value returned by getYear is the year minus 1900. For example, if the year is 1976, the value returned is 76.   For years less than 1900 or greater than 1999, the value returned by getYear is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.   JavaScript 1.2 and earlier  The getYear method returns either a 2-digit or 4-digit year:   For years between and including 1900 and 1999, the value returned by getYear is the year minus 1900. For example, if the year is 1976, the value returned is 76.   For years less than 1900 or greater than 1999, the value returned by getYear is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.   Examples   Example: Years between 1900 and 1999  The second statement assigns the value 95 to the variable year.   Xmas = new Date(\"December 25, 1995 23:15:00\") year = Xmas.getYear() \/\/ returns 95   Example: Years above 1999  The second statement assigns the value 100 to the variable year.   Xmas = new Date(\"December 25, 2000 23:15:00\") year = Xmas.getYear() \/\/ returns 100   Example: Years below 1900  The second statement assigns the value -100 to the variable year.   Xmas = new Date(\"December 25, 1800 23:15:00\") year = Xmas.getYear() \/\/ returns -100   Example: Setting and getting a year between 1900 and 1999  The second statement assigns the value 95 to the variable year, representing the year 1995.   Xmas.setYear(95) year = Xmas.getYear() \/\/ returns 95    Example: Years between 1900 and 1999  The second statement assigns the value 95 to the variable year.   Xmas = new Date(\"December 25, 1995 23:15:00\") year = Xmas.getYear() \/\/ returns 95   Example: Years above 1999  The second statement assigns the value 100 to the variable year.   Xmas = new Date(\"December 25, 2000 23:15:00\") year = Xmas.getYear() \/\/ returns 100   Example: Years below 1900  The second statement assigns the value -100 to the variable year.   Xmas = new Date(\"December 25, 1800 23:15:00\") year = Xmas.getYear() \/\/ returns -100   Example: Setting and getting a year between 1900 and 1999  The second statement assigns the value 95 to the variable year, representing the year 1995.   Xmas.setYear(95) year = Xmas.getYear() \/\/ returns 95    See Also  getFullYear, getUTCFullYear, setYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setDate","title":"Date.setDate","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setHours","title":"Date.setHours","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMilliseconds","title":"Date.setMilliseconds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMinutes","title":"Date.setMinutes","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setSeconds","title":"Date.setSeconds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMonth","title":"Date.setMonth","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCDate","title":"Date.setUTCDate","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setTime","title":"Date.setTime","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCHours","title":"Date.setUTCHours","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMilliseconds","title":"Date.setUTCMilliseconds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMinutes","title":"Date.setUTCMinutes","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMonth","title":"Date.setUTCMonth","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCSeconds","title":"Date.setUTCSeconds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setYear","title":"Date.setYear","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toDateString","title":"Date.toDateString","description":"Returns the date portion of a Date object in human readable form in American English.    Method of Date     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?    Syntax date.toDateString() Description Date instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the date portion; such a thing can be accomplished with the toDateString method. The toDateString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines. Example Example: A basic usage of toDateString var d = new Date(1993, 6, 28, 14, 39, 7); println(d.toString()); \/\/ prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT) println(d.toDateString()); \/\/ prints Wed Jul 28 1993  See also  toLocaleDateString toTimeString toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toISOString","title":"Date.toISOString","description":"JavaScript provides a direct way to convert a date object into a string in ISO format, the ISO 8601 Extended Format. The Date.prototype.toISOString is an ECMAScript 5 addition. Format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ     Method of Date     Implemented in JavaScript 1.8   ECMAScript Edition ECMAScript 5th Edition    Syntax myDate.toISOString()  Note: mydate is a Date object. Parameters None. Examples \r           var today = new Date(\"05 October 2011 14:48 UTC\"); alert(today.toISOString()); \/\/ Returns 2011-10-10T14:48:00.000z\r          See Also toUTCString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toJSON","title":"Date.toJSON","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toGMTString","title":"Date.toGMTString","description":"Converts a date to a string, using Internet GMT conventioins.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition   Syntax  toGMTString()  Parameters None. Description toGMTString is deprecated and should no longer be used, it's only there for backwards compatibility, use toUTCString instead. The exact format of the value returned by toGMTString varies according to the platform and browser, in general it should represent a human readable date string.Examples Example: Using toGMTString In the following example, today is a Date object: today.toGMTString()  In this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform. Mon, 18 Dec 1995 17:28:35 GMT  Example: Using toGMTString In the following example, today is a Date object: today.toGMTString()  In this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform. Mon, 18 Dec 1995 17:28:35 GMT  See Also toLocaleString, toUTCString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toUTCString","title":"Date.toUTCString","description":"Converts a date to a string, using the universal time convention.    Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax toUTCString()  Parameters None. Description The value returned by toUTCString is a readable string in American English in the UTC time zone. The format of the return value may vary according to the platform. The most common return value is a RFC-1123 formatted date stamp, which is a slightly updated version of RFC-822 date stamps. Examples Example: Using toUTCString var today = new Date(); var UTCstring = today.toUTCString(); \/\/ Mon, 03 Jul 2006 21:44:38 GMT  Example: Using toUTCString var today = new Date(); var UTCstring = today.toUTCString(); \/\/ Mon, 03 Jul 2006 21:44:38 GMT  See Also toLocaleString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleDateString","title":"Date.toLocaleDateString","description":"Summary  Converts a date to a string, returning the \"date\" portion using the operating system's locale's conventions.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   toLocaleDateString()    Parameters  None.  Description The toLocaleDateString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleDateString returns a string that is not year-2000 compliant. toLocaleDateString behaves similarly to toString when converting a year that the operating system does not properly format. Methods such as getDate, getMonth, and getFullYear give more portable results than toLocaleDateString. Use toLocaleDateString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.Examples Using toLocaleDateString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleDateString()  In this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleDateString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleDateString(); \/\/ Bad exampleUsing toLocaleDateString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleDateString()  In this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleDateString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleDateString(); \/\/ Bad exampleSee Also  toDateString toLocaleString toLocaleTimeString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toLocaleString","title":"Object.toLocaleString","description":"Summary  Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.    Method of Object   ECMA Version: ECMA-262 Edition 3    Syntax   toLocaleString()    Parameters  None.   Description  Object's toLocaleString returns the result of calling toString. This function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.   See also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleTimeString","title":"Date.toLocaleTimeString","description":"Converts a date to a string, returning the \"time\" portion using the current locale's conventions.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleTimeString()  Parameters None. Description The toLocaleTimeString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). Methods such as getHours, getMinutes, and getSeconds give more consistent results than toLocaleTimeString. Use toLocaleTimeString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings. Examples Using toLocaleTimeString In the following example, today is a Date object:  today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleTimeString()  In this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.  17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale.  \"Last visit: \" + someDate.toLocaleTimeString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleTimeString(); \/\/ Bad example Using toLocaleTimeString In the following example, today is a Date object:  today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleTimeString()  In this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.  17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale.  \"Last visit: \" + someDate.toLocaleTimeString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleTimeString(); \/\/ Bad example See Also  toTimeString toLocaleString toLocaleDateString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleFormat","title":"Date.toLocaleFormat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleString","title":"Date.toLocaleString","description":"Summary  Converts a date to a string, using the operating system's locale's conventions.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   toLocaleString()    Parameters  None.  Description The toLocaleString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleString returns a string that is not year-2000 compliant. toLocaleString behaves similarly to toString when converting a year that the operating system does not properly format. Methods such as getDate, getMonth, getFullYear, getHours, getMinutes, and getSeconds give more portable results than toLocaleString. Use toLocaleString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.Examples Using toLocaleString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35); \/\/months are represented by 0 to 11 today.toLocaleString();  In this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95 17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleString(); \/\/ Bad example Using toLocaleString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35); \/\/months are represented by 0 to 11 today.toLocaleString();  In this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95 17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleString(); \/\/ Bad example See also  toString toUTCString toLocaleDateString toLocaleTimeString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toSource","title":"Date.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax  date.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Date object, toSource returns the following string indicating that the source code is not available:  function Date() {    [native code] }   For instances of Date, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toSource","title":"Object.toSource","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toString","title":"Date.toString","description":"Returns a string representing the specified Date object.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition   Syntax  toString()  Parameters None. Description The Date object overrides the toString method of the Object object; it does not inherit Object.toString. For Date objects, the toString method returns a string representation of the object. toString always returns a string representation of the date in American English. JavaScript calls the toString method automatically when a date is to be represented as a text value or when a date is referred to in a string concatenation. Examples Example: Using toString The following assigns the toString value of a Date object to myVar: x = new Date(); myVar=x.toString();   \/\/assigns a value to myVar similar to:      \/\/Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)  Example: Using toString The following assigns the toString value of a Date object to myVar: x = new Date(); myVar=x.toString();   \/\/assigns a value to myVar similar to:      \/\/Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)  See also  Object.toString toDateString toTimeString toLocaleString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toString","title":"Object.toString","description":"Returns a string representing the object.    Method of Object     Implemented in JavaScript 1.0   ECMAScript Edition ECMSScript 1st Edition    Syntax object.toString() Description Every object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:  var o = new Object(); o.toString();           \/\/ returns [object Object]  Starting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type. Examples Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         See Also  toSource valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toTimeString","title":"Date.toTimeString","description":"Syntax date.toTimeString() Description Date instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the time portion; such a thing can be accomplished with the toTimeString method. The toTimeString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines. Example Example: A basic usage of toTimeString  var d = new Date(1993, 6, 28, 14, 39, 7); println(d.toString()); \/\/ prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT) println(d.toTimeString()); \/\/ prints 14:39:07 GMT-0600 (PDT)  See also  toLocaleTimeString toDateString toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/valueOf","title":"Date.valueOf","description":"Summary  Returns the primitive value of a Date object.     Method of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  The valueOf method returns the primitive value of a Date object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC. This method is functionally equivalent to the getTime method. This method is usually called internally by JavaScript and not explicitly in code.   Examples   Example: Using valueOf  x = new Date(56, 6, 17); myVar = x.valueOf();      \/\/assigns -424713600000 to myVar     Example: Using valueOf  x = new Date(56, 6, 17); myVar = x.valueOf();      \/\/assigns -424713600000 to myVar     See also  Object.valueOf, getTime"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/valueOf","title":"Object.valueOf","description":"Summary  Returns the primitive value of the specified object     Method of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected. By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:   [object Object]  You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.   Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function. Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function.See Also  parseInt toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/DefineGetter","title":"Object.DefineGetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/DefineSetter","title":"Object.DefineSetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/HasOwnProperty","title":"Object.HasOwnProperty","description":"Returns a boolean indicating whether the object has the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition   Syntax obj.hasOwnProperty(prop) Parameters  prop The name of the property to test.  Description Every object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain. Examples Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          See also for...in in inheritance"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/IsPrototypeOf","title":"Object.IsPrototypeOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/LookupGetter","title":"Object.LookupGetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/LookupSetter","title":"Object.LookupSetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/NoSuchMethod","title":"Object.NoSuchMethod","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/PropertyIsEnumerable","title":"Object.PropertyIsEnumerable","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Unwatch","title":"Object.Unwatch","description":"Removes a watchpoint set with the watch() method.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax unwatch(prop)  Parameters  prop The name of a property of the object to stop watching.  Description The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. By default, this method is inherited by every object descended from Object. Note: The reason for unwatch() to take the property name prop as its only parameter is due to the \"single handler allowing\" behavior of the watch() method.Examples See watch()."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Watch","title":"Object.Watch","description":"Watches for a property to be assigned a value and runs a function when that occurs.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax object.watch(prop, handler)  Parameters  prop The name of a property of the object on which you wish to monitor changes.   handler A function to call when the specified property's value changes.  Description Warning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Compatibility for details. Watches for assignment to a property named prop in this object, calling handler(prop, oldval, newval) whenever prop is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified newval (or by returning oldval). If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect. To remove a watchpoint, use the unwatch() method. By default, the watch method is inherited by every object descended from Object. The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. In Firefox, handler is only called from assignments in script, not from native code. For example, window.watch('location', myHandler) will not call myHandler if the user clicks a link to an anchor within the current document. However, window.location += '#myAnchor' will call myHandler. Note: Calling watch() on an object for a specific property overrides and previous handler attached for that property. Examples Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Compatibility  This Polyfill that offers watch to all ES5 compatible browser Using a Proxy enables you do that even deeper changes to how property assignments work  See also unwatch()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/prototype","title":"Boolean.prototype","description":"Represents the prototype for the Boolean constructor. Description Boolean instances inherit from Boolean.prototype. You can use the constructor's prototype object to add properties or methods to all Boolean instances. Properties  constructor Returns the function that created an instance's prototype. This is the Boolean function by default.    Properties inherited from  Object:__parent__, __proto__   Methods  toSource Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource method.   toString Returns a string of either \"true\" or \"false\" depending upon the value of the object. Overrides the Object.prototype.toStringmethod.   valueOf Returns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/constructor","title":"Boolean.constructor","description":"Summary  Returns a reference to the Boolean function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/toSource","title":"Boolean.toSource","description":"Returns a string representing the source code of the object.    Method of Boolean     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  boolean.toSource()    Parameters  None.   Description  The toSource method returns the following values:    For the built-in Boolean object, toSource returns the following string indicating that the source code is not available:  function Boolean() {    [native code] }   For instances of Boolean, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/toString","title":"Boolean.toString","description":"Returns a string representing the specified Boolean object.    Method of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax bool.toString() Parameters  None.  Description The Boolean object overrides the toString method of the Object object; it does not inherit Object.toString. For Boolean objects, the toString method returns a string representation of the object. JavaScript calls the toString method automatically when a Boolean is to be represented as a text value or when a Boolean is referred to in a string concatenation. For Boolean objects and values, the built-in toString method returns the string \"true\" or \"false\" depending on the value of the boolean object. In the following code, flag.toString returns \"true\".  var flag = new Boolean(true) var myVar = flag.toString()  See Also  Object.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/valueOf","title":"Boolean.valueOf","description":"Returns the primitive value of a Boolean object.    Method of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax bool.valueOf() Parameters None. Description The valueOf method of Boolean returns the primitive value of a Boolean object or literal Boolean as a Boolean data type. This method is usually called internally by JavaScript and not explicitly in code. Examples Example: Using valueOf  x = new Boolean(); myVar = x.valueOf()      \/\/assigns false to myVar  Example: Using valueOf  x = new Boolean(); myVar = x.valueOf()      \/\/assigns false to myVar  See Also Object.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToLocaleString","title":"Object.ToLocaleString","description":"Summary  Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.    Method of Object   ECMA Version: ECMA-262 Edition 3    Syntax   toLocaleString()    Parameters  None.   Description  Object's toLocaleString returns the result of calling toString. This function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.   See also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/length","title":"Array.length","description":"An unsigned, 32-bit integer that specifies the number of elements in an array.    Property of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description  The value of the length property is an integer with a positive sign and a value less than 2 to the 32 power (232). You can set the length property to truncate an array at any time. When you extend an array by changing its length property, the number of actual elements does not increase; for example, if you set length to 3 when it is currently 2, the array still contains only 2 elements.   Examples   Example: Iterating over an array  In the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.   var numbers = [1,2,3,4,5]; for (var i = 0; i < numbers.length; i++) {   numbers[i] *= 2; } \/\/ numbers is now [2,4,6,8,10];   Example: Shortening an array  The following example shortens the array statesUS to a length of 50 if the current length is greater than 50.   if (statesUS.length > 50) {    statesUS.length=50 }     Example: Iterating over an array  In the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.   var numbers = [1,2,3,4,5]; for (var i = 0; i < numbers.length; i++) {   numbers[i] *= 2; } \/\/ numbers is now [2,4,6,8,10];   Example: Shortening an array  The following example shortens the array statesUS to a length of 50 if the current length is greater than 50.   if (statesUS.length > 50) {    statesUS.length=50 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/join","title":"Array.join","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/slice","title":"Array.slice","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/indexOf","title":"Array.indexOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/push","title":"Array.push","description":"Mutates an array by appending the given elements and returning the new length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax array.push(element1, ..., elementN) Parameters  element1, ..., elementN The elements to add to the end of the array.  Returns The new length property of the object upon which the method was called. Description The push method is useful for easily appending values to an array. push is intentionally generic. This method can be called or applied to objects resembling arrays. The push method relies on a length property to determine where to start inserting the given values. If the length property cannot be converted into a number, the index used is 0. This includes the possibility of length being nonexistent, in which case length will also be created. The only native, array-like objects are strings, although they are not suitable in applications of this method, as strings are immutable. Examples Example: Adding elements to an array The following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: \"soccer\", \"baseball\", \"football\" and \"swimming\". \r           var sports = [\"soccer\", \"baseball\"]; sports.push(\"football\", \"swimming\");\r          Example: Adding elements to an array The following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: \"soccer\", \"baseball\", \"football\" and \"swimming\". \r           var sports = [\"soccer\", \"baseball\"]; sports.push(\"football\", \"swimming\");\r          See Also  pop shift unshift concat"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/splice","title":"Array.splice","description":"Changes the content of an array, adding new elements while removing old elements.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax array.splice(index , howMany[, element1[, ...[, elementN]]]) array.splice(index[, howMany[, element1[, ...[, elementN]]]]) Parameters  index Index at which to start changing the array. If negative, will begin that many elements from the end.   howMany An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.   element1, ..., elementN The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.  Returns An array containing the removed elements. If only one element is removed, an array of one element is returned. Description If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call. Backward Compatibility JavaScript 1.2 The splice method returns the element removed, if only one element is removed (howMany parameter is 1); otherwise, the method returns an array containing the removed elements. Note that the last browser to use JavaScript 1.2 was Netscape Navigator 4, so you can depend on splice always returning an array. JavaScript 1.2 The splice method returns the element removed, if only one element is removed (howMany parameter is 1); otherwise, the method returns an array containing the removed elements. Note that the last browser to use JavaScript 1.2 was Netscape Navigator 4, so you can depend on splice always returning an array. Examples Example: Using splice The following script illustrate the use of splice: \r           \/\/ assumes a print function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; print(\"myFish: \" + myFish);  var removed = myFish.splice(2, 0, \"drum\"); print(\"After adding 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(3, 1); print(\"After removing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(2, 1, \"trumpet\"); print(\"After replacing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\"); print(\"After replacing 2: \" + myFish); print(\"removed is: \" + removed);\r          This script displays:  myFish: angel,clown,mandarin,surgeon After adding 1: angel,clown,drum,mandarin,surgeon removed is:  After removing 1: angel,clown,drum,surgeon removed is: mandarin After replacing 1: angel,clown,trumpet,surgeon removed is: drum After replacing 2: parrot,anemone,blue,trumpet,surgeon removed is: angel,clown  Example: Using splice The following script illustrate the use of splice: \r           \/\/ assumes a print function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; print(\"myFish: \" + myFish);  var removed = myFish.splice(2, 0, \"drum\"); print(\"After adding 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(3, 1); print(\"After removing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(2, 1, \"trumpet\"); print(\"After replacing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\"); print(\"After replacing 2: \" + myFish); print(\"removed is: \" + removed);\r          This script displays:  myFish: angel,clown,mandarin,surgeon After adding 1: angel,clown,drum,mandarin,surgeon removed is:  After removing 1: angel,clown,drum,surgeon removed is: mandarin After replacing 1: angel,clown,trumpet,surgeon removed is: drum After replacing 2: parrot,anemone,blue,trumpet,surgeon removed is: angel,clown"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/isArray","title":"Array.isArray","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/prototype","title":"Array.prototype","description":"Represents the prototype for the Array constructor. Description Array instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Array instances. Properties  constructor Specifies the function that creates an object's prototype. length Reflects the number of elements in an array.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toSource, toLocaleString, toString, unwatch, valueOf, watch  Methods Mutator methods These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.  Accessor methods  These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.  Iteration methods Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.  Generic methods Many methods on the JavaScript Array object are designed to be generally applied to all objects which \"look like\" Arrays. That is, they can be used on any object which has a length property, and which can usefully be accessed using numeric property names (as with array[5] indexing).  Some methods, such as join, only read the length and numeric properties of the object they are called on. Others, like reverse, require that the object's numeric properties and length be mutable; these methods can therefore not be called on objects like String, which does not permit its length property or synthesized numeric properties to be set.   concat join pop push reverse shift slice sort splice toSource toString unshift   Introduced in JavaScript 1.6  every filter forEach indexOf lastIndexOf map some    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   Mutator methods These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.  Accessor methods  These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.  Iteration methods Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.  Generic methods Many methods on the JavaScript Array object are designed to be generally applied to all objects which \"look like\" Arrays. That is, they can be used on any object which has a length property, and which can usefully be accessed using numeric property names (as with array[5] indexing).  Some methods, such as join, only read the length and numeric properties of the object they are called on. Others, like reverse, require that the object's numeric properties and length be mutable; these methods can therefore not be called on objects like String, which does not permit its length property or synthesized numeric properties to be set.   concat join pop push reverse shift slice sort splice toSource toString unshift   Introduced in JavaScript 1.6  every filter forEach indexOf lastIndexOf map some    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   See also  Core JavaScript 1.5 Reference:Global Objects:Array Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/constructor","title":"Array.constructor","description":"Summary  Returns a reference to the Array function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.    Property of Array   Implemented in: JavaScript 1.1, NES 2.0   ECMA Version: ECMA-262    Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToSource","title":"Object.ToSource","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToString","title":"Object.ToString","description":"Returns a string representing the object.    Method of Object     Implemented in JavaScript 1.0   ECMAScript Edition ECMSScript 1st Edition    Syntax object.toString() Description Every object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:  var o = new Object(); o.toString();           \/\/ returns [object Object]  Starting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type. Examples Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         See Also  toSource valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ValueOf","title":"Object.ValueOf","description":"Summary  Returns the primitive value of the specified object     Method of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected. By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:   [object Object]  You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.   Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function. Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function.See Also  parseInt toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/pop","title":"Array.pop","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/reverse","title":"Array.reverse","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/shift","title":"Array.shift","description":"Removes the first element from an array and returns that element. This method changes the length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition   Syntax array.shift() Description The shift method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value. shift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner. Examples Example: Removing an element from an array The following code displays the myFish array before and after removing its first element. It also displays the removed element:  \/\/ assumes a println function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; println(\"myFish before: \" + myFish); var shifted = myFish.shift(); println(\"myFish after: \" + myFish); println(\"Removed this element: \" + shifted);  This example displays the following:  myFish before: angel,clown,mandarin,surgeon myFish after: clown,mandarin,surgeon Removed this element: angel  Example: Removing an element from an array The following code displays the myFish array before and after removing its first element. It also displays the removed element:  \/\/ assumes a println function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; println(\"myFish before: \" + myFish); var shifted = myFish.shift(); println(\"myFish after: \" + myFish); println(\"Removed this element: \" + shifted);  This example displays the following:  myFish before: angel,clown,mandarin,surgeon myFish after: clown,mandarin,surgeon Removed this element: angel  See also  pop push unshift"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/sort","title":"Array.sort","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/toSource","title":"Array.toSource","description":"Summary  Returns a string representing the source code of the array.     Method of Array     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  array.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Array object, toSource returns the following string indicating that the source code is not available:  function Array() {     [native code] }   For instances of Array, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an array.   Examples   Example: Examining the source code of an array  To examine the source code of an array:  alpha = new Array(\"a\", \"b\", \"c\"); alpha.toSource()                    \/\/returns [\"a\", \"b\", \"c\"]   Example: Examining the source code of an array  To examine the source code of an array:  alpha = new Array(\"a\", \"b\", \"c\"); alpha.toSource()                    \/\/returns [\"a\", \"b\", \"c\"]   See Also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/concat","title":"Array.concat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/unshift","title":"Array.unshift","description":"Adds one or more elements to the beginning of an array and returns the new length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax arrayName.unshift(element1, ..., elementN)  Parameters  element1, ..., elementN The elements to add to the front of the array.  Returns The new length property of the object upon which the method was called.   Description The unshift method inserts the given values to the beginning of an array-like object. unshift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner. Examples Example: Adding elements to an array The following code displays the myFish array before and after adding elements to it.  \/\/ assumes a println function exists myFish = [\"angel\", \"clown\"]; println(\"myFish before: \" + myFish); unshifted = myFish.unshift(\"drum\", \"lion\"); println(\"myFish after: \" + myFish); println(\"New length: \" + unshifted);  This example displays the following:  myFish before: [\"angel\", \"clown\"] myFish after: [\"drum\", \"lion\", \"angel\", \"clown\"] New length: 4  Example: Adding elements to an array The following code displays the myFish array before and after adding elements to it.  \/\/ assumes a println function exists myFish = [\"angel\", \"clown\"]; println(\"myFish before: \" + myFish); unshifted = myFish.unshift(\"drum\", \"lion\"); println(\"myFish after: \" + myFish); println(\"New length: \" + unshifted);  This example displays the following:  myFish before: [\"angel\", \"clown\"] myFish after: [\"drum\", \"lion\", \"angel\", \"clown\"] New length: 4  See Also  pop push shift"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/toString","title":"Array.toString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/lastIndexOf","title":"Array.lastIndexOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/filter","title":"Array.filter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/forEach","title":"Array.forEach","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/every","title":"Array.every","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/map","title":"Array.map","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/some","title":"Array.some","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/ReduceRight","title":"Array.ReduceRight","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/Reduce","title":"Array.Reduce","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays","title":"JavaScript typed arrays","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/prototype","title":"Function.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/arguments","title":"Function.arguments","description":"Summary  An array-like object corresponding to the arguments passed to a function.  Description Use the arguments object available within functions instead of Function.arguments. Notes  In the case of recursion, i.e. if function f appears several times on the call stack, the value of f.arguments represents the arguments corresponding to the most recent invocation of the function.   Example  function f(n) { g(n-1) } function g(n) {   print(\"before: \" + g.arguments[0]);   if(n>0)     f(n);   print(\"after: \" + g.arguments[0]); } f(2)  outputs:  before: 1 before: 0 after: 0 after: 1"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/arity","title":"Function.arity","description":"Specifies the number of arguments expected by the function.    Property of Function     Implemented in JavaScript 1.2   ECMAScript Edition None    Description The arity property no longer exists and has been replaced by the Function.prototype.length property."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/length","title":"Function.length","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/constructor","title":"Function.constructor","description":"Summary  Returns a reference to the Function function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/caller","title":"Function.caller","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/name","title":"Function.name","description":"The name of the function.    Property of Function     Implemented in JavaScript ?   ECMAScript Edition None    Description The name property returns the name of a function, or an empty string for anonymous functions: function doSomething() {} alert(doSomething.name); \/\/ alerts \"doSomething\"  Functions created with the syntax new Function(...) or just Function(...) have their name property set to \"anonymous\" on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer. Note that in these examples anonymous functions are created, so name returns an empty string: var f = function() { }; var object = {   someMethod: function() {} };  alert(f.name == \"\"); \/\/ true alert(object.someMethod.name == \"\"); \/\/ also true  You can define a function with a name in a function expression: var object = {   someMethod: function object_someMethod() {} }; alert(object.someMethod.name); \/\/ alerts \"object_someMethod\"  try { object_someMethod } catch(e) { alert(e); } \/\/ ReferenceError: object_someMethod is not defined  You cannot change the name of a function, this property is read-only: var object = {   \/\/ anonymous   someMethod: function(){} }; object.someMethod.name = \"someMethod\"; alert(object.someMethod.name); \/\/ empty string, someMethod is anonymous  Examples You can use obj.constructor.name to check the \"class\" of an object: function a() { }  var b = new a(); alert(b.constructor.name); \/\/Alerts \"a\""},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/bind","title":"Function.bind","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/apply","title":"Function.apply","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/call","title":"Function.call","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/isGenerator","title":"Function.isGenerator","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/toSource","title":"Function.toSource","description":"Summary  Returns a string representing the source code for the function.     Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  var sourceString = function.toSource();   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Function object, toSource returns the following string indicating that the source code is not available:  function Function() {    [native code] }   For custom functions, toSource returns the JavaScript source that defines the object as a string.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an object.   See Also  toString Object.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/toString","title":"Function.toString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/MAX_VALUE","title":"Number.MAX_VALUE","description":"Summary  The maximum numeric value representable in JavaScript.     Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  The MAX_VALUE property has a value of approximately 1.79E+308. Values larger than MAX_VALUE are represented as \"Infinity\". Because MAX_VALUE is a static property of Number, you always use it as Number.MAX_VALUE, rather than as a property of a Number object you created.   Examples   Example: Using MAX_VALUE  The following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 * num2 <= Number.MAX_VALUE)    func1(); else    func2();   Example: Using MAX_VALUE  The following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 * num2 <= Number.MAX_VALUE)    func1(); else    func2();"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/MIN_VALUE","title":"Number.MIN_VALUE","description":"The smallest positive numeric value representable in JavaScript.    Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description The MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent. MIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE (\"underflow values\") are converted to 0. Because MIN_VALUE is a static property of Number, you always use it as Number.MIN_VALUE, rather than as a property of a Number object you created. Examples Example: Using MIN_VALUE The following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 \/ num2 >= Number.MIN_VALUE)    func1() else    func2()  Example: Using MIN_VALUE The following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 \/ num2 >= Number.MIN_VALUE)    func1() else    func2()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/NEGATIVE_INFINITY","title":"Number.NEGATIVE_INFINITY","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/NaN","title":"Number.NaN","description":"A value representing Not-A-Number.    Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description Number.NaN is the same thing than NaN. See the NaN page for more info."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/POSITIVE_INFINITY","title":"Number.POSITIVE_INFINITY","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/prototype","title":"Number.prototype","description":"Represents the prototype for the Number constructor. Description All Number instances inherit from Number.prototype. The prototype object of the Number constructor can be modified to affect all Number instances. Properties  constructor Returns the function that created this object's instance. By default this is the Number object.    Properties inherited from  Object:__parent__, __proto__   Methods  toExponential Returns a string representing the number in exponential notation. toFixed Returns a string representing the number in fixed-point notation. toLocaleString Returns a human readable string representing the number using the locale of the environment. Overrides the Object.prototype.toLocaleString method. toPrecision Returns a string representing the number to a specified precision in fixed-point or exponential notation. toSource Non-standard      Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/constructor","title":"Number.constructor","description":"Summary  Returns a reference to the Number function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toExponential","title":"Number.toExponential","description":"Returns a string representing the Number object in exponential notation    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition     Syntax  number.toExponential( [fractionDigits] )   Parameter   fractionDigits  An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.   Returns  A string representing a Number object in exponential notation with one digit before the decimal point, rounded to fractionDigits digits after the decimal point. If the fractionDigits argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely. If you use the toExponential method for a numeric literal and the numeric literal has no exponent and no decimal point, leave a space before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point. If a number has more digits that requested by the fractionDigits parameter, the number is rounded to the nearest number represented by fractionDigits digits. See the discussion of rounding in the description of the toFixed method, which also applies to toExponential.   Example   var num=77.1234;  alert(\"num.toExponential() is \" + num.toExponential()); \/\/displays 7.71234e+1  alert(\"num.toExponential(4) is \" + num.toExponential(4)); \/\/displays 7.7123e+1  alert(\"num.toExponential(2) is \" + num.toExponential(2)); \/\/displays 7.71e+1  alert(\"77.1234.toExponential() is \" + 77.1234.toExponential()); \/\/displays 7.71234e+1  alert(\"77 .toExponential() is \" + 77 .toExponential()); \/\/displays 7.7e+1   See Also  Number.toFixed(), Number.toPrecision(), Number.toString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toFixed","title":"Number.toFixed","description":"Formats a number using fixed-point notation    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition    Syntax number.toFixed( [digits] ) Parameter  digits The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.  Returns A string representation of number that does not use exponential notation and has exactly digits digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If number is greater than 1e+21, this method simply calls Number.toString() and returns a string in exponential notation. Throws  RangeError If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well.   TypeError If this method is invoked on an object that is not a Number.  Example  var n = 12345.6789;  n.toFixed();              \/\/ Returns \"12346\": note rounding, no fractional part  n.toFixed(1);             \/\/ Returns \"12345.7\": note rounding  n.toFixed(6);             \/\/ Returns \"12345.678900\": note added zeros  (1.23e+20).toFixed(2);    \/\/ Returns \"123000000000000000000.00\"  (1.23e-10).toFixed(2);    \/\/ Returns \"0.00\"  2.34.toFixed(1);          \/\/ Returns \"2.3\"  -2.34.toFixed(1);         \/\/ Returns -2.3 (due to operator precedence, negative numbers don't return a string...)  (-2.24).toFixed(1);       \/\/ Returns \"-2.3\" (...unless you use parentheses)  See Also Number.toExponential(), Number.toLocaleString(), Number.toPrecision(), Number.toString(), Number.toSource(), Number.valueOf()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/ToLocaleString","title":"Number.ToLocaleString","description":"Syntax number.toLocaleString() Examples \r           var number = 3500 console.log(number.toLocaleString()); \/* Displays \"3,500\" in English locale *\/\r          See Also Number.toString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toPrecision","title":"Number.toPrecision","description":"Returns a string representing the Number object to the specified precision.    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition    Syntax number.toPrecision( [ precision ] ) Parameter  precision An integer specifying the number of significant digits.  Returns A string representing a Number object in fixed-point or exponential notation rounded to precision significant digits. See the discussion of rounding in the description of the toFixed method, which also applies to toPrecision. If the precision argument is omitted, behaves as Number.toString. If it is a non-integer value, it is rounded to the nearest integer. After rounding, if that value is not between 1 and 100 (inclusive), a RangeError is thrown. ECMA-262 only requires a precision of up to 21 significant digits. Other implementations may not support precisions higher than required by the standard. Example  var num = 5.123456; println(\"num.toPrecision() is \" + num.toPrecision());   \/\/displays 5.123456 println(\"num.toPrecision(5) is \" + num.toPrecision(5)); \/\/displays 5.1235 println(\"num.toPrecision(2) is \" + num.toPrecision(2)); \/\/displays 5.1 println(\"num.toPrecision(1) is \" + num.toPrecision(1)); \/\/displays 5  See Also  toExponential toFixed toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toSource","title":"Number.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of Number     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  number.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Number object, toSource returns the following string indicating that the source code is not available:  function Number() {[native code]}   For instances of Number, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toString","title":"Number.toString","description":"Summary  Returns a string representing the specified Number object     Method of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax  number.toString( [radix] )   Parameter   radix  An integer between 2 and 36 specifying the base to use for representing numeric values.   Description  The Number object overrides the toString method of the Object object; it does not inherit Object.toString. For Number objects, the toString method returns a string representation of the object in the specified radix. The toString method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used. If toString is given a radix not between 2 and 36, an exception is thrown. If the radix is not specified, JavaScript assumes the preferred radix is 10.   Examples  var count = 10; print(count.toString());   \/\/ displays \"10\" print((17).toString());    \/\/ displays \"17\"  var x = 7; print(x.toString(2));      \/\/ displays \"111\"   See Also  Number.prototype.toExponential Number.prototype.toLocaleString Number.prototype.toPrecision Number.prototype.toFixed Number.prototype.toSource Number.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/valueOf","title":"Number.valueOf","description":"Summary  Returns the primitive value of a Number object.     Method of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax number.valueOf() Parameters  None.   Description  The valueOf method of Number returns the primitive value of a Number object as a number data type. This method is usually called internally by JavaScript and not explicitly in code.   Examples  var x = new Number(); print(x.valueOf());     \/\/ prints \"0\"   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperty","title":"Object.defineProperty","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/create","title":"Object.create","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/prototype","title":"Object.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperties","title":"Object.defineProperties","description":"Defines new or modifies existing properties directly on an object, returning the object.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.defineProperties(obj, props) Parameters  obj The object on which to define or modify properties. props An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.  Description Object.defineProperties, in essence, defines all properties corresponding to the enumerable own properties of props on the object objrops object. Assuming a pristine execution environment with all names and properties referring to their initial values, Object.defineProperties is almost completely equivalent (note the comment in isCallable) to the following reimplementation in JavaScript: \r           function defineProperties(obj, properties) {   function convertToDescriptor(desc)   {     function hasProperty(obj, prop)     {       return Object.prototype.hasOwnProperty.call(obj, prop);     }      function isCallable(v)     {       \/\/ NB: modify as necessary if other values than functions are callable.       return typeof v === \"function\";     }      if (typeof desc !== \"object\" || desc === null)       throw new TypeError(\"bad desc\");      var d = {};     if (hasProperty(desc, \"enumerable\"))       d.enumerable = !!obj.enumerable;     if (hasProperty(desc, \"configurable\"))       d.configurable = !!obj.configurable;     if (hasProperty(desc, \"value\"))       d.value = obj.value;     if (hasProperty(desc, \"writable\"))       d.writable = !!desc.writable;     if (hasProperty(desc, \"get\"))     {       var g = desc.get;       if (!isCallable(g) && g !== \"undefined\")         throw new TypeError(\"bad get\");       d.get = g;     }     if (hasProperty(desc, \"set\"))     {       var s = desc.set;       if (!isCallable(s) && s !== \"undefined\")         throw new TypeError(\"bad set\");       d.set = s;     }      if ((\"get\" in d || \"set\" in d) && (\"value\" in d || \"writable\" in d))       throw new TypeError(\"identity-confused descriptor\");      return d;   }    if (typeof obj !== \"object\" || obj === null)     throw new TypeError(\"bad obj\");    properties = Object(properties);   var keys = Object.keys(properties);   var descs = [];   for (var i = 0; i < keys.length; i++)     descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);   for (var i = 0; i < descs.length; i++)     Object.defineProperty(obj, descs[i][0], descs[i][1]);    return obj; }\r          Browser compatibility Based on Kangax's compat tables.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty Object.keys Browser compatibility Based on Kangax's compat tables.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty Object.keys"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getOwnPropertyDescriptor","title":"Object.getOwnPropertyDescriptor","description":"Syntax Object.getOwnPropertyDescriptor(obj, prop) Parameters  obj The object in which to look for the property. prop The name of the property whose description is to be retrieved  Description This method permits examination of the precise description of a property. A property in JavaScript consists of a string-valued name and a property descriptor. A property descriptor is a record with some of the following attributes:  value The value associated with the property (data descriptors only). writable true if and only if the value associated with the property may be changed (data descriptors only). get A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only). set A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only). configurable true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. enumerable true if and only if this property shows up during enumeration of the properties on the corresponding object.  Further information about property descriptor attributes can be found on the Object.defineProperty descriptionExamples \r           var o, d;  o = { get foo() { return 17; } }; d = Object.getOwnPropertyDescriptor(o, \"foo\"); \/\/ d is { configurable: true, enumerable: true, get: \/*the getter function*\/, set: undefined }  o = { bar: 42 }; d = Object.getOwnPropertyDescriptor(o, \"bar\"); \/\/ d is { configurable: true, enumerable: true, value: 42, writable: true }  o = {}; Object.defineProperty(o, \"baz\", { value: 8675309, writable: false, enumerable: false }); d = Object.getOwnPropertyDescriptor(o, \"baz\"); \/\/ d is { value: 8675309, writable: false, enumerable: false, configurable: false }\r          Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 8 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/keys","title":"Object.keys","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getOwnPropertyNames","title":"Object.getOwnPropertyNames","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/GetPrototypeOf","title":"Object.GetPrototypeOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/preventExtensions","title":"Object.preventExtensions","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isExtensible","title":"Object.isExtensible","description":"Determines if an object is extensible (whether it can have new properties added to it).    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.isExtensible(obj) Parameters  obj The object which should be checked.  Description Objects are extensible by default: they can have new properties added to them, and (in engines that support __proto__   Deprecated   their __proto__ property) can be modified. An object can be marked as non-extensible using Object.preventExtensions, Object.seal, or Object.freeze. Examples \r           \/\/ New objects are extensible. var empty = {}; assert(Object.isExtensible(empty) === true);  \/\/ ...but that can be changed. Object.preventExtensions(empty); assert(Object.isExtensible(empty) === false);  \/\/ Sealed objects are by definition non-extensible. var sealed = Object.seal({}); assert(Object.isExtensible(sealed) === false);  \/\/ Frozen objects are also by definition non-extensible. var frozen = Object.freeze({}); assert(Object.isExtensible(frozen) === false);\r          Cross-browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table.See also  Object.preventExtensions Object.seal Object.isSealed Object.freeze Object.isFrozen"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/seal","title":"Object.seal","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/freeze","title":"Object.freeze","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isSealed","title":"Object.isSealed","description":"Determine if an object is sealed.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.isSealed(obj) Parameters  obj The object which should be checked.  Description Returns true if the object is sealed, otherwise false. An object is sealed if it is non-extensible and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable). Examples \r           \/\/ Objects aren't sealed by default. var empty = {}; assert(Object.isSealed(empty) === false);  \/\/ If you make an empty object non-extensible, it is vacuously sealed. Object.preventExtensions(empty); assert(Object.isSealed(empty) === true);  \/\/ The same is not true of a non-empty object, unless its properties are all non-configurable. var hasProp = { fee: \"fie foe fum\" }; Object.preventExtensions(hasProp); assert(Object.isSealed(hasProp) === false);  \/\/ But make them all non-configurable and the object becomes sealed. Object.defineProperty(hasProp, \"fee\", { configurable: false }); assert(Object.isSealed(hasProp) === true);  \/\/ The easiest way to seal an object, of course, is Object.seal. var sealed = {}; Object.seal(sealed); assert(Object.isSealed(sealed) === true);  \/\/ A sealed object is, by definition, non-extensible. assert(Object.isExtensible(sealed) === false);  \/\/ A sealed object might be frozen, but it doesn't have to be. assert(Object.isFrozen(sealed) === true); \/\/ all properties also non-writable  var s2 = Object.seal({ p: 3 }); assert(Object.isFrozen(s2) === false); \/\/ \"p\" is still writable  var s3 = Object.seal({ get p() { return 0; } }); assert(Object.isFrozen(s3) === true); \/\/ only configurability matters for accessor properties\r          Examples \r           \/\/ Objects aren't sealed by default. var empty = {}; assert(Object.isSealed(empty) === false);  \/\/ If you make an empty object non-extensible, it is vacuously sealed. Object.preventExtensions(empty); assert(Object.isSealed(empty) === true);  \/\/ The same is not true of a non-empty object, unless its properties are all non-configurable. var hasProp = { fee: \"fie foe fum\" }; Object.preventExtensions(hasProp); assert(Object.isSealed(hasProp) === false);  \/\/ But make them all non-configurable and the object becomes sealed. Object.defineProperty(hasProp, \"fee\", { configurable: false }); assert(Object.isSealed(hasProp) === true);  \/\/ The easiest way to seal an object, of course, is Object.seal. var sealed = {}; Object.seal(sealed); assert(Object.isSealed(sealed) === true);  \/\/ A sealed object is, by definition, non-extensible. assert(Object.isExtensible(sealed) === false);  \/\/ A sealed object might be frozen, but it doesn't have to be. assert(Object.isFrozen(sealed) === true); \/\/ all properties also non-writable  var s2 = Object.seal({ p: 3 }); assert(Object.isFrozen(s2) === false); \/\/ \"p\" is still writable  var s3 = Object.seal({ get p() { return 0; } }); assert(Object.isFrozen(s3) === true); \/\/ only configurability matters for accessor properties\r          Cross-browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table.See also  Object.seal Object.preventExtensions Object.isExtensible  Object.freeze Object.isFrozen"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isFrozen","title":"Object.isFrozen","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/constructor","title":"Object.constructor","description":"Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, \"read-only\").    Property of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description All objects inherit a constructor property from their prototype:  o = new Object \/\/ or o = {} in JavaScript 1.2 o.constructor == Object a = new Array \/\/ or a = [] in JavaScript 1.2 a.constructor == Array n = new Number(3) n.constructor == Number  Even though you cannot construct most HTML objects, you can do comparisons. For example,  document.constructor == Document document.form3.constructor == Form  Examples Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));  Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/proto","title":"Object.proto","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineGetter","title":"Object.defineGetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineSetter","title":"Object.defineSetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/eval","title":"Object.eval","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/hasOwnProperty","title":"Object.hasOwnProperty","description":"Returns a boolean indicating whether the object has the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition   Syntax obj.hasOwnProperty(prop) Parameters  prop The name of the property to test.  Description Every object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain. Examples Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          See also for...in in inheritance"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isPrototypeOf","title":"Object.isPrototypeOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/lookupGetter","title":"Object.lookupGetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/noSuchMethod","title":"Object.noSuchMethod","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/propertyIsEnumerable","title":"Object.propertyIsEnumerable","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/lookupSetter","title":"Object.lookupSetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/unwatch","title":"Object.unwatch","description":"Removes a watchpoint set with the watch() method.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax unwatch(prop)  Parameters  prop The name of a property of the object to stop watching.  Description The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. By default, this method is inherited by every object descended from Object. Note: The reason for unwatch() to take the property name prop as its only parameter is due to the \"single handler allowing\" behavior of the watch() method.Examples See watch()."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/constructor","title":"RegExp.constructor","description":"Summary  Returns a reference to the RegExp function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of RegExp     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/prototype","title":"RegExp.prototype","description":"Represents the prototype object for the RegExp constructor. Description See RegExp for a description of RegExp instances. RegExp instances inherit from RegExp.prototype. Modifications to the prototype object are propagated to all RegExp instances. Properties See also Deprecated RegExp Properties Note that several of the RegExp properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.  constructor Specifies the function that creates an object's prototype. global Whether to test the regular expression against all possible matches in a string, or only against the first. ignoreCase Whether to ignore case while attempting a match in a string. lastIndex The index at which to start the next match. multiline Whether or not to search in strings across multiple lines. source The text of the pattern. sticky  New in Firefox 3  Non-standard      Whether or not the search is sticky.    Properties inherited from  Object:__parent__, __proto__   Methods   See also Deprecated RegExp Methods  exec Executes a search for a match in its string parameter. test Tests for a match in its string parameter. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   See also  RegExp Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/watch","title":"Object.watch","description":"Watches for a property to be assigned a value and runs a function when that occurs.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax object.watch(prop, handler)  Parameters  prop The name of a property of the object on which you wish to monitor changes.   handler A function to call when the specified property's value changes.  Description Warning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Compatibility for details. Watches for assignment to a property named prop in this object, calling handler(prop, oldval, newval) whenever prop is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified newval (or by returning oldval). If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect. To remove a watchpoint, use the unwatch() method. By default, the watch method is inherited by every object descended from Object. The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. In Firefox, handler is only called from assignments in script, not from native code. For example, window.watch('location', myHandler) will not call myHandler if the user clicks a link to an anchor within the current document. However, window.location += '#myAnchor' will call myHandler. Note: Calling watch() on an object for a specific property overrides and previous handler attached for that property. Examples Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Compatibility  This Polyfill that offers watch to all ES5 compatible browser Using a Proxy enables you do that even deeper changes to how property assignments work  See also unwatch()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/global","title":"RegExp.global","description":"Summary  Whether or not the \"g\" flag is used with the regular expression.    Property of RegExp instances    Read-only     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: global is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  global is a property of an individual regular expression object. The value of global is true if the \"g\" flag was used; otherwise, false. The \"g\" flag indicates that the regular expression should be tested against all possible matches in a string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/ignoreCase","title":"RegExp.ignoreCase","description":"Summary  Whether or not the \"i\" flag is used with the regular expression.    Property of RegExp instances   Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: ignoreCase is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  ignoreCase is a property of an individual regular expression object. The value of ignoreCase is true if the \"i\" flag was used; otherwise, false. The \"i\" flag indicates that case should be ignored while attempting a match in a string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/multiline","title":"RegExp.multiline","description":"Summary  Reflects whether or not to search in strings across multiple lines.    Property of RegExp instances    Static     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: multiline is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  multiline is a property of an individual regular expression object.. The value of multiline is true if the \"m\" flag was used; otherwise, false. The \"m\" flag indicates that a multiline input string should be treated as multiple lines. For example, if \"m\" is used, \"^\" and \"$\" change from matching at only the start or end of the entire string to the start or end of any line within the string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/lastIndex","title":"RegExp.lastIndex","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/source","title":"RegExp.source","description":"Summary  A read-only property that contains the text of the pattern, excluding the forward slashes.    Property of RegExp instances    Static     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: source is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  source is a property of an individual regular expression object. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/test","title":"RegExp.test","description":"Executes the search for a match between a regular expression and a specified string. Returns true or false.    Method of RegExp     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax regexp.test([str])  Parameters  regexp The name of the regular expression. It can be a variable name or a literal.   str The string against which to match the regular expression.  Description When you want to know whether a pattern is found in a string use the test method (similar to the String.search method); for more information (but slower execution) use the exec method (similar to the String.match method). As with exec (or in combination with it), test called multiple times on the same global regular expression instance will advance past the previous match.   Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , test() was implemented incorrectly; when it was called with no parameters, it would match against the value of the previous input (RegExp.input property) instead of against the string \"undefined\". This is fixed; now \/undefined\/.test() correctly results in true, instead of an error.  Examples Example: Using test The following example prints a message which depends on the success of the test: \r           function testinput(re, str){    if (re.test(str)) {       midstring = \" contains \";    } else {       midstring = \" does not contain \";    }    document.write (str + midstring + re.source); }\r          Example: Using test The following example prints a message which depends on the success of the test: \r           function testinput(re, str){    if (re.test(str)) {       midstring = \" contains \";    } else {       midstring = \" does not contain \";    }    document.write (str + midstring + re.source); }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/exec","title":"RegExp.exec","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/toSource","title":"RegExp.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of RegExp     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  regexp.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in RegExp object, toSource returns the following string indicating that the source code is not available:  function RegExp() {[native code]}   For instances of RegExp, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/replace","title":"String.replace","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/toString","title":"RegExp.toString","description":"Summary  Returns a string representing the specified object.     Method of RegExp     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 3rd Edition     Syntax  regexp.toString()   Parameters  None.   Description  The RegExp object overrides the toString method of the Object object; it does not inherit Object.toString. For RegExp objects, the toString method returns a string representation of the regular expression.   Examples   Example: Using toString  The following example displays the string value of a RegExp object:   myExp = new RegExp(\"a+b+c\"); alert(myExp.toString());       \/\/ displays \"\/a+b+c\/\"   Example: Using toString  The following example displays the string value of a RegExp object:   myExp = new RegExp(\"a+b+c\"); alert(myExp.toString());       \/\/ displays \"\/a+b+c\/\"   See Also  Object.prototype.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/length","title":"String.length","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/substring","title":"String.substring","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/substr","title":"String.substr","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/charAt","title":"String.charAt","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/valueOf","title":"String.valueOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/prototype","title":"String.prototype","description":"Represents the String prototype object. Description All String instances inherit from String.prototype. Changes to the String prototype object are propagated to all String instances. Properties  constructor Specifies the function that creates an object's prototype. length Reflects the length of the string. N Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. These properties are read-only.    Properties inherited from  Object:__parent__, __proto__   Methods  Methods unrelated to HTML    charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (\"\"\"). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim  Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the left side of the string. trimRight  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.   HTML wrapper methods     Non-standard  Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.  anchor <a name=\"name\"> (hypertext target) big <big> blink <blink> bold <b> fixed <tt> fontcolor <font color=\"color\"> fontsize <font size=\"size\"> italics <i> link <a href=\"url\"> (link to URL) small <small>. strike <strike> sub <sub> sup <sup>  These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.   Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch   Methods unrelated to HTML    charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (\"\"\"). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim  Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the left side of the string. trimRight  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.   HTML wrapper methods     Non-standard  Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.  anchor <a name=\"name\"> (hypertext target) big <big> blink <blink> bold <b> fixed <tt> fontcolor <font color=\"color\"> fontsize <font size=\"size\"> italics <i> link <a href=\"url\"> (link to URL) small <small>. strike <strike> sub <sub> sup <sup>  These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.   Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch   Examples Example: Extending string instances with a repeat method The following example creates a method, str_rep, and uses the statement String.prototype.repeat = str_rep to add the method to all String objects. All String instances then have that method, even objects already created. The example then creates an alternate method and overrides the previous method in one of the String objects using the statement s1.repeat = fake_rep. The str_rep method of the remaining String objects is not altered. \r           var s1 = new String(\"a\"); var s2 = new String(\"b\"); var s3 = new String(\"c\");  \/\/ Create a repeat-string-N-times method for all String objects function str_rep(n) {    var s = \"\", t = this.toString();    while (--n >= 0) {      s += t    }    return s; }  String.prototype.repeat = str_rep;  s1a=s1.repeat(3); \/\/ returns \"aaa\" s2a=s2.repeat(5); \/\/ returns \"bbbbb\" s3a=s3.repeat(2); \/\/ returns \"cc\"  \/\/ Create an alternate method and assign it to only one String variable function fake_rep(n) {    return \"repeat \" + this + \" \" + n + \" times.\"; }  s1.repeat = fake_rep s1b=s1.repeat(1); \/\/ returns \"repeat a 1 times.\" s2b=s2.repeat(4); \/\/ returns \"bbbb\" s3b=s3.repeat(6); \/\/ returns \"cccccc\"\r          The function in this example also works on String objects not created with the String constructor. The following code returns \"zzz\". \"z\".repeat(3);  Example: Extending string instances with a repeat method The following example creates a method, str_rep, and uses the statement String.prototype.repeat = str_rep to add the method to all String objects. All String instances then have that method, even objects already created. The example then creates an alternate method and overrides the previous method in one of the String objects using the statement s1.repeat = fake_rep. The str_rep method of the remaining String objects is not altered. \r           var s1 = new String(\"a\"); var s2 = new String(\"b\"); var s3 = new String(\"c\");  \/\/ Create a repeat-string-N-times method for all String objects function str_rep(n) {    var s = \"\", t = this.toString();    while (--n >= 0) {      s += t    }    return s; }  String.prototype.repeat = str_rep;  s1a=s1.repeat(3); \/\/ returns \"aaa\" s2a=s2.repeat(5); \/\/ returns \"bbbbb\" s3a=s3.repeat(2); \/\/ returns \"cc\"  \/\/ Create an alternate method and assign it to only one String variable function fake_rep(n) {    return \"repeat \" + this + \" \" + n + \" times.\"; }  s1.repeat = fake_rep s1b=s1.repeat(1); \/\/ returns \"repeat a 1 times.\" s2b=s2.repeat(4); \/\/ returns \"bbbb\" s3b=s3.repeat(6); \/\/ returns \"cccccc\"\r          The function in this example also works on String objects not created with the String constructor. The following code returns \"zzz\". \"z\".repeat(3);"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fromCharCode","title":"String.fromCharCode","description":"Returns a string created by using the specified sequence of Unicode values.    Static Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition   Syntax  String.fromCharCode(num1, ..., numN)  Parameters  num1, ..., numN A sequence of numbers that are Unicode values.  Description This method returns a string and not a String object. Because fromCharCode is a static method of String, you always use it as String.fromCharCode(), rather than as a method of a String object you created. Getting it to work with higher values Although most common Unicode values can be represented in a fixed width system\/with one number (as expected early on during JavaScript standardization) and fromCharCode() can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values, fromCharCode() alone is inadequate. Since the higher code point characters use two (lower value) \"surrogate\" numbers to form a single character, fromCharCode() can be used to return such a pair and thus adequately represent these higher valued characters. Be aware, therefore, that the following utility function to grab the accurate character even for higher value code points, may be returning a value which is rendered as a single character, but which has a string count of two (though usually the count will be one). \r           \/\/ String.fromCharCode() alone cannot get the character at such a high code point \/\/ The following, on the other hand, can return a 4-byte character as well as the  \/\/   usual 2-byte ones (i.e., it can return a single character which actually has  \/\/   a string length of 2 instead of 1!) alert(fixedFromCharCode(0x2F804)); \/\/ or 194564 in decimal   function fixedFromCharCode (codePt) {     if (codePt > 0xFFFF) {         codePt -= 0x10000;         return String.fromCharCode(0xD800 + (codePt >> 10), 0xDC00 + (codePt & 0x3FF));     }     else {         return String.fromCharCode(codePt);     } }\r         Examples Example: Using fromCharCode The following example returns the string \"ABC\". String.fromCharCode(65,66,67)  Example: Using fromCharCode The following example returns the string \"ABC\". String.fromCharCode(65,66,67)  See also String.prototype.charCodeAt"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/localeCompare","title":"String.localeCompare","description":"Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  localeCompare(compareString)  Parameters compareString - The string against which the referring string is comparing Description Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. Returns -1 if the string occurs earlier in a sort than compareString, returns 1 if the string occurs afterwards in such a sort, and returns 0 if they occur at the same level. Examples Example: Using localeCompare The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another: \r           alert('a'.localeCompare('b')); \/\/ -1 alert('b'.localeCompare('a')); \/\/ 1 alert('b'.localeCompare('b')); \/\/ 0\r          Example: Using localeCompare The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another: \r           alert('a'.localeCompare('b')); \/\/ -1 alert('b'.localeCompare('a')); \/\/ 1 alert('b'.localeCompare('b')); \/\/ 0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/constructor","title":"String.constructor","description":"Summary  Returns a reference to the String function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/charCodeAt","title":"String.charCodeAt","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/concat","title":"String.concat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/indexOf","title":"String.indexOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/lastIndexOf","title":"String.lastIndexOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/match","title":"String.match","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/quote","title":"String.quote","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/search","title":"String.search","description":"Executes the search for a match between a regular expression and this String object.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax string.search(regexp) Parameters  regexp A  regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).  Description If successful, search returns the index of the regular expression inside the string. Otherwise, it returns -1. When you want to know whether a pattern is found in a string use search (similar to the regular expression test method); for more information (but slower execution) use match (similar to the regular expression exec method).   Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , search() was implemented incorrectly; when it was called with no parameters or with undefined, it would match against the string \"undefined\", instead of matching against the empty string. This is fixed; now \"a\".search() and \"a\".search(undefined) correctly return 0.  Examples Example: Using search The following example prints a message which depends on the success of the test. \r           function testinput(re, str){    if (str.search(re) != -1){       midstring = \" contains \";    }    else{       midstring = \" does not contain \";    }    document.write (str + midstring + re); }\r          Example: Using search The following example prints a message which depends on the success of the test. \r           function testinput(re, str){    if (str.search(re) != -1){       midstring = \" contains \";    }    else{       midstring = \" does not contain \";    }    document.write (str + midstring + re); }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/slice","title":"String.slice","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/split","title":"String.split","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLocaleLowerCase","title":"String.toLocaleLowerCase","description":"Returns the calling string value converted to lower case, according to any locale-specific case mappings.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleLowerCase()  Parameters None. Description The toLocaleLowerCase method returns the value of the string converted to lower case according to any locale-specific case mappings. toLocaleLowerCase does not affect the value of the string itself. In most cases, this will produce the same result as toLowerCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result. Examples Example: Using toLocaleLowerCase The following example displays the string \"alphabet\": \r           var upperText=\"ALPHABET\"; document.write(upperText.toLocaleLowerCase());\r         Example: Using toLocaleLowerCase The following example displays the string \"alphabet\": \r           var upperText=\"ALPHABET\"; document.write(upperText.toLocaleLowerCase());\r         See also toLowerCase()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLowerCase","title":"String.toLowerCase","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toUpperCase","title":"String.toUpperCase","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLocaleUpperCase","title":"String.toLocaleUpperCase","description":"Returns the calling string value converted to upper case, according to any locale-specific case mappings.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleUpperCase()  Parameters None. Description The toLocaleUpperCase method returns the value of the string converted to upper case according to any locale-specific case mappings. toLocaleUpperCase does not affect the value of the string itself. In most cases, this will produce the same result as toUpperCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result. Examples Example: Using toLocaleUpperCase The following example displays the string \"ALPHABET\": \r           var lowerText=\"alphabet\"; document.write(lowerText.toLocaleUpperCase());\r          Example: Using toLocaleUpperCase The following example displays the string \"ALPHABET\": \r           var lowerText=\"alphabet\"; document.write(lowerText.toLocaleUpperCase());\r          See also toUpperCase()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toSource","title":"String.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of String     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  string.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in String object, toSource returns the following string indicating that the source code is not available:  function String() {[native code]}   For instances of String or string literals, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toString","title":"String.toString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/Trim","title":"String.Trim","description":"Removes whitespace from both ends of the string.    Method of String     Implemented in JavaScript 1.8.1   ECMAScript Edition ECMAScript 5th Edition    Syntax string.trim() Parameters None. Description The trim method returns the string stripped of whitespace from both ends. trim does not affect the value of the string itself. Examples Example: Using trim The following example displays the lowercase string \"foo\": \r           var orig = \"   foo  \"; alert(orig.trim());\r          Example: Using trim The following example displays the lowercase string \"foo\": \r           var orig = \"   foo  \"; alert(orig.trim());\r          See Also  trimLeft() trimRight()  Compatibility Running the following code before any other code will create String.trim if it's not natively available. \r           if(!String.prototype.trim) {   String.prototype.trim = function () {     return this.replace(\/^\\s+|\\s+$\/g,'');   }; }\r          Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 10.5 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/TrimLeft","title":"String.TrimLeft","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/TrimRight","title":"String.TrimRight","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/anchor","title":"String.anchor","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/big","title":"String.big","description":"Summary  Causes a string to be displayed in a big font as if it were in a BIG tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   big()    Parameters  None.   Description  Use the big method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using big  The following example uses string methods to change the size of a string:   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   Example: Using big  The following example uses string methods to change the size of a string:   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   See Also  fontsize, small"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/blink","title":"String.blink","description":"Summary  Causes a string to blink as if it were in a BLINK tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   blink()    Parameters  None.   Description  Use the blink method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  bold, italics, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fixed","title":"String.fixed","description":"Summary  Causes a string to be displayed in fixed-pitch font as if it were in a TT tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   fixed()    Parameters  None.   Description  Use the fixed method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using fixed to change the formatting of a string  The following example uses the fixed method to change the formatting of a string:   var worldString=\"Hello, world\" document.write(worldString.fixed())  This example produces the same output as the following HTML:   <TT>Hello, world<\/TT>     Example: Using fixed to change the formatting of a string  The following example uses the fixed method to change the formatting of a string:   var worldString=\"Hello, world\" document.write(worldString.fixed())  This example produces the same output as the following HTML:   <TT>Hello, world<\/TT>"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/bold","title":"String.bold","description":"Summary  Causes a string to be displayed as bold as if it were in a B tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   bold()    Parameters  None.   Description  Use the bold method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, italics, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/italics","title":"String.italics","description":"Summary  Causes a string to be italic, as if it were in an I tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   italics()    Parameters  None.   Description  Use the italics method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, bold, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fontcolor","title":"String.fontcolor","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fontsize","title":"String.fontsize","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/small","title":"String.small","description":"Summary  Causes a string to be displayed in a small font, as if it were in a SMALL tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   small()    Parameters  None.   Description  Use the small method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the size of a string   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   Example: Using string methods to change the size of a string   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   See Also  big, fontsize"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/sub","title":"String.sub","description":"Summary  Causes a string to be displayed as a subscript, as if it were in a SUB tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   sub()    Parameters  None.   Description  Use the sub method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to generate the HTML.   Examples   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   See Also  sup"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/link","title":"String.link","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/strike","title":"String.strike","description":"Summary  Causes a string to be displayed as struck-out text, as if it were in a STRIKE tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   strike()    Parameters  None.   Description  Use the strike method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, bold, italics"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/sup","title":"String.sup","description":"Summary  Causes a string to be displayed as a superscript, as if it were in a SUP tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   sup()    Parameters  None.   Description  Use the sup method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to generate the HTML.   Examples   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   See Also  sub"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/ArrayBufferView","title":"ArrayBufferView","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/prototype","title":"Error.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/message","title":"Error.message","description":"A human-readable description of the error.    Property of Error     Implemented in JavaScript 1.?   ECMAScript Edition ECMAScript 1st Edition    Description This property contains a brief description of the error if one is available or has been set. SpiderMonkey makes extensive use of the message property for exceptions. The message property combined with the name property is used by the Error.prototype.toString method to create a string representation of the Error. By default, the message property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the Error constructor. Examples Example: Throwing a custom error  var e = new Error(\"Could not parse input\"); \/\/ e.message is \"Could not parse input\" throw e;  Example: Throwing a custom error  var e = new Error(\"Could not parse input\"); \/\/ e.message is \"Could not parse input\" throw e;  See also  name toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/name","title":"Error.name","description":"A name for the type of error.    Property of Error     Implemented in JavaScript 1.?   ECMAScript Edition ECMAScript 1st Edition   Description By default, Error instances are given the name \"Error\". The name property, in addition to the message property, is used by the Error.prototype.toString method to create a string representation of the error. Examples Example: Throwing a custom error  var e = new Error(\"Malformed input\"); \/\/ e.name is \"Error\" e.name = \"ParseError\";                \/\/ e.toString() would return throw e;                              \/\/ \"ParseError: Malformed input\"  Example: Throwing a custom error  var e = new Error(\"Malformed input\"); \/\/ e.name is \"Error\" e.name = \"ParseError\";                \/\/ e.toString() would return throw e;                              \/\/ \"ParseError: Malformed input\"  See also  message toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/Stack","title":"Error.Stack","description":"Description This non-standard property of Error objects offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call. Each step will be separated by a newline, with the first part of the line being the function name (if not a call from the global scope), followed by the argument values converted to string in parentheses, then by an at (@) sign, the file location (except when the function is the error constructor as the error is being thrown), a colon, and, if there is a file location, the line number. (Note the Error object also possesses the fileName and lineNumber properties for retrieving these from the error thrown (but only the error, and not its trace).) While an object (or array, etc.) will appear in the converted form \"[object Object]\", and as such cannot be evaluated back into the actual objects, scalar values can be retrieved (though it may be easier to use arguments.callee.caller.arguments, as could the function name be retrieved by arguments.callee.caller.name). \"undefined\" is listed as \"(void 0)\". Note that if string arguments are passed in with values such as \"@\", \"(\", \")\" (or if in file names), you cannot easily rely on these for breaking the line into its component parts. Example The following HTML markup demonstrates the use of stack property. \r           <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=windows-1251\"> <meta http-equiv=\"Content-Script-Type\" content=\"text\/javascript\"> <title>Stack Trace Example<\/title> <body>     <script type=\"text\/javascript\">         function trace() {             try {                 throw new Error(\"myError\");             }             catch(e) {                 alert(e.stack);             }         }         function b() {             trace();         }         function a() {             b(3, 4, \"\\n\\n\", undefined, {});         }         a(\"first call, firstarg\");     <\/script>\r          Assuming the above markup is saved as C:\\example.html on a Windows file system and is open in a browser it produces an alert message box with the following text:  Error(\"myError\")@:0 trace()@file:\/\/\/C:\/example.html:9 b(3,4,\"\\n\\n\",(void 0),[object Object])@file:\/\/\/C:\/example.html:16 a(\"first call, firstarg\")@file:\/\/\/C:\/example.html:19 @file:\/\/\/C:\/example.html:21  See also Components.stack"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/toSource","title":"Error.toSource","description":"Returns code that could eval to the same error.    Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition none    Syntax  error.toSource()   Parameters  None.   Description  Calling the toString method of an Error instance (including NativeErrors) will return a string containing the source code of the error. This string can be evaluated to create an (approximately) equal object. Naturally, the string containing the source follows the structure of the Error constructor. For example:  (new name(message, fileName, lineNumber))  where these attributes correspond to the respective properties of the error instance.  Be aware that the properties used by the toSource method in the creation of this string are mutable and may not accurately reflect the function used to create an error instance or the filename or line number where the actual error occurred.  See also   fileName  lineNumber  message  name"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/EvalError\/prototype","title":"EvalError.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/toString","title":"Error.toString","description":"Returns a string representing the specified Error object.    Method of Error     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition   Syntax error.toString() Parameters None. Description The Error object overrides the Object.prototype.toString method inherited by all objects. According to ECMA-262, implementations are free to decide the behavior of this method. SpiderMonkey joins string representations of the name and message properties with a colon and a space separating the two. If the string representation of either of these two properties is an empty string, this method simply returns the string representation of the property that has a non-zero length. If both properties' string representations are empty strings, this method returns an empty string. Note that when creating a string representation of the name and message properties, this method does not invoke those properties' toString methods. If the value in either of these properties is not already a string, this method will behave as if that property contained an empty string. Example  var e = new Error(\"fatal error\"); e.toString(); \/\/ returns \"Error: fatal error\"  e.name = undefined; e.toString(); \/\/ returns \"fatal error\"  e.message = undefined; e.toString(); \/\/ returns \"\"  e.name = \"Error\"; e.toString(); \/\/ returns \"Error\"  See also toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RangeError\/prototype","title":"RangeError.prototype","description":"Represents the prototype the RangeError constructor. Description All RangeError instances inherit from RangeError.prototype. You can use the prototype to add properties or methods to all instances.Properties  constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError\/prototype","title":"ReferenceError.prototype","description":"Represents the prototype for the ReferenceError constructor. Description All ReferenceError instances inherit from ReferenceError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype.   name Error name.     Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the ReferenceError prototype object does not contain any methods of its own, ReferenceError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError\/name","title":"ReferenceError.name","description":"A name for the type of error.  Description By default, ReferenceError instances are given the name \"ReferenceError\". See also  message toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/SyntaxError\/prototype","title":"SyntaxError.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/TypeError\/prototype","title":"TypeError.prototype","description":"Represents the prototype for the TypeError constructor. Description All TypeError instances inherit from TypeError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype.   name Error name.  Note: Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the TypeError prototype object does not contain any methods of its own, TypeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/URIError\/prototype","title":"URIError.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Constructor","title":"Object.Constructor","description":"Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, \"read-only\").    Property of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description All objects inherit a constructor property from their prototype:  o = new Object \/\/ or o = {} in JavaScript 1.2 o.constructor == Object a = new Array \/\/ or a = [] in JavaScript 1.2 a.constructor == Array n = new Number(3) n.constructor == Number  Even though you cannot construct most HTML objects, you can do comparisons. For example,  document.constructor == Document document.form3.constructor == Form  Examples Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));  Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON\/parse","title":"JSON.parse","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON\/stringify","title":"JSON.stringify","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LN2","title":"Math.LN2","description":"Summary  The natural logarithm of 2, approximately 0.693.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LN2 is a static property of Math, you always use it as Math.LN2, rather than as a property of a Math object you created.   Examples   Example: Using Math.LN2  The following function returns the natural log of 2:   function getNatLog2() {    return Math.LN2 }   Example: Using Math.LN2  The following function returns the natural log of 2:   function getNatLog2() {    return Math.LN2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/E","title":"Math.E","description":"The base of natural logarithms, e, approximately 2.718.    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description Because E is a static property of Math, you always use it as Math.E, rather than as a property of a Math object you created. Examples Example: Using Math.E The following function returns e:  function getNapier() {    return Math.E }  Example: Using Math.E The following function returns e:  function getNapier() {    return Math.E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LN10","title":"Math.LN10","description":"Summary  The natural logarithm of 10, approximately 2.302.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LN10 is a static property of Math, you always use it as Math.LN10, rather than as a property of a Math object you created.   Examples   Example: Using Math.LN10  The following function returns the natural log of 10:   function getNatLog10() {    return Math.LN10 }   Example: Using Math.LN10  The following function returns the natural log of 10:   function getNatLog10() {    return Math.LN10 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LOG2E","title":"Math.LOG2E","description":"The base 2 logarithm of E (approximately 1.442).    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description  Because LOG2E is a static property of Math, you always use it as Math.LOG2E, rather than as a property of a Math object you created.   Examples   Example: Using Math.LOG2E  The following function returns the base 2 logarithm of E:   function getLog2e() {    return Math.LOG2E }     Example: Using Math.LOG2E  The following function returns the base 2 logarithm of E:   function getLog2e() {    return Math.LOG2E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LOG10E","title":"Math.LOG10E","description":"Summary  The base 10 logarithm of E (approximately 0.434).     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LOG10E is a static property of Math, you always use it as Math.LOG10E, rather than as a property of a Math object you created.   Examples   Example: Using Math.LOG10E  The following function returns the base 10 logarithm of E:   function getLog10e() {    return Math.LOG10E }    Example: Using Math.LOG10E  The following function returns the base 10 logarithm of E:   function getLog10e() {    return Math.LOG10E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/PI","title":"Math.PI","description":"Summary  The ratio of the circumference of a circle to its diameter, approximately 3.14159.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because PI is a static property of Math, you always use it as Math.PI, rather than as a property of a Math object you created.   Examples   Example: Using PI  The following function returns the value of pi:   function getPi() {    return Math.PI }   Example: Using PI  The following function returns the value of pi:   function getPi() {    return Math.PI }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/SQRT1_2","title":"Math.SQRT1_2","description":"The square root of 1\/2; equivalently, 1 over the square root of 2, approximately 0.707.    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description Because SQRT1_2 is a static property of Math, you always use it as Math.SQRT1_2, rather than as a property of a Math object you created. Examples Example: Using SQRT1_2 The following function returns 1 over the square root of 2:  function getRoot1_2() {    return Math.SQRT1_2 }  Example: Using SQRT1_2 The following function returns 1 over the square root of 2:  function getRoot1_2() {    return Math.SQRT1_2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/SQRT2","title":"Math.SQRT2","description":"Summary  The square root of 2, approximately 1.414.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because SQRT2 is a static property of Math, you always use it as Math.SQRT2, rather than as a property of a Math object you created.   Examples   Example: Using Math.SQRT2  The following function returns the square root of 2:   function getRoot2() {    return Math.SQRT2 }   Example: Using Math.SQRT2  The following function returns the square root of 2:   function getRoot2() {    return Math.SQRT2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/abs","title":"Math.abs","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/acos","title":"Math.acos","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/asin","title":"Math.asin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/atan","title":"Math.atan","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/atan2","title":"Math.atan2","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/ceil","title":"Math.ceil","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/cos","title":"Math.cos","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/floor","title":"Math.floor","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/log","title":"Math.log","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/exp","title":"Math.exp","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/max","title":"Math.max","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/pow","title":"Math.pow","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/min","title":"Math.min","description":"Returns the smallest of zero or more numbers.    Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax Math.min([value1[,value2[, ...]]])  Parameters  value1, value2, ... Numbers.  Description Because min is a static method of Math, you always use it as Math.min(), rather than as a method of a Math object you created. If no arguments are given, the result is Infinity. If at least one of arguments cannot be converted to a number, the result is NaN. Examples Example: Using Math.min This finds the min of x and y and assigns it to z: var x = 10, y = -20; var z = Math.min(x, y);  Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. Example: Using Math.min This finds the min of x and y and assigns it to z: var x = 10, y = -20; var z = Math.min(x, y);  Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. See Also Math.max"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/random","title":"Math.random","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/sin","title":"Math.sin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/round","title":"Math.round","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/sqrt","title":"Math.sqrt","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/tan","title":"Math.tan","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getPrototypeOf","title":"Object.getPrototypeOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Proxy","title":"Proxy","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/DataView","title":"DataView","description":null}]