#!/usr/local/bin/bash

#################
### Functions ###
#################

alias realpath='python -c "import os,sys; print os.path.realpath(sys.argv[1])"'

function ssh.hostinfo {
  printf "\n$(sed -ne "/$1/,/^$/p" ~/.ssh/configs/* | grep -i -B 10 -A 10 "$1")\n\n"
}

function ssh.hostname {
  SSHHOSTNAME=$(sed -ne "/$1/,/^$/p" ~/.ssh/configs/* | tr '\n' ' ' | perl -pe 's!^.*?Hostname (.*?) .*?$!$1!')
  printf '%s' "$SSHHOSTNAME"
}

function ssh.clearknownhost {
  reset_style="\e[0m"
  error_style="${reset_style}\e[31m"

  if [[ -z $1 ]]; then
    printf "${error_style}ERROR:${reset_style} Please provide a value to search for\n"
    return
  fi

  SSHHOST="$(ssh.hostname $1)"

  if [[ -z $SSHHOST ]]; then
    printf "${error_style}ERROR:${reset_style} Your value (%s) didn't return any hosts from ~/.ssh/config\n" "$1"
    return
  fi

  HOSTCOUNT="$(cat ~/.ssh/known_hosts | grep -i "^$SSHHOST" | wc -l)"
  reset_style="\e[0m"
  error_style="${reset_style}\e[31m"

  if [[ $HOSTCOUNT -ne 1 ]]; then
    printf "${error_style}ERROR:${reset_style} There are %s matches for '%s' (%s) in ~/.ssh/known_hosts\n" "$HOSTCOUNT" "$1" "$SSHHOST"
    cat ~/.ssh/known_hosts | grep -i "^$SSHHOST"
    return
  fi

  printf '%s' "$(cat ~/.ssh/known_hosts | grep -iv "^$SSHHOST")" > ~/.ssh/known_hosts

  HOSTCOUNT="$(cat ~/.ssh/known_hosts | grep -i "^$SSHHOST" | wc -l)"
  if [[ $HOSTCOUNT -gt 0 ]]; then
    printf "${error_style}ERROR:${reset_style} %s\n  %s%s%s\n\n%s\n  " \
      'I tried to delete the entry with the following command, but something went wrong:' \
      '$(cat ~/.ssh/known_hosts | grep -iv "^' \
      "${SSHHOST}" \
      '") > ~/.ssh/known_hosts' \
      'Here are the grep results from the file:'
    cat ~/.ssh/known_hosts | grep -i "^$SSHHOST"
    return
  else
    printf 'Successfully removed "%s" (%s) from known hosts!\n' "$1" "$SSHHOST"
  fi
}

function de {
  docker exec -it "$1" bash
}

function colorchart {
  for i in {0..255}; do print -Pn "%K{$i} %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%8)):#7}:+$'\n'}; done
}

ip() {
  printf '%s\nInternal: %s\nExternal: Connecting...' \
         '----- IP INFO -----' \
         "$(ifconfig | grep inet | grep -v inet6 | cut -d" " -f2 | tail -n1)"

  EXTERNALIP="$(curl -m 5 -s -H 'Accept: application/json' ipinfo.io | \
               sed -e '1d; $ d; s/ip//' | \
               perl -pe 's!^\s*"(.*?)": "(.*?)",?\s*$!\u$1\E: $2\n!g')"

  if [[ -z "$EXTERNALIP" ]]; then
    EXTERNALIP=": n/a          "
  fi

  printf '\rExternal%s\n' "$EXTERNALIP"

}

function alldone {
# Parrot from http://www.asciiworld.com/-Parrots-.html
# Text from http://patorjk.com/software/taag/#p=display&f=Delta%20Corps%20Priest%201&t=All%0ADone
# Layout assembled by Jonathan Wren <jonathan@nowandwren.com>
# @see https://youtu.be/SPO7NZ97In4?t=2m16s
lolcat <<'EOM'
     ▄█████████   ▄█             ▄█
     ███     ███ ███            ███
     ███     ███ ███            ███
   ▀████████████ ███            ███
     ███     ███ ███            ███
     ███     ███ ████           ████
     ███    .▀▀--▀▀████      ▄▄ ██████      ▄▄
     ███   /  ~ ~   \▀▀▀▀▀▀▀▀██ ██████████████
     ███ ,'  ~ ~ ~  /  (@)   \█ █▀'      \████
     ██,'          /`.    ~ ~ \ /         \
     ,'           | ,'\  ~ ~ ~ X     \  \  \
   ,'  ,'          V--<       (       \  \  \
 ,'  ,'               (vv      \/\  \  \  |  |
(__,'  ,'   /         (vv   ""    \  \  | |  |
  (__,'    /   /       vv   """    \ |  / / /
      \__,'   /  |     vv          / / / / /
          \__/   / |  | \         / /,',','
             \__/\_^  |  \       /,'',','\
                    `-^.__>.____/  ' ,'   \
                            // //---'\     |
    ████████▄   ▄██████▄  █((((((▄    |▄████████
    ███   ▀███ ███    ███ ███▀▀▀██▄  /███ |  ███
    ███    ███ ███    ███ ███   ███ / ███/ \ █▀
    ███    ███ ███    ███ ███   ███ `▄███▄▄▄|  \
    ███    ███ ███    ███ ███   ███ ▀▀███▀▀▀---'
    ███    ███ ███    ███ ███   ███   ███    █▄
    ███   ▄███ ███    ███ ███   ███   ███    ███
    ████████▀   ▀██████▀   ▀█   █▀    ██████████
EOM
}

function alldone_small {
lolcat <<'EOM'
 ALL .-. DONE
    /'v'\
   (/   \)
 >==="="===<
     |_|
EOM
}

function kirby {
  lolcat <<'EOM'
                      ██ ██ ██ ██ ██    ██ ██
              ██ ██ ▒▒             ██ ▒▒    ██
           ██ ▒▒       ██    ██       ██       ██
        ██ ▒▒          ██    ██          ▒▒    ██
        ██             ██    ██          ▒▒ ▒▒ ██
     ██          ▒▒ ▒▒          ▒▒ ▒▒       ▒▒ ██
  ██ ▒▒                   ██                   ██
  ██       ▒▒             ██                ▒▒ ██
  ██       ▒▒                               ██
     ██ ██ ██                            ▒▒ ██
  ██          ██                            ██
  ██             ██                      ██
  ██             ██                   ██ ██
     ██             ██          ██ ██       ██
        ██       ██ ██ ██ ██ ██                ██
           ██ ██ ██          ██ ██ ██ ██ ██ ██
EOM
}

function ap {

  local install_dir="$HOME/.atom/packages/"
  local install_list="$HOME/atom-packages.list"
  local temp=''

  case $1 in
    'save' )
    echo 'Saving...'
    gls "$install_dir" > "$install_list"
    echo '... Done!'
    ;;


    'install' )
    cat "$install_list" | grep -Fvx "$(gls -1 $install_dir)" | xargs apm install
    echo '... Done!'
    ;;


    'remove' )
    gls -1 "$install_dir" | grep -Fvx -f "$install_list" | xargs apm uninstall
    ;;


    'list' )
    temp=`cat $install_list | grep -Fvx "$(gls -1 $install_dir)"`
    if [[ -n "$temp" ]]; then
      echo -e "--- Missing ---\n${temp}"
    fi

    temp=`gls -1 "$install_dir" | grep -Fvx -f "$install_list"`
    if [[ -n "$temp" ]]; then
      echo -e "\n--- Not Saved ---\n${temp}"
    fi

    echo -e "\n--- Installed ---"
    temp=`gls -1 "$install_dir"`
    if [[ -n "$temp" ]]; then
      echo -e "${temp}"
    else
      echo -e "\nNo packages installed!\n"
    fi
    ;;


    * )
    echo 'Usage: ap save|install|list|remove'
    echo 'Perform selected action.'
    echo ''
    echo 'install   Installs any packages not yet installed in Atom that are in the package list'
    echo 'list      Lists the installed, missing, and not saved packages on the current system'
    echo 'remove    Removes any packages installed that are not in the package list'
    echo -e "save      Saves a list of all packages installed in Atom ${install_list}"
    ;;

  esac
}

# Use FZF to attach/switch a tmux session
function ta {
  session="$(t ls -F '#{session_name} #{?session_attached,  ,}|  #{session_alerts}|#{t:session_activity}|' \
    | perl -pe 's/\d#,?//g' \
    | column -ts'|' \
    | fzf --query="$1" --select-1 --exit-0 \
    | perl -pe 's/^(.*?)\s{3,}.*$/$1/')"

  [[ -z $session ]] && echo "No sessions" && return

  if [[ -z $TMUX ]]; then
    tmux attach -t "$session"
  else
    tmux switch -t "$session"
  fi
}

# Uses fuzzy finder to show background jobs, and foregrounds selection
function jfg {
  if [[ -z $(jobs) ]]; then
    echo 'No jobs'
    return 1
  fi

  job="$(jobs -l | sed -E 's/stopped\s+//i' | \
    fzf --ansi --no-sort --height=10 --layout=reverse --bind="ctrl-x:execute: echo {} | awk -F '  +' '{print \$2}' | xargs -I % echo '%'")"
  # TODO: some checking
  if [[ -z $job ]]; then
    # probably canceled
    echo 'No job selected'
    return
  fi

  fg "%$(echo $job | awk -F '  +' '{print $1}' | tr -d "[]+-")"
}

# This is the default signature (if a host-specific one isn't given)
function sig {
lolcat -f <<'EOM'
                       __,---,
         .---.        /__|o\  )       .-"-.      .----.""".
        /   6_6        `-\ / /       / 4 4 \    /____/ (0 )\
        \_  (__\         ,) (,       \_ v _/      `--\_    /
        //   \\         //   \\      //   \\         //   \\
       ((     ))       {(     )}    ((     ))       {{     }}
 =======""===""=========""===""======""===""=========""===""=======
          |||            |||||         |||             |||
           |              |||           |              '|'
                           |
EOM
}
