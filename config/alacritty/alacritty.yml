# Configuration for Alacritty, the GPU enhanced terminal emulator.
# See: https://github.com/alacritty/alacritty/blob/master/alacritty.yml

# Paths much be absolute (starting in `/`), or relative to $HOME (starting with `~/`)
#import:
#  - /path/to/alacritty.yml


#----- Env overrides -----#
#env:
  #TERM: alacritty


#----- Window settings -----#
window:

  # Startup Mode ( windowed | maximized | fullscreen | simplefullscreen (mac only) )
  startup_mode: windowed

  # Window padding in px (requires restart)
  padding:
    x: 8
    y: 0

  # Spread additional padding evenly around the terminal content
  dynamic_padding: false

  # Window decorations
  #   full: Borders and title bar
  #   none: Neither borders nor title bar
  #   transparent: (mac only) Title bar with buttons, transparent background
  #   buttonless: (mac only) Title bar with no buttons, transparent background
  decorations: buttonless

  # Window title
  title: Alacritty

  # Allow terminal applications to change window title
  dynamic_title: true


#----- Background opacity -----#
# Window opacity as a floating point number from `0.0` (transparent) to `1.0` (opaque)
# This is in the root instead of in window for some reason
background_opacity: 1.0


#----- Scrolling -----#
scrolling:
  # Maximum lines in scrollback buffer (0 disables scrolling)
  history: 100000

  # Scrolling distance multiplier.
  multiplier: 3


#----- Font configuration -----#
font:
  # font size (in pt)
  size: 18.0

  # Font family
  normal:
    family: FiraCode Nerd Font Mono
    style: Light

  bold:
    family: FiraCode Nerd Font
    # Maybe SemiBold?
    style: Medium

  italic:
    family: FiraCode Nerd Font
    style: Italic

  # Offset (in px)
  # x = letter spacing
  # y = line spacing
  offset:
    x: 0
    y: 6

  # Glyph offset inside each cell (in px)
  # x -> move right
  # y -> move upward
  glyph_offset:
    x: 0
    y: 5

  # Thin stroke font rendering (mac only)
  use_thin_strokes: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false


#----- Colors (modified from One Dark template) -----#
colors:
  # Default colors
  primary:
    foreground: '#eeeeee'
    background: '#121212'

  # Cursor colors
  cursor:
    text: '#17191C'
    cursor: '#abb2bf'

  # Normal colors
  normal:
    black:   '#5c6370'
    red:     '#e06c75'
    green:   '#98c379'
    yellow:  '#e5c07b'
    blue:    '#61afef'
    magenta: '#c678dd'
    cyan:    '#56b6c2'
    white:   '#c5c8c6'

  # Bright colors
  bright:
    black:   '#4b5263'
    red:     '#be5046'
    green:   '#98c379'
    yellow:  '#d19a66'
    blue:    '#61afef'
    magenta: '#c678dd'
    cyan:    '#56b6c2'
    white:   '#eeeeee'

  # Dim color get calculated automagically from `normal`, or they can be set below
  # dim:
  #   black: '#000000'
  #   ...

  # Cursor colors ( CellForeground | CellBackground | #fffff )
  # cursor:
  #   text: CellBackground
  #   cursor: CellForeground

  # Colors for the cursor when the vi mode is active ( CellForeground | CellBackground | #fffff )
  # vi_mode_cursor:
  #   text: CellBackground
  #   cursor: CellForeground

  # Colors used for the search bar and match highlighting ( CellForeground | CellBackground | #fffff )
  search:
    matches:
      foreground: '#000000'
      background: '#ffffff'

    focused_match:
      foreground: CellBackground
      background: CellForeground

    bar:
     background: '#c5c8c6'
     foreground: '#1d1f21'

  # Color for position indicator in history during search and vi mode
  # default = "opposing primary color" whatever that means
  # line_indicator:
  #   foreground: None
  #   background: None

  # Colors to draw the selection area with ( CellForeground | CellBackground | #fffff )
  selection:
    text: CellBackground
    background: CellForeground

  # Indexed Colors (all colors from 16 to 256)
  # Default = "sensible defaults"
  # indexed_colors:
  #   - { index: 16, color: '#ff00ff' }


#----- Selection -----#
selection:
  # All characters used for "semantic words"
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # true -> selected text is copied to the primary clipboard
  save_to_clipboard: true


#----- Cursor -----#
cursor:
  # Cursor style
  style:
    # Cursor shape ( block | underline | beam )
    shape: block

    # Cursor blinking state ( never | off | on | always )
    blinking: Off

  # Vi mode cursor style ( never | off | on | always )
  # defaults to `shape` if not defined
  vi_mode_style: block

  # Change cursor to hollow box on window unfocus ( true | false )
  unfocused_hollow: true

  # Thickness of bar cursor relative to cell width as floating point number ( 0.0 -> 1.0 )
  thickness: 0.15


# Live config reload (changes require restart)
live_config_reload: true


# Startup directory (defaults to dir of parent)
# working_directory: ~

# Send ESC (\x1b) before characters when alt is pressed (disables default mac alt behavior)
alt_send_esc: true


#----- Mouse -----#
mouse:
  # Time for double/triple click (in ms)
  double_click:
    threshold: 300
  triple_click:
    threshold: 300

  # Hide mouse when typing ( true | false )
  hide_when_typing: false


#----- Mouse bindings -----#
# See: https://github.com/alacritty/alacritty/blob/master/alacritty.yml#L492


#----- Key bindings -----#
# See: https://github.com/alacritty/alacritty/blob/master/alacritty.yml#L518
# List of key codes: https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
# List of actions: https://github.com/alacritty/alacritty/blob/master/alacritty.yml#L554
# Get hex scancodes for keys: `showkey --scancodes`
# Get escape codes (do outside of tmux, and depends on terminfo): `showkey -a`
# Mods (combine with `|`, and case sensitive): Command, Control, Option, Super, Shift, Alt
# Modes (use `~Mode` for "not Mode"): AppCursor, AppKeypad, Search, Alt, Vi
# Unset default binding by mapping to `ReceiveChar` action (or `None` for no-op)
# Multiple bindings for same keys executes all binding in order

key_bindings:
  # Missing bindings
  - { key: Return,     mods: Shift,         chars: "\x1b[13;2u"   }
  - { key: Return,     mods: Control,       chars: "\x1b[13;5u"   }
  - { key: Tab,        mods: Control,       chars: "\x1b[27;5;9~" }
  - { key: Tab,        mods: Shift|Control, chars: "\x1b[27;6;9~" }
  - { key: Slash,      mods: Command,       chars: "\x1b/"        }

  # Laptop
  - { key: L,          mods: Option,        chars: "\x1bl"        }
  - { key: H,          mods: Option,        chars: "\x1bh"        }
  - { key: J,          mods: Option,        chars: "\x1bj"        }
  - { key: K,          mods: Option,        chars: "\x1bk"        }
  - { key: Period,     mods: Option,        chars: "\x1b."        }
  - { key: Comma,      mods: Option,        chars: "\x1b,"        }

  # Desktop
  - { key: L,          mods: Shift|Control, chars: "\x1bl"        }
  - { key: H,          mods: Shift|Control, chars: "\x1bh"        }
  - { key: J,          mods: Shift|Control, chars: "\x1bj"        }
  - { key: K,          mods: Shift|Control, chars: "\x1bk"        }
  - { key: Period,     mods: Shift|Control, chars: "\x1b."        }
  - { key: Comma,      mods: Shift|Control, chars: "\x1b,"        }

  # Control + Shift technically doesn't exist in terminals, so we map them here manually
  - { key: Space,      mods: Control|Shift, chars: "\x1b[27;6;32~"   } # default to vi mode
  - { key: Apostrophe, mods: Control|Shift, chars: "\x1b[27;6;39~"   }
  # - { key: Comma,      mods: Control|Shift, chars: "\x1b[27;6;44~"   }
  - { key: Minus,      mods: Control|Shift, chars: "\x1b[27;6;45~"   }
  # - { key: Period,     mods: Control|Shift, chars: "\x1b[27;6;46~"   }
  - { key: Slash,      mods: Control|Shift, chars: "\x1b[27;6;47~"   }
  - { key: Key0,       mods: Control|Shift, chars: "\x1b[27;6;48~"   }
  - { key: Key1,       mods: Control|Shift, chars: "\x1b[27;6;49~"   }
  - { key: Key2,       mods: Control|Shift, chars: "\x1b[27;6;50~"   }
  - { key: Key3,       mods: Control|Shift, chars: "\x1b[27;6;51~"   }
  - { key: Key4,       mods: Control|Shift, chars: "\x1b[27;6;52~"   }
  - { key: Key5,       mods: Control|Shift, chars: "\x1b[27;6;53~"   }
  - { key: Key6,       mods: Control|Shift, chars: "\x1b[27;6;54~"   }
  - { key: Key7,       mods: Control|Shift, chars: "\x1b[27;6;55~"   }
  - { key: Key8,       mods: Control|Shift, chars: "\x1b[27;6;56~"   }
  - { key: Key9,       mods: Control|Shift, chars: "\x1b[27;6;57~"   }
  - { key: Semicolon,  mods: Control|Shift, chars: "\x1b[27;6;59~"   }
  - { key: Equals,     mods: Control|Shift, chars: "\x1b[27;6;61~"   }
  - { key: A,          mods: Control|Shift, chars: "\x1b[27;6;65~"   }
  - { key: B,          mods: Control|Shift, chars: "\x1b[27;6;66~"   }
  - { key: C,          mods: Control|Shift, chars: "\x1b[27;6;67~"   }
  - { key: D,          mods: Control|Shift, chars: "\x1b[27;6;68~"   }
  - { key: E,          mods: Control|Shift, chars: "\x1b[27;6;69~"   }
  - { key: F,          mods: Control|Shift, chars: "\x1b[27;6;70~"   }
  - { key: G,          mods: Control|Shift, chars: "\x1b[27;6;71~"   }
  # - { key: H,          mods: Control|Shift, chars: "\x1b[27;6;72~"   }
  - { key: I,          mods: Control|Shift, chars: "\x1b[27;6;73~"   }
  # - { key: J,          mods: Control|Shift, chars: "\x1b[27;6;74~"   }
  # - { key: K,          mods: Control|Shift, chars: "\x1b[27;6;75~"   }
  # - { key: L,          mods: Control|Shift, chars: "\x1b[27;6;76~"   }
  - { key: M,          mods: Control|Shift, chars: "\x1b[27;6;77~"   }
  - { key: N,          mods: Control|Shift, chars: "\x1b[27;6;78~"   }
  - { key: O,          mods: Control|Shift, chars: "\x1b[27;6;79~"   }
  - { key: P,          mods: Control|Shift, chars: "\x1b[27;6;80~"   }
  - { key: Q,          mods: Control|Shift, chars: "\x1b[27;6;81~"   }
  - { key: R,          mods: Control|Shift, chars: "\x1b[27;6;82~"   }
  - { key: S,          mods: Control|Shift, chars: "\x1b[27;6;83~"   }
  - { key: T,          mods: Control|Shift, chars: "\x1b[27;6;84~"   }
  - { key: U,          mods: Control|Shift, chars: "\x1b[27;6;85~"   }
  - { key: V,          mods: Control|Shift, chars: "\x1b[27;6;86~"   }
  - { key: W,          mods: Control|Shift, chars: "\x1b[27;6;87~"   }
  - { key: X,          mods: Control|Shift, chars: "\x1b[27;6;88~"   }
  - { key: Y,          mods: Control|Shift, chars: "\x1b[27;6;89~"   }
  - { key: Z,          mods: Control|Shift, chars: "\x1b[27;6;90~"   }
  - { key: Backslash,  mods: Control|Shift, chars: "\x1b[27;6;92~"   }

  - { key: W,          mods: Control,       chars: "\x1b[27;5;119~"  }

