- defaults:
    link:
        relink: true
        ignore-missing: true
        force: true
        create: true
        quiet: true
    shell:
        stdin: false
        stdout: true
        stderr: true
        quiet: true

- clean:
    - '~'

- create: []

- link:
    # General
    ~/.config/:
        glob: true
        path: config/*
    ~/.local/bin/:
        glob: true
        path: bin/*
    ~/.ssh/:
        glob: true
        path: config/ssh/*

    # Alfred
    ~/Library/ApplicationSupport/Alfred/prefs.json:
        path: config/alfred/prefs.json
    ~/Library/Application Support/Spectacle/Shortcuts.json:
        path: config/spectacle/shortcuts.json

    # Special cases
    ~/Library/Preferences/com.mowglii.ItsycalApp.plist:
        path: config/itsycal/com.mowglii.ItsycalApp.plist
    ~/Library/Preferences/:
        glob: true
        path: config/macos/*.plist

- shell:
    - description: Checking superuser access
      command: |-
        if [[ -z $DOTFILES_LOADED ]] && [[ "$EUID" -ne 0 ]]; then
        sudo -v || {
            printf "\n$UNDERLINE$(tput setaf 1)ERROR:$(tput sgr0) "
            printf "Superuser access is required for some later steps in this script."
            printf "\n\nPlease ctrl+c to try again\n"
            sleep 9999
        }
        fi
        # Keep sudo going in background for duration of the script
        # see: https://gist.github.com/cowboy/3118588
        while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    - description: Checking PGP Key
      command: |-
        if ! gpg -K $DOTFILES_GPG_KEY &>/dev/null; then
          echo "Getting key from secrethub"
          KEY="$(secrethub read wren/dotfiles/gpg/private.key)"
          echo "Loading key into GPG."
          gpg-connect-agent killagent /bye
          echo "$KEY" | gpg --import
          echo "Setting trust on key."
          expect -c "spawn gpg --edit-key $DOTFILES_GPG_KEY trust quit; send \"5\ry\r\"; expect eof"
        fi

    - description: Checking Homebrew bundles
      command: |-
        BREWFILE="$DOTFILES_DIR/config/dotfiles/Brewfile"
        HOMEBREW_NO_AUTO_UPDATE=1
        if ! brew bundle check --no-upgrade --file="$BREWFILE" >/dev/null; then
            printf "Some brew dependencies are missing. Installing...\n"
            brew bundle --file="$BREWFILE" --no-lock
        fi
        brew bundle dump \
          --all \
          --force \
          --no-lock \
          --describe \
          --file="$BREWFILE"
        # This perl line moves the "describe" comments inline
        perl -0777 -i -pe 's/(#.*?)\n(.*?)\n/$2 $1\n/g' "$BREWFILE"

    - description: Installing latest Python via Pyenv
      command: |-
        if ! pyenv global >/dev/null; then
            export PYTHON_CONFIGURE_OPTS="--enable-framework"
            pyenv install -s $(pyenv install --list | grep -v '\-\|a\|b' | tail -1)
        fi

    - description: Setting up Neovim Python environment
      command: |-
        if ! pyenv virtualenvs | grep -iq neovim3; then
            pyenv virtualenv neovim3
            eval "$(pyenv init -)"
            eval "$(pyenv-virtualenv init -)"
            pyenv activate neovim3
            pip install --upgrade pip
            pip install pynvim
            pip install yq
        fi
 
    # - description: Downloading Spanish dictionary for Neovim
    #   command: >-
    #     nvim -u NORC -c 'set spell' -c 'set spelllang=es' -c 'qa!'

    - description: Setting MacOS preferences
      command: |-
        if [[ ! $DOTFILES_LOADED ]]; then
          sh ./config/dotfiles/macos.sh
        fi

    - description: Decrypt encrypted directories & files
      command: |-
        if ! gpg -K $DOTFILES_GPG_KEY &>/dev/null; then
          printf "$UNDERLINE$(tput setaf 1)ERROR:$(tput sgr0) "
          printf "GPG key not available.\n"
          exit 1
        fi

        decrypt_script='
          OLD_DIR="{//}"
          OLD_FILE="{/}"
          NEW_DIR="${OLD_DIR//[_.]encrypted}"
          NEW_FILE="${OLD_FILE//[_.]encrypted}"
          OLD_PATH="${OLD_DIR}/${OLD_FILE}"
          NEW_PATH="${NEW_DIR}/${NEW_FILE}"

          if [[ ! -r $NEW_PATH ]] || [[ ! -s $NEW_PATH ]]; then
            printf " - decrypting %s\n" $OLD_PATH
            mkdir -p $NEW_DIR
            sops --decrypt $OLD_PATH > $NEW_PATH || {
              print -P "   %F{001}ï„ª Problem decrypting %s\n" $OLD_PATH
            }
          fi
        '

        # Decrypt files in folders
        for dir in $(fd -HI -t d '[\._]encrypted'); do
          fd -HI -t f . $dir -x zsh -c $decrypt_script
        done
        # Decrypt individual files
        fd -HI -t f '[\._]encrypted' -x zsh -c $decrypt_script

    - description: Installing software licenses
      command: |-
        sops exec-env ./data/keys/alfred.enc.yaml 'sh "$DOTFILES_DIR/bin/sops-install-key.sh"'

- pipx:
    file: config/dotfiles/pipx.txt
    stdout: false
    stderr: true

- link:
    # Neovim
    ~/.cache/nvim/spell/custom.en.utf-8.add: data/dictionaries/custom.en.dict
    ~/.cache/nvim/spell/words.en.utf-8.add: /usr/share/dict/words
