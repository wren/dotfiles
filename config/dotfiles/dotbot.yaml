- defaults:
    link:
        relink: true
        ignore-missing: true
        force: true
        create: true
        quiet: true
    shell:
        stdin: false
        stdout: true
        stderr: true
        quiet: true

- clean:
    - '~'

- create: []

- link:
    # General
    ~/.config/:
        glob: true
        path: config/*
    ~/.local/bin/:
        glob: true
        path: bin/*
    ~/.ssh/:
        glob: true
        path: config/ssh/*

    # Alfred
    ~/Library/ApplicationSupport/Alfred/prefs.json:
        path: config/alfred/prefs.json
    ~/Library/Application Support/Spectacle/Shortcuts.json:
        path: config/spectacle/shortcuts.json

    # Special cases
    ~/Library/Preferences/com.sudo.cyberduck.plist:
        path: config/cyberduck/com.sudo.cyberduck.plist
    ~/Library/Preferences/com.mowglii.ItsycalApp.plist:
        path: config/itsycal/com.mowglii.ItsycalApp.plist
    ~/Library/Preferences/com.sequelpro.SequelPro.plist:
        path: config/sequelpro/com.sequelpro.SequelPro.plist
    ~/Library/Preferences/:
        glob: true
        path: config/macos/*.plist

    # Neovim
    ~/.cache/nvim/spell/custom.en.utf-8.add: data/dictionaries/custom.en.dict
    ~/.cache/nvim/spell/words.en.utf-8.add: /usr/share/dict/words


- shell:
    - description: Checking superuser access
      command: |-
        if [[ -z $DOTFILES_LOADED ]] && [[ "$EUID" -ne 0 ]]; then
        sudo -v || {
            printf "\n$UNDERLINE$(tput setaf 1)ERROR:$(tput sgr0) "
            printf "Superuser access is required for some later steps in this script."
            printf "\n\nPlease ctrl+c to try again\n"
            sleep 9999
        }
        fi
        # Keep sudo going in background for duration of the script
        # see: https://gist.github.com/cowboy/3118588
        while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    - description: Checking PGP Key
      command: |-
        if ! gpg -K $DOTFILES_GPG_KEY &>/dev/null; then
          echo "Getting key from secrethub"
          KEY="$(secrethub read wren/dotfiles/gpg/private.key)"
          echo "Loading key into GPG."
          gpg-connect-agent killagent /bye
          echo "$KEY" | gpg --import
          echo "Setting trust on key."
          expect -c "spawn gpg --edit-key $DOTFILES_GPG_KEY trust quit; send \"5\ry\r\"; expect eof"
        fi

    - description: Installing apps via Homebrew
      command: |-
        BREWFILE="$DOTFILES_DIR/config/dotfiles/Brewfile"
        HOMEBREW_NO_AUTO_UPDATE=1
        if ! brew bundle check --file="$BREWFILE" >/dev/null; then
            brew bundle --file="$BREWFILE"
        fi

    - description: Installing latest Python via Pyenv
      command: |-
        if ! pyenv global >/dev/null; then
            pyenv install -s $(pyenv install --list | grep -v '\-\|a\|b' | tail -1)
        fi

    - description: Setting up Neovim Python environment
      command: |-
        if ! pyenv virtualenvs | grep -iq neovim3; then
            pyenv virtualenv neovim3
            eval "$(pyenv init -)"
            eval "$(pyenv-virtualenv init -)"
            pyenv activate neovim3
            pip install --upgrade pip
            pip install pynvim
            nvim -c ':UpdateRemotePlugins' -c 'qa!'
        fi

    # - description: Downloading Spanish dictionary for Neovim
    #   command: >-
    #     nvim -u NORC -c 'set spell' -c 'set spelllang=es' -c 'qa!'

    - description: Setting MacOS preferences
      command: |-
        if [[ ! $DOTFILES_LOADED ]]; then
          sh ./config/dotfiles/macos.sh
        fi

    - description: Decrypt files
      command: |-
        if ! gpg -K $DOTFILES_GPG_KEY &>/dev/null; then
          printf "$UNDERLINE$(tput setaf 1)ERROR:$(tput sgr0) "
          printf "GPG key not available.\n"
          exit 1
        fi
        for file in ./config/ssh/configs_encrypted/*; do
          sops -d "$file" > "./config/ssh/configs/${file:t}" || {
            echo " - problem decrypting ${file}"
          }
        done

- pipx:
    file: config/dotfiles/pipx.txt
    stdout: false
    stderr: true

