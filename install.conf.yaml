- defaults:
    link:
        relink: true
        ignore-missing: true
        force: true
        create: true
        quiet: true
    shell:
        stdin: false
        stdout: true
        stderr: true
        quiet: true

- clean:
    - '~'
    - '~/.config'

- bootstrap-brew: true
- brew:
    - "age" # Simple, modern, secure file encryption
    - "sops" # Editor of encrypted files
    - "fd" # Simple, fast and user-friendly alternative to find

- shell:

    - description: Checking Encryption Key (Age)
      # @todo clean this up, and maybe make standalone script
      command: |-
        #!/usr/bin/env zsh
        if [[ ! -f $SOPS_AGE_KEY_FILE ]]; then

        # Requires:
        # - age
        # - cat
        # - curl
        # - openssl
        # - perl
        # - printf

        printf 'Retrieving dotfiles key from Google Cloud...\n'

        # Encrypted block contains definitions for these variables:
        # - SERVICE_ACCOUNT_EMAIL
        # - SERVICE_ACCOUNT_KEY
        # - BUCKET_NAME
        # - KEY_FILENAME
        source <(age -d <(<<'EOT'
        -----BEGIN AGE ENCRYPTED FILE-----
        YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IHNjcnlwdCByNk9QKzA1OU5iMUdYOE53
        WnhnTlVRIDE4CjA4TXFBVUM0WlVvKzQ3dzBvTE1RekoyclhFemcwQXEwb01BUzNW
        ZU5ZZjAKLS0tIGRWSjhkQUF2RGpZOE9ZSEZ2TFlhdU9QYlNFTm96RDVxSUg1bEhk
        WVIrVzAKqhoVSew8A8eQMD61Fk6X4yAefj5Kap+rmnw5ijyYilHLwWs52EuH60vh
        7P9pzVMor7D3RjqYOK3oTeSzl9WcvvFruG+tGBZE8FGP1JdZtlHlBRmwNdGxAqTx
        ghv/QIuUkiEV9AB44IuWR9MIbFc8gQY+8tqMMhVcNHRCj+BP5WlD5z2gbI7PKTDj
        Rc0iVE443VHrnekrIKdPXc3FzJY43imyP3rmHWaRh+PVCFOptISII7pMa/g0OpAC
        HDscWzkCVERo1ZOYNCb1hU053CpJTHtSvjESwR3SmyMwgTbBxciyeCG9uTZ6zphG
        araxHT6b6yunf2XB76tkPNvine1URHGojKBCTj30NmmgjY17CSFp0+2eMx5R71Nn
        7bEWGSukDs3emp3Z1R20c6GPaTq5gizbEbhYgDYHNItx4UKUZbjai66gdiiPIpFO
        207jeYvi3jisKgudn2FNUwONEIkyT8qw8RV3N6k7VCY6rYSQEqoWULKPytEpkyVI
        iZK2YrEelSQTYWcD/8RXObrS4iwbv8kQVkDnWdytXX2X4+l3ALlkBmtC5cQbJVWN
        GmWWGIgtfBh7De9dIHMxUoWWbHMHucLqol0qWiBEN03Xztpgqq1v/iaRDX1BbwuJ
        7/+KspPsTaAzQARBgHGEVCmrEpxyAQ0M7Com+elldtbtmO/guHGItgEgMZg88yum
        ZLD8rq+mgfIzdqxpmY3wCIxxoU9M0ryFm2mDH8Xd0ovtzXWPHo2Xyv9RhAxGnO4h
        RlIeHZOzd70NIOG7P5qSCMYyzrdZG90K1BTlVp9QRaRaNFbvWrwHjOHnz6kjUEkm
        OW4huwlWlchH5TGsy0E8E75KUs3u+YQXLLRyOo/yVx/U0dKGrwT8KVCnEd+o8ENo
        XZ6dAH5WOWLFsQueOS2QUI6FveVIEwR9qIiTYwhllKs33TYmOmVdhPvlcWE+RITx
        9Cua9KaeJhyWnqrb/Rf4sn+Q5x1RWV90CLvkyRlwlM/H/WgmTWkQLdSIr61Q65zo
        eJMkaWTiRERnQbjo97lxApfz+f8VYFdOOo7akozx/0u3dVLuTQpj51fhhKwOfzIF
        0cVdZ4cT1SsBN7q17YzmJ9nYGJikRJiBGogi8ukCwn8lohLniMPk7x0gjmZLOQlP
        p0csveY3JrqU8qzzqhVyff1lN674FAlvQQyIKlxwqE+dOnfB4KWE5KlmoE4N6T1n
        KYdYuXpdAXkx4bQiNdpj4A3FR8ZTYnqvpO4V1oLSr9nVCUVqC2wGVtQUmH+Rwu79
        geM9tWE5lAjrDQ0hjSFMguSweG/c75DcvBiPP8l6bVBJocs4a9aUPBlUt/PZtYGq
        pYOfMR0NBJd2bY7SGPnPo12xHeUCr8inhEw1tKFGGPtVfMq/FAfGO1Ay9ZHnm2o6
        rYT9tU7wzlLPwrQfg9dOkC8lteFaUT3RTjbfKm9sGXakq64dMZXmjG+OwayfNGUM
        4SRLmiT9HZkn/QeS2gXnsLC3Go0YKQtKTv1eRm3+hg0TinUQ0x34XD8IDlXcF9R9
        PjXw4yf20OFjrgg2SEqxImEslTg21kY2dynMduMZZwjyCNwXJ7Os6lk5NEbZzSvO
        FUTPAfI3t6DTCR4B39+bFr99xJrQtFvarP4EqkjxbAcb17vC/p9kVSvJQic/Zz99
        /vSmHPcgUkH7txs6hk5LGywU6AoAf5iSior+iet8DUC440IfWdmF89FLd9qCsf4S
        dEnTGZgD6z6leWk2GUwF4TcFDKVc9cM/e/A3C+9/sUXs0xqHNOJR/Dj0s+fjLdID
        iO+/Ie65clHG4xFKeou+FVxAOXc16rUCcbsvvCFAx64js/SuO8Y2uGlh/31n1TWW
        /pAmJfwYEpbLouWd/iy2t37fvsdyM+9YoC8LPmXef/G2FaficeKEmaCDopzl/V3D
        +tBfgnHRCrnz5/J0gDU6m+yrH53dMkG4OVKME8fIMeOe8STKGtKpm+NipWjqZG6h
        T0SHdyaW5gmZEjs1oXv6x4yKEylaNS3wv0bF2NdzW9uCHh9FDTKM46pOkD6PyNl/
        7kWSsvx6biV4IZIRW/BnaVp+z68HGwZwkyr/6REZyOtngNQmcGbdFIgsrRN438Pf
        S+huY8ofOeDM3Mom/vkypPZaKCO3PZ7toYJPaRcI7oHmxgpNbEFkIUd1BrBevAct
        kn0Yy0ykZJq46ppqUbn19IIJcQeu6TbFLKiuHVVLq/0T4GtFj+LXJCX92w/RQyRH
        G8+CpfjZNC4xa61V23VnQiDSoKEmyV+/8BJI6KV48PWH44aLYLoIQYoskV/+ljsn
        3jU24LUGhjOCFXLjvj6yXTYrEc8K38s48JXSqjFHTTcj35j9T2wwB60dtDvZBarR
        BGgo/oFv2q5R4Z9VcQ2bhre2tMFcVFLE7vKj3yPMEpd+cKNooNfZFHfOpVfEM8YB
        muypisXqpJpTysDZYmPS45dC9PHsEwfuihizSIhIwxaQHJ/CSnPjynzL6ZxCIUYz
        qNi2lLyoNyCe33owGuUxS/6q86LiUYOIDto9mhsciC6kYvnBtPiTlirJc/mzg65i
        x/x7u6vA2nGMHw==
        -----END AGE ENCRYPTED FILE-----
        EOT
        ))

        [[ -n $SERVICE_ACCOUNT_EMAIL || -n $SERVICE_ACCOUNT_KEY || -n $SOPS_AGE_KEY_FILE ]] || exit 1

        JSON_HEADER="$(printf %s '{"alg":"RS256","typ":"JWT"}' | openssl base64 -e)"

        JSON_CLAIM="$(
        cat <<eos | openssl base64 -e
        {
        "iss": "$SERVICE_ACCOUNT_EMAIL",
        "scope": "https://www.googleapis.com/auth/cloud-platform",
        "aud": "https://oauth2.googleapis.com/token",
        "exp": "$(($(date +%s)+3600))",
        "iat": "$(date +%s)"
        }
        eos
        )"

        HEAD_AND_CLAIM="$(
          printf %s.%s $JSON_HEADER $JSON_CLAIM |
          perl -pe 's![=\n]!!;' -pe 'tr!/+!_-!'
        )"

        SIGNATURE=$(
          printf %s $HEAD_AND_CLAIM |
          openssl dgst -sha256 -sign <(<<< $SERVICE_ACCOUNT_KEY) |
          openssl base64 -e |
          perl -pe 's![=\n]!!;' -pe 'tr!/+!_-!'
        )

        # Request access token from Google OAuth 2.0 Server
        RESPONSE="$(
          curl --silent \
            -H "Content-type: application/x-www-form-urlencoded" \
            -X POST "https://oauth2.googleapis.com/token" \
            -d "grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=$HEAD_AND_CLAIM.$SIGNATURE"
        )"

        # Get token
        TOKEN=$(printf %s $RESPONSE | perl -ne 'print $1 if m/^\s*"access_token": "(.*)",$/')

        if [[ -z $TOKEN ]]; then
          printf '\n---\nresponse: %s\n---\n' $RESPONSE
          exit 1
        fi

        # Download the object from Google Cloud
        KEY_PROBABLY="$(
          curl --silent \
          -X GET \
          -H "Authorization: Bearer $TOKEN" \
          "https://storage.googleapis.com/storage/v1/b/$BUCKET_NAME/o/$KEY_FILENAME?alt=media"
        )"

        if [[ ! $KEY_PROBABLY =~ '^age-encryption.org/v1' ]]; then
          printf 'Failed to download key for some reason:\n  %s\n' $KEY_PROBABLY
          exit 1
        fi
        printf 'Decrypting dotfiles key to %s...\n' $SOPS_AGE_KEY_FILE
        mkdir -pv "$( dirname $SOPS_AGE_KEY_FILE )"
        age -d  <(printf %s $KEY_PROBABLY) >> $SOPS_AGE_KEY_FILE || exit 1
        chmod 400 $SOPS_AGE_KEY_FILE

        fi


    - description: Decrypt encrypted directories & files
      command: |-
        if [[ ! -f $SOPS_AGE_KEY_FILE ]]; then
          printf "$UNDERLINE$(tput setaf 1)ERROR:$(tput sgr0) "
          printf "Encryption key (Age) not available.\n"
          exit 1
        fi

        decrypt_script='
          OLD_DIR="{//}"
          OLD_FILE="{/}"
          NEW_DIR="${OLD_DIR//[_.]enc}"
          NEW_FILE="${OLD_FILE//[_.]enc}"
          OLD_PATH="${OLD_DIR}/${OLD_FILE}"
          NEW_PATH="${NEW_DIR}/${NEW_FILE}"

          if [[ ! -r $NEW_PATH ]] || [[ ! -s $NEW_PATH ]]; then
            printf " - decrypting %s\n" $OLD_PATH
            mkdir -p $NEW_DIR
            sops --decrypt $OLD_PATH > $NEW_PATH || {
              print -P "   %F{001} Problem decrypting %s\n" $OLD_PATH
            }
          else
            if [[ -n "$( diff -q $NEW_PATH <(sops -d $OLD_PATH) )" ]]; then
              printf " - encrypting %s\n" $NEW_PATH
              sops --input-type binary --output-type json --encrypt $NEW_PATH > $OLD_PATH || {
                print -P "   %F{001} Problem encrypting %s\n" $NEW_PATH
              }
            fi
          fi
        '

        # Decrypt files in folders
        for dir in $(fd -HI -t d '[\._]enc'); do
          fd -HI -t f . $dir -x zsh -c $decrypt_script
        done
        # Decrypt individual files
        fd -HI -t f '[\._]enc' -x zsh -c $decrypt_script

    - description: Run individual bundles through dotbot
      command: |-
        set +e # if any steps fail, then the remaining steps should still happen

        # Header to add to each config file below (it's easier than
        # copying it into each file)
        local DEFAULTS='
        - defaults:
            link:
                relink: true
                ignore-missing: true
                force: true
                create: true
                quiet: true
            shell:
                stdin: false
                stdout: true
                stderr: true
                quiet: true
        '
        for file in $(find bundles -name 'install.conf.yaml' | sort); do
          shortname="${file%%/install.conf.yaml}"
          shortname="${shortname##bundles/}"
          print -P "\n\n%F{006}───── ${(U)shortname} ─────%f"
          ${=DOTBOT_CMD} -d $(dirname $file) -c <(cat =(<<<$DEFAULTS) $file) "$@"
        done

- pipx:
    file: config/dotfiles/pipx.txt
    stdout: false
    stderr: true

- brew:
    - "as-tree" # Print a list of paths as a tree of paths
    - "asdf" # Extendable version manager with support for Ruby, Node.js, Erlang & more
    - "aspell" # Spell checker with better logic than ispell
    - "awscli" # Official Amazon AWS command-line interface
    - "direnv" # Load/unload environment variables based on $PWD
    - "exa" # Modern replacement for 'ls'
    - "fzf" # Command-line fuzzy finder written in Go
    - "git-annex" # Manage files with git without checking in file contents
    - "go" # Open source programming language to build simple/reliable/efficient software
    - "hyperfine" # Command-line benchmarking tool
    - "jq" # Lightweight and flexible command-line JSON processor
    - "less" # Pager program similar to more
    - "minisign" # Sign files & verify signatures. Works with signify in OpenBSD
    - "node" # Platform built on V8 to build network applications
    - "pandoc" # Swiss-army knife of markup format conversion
    - "prettyping" # Wrapper to colorize and simplify ping's output
    - "pv" # Monitor data's progress through a pipe
    - "qmk/qmk/qmk" # Quantum Mechanical Keyboard (QMK) Firmware
    - "rclone" # Rsync for cloud storage
    - "restic" # Fast, efficient and secure backup program
    - "rubberband" # Audio time stretcher tool and library
    - "showkey" # Simple keystroke visualizer
    - "sox" # SOund eXchange: universal sound sample translator
    - "tmux --HEAD" # Terminal multiplexer
    - "trash" # CLI tool that moves files or folder to the trash
    - "viu" # Simple terminal image viewer written in Rust
    - "vivid" # Generator for LS_COLORS with support for multiple color themes
    - "youtube-dl" # Download YouTube videos from the command-line
    - "yq" # Process YAML documents from the CLI
    - "zstd" # Zstandard is a real-time compression algorithm


- cask:
    - "1password" # Password manager that keeps all passwords secure behind one password
    - "adobe-creative-cloud" # Collection of apps and services for photography, design, video, web, and UX
    - "audio-hijack" # Records audio from any application
    - "calendar-366" # Menu bar calendar for events and reminders
    - "cyberduck" # Server and cloud storage browser
    - "devbook" # Search engine for developers
    - "discord" # Voice and text chat software
    - "docker" # App to build and share containerized applications and microservices
    - "farrago" # Audio playback
    - "fission" # Audio editor
    - "flux" # Screen color temperature controller
    - "google-chrome" # Web browser
    - "google-drive" # Client for the Google Drive storage service
    - "google-trends"
    - "itsycal" # Menu bar calendar
    - "logitech-camera-settings" # Provides access to camera controls
    - "loopback" # Cable-free audio router
    - "obs" # Open-source software for live streaming and screen recording
    - "pandora" # Desktop client for the Pandora web radio service
    - "postman" # Collaboration platform for API development
    - "raycast" # Control your tools with a few keystrokes
    - "sequel-pro" # MySQL/MariaDB database management platform
    - "signal" # Instant messaging application focusing on security
    - "skitch" # Screen capture tool with mark up and sharing features
    - "slack" # Team communication and collaboration software
    - "spectacle" # Move and resize windows with ease
    - "steam" # Video game digital distribution service
    - "vlc" # Multimedia player
    - "zoom" # Video communication and virtual meeting platform
    - "zsa-wally" # Flash tool for ZSA keyboards
