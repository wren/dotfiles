#!/usr/bin/env zsh
set -e
set -u
set -o pipefail
# set -x

setopt LOCAL_OPTIONS
unsetopt SH_WORD_SPLIT
SUFFIX='.tar.zst'

usage_small() {
  echo "pretty-packer - packs and unpacks $SUFFIX with progress bar"
}

usage() {
  echo "pretty-packer"
  echo "packs and unpacks $SUFFIX files/dirs with progress bar"
  echo
  echo "Usage:"
  echo "  pack     - pack the thing"
  echo "  unpack   - unpack the thing"
}

pack() {
  local original args filename timestamp

  original=$1
  args=$(get_args)
  filename=$original

  # args we always use
  # args+=( --rsyncable )

  if [[ -d $original ]]; then
    # directories need tar first
    # get rid of trailing slash if present
    filename="${filename%/}.tar"
    tar -cf $filename $original
    args+=( --rm )
  fi

  # get timestamp of file before we compress it
  # zstd is supposed to do this, but doesn't for some reason
  timestamp=$(get_timestamp $filename)
  zstdmt $=args $filename

  # update timestamp
  update_timestamp "${filename}.zst" $timestamp
}

pack_loop() {
  local filename
  local timestamp

  printf '%s\n' ${@[@]} |\
  while read original; do
    pack $original
    [[ -n $keep ]] || remove $original
  done
}

unpack_loop() {
  printf '%s\n' ${@[@]} |\
  while read original; do
    unpack $original
    [[ -n $keep ]] || remove $original
  done
}

cmd_exists() {
  command -v $1 >/dev/null
}

get_args() {
  local args
  args=()

  # build args
  if [[ -n $level ]]; then
    args=( $level )

    if (( ${level:-0} < -19 )); then
      args=( $args --ultra )
    fi
  fi

  printf '%s ' $args
}

remove() {
  local file
  file=$1

  if cmd_exists trash; then
    trash $file &
  else
    rm -rdi $file &
  fi
}

# Gets the most recent modified date of any file in tar
get_timestamp() {
  local filename

  filename=$1

  case $filename in
    *.tar )
      # get most recent modified date in archive
      tar tvf $filename \
      | grep -oP '\d{4}([- :]\d\d){4}(?=.*[^/]$)' | tr -d -- '- :' \
      | sort -r \
      | head -1
      ;;

    *.zst )
      # get modified date of original file
      date -r ${filename%.zst} '+%Y%m%d%H%M'
      ;;


    * )
      # get modified date of the file
      date -r $filename '+%Y%m%d%H%M'
      ;;
  esac
}

update_timestamp() {
  local filename timestamp

  filename=$1
  timestamp=$2

  touch -t $timestamp $filename
}

unpack() {
  local filename

  filename=$1

  # decompress first
  unzstd $filename
  filename=${filename%.zst}

  if [[ $filename =~ \.tar$ ]]; then
    # was a directory, needs untar
    tar xaf $filename && rm $filename
  fi
}

main() {
  # Parse options first
  zparseopts -D -E -F -- \
    k=keep \
    -keep=keep \
    {0..22}=level

  if [[ -z $@ ]]; then
    usage
    exit 1
  fi

  # Get the requested command
  local cmd=$1
  shift

  case "$cmd" in
    usage )
      usage
      ;;

    pack )
      pack_loop $@
      ;;

    unpack )
      unpack_loop $@
      ;;

    * )
      echo "pretty-packer: '$cmd' isn't a valid command"
      usage
      exit 1
      ;;
  esac
}

main $@
