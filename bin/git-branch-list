#!/usr/bin/env zsh

# colors
color_local_branch=3
color_remote_branch=14

zparseopts -D a=all

format=(
  'branch_name=%(refname:short)'
  'is_head=%(HEAD)'
  'branch_type=%(refname:rstrip=-2)'
  'date_committed=%(committerdate:relative)'
  'subject=%(subject)'
  'author=%(authorname)'
  'push=%(push)'
  'tracking=%(upstream:track,nobracket)'
)

search_pattern=(
  "refs/heads/*${2}*/*${1}*"
)
# Show all branches (include remote)?
[[ -n $all ]] && search_pattern+=("refs/remotes/*${2}*/*${1}*")


make_report() {
  git for-each-ref --shell --format="${(j: && :)format}" --sort='refname:rstrip=2' --sort='refname:rstrip=-2' $search_pattern | \
  while read git_info; do
    git_info=${git_info//\'\'\'/\'\'}
    eval $git_info

    branch_type=${branch_type#refs/}
    branch_name=${branch_name#(heads|remotes)/}
    bullet='·'

    # is this a remote?
    output_color=$color_local_branch
    if [[ $branch_type = 'remotes' ]]; then
      output_color=$color_remote_branch
      branch_status=${(M)branch_name#*/}
    else
      branch_status="$(git config branch.${branch_name}.status)"
      [[ -z $branch_status ]] && branch_status=' '
    fi

    branch_name=${branch_name#$branch_status}
    branch_color_str="%F{$output_color}"
    if [[ -z $push && $branch_type = 'heads' ]]; then
      branch_name+=' %F{#DB615E}%f'
    else
      tracking=${tracking//behind /"%F{red}"}
      tracking=${tracking//ahead /"%F{112}"}
      tracking=${tracking//, }
      tracking=${tracking//gone/%F{#4CA0BC}%f}
    fi

    # special handling for current branch
    if [[ $is_head = \* ]]; then
      bullet='▶'
      branch_color_str="%K{$output_color}%F{16}"
      tracking=''
    fi

    start_str=" ${indent}${bullet} "
    if [[ $branch_status = ' ' ]]; then
      start_str=''
    fi

    # output the thing
    short_subject="$(echo ${subject} | head -c $(( $COLUMNS - 120 )) )"
    print -P "${branch_type}|${branch_status}|${start_str}${branch_color_str} ${branch_name} $tracking|%f%k %F{255}${date_committed}%f|%F{141}${short_subject}%f|%F{247}by ${author}%f"
  done
}

sort_report() {
  make_report "$@" | sort | \
  while read line; do

    line=${line#*|}
    prefix=${(M)line#*|}
    prefix=${prefix%%|}

    # new section
    if [[ $prefix != ' ' && $prefix != $old_prefix ]]; then
      print "\n $prefix"
    fi

    print -P "${line#*|}"

    old_prefix=$prefix
  done
}

if command -v /usr/local/opt/util-linux/bin/column >/dev/null; then
  # preserves empty lines which looks nicer
  column -ts'|' <(sort_report "$@") --table-empty-lines
else
  column -ts'|' <(sort_report "$@")
fi

