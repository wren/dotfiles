[{"url":"http:\/\/docs.python.org\/library\/struct.html","title":"struct","description":null},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.calcsize","title":"struct.calcsize","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.pack","title":"struct.pack","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.pack_into","title":"struct.pack_into","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.Struct","title":"struct.Struct","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.Struct.pack","title":"struct.Struct.pack","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.Struct.pack_into","title":"struct.Struct.pack_into","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.Struct.unpack","title":"struct.Struct.unpack","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.Struct.unpack_from","title":"struct.Struct.unpack_from","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.unpack","title":"struct.unpack","description":""},{"url":"http:\/\/docs.python.org\/library\/struct.html#struct.unpack_from","title":"struct.unpack_from","description":""},{"url":"http:\/\/docs.python.org\/library\/exceptions.html","title":"","description":"6. Built-in Exceptions\u00b6 Exceptions should be class objects.   The exceptions are defined in the module exceptions.  This module never needs to be imported explicitly: the exceptions are provided in the built-in namespace as well as the exceptions module. For class exceptions, in a try statement with an except clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which it is derived).  Two exception classes that are not related via subclassing are never equivalent, even if they have the same name. The built-in exceptions listed below can be generated by the interpreter or built-in functions.  Except where mentioned, they have an &#8220;associated value&#8221; indicating the detailed cause of the error.  This may be a string or a tuple containing several items of information (e.g., an error code and a string explaining the code). The associated value is the second argument to the raise statement.  If the exception class is derived from the standard root class BaseException, the associated value is present as the exception instance&#8217;s args attribute. User code can raise built-in exceptions.  This can be used to test an exception handler or to report an error condition &#8220;just like&#8221; the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error. The built-in exception classes can be sub-classed to define new exceptions; programmers are encouraged to at least derive new exceptions from the Exception class and not BaseException.  More information on defining exceptions is available in the Python Tutorial under User-defined Exceptions. The following exceptions are only used as base classes for other exceptions.   exception BaseException\u00b6 The base class for all built-in exceptions.  It is not meant to be directly inherited by user-defined classes (for that, use Exception).  If str() or unicode() is called on an instance of this class, the representation of the argument(s) to the instance are returned, or the empty string when there were no arguments.  New in version 2.5.   args\u00b6 The tuple of arguments given to the exception constructor.  Some built-in exceptions (like IOError) expect a certain number of arguments and assign a special meaning to the elements of this tuple, while others are usually called only with a single string giving an error message.      exception Exception\u00b6 All built-in, non-system-exiting exceptions are derived from this class.  All user-defined exceptions should also be derived from this class.  Changed in version 2.5: Changed to inherit from BaseException.     exception StandardError\u00b6 The base class for all built-in exceptions except StopIteration, GeneratorExit, KeyboardInterrupt and SystemExit. StandardError itself is derived from Exception.    exception ArithmeticError\u00b6 The base class for those built-in exceptions that are raised for various arithmetic errors: OverflowError, ZeroDivisionError, FloatingPointError.    exception BufferError\u00b6 Raised when a buffer related operation cannot be performed.    exception LookupError\u00b6 The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: IndexError, KeyError.  This can be raised directly by codecs.lookup().    exception EnvironmentError\u00b6 The base class for exceptions that can occur outside the Python system: IOError, OSError.  When exceptions of this type are created with a 2-tuple, the first item is available on the instance&#8217;s errno attribute (it is assumed to be an error number), and the second item is available on the strerror attribute (it is usually the associated error message).  The tuple itself is also available on the args attribute.  New in version 1.5.2. When an EnvironmentError exception is instantiated with a 3-tuple, the first two items are available as above, while the third item is available on the filename attribute.  However, for backwards compatibility, the args attribute contains only a 2-tuple of the first two constructor arguments. The filename attribute is None when this exception is created with other than 3 arguments.  The errno and strerror attributes are also None when the instance was created with other than 2 or 3 arguments. In this last case, args contains the verbatim constructor arguments as a tuple.   The following exceptions are the exceptions that are actually raised.   exception AssertionError\u00b6 Raised when an assert statement fails.     exception AttributeError\u00b6 Raised when an attribute reference (see Attribute references) or assignment fails.  (When an object does not support attribute references or attribute assignments at all, TypeError is raised.)    exception EOFError\u00b6 Raised when one of the built-in functions (input() or raw_input()) hits an end-of-file condition (EOF) without reading any data. (N.B.: the file.read() and file.readline() methods return an empty string when they hit EOF.)    exception FloatingPointError\u00b6 Raised when a floating point operation fails.  This exception is always defined, but can only be raised when Python is configured with the --with-fpectl option, or the WANT_SIGFPE_HANDLER symbol is defined in the pyconfig.h file.    exception GeneratorExit\u00b6 Raise when a generator&#8216;s close() method is called.  It directly inherits from BaseException instead of StandardError since it is technically not an error.  New in version 2.5.  Changed in version 2.6: Changed to inherit from BaseException.     exception IOError\u00b6 Raised when an I\/O operation (such as a print statement, the built-in open() function or a method of a file object) fails for an I\/O-related reason, e.g., &#8220;file not found&#8221; or &#8220;disk full&#8221;. This class is derived from EnvironmentError.  See the discussion above for more information on exception instance attributes.  Changed in version 2.6: Changed socket.error to use this as a base class.     exception ImportError\u00b6 Raised when an import statement fails to find the module definition or when a from ... import fails to find a name that is to be imported.    exception IndexError\u00b6 Raised when a sequence subscript is out of range.  (Slice indices are silently truncated to fall in the allowed range; if an index is not a plain integer, TypeError is raised.)    exception KeyError\u00b6 Raised when a mapping (dictionary) key is not found in the set of existing keys.    exception KeyboardInterrupt\u00b6 Raised when the user hits the interrupt key (normally Control-C or Delete).  During execution, a check for interrupts is made regularly. Interrupts typed when a built-in function input() or raw_input() is waiting for input also raise this exception. The exception inherits from BaseException so as to not be accidentally caught by code that catches Exception and thus prevent the interpreter from exiting.  Changed in version 2.5: Changed to inherit from BaseException.     exception MemoryError\u00b6 Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects).  The associated value is a string indicating what kind of (internal) operation ran out of memory. Note that because of the underlying memory management architecture (C&#8217;s malloc() function), the interpreter may not always be able to completely recover from this situation; it nevertheless raises an exception so that a stack traceback can be printed, in case a run-away program was the cause.    exception NameError\u00b6 Raised when a local or global name is not found.  This applies only to unqualified names.  The associated value is an error message that includes the name that could not be found.    exception NotImplementedError\u00b6 This exception is derived from RuntimeError.  In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method.  New in version 1.5.2.     exception OSError\u00b6 This exception is derived from EnvironmentError.  It is raised when a function returns a system-related error (not for illegal argument types or other incidental errors).  The errno attribute is a numeric error code from errno, and the strerror attribute is the corresponding string, as would be printed by the C function perror(). See the module errno, which contains names for the error codes defined by the underlying operating system. For exceptions that involve a file system path (such as chdir() or unlink()), the exception instance will contain a third attribute, filename, which is the file name passed to the function.  New in version 1.5.2.     exception OverflowError\u00b6 Raised when the result of an arithmetic operation is too large to be represented.  This cannot occur for long integers (which would rather raise MemoryError than give up) and for most operations with plain integers, which return a long integer instead.  Because of the lack of standardization of floating point exception handling in C, most floating point operations also aren&#8217;t checked.    exception ReferenceError\u00b6 This exception is raised when a weak reference proxy, created by the weakref.proxy() function, is used to access an attribute of the referent after it has been garbage collected. For more information on weak references, see the weakref module.  New in version 2.2: Previously known as the weakref.ReferenceError exception.     exception RuntimeError\u00b6 Raised when an error is detected that doesn&#8217;t fall in any of the other categories.  The associated value is a string indicating what precisely went wrong.  (This exception is mostly a relic from a previous version of the interpreter; it is not used very much any more.)    exception StopIteration\u00b6 Raised by an iterator&#8216;s next() method to signal that there are no further values.  This is derived from Exception rather than StandardError, since this is not considered an error in its normal application.  New in version 2.2.     exception SyntaxError\u00b6 Raised when the parser encounters a syntax error.  This may occur in an import statement, in an exec statement, in a call to the built-in function eval() or input(), or when reading the initial script or standard input (also interactively). Instances of this class have attributes filename, lineno, offset and text for easier access to the details.  str() of the exception instance returns only the message.     exception IndentationError\u00b6 Base class for syntax errors related to incorrect indentation.  This is a subclass of SyntaxError.    exception TabError\u00b6 Raised when indentation contains an inconsistent use of tabs and spaces. This is a subclass of IndentationError.    exception SystemError\u00b6 Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope. The associated value is a string indicating what went wrong (in low-level terms). You should report this to the author or maintainer of your Python interpreter. Be sure to report the version of the Python interpreter (sys.version; it is also printed at the start of an interactive Python session), the exact error message (the exception&#8217;s associated value) and if possible the source of the program that triggered the error.     exception SystemExit\u00b6 This exception is raised by the sys.exit() function.  When it is not handled, the Python interpreter exits; no stack traceback is printed.  If the associated value is a plain integer, it specifies the system exit status (passed to C&#8217;s exit() function); if it is None, the exit status is zero; if it has another type (such as a string), the object&#8217;s value is printed and the exit status is one. Instances have an attribute code which is set to the proposed exit status or error message (defaulting to None). Also, this exception derives directly from BaseException and not StandardError, since it is not technically an error. A call to sys.exit() is translated into an exception so that clean-up handlers (finally clauses of try statements) can be executed, and so that a debugger can execute a script without running the risk of losing control.  The os._exit() function can be used if it is absolutely positively necessary to exit immediately (for example, in the child process after a call to fork()). The exception inherits from BaseException instead of StandardError or Exception so that it is not accidentally caught by code that catches Exception.  This allows the exception to properly propagate up and cause the interpreter to exit.  Changed in version 2.5: Changed to inherit from BaseException.     exception TypeError\u00b6 Raised when an operation or function is applied to an object of inappropriate type.  The associated value is a string giving details about the type mismatch.    exception UnboundLocalError\u00b6 Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.  This is a subclass of NameError.  New in version 2.0.     exception UnicodeError\u00b6 Raised when a Unicode-related encoding or decoding error occurs.  It is a subclass of ValueError.  New in version 2.0.     exception UnicodeEncodeError\u00b6 Raised when a Unicode-related error occurs during encoding.  It is a subclass of UnicodeError.  New in version 2.3.     exception UnicodeDecodeError\u00b6 Raised when a Unicode-related error occurs during decoding.  It is a subclass of UnicodeError.  New in version 2.3.     exception UnicodeTranslateError\u00b6 Raised when a Unicode-related error occurs during translating.  It is a subclass of UnicodeError.  New in version 2.3.     exception ValueError\u00b6 Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.    exception VMSError\u00b6 Only available on VMS.  Raised when a VMS-specific error occurs.    exception WindowsError\u00b6 Raised when a Windows-specific error occurs or when the error number does not correspond to an errno value.  The winerror and strerror values are created from the return values of the GetLastError() and FormatMessage() functions from the Windows Platform API. The errno value maps the winerror value to corresponding errno.h values. This is a subclass of OSError.  New in version 2.0.  Changed in version 2.5: Previous versions put the GetLastError() codes into errno.     exception ZeroDivisionError\u00b6 Raised when the second argument of a division or modulo operation is zero.  The associated value is a string indicating the type of the operands and the operation.  The following exceptions are used as warning categories; see the warnings module for more information.   exception Warning\u00b6 Base class for warning categories.    exception UserWarning\u00b6 Base class for warnings generated by user code.    exception DeprecationWarning\u00b6 Base class for warnings about deprecated features.    exception PendingDeprecationWarning\u00b6 Base class for warnings about features which will be deprecated in the future.    exception SyntaxWarning\u00b6 Base class for warnings about dubious syntax    exception RuntimeWarning\u00b6 Base class for warnings about dubious runtime behavior.    exception FutureWarning\u00b6 Base class for warnings about constructs that will change semantically in the future.    exception ImportWarning\u00b6 Base class for warnings about probable mistakes in module imports.  New in version 2.5.     exception UnicodeWarning\u00b6 Base class for warnings related to Unicode.  New in version 2.5.    6.1. Exception hierarchy\u00b6 The class hierarchy for built-in exceptions is: BaseException  +-- SystemExit  +-- KeyboardInterrupt  +-- GeneratorExit  +-- Exception       +-- StopIteration       +-- StandardError       |    +-- BufferError       |    +-- ArithmeticError       |    |    +-- FloatingPointError       |    |    +-- OverflowError       |    |    +-- ZeroDivisionError       |    +-- AssertionError       |    +-- AttributeError       |    +-- EnvironmentError       |    |    +-- IOError       |    |    +-- OSError       |    |         +-- WindowsError (Windows)       |    |         +-- VMSError (VMS)       |    +-- EOFError       |    +-- ImportError       |    +-- LookupError       |    |    +-- IndexError       |    |    +-- KeyError       |    +-- MemoryError       |    +-- NameError       |    |    +-- UnboundLocalError       |    +-- ReferenceError       |    +-- RuntimeError       |    |    +-- NotImplementedError       |    +-- SyntaxError       |    |    +-- IndentationError       |    |         +-- TabError       |    +-- SystemError       |    +-- TypeError       |    +-- ValueError       |         +-- UnicodeError       |              +-- UnicodeDecodeError       |              +-- UnicodeEncodeError       |              +-- UnicodeTranslateError       +-- Warning            +-- DeprecationWarning            +-- PendingDeprecationWarning            +-- RuntimeWarning            +-- SyntaxWarning            +-- UserWarning            +-- FutureWarning \t   +-- ImportWarning \t   +-- UnicodeWarning \t   +-- BytesWarning"},{"url":"http:\/\/docs.python.org\/library\/string.html","title":"string","description":"7.1. string &#8212; Common string operations\u00b6 Source code: Lib\/string.py  The string module contains a number of useful constants and classes, as well as some deprecated legacy functions that are also available as methods on strings. In addition, Python&#8217;s built-in string classes support the sequence type methods described in the Sequence Types &#8212; str, unicode, list, tuple, bytearray, buffer, xrange section, and also the string-specific methods described in the String Methods section. To output formatted strings use template strings or the  operator described in the String Formatting Operations section. Also, see the re module for string functions based on regular expressions.  7.1.1. String constants\u00b6 The constants defined in this module are:   string.ascii_letters\u00b6 The concatenation of the ascii_lowercase and ascii_uppercase constants described below.  This value is not locale-dependent.    string.ascii_lowercase\u00b6 The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.  This value is not locale-dependent and will not change.    string.ascii_uppercase\u00b6 The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.  This value is not locale-dependent and will not change.    string.digits\u00b6 The string '0123456789'.    string.hexdigits\u00b6 The string '0123456789abcdefABCDEF'.    string.letters\u00b6 The concatenation of the strings lowercase and uppercase described below.  The specific value is locale-dependent, and will be updated when locale.setlocale() is called.    string.lowercase\u00b6 A string containing all the characters that are considered lowercase letters. On most systems this is the string 'abcdefghijklmnopqrstuvwxyz'.  The specific value is locale-dependent, and will be updated when locale.setlocale() is called.    string.octdigits\u00b6 The string '01234567'.    string.punctuation\u00b6 String of ASCII characters which are considered punctuation characters in the C locale.    string.printable\u00b6 String of characters which are considered printable.  This is a combination of digits, letters, punctuation, and whitespace.    string.uppercase\u00b6 A string containing all the characters that are considered uppercase letters. On most systems this is the string 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.  The specific value is locale-dependent, and will be updated when locale.setlocale() is called.    string.whitespace\u00b6 A string containing all characters that are considered whitespace. On most systems this includes the characters space, tab, linefeed, return, formfeed, and vertical tab.    7.1.2. String Formatting\u00b6  New in version 2.6. The built-in str and unicode classes provide the ability to do complex variable substitutions and value formatting via the str.format() method described in PEP 3101.  The Formatter class in the string module allows you to create and customize your own string formatting behaviors using the same implementation as the built-in format() method.   class string.Formatter\u00b6 The Formatter class has the following public methods:   format(format_string, *args, **kwargs)\u00b6 format() is the primary API method.  It takes a format template string, and an arbitrary set of positional and keyword argument. format() is just a wrapper that calls vformat().    vformat(format_string, args, kwargs)\u00b6 This function does the actual work of formatting.  It is exposed as a separate function for cases where you want to pass in a predefined dictionary of arguments, rather than unpacking and repacking the dictionary as individual arguments using the *args and **kwds syntax.  vformat() does the work of breaking up the format template string into character data and replacement fields.  It calls the various methods described below.  In addition, the Formatter defines a number of methods that are intended to be replaced by subclasses:   parse(format_string)\u00b6 Loop over the format_string and return an iterable of tuples (literal_text, field_name, format_spec, conversion).  This is used by vformat() to break the string into either literal text, or replacement fields. The values in the tuple conceptually represent a span of literal text followed by a single replacement field.  If there is no literal text (which can happen if two replacement fields occur consecutively), then literal_text will be a zero-length string.  If there is no replacement field, then the values of field_name, format_spec and conversion will be None.     get_field(field_name, args, kwargs)\u00b6 Given field_name as returned by parse() (see above), convert it to an object to be formatted.  Returns a tuple (obj, used_key).  The default version takes strings of the form defined in PEP 3101, such as &#8220;0[name]&#8221; or &#8220;label.title&#8221;.  args and kwargs are as passed in to vformat().  The return value used_key has the same meaning as the key parameter to get_value().    get_value(key, args, kwargs)\u00b6 Retrieve a given field value.  The key argument will be either an integer or a string.  If it is an integer, it represents the index of the positional argument in args; if it is a string, then it represents a named argument in kwargs. The args parameter is set to the list of positional arguments to vformat(), and the kwargs parameter is set to the dictionary of keyword arguments. For compound field names, these functions are only called for the first component of the field name; Subsequent components are handled through normal attribute and indexing operations. So for example, the field expression &#8216;0.name&#8217; would cause get_value() to be called with a key argument of 0.  The name attribute will be looked up after get_value() returns by calling the built-in getattr() function. If the index or keyword refers to an item that does not exist, then an IndexError or KeyError should be raised.     check_unused_args(used_args, args, kwargs)\u00b6 Implement checking for unused arguments if desired.  The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the args and kwargs that was passed to vformat.  The set of unused args can be calculated from these parameters.  check_unused_args() is assumed to raise an exception if the check fails.    format_field(value, format_spec)\u00b6 format_field() simply calls the global format() built-in.  The method is provided so that subclasses can override it.    convert_field(value, conversion)\u00b6 Converts the value (returned by get_field()) given a conversion type (as in the tuple returned by the parse() method).  The default version understands &#8216;r&#8217; (repr) and &#8216;s&#8217; (str) conversion types.      7.1.3. Format String Syntax\u00b6 The str.format() method and the Formatter class share the same syntax for format strings (although in the case of Formatter, subclasses can define their own format string syntax). Format strings contain &#8220;replacement fields&#8221; surrounded by curly braces {}. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output.  If you need to include a brace character in the literal text, it can be escaped by doubling: {{ and }}. The grammar for a replacement field is as follows:   replacement_field ::=  \"{\" [field_name] [\"!\" conversion] [\":\" format_spec] \"}\" field_name        ::=  arg_name (\".\" attribute_name | \"[\" element_index \"]\")* arg_name          ::=  [identifier | integer] attribute_name    ::=  identifier element_index     ::=  integer | index_string index_string      ::=  <any source character except \"]\"> + conversion        ::=  \"r\" | \"s\" format_spec       ::=  <described in the next section>   In less formal terms, the replacement field can start with a field_name that specifies the object whose value is to be formatted and inserted into the output instead of the replacement field. The field_name is optionally followed by a  conversion field, which is preceded by an exclamation point '!', and a format_spec, which is preceded by a colon ':'.  These specify a non-default format for the replacement value. See also the Format Specification Mini-Language section. The field_name itself begins with an arg_name that is either a number or a keyword.  If it&#8217;s a number, it refers to a positional argument, and if it&#8217;s a keyword, it refers to a named keyword argument.  If the numerical arg_names in a format string are 0, 1, 2, ... in sequence, they can all be omitted (not just some) and the numbers 0, 1, 2, ... will be automatically inserted in that order. Because arg_name is not quote-delimited, it is not possible to specify arbitrary dictionary keys (e.g., the strings '10' or ':-]') within a format string. The arg_name can be followed by any number of index or attribute expressions. An expression of the form '.name' selects the named attribute using getattr(), while an expression of the form '[index]' does an index lookup using __getitem__().  Changed in version 2.7: The positional argument specifiers can be omitted, so '{} {}' is equivalent to '{0} {1}'. Some simple format string examples: \"First, thou shalt count to {0}\" # References first positional argument \"Bring me a {}\"                  # Implicitly references the first positional argument \"From {} to {}\"                  # Same as \"From {0} to {1}\" \"My quest is {name}\"             # References keyword argument &#39;name&#39; \"Weight in tons {0.weight}\"      # &#39;weight&#39; attribute of first positional arg \"Units destroyed: {players[0]}\"  # First element of keyword argument &#39;players&#39;.   The conversion field causes a type coercion before formatting.  Normally, the job of formatting a value is done by the __format__() method of the value itself.  However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting.  By converting the value to a string before calling __format__(), the normal formatting logic is bypassed. Two conversion flags are currently supported: '!s' which calls str() on the value, and '!r' which calls repr(). Some examples: \"Harold&#39;s a clever {0!s}\"        # Calls str() on the argument first \"Bring out the holy {name!r}\"    # Calls repr() on the argument first   The format_spec field contains a specification of how the value should be presented, including such details as field width, alignment, padding, decimal precision and so on.  Each value type can define its own &#8220;formatting mini-language&#8221; or interpretation of the format_spec. Most built-in types support a common formatting mini-language, which is described in the next section. A format_spec field can also include nested replacement fields within it. These nested replacement fields can contain only a field name; conversion flags and format specifications are not allowed.  The replacement fields within the format_spec are substituted before the format_spec string is interpreted. This allows the formatting of a value to be dynamically specified. See the Format examples section for some examples.  7.1.3.1. Format Specification Mini-Language\u00b6 &#8220;Format specifications&#8221; are used within replacement fields contained within a format string to define how individual values are presented (see Format String Syntax).  They can also be passed directly to the built-in format() function.  Each formattable type may define how the format specification is to be interpreted. Most built-in types implement the following options for format specifications, although some of the formatting options are only supported by the numeric types. A general convention is that an empty format string (\"\") produces the same result as if you had called str() on the value. A non-empty format string typically modifies the result. The general form of a standard format specifier is:  format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type] fill        ::=  <a character other than '}'> align       ::=  \"<\" | \">\" | \"=\" | \"^\" sign        ::=  \"+\" | \"-\" | \" \" width       ::=  integer precision   ::=  integer type        ::=  \"b\" | \"c\" | \"d\" | \"e\" | \"E\" | \"f\" | \"F\" | \"g\" | \"G\" | \"n\" | \"o\" | \"s\" | \"x\" | \"X\" | \"%\"  The fill character can be any character other than &#8216;{&#8216; or &#8216;}&#8217;.  The presence of a fill character is signaled by the character following it, which must be one of the alignment options.  If the second character of format_spec is not a valid alignment option, then it is assumed that both the fill character and the alignment option are absent. The meaning of the various alignment options is as follows:        Option Meaning    '<' Forces the field to be left-aligned within the available space (this is the default for most objects).  '>' Forces the field to be right-aligned within the available space (this is the default for numbers).  '=' Forces the padding to be placed after the sign (if any) but before the digits.  This is used for printing fields in the form &#8216;+000000120&#8217;. This alignment option is only valid for numeric types.  '^' Forces the field to be centered within the available space.     Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case. The sign option is only valid for number types, and can be one of the following:        Option Meaning    '+' indicates that a sign should be used for both positive as well as negative numbers.  '-' indicates that a sign should be used only for negative numbers (this is the default behavior).  space indicates that a leading space should be used on positive numbers, and a minus sign on negative numbers.     The '#' option is only valid for integers, and only for binary, octal, or hexadecimal output.  If present, it specifies that the output will be prefixed by '0b', '0o', or '0x', respectively. The ',' option signals the use of a comma for a thousands separator. For a locale aware separator, use the 'n' integer presentation type instead.  Changed in version 2.7: Added the ',' option (see also PEP 378). width is a decimal integer defining the minimum field width.  If not specified, then the field width will be determined by the content. If the width field is preceded by a zero ('0') character, this enables zero-padding.  This is equivalent to an alignment type of '=' and a fill character of '0'. The precision is a decimal number indicating how many digits should be displayed after the decimal point for a floating point value formatted with 'f' and 'F', or before and after the decimal point for a floating point value formatted with 'g' or 'G'.  For non-number types the field indicates the maximum field size - in other words, how many characters will be used from the field content. The precision is not allowed for integer values. Finally, the type determines how the data should be presented. The available string presentation types are:        Type Meaning    's' String format. This is the default type for strings and may be omitted.  None The same as 's'.     The available integer presentation types are:        Type Meaning    'b' Binary format. Outputs the number in base 2.  'c' Character. Converts the integer to the corresponding unicode character before printing.  'd' Decimal Integer. Outputs the number in base 10.  'o' Octal format. Outputs the number in base 8.  'x' Hex format. Outputs the number in base 16, using lower- case letters for the digits above 9.  'X' Hex format. Outputs the number in base 16, using upper- case letters for the digits above 9.  'n' Number. This is the same as 'd', except that it uses the current locale setting to insert the appropriate number separator characters.  None The same as 'd'.     In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except 'n' and None). When doing so, float() is used to convert the integer to a floating point number before formatting. The available presentation types for floating point and decimal values are:        Type Meaning    'e' Exponent notation. Prints the number in scientific notation using the letter &#8216;e&#8217; to indicate the exponent.  'E' Exponent notation. Same as 'e' except it uses an upper case &#8216;E&#8217; as the separator character.  'f' Fixed point. Displays the number as a fixed-point number.  'F' Fixed point. Same as 'f'.  'g' General format.  For a given precision p >= 1, this rounds the number to p significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. The precise rules are as follows: suppose that the result formatted with presentation type 'e' and precision p-1 would have exponent exp.  Then if -4 <= exp < p, the number is formatted with presentation type 'f' and precision p-1-exp.  Otherwise, the number is formatted with presentation type 'e' and precision p-1. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it. Positive and negative infinity, positive and negative zero, and nans, are formatted as inf, -inf, 0, -0 and nan respectively, regardless of the precision. A precision of 0 is treated as equivalent to a precision of 1.   'G' General format. Same as 'g' except switches to 'E' if the number gets too large. The representations of infinity and NaN are uppercased, too.  'n' Number. This is the same as 'g', except that it uses the current locale setting to insert the appropriate number separator characters.  '%' Percentage. Multiplies the number by 100 and displays in fixed ('f') format, followed by a percent sign.  None The same as 'g'.       7.1.3.2. Format examples\u00b6 This section contains examples of the new format syntax and comparison with the old -formatting. In most of the cases the syntax is similar to the old -formatting, with the addition of the {} and with : used instead of . For example, '%03.2f' can be translated to '{:03.2f}'. The new format syntax also supports new and different options, shown in the follow examples. Accessing arguments by position: >>> &#39;{0}, {1}, {2}&#39;.format(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) &#39;a, b, c&#39; >>> &#39;{}, {}, {}&#39;.format(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)  # 2.7+ only &#39;a, b, c&#39; >>> &#39;{2}, {1}, {0}&#39;.format(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) &#39;c, b, a&#39; >>> &#39;{2}, {1}, {0}&#39;.format(*&#39;abc&#39;)      # unpacking argument sequence &#39;c, b, a&#39; >>> &#39;{0}{1}{0}&#39;.format(&#39;abra&#39;, &#39;cad&#39;)   # arguments&#39; indices can be repeated &#39;abracadabra&#39;   Accessing arguments by name: >>> &#39;Coordinates: {latitude}, {longitude}&#39;.format(latitude=&#39;37.24N&#39;, longitude=&#39;-115.81W&#39;) &#39;Coordinates: 37.24N, -115.81W&#39; >>> coord = {&#39;latitude&#39;: &#39;37.24N&#39;, &#39;longitude&#39;: &#39;-115.81W&#39;} >>> &#39;Coordinates: {latitude}, {longitude}&#39;.format(**coord) &#39;Coordinates: 37.24N, -115.81W&#39;   Accessing arguments&#8217; attributes: >>> c = 3-5j >>> (&#39;The complex number {0} is formed from the real part {0.real} &#39; ...  &#39;and the imaginary part {0.imag}.&#39;).format(c) &#39;The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.&#39; >>> class Point(object): ...     def __init__(self, x, y): ...         self.x, self.y = x, y ...     def __str__(self): ...         return &#39;Point({self.x}, {self.y})&#39;.format(self=self) ... >>> str(Point(4, 2)) &#39;Point(4, 2)&#39;   Accessing arguments&#8217; items: >>> coord = (3, 5) >>> &#39;X: {0[0]};  Y: {0[1]}&#39;.format(coord) &#39;X: 3;  Y: 5&#39;   Replacing %s and %r: >>> \"repr() shows quotes: {!r}; str() doesn&#39;t: {!s}\".format(&#39;test1&#39;, &#39;test2&#39;) \"repr() shows quotes: &#39;test1&#39;; str() doesn&#39;t: test2\"   Aligning the text and specifying a width: >>> &#39;{:<30}&#39;.format(&#39;left aligned&#39;) &#39;left aligned                  &#39; >>> &#39;{:>30}&#39;.format(&#39;right aligned&#39;) &#39;                 right aligned&#39; >>> &#39;{:^30}&#39;.format(&#39;centered&#39;) &#39;           centered           &#39; >>> &#39;{:*^30}&#39;.format(&#39;centered&#39;)  # use &#39;*&#39; as a fill char &#39;***********centered***********&#39;   Replacing %+f, %-f, and  f and specifying a sign: >>> &#39;{:+f}; {:+f}&#39;.format(3.14, -3.14)  # show it always &#39;+3.140000; -3.140000&#39; >>> &#39;{: f}; {: f}&#39;.format(3.14, -3.14)  # show a space for positive numbers &#39; 3.140000; -3.140000&#39; >>> &#39;{:-f}; {:-f}&#39;.format(3.14, -3.14)  # show only the minus -- same as &#39;{:f}; {:f}&#39; &#39;3.140000; -3.140000&#39;   Replacing %x and %o and converting the value to different bases: >>> # format also supports binary numbers >>> \"int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}\".format(42) &#39;int: 42;  hex: 2a;  oct: 52;  bin: 101010&#39; >>> # with 0x, 0o, or 0b as prefix: >>> \"int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}\".format(42) &#39;int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010&#39;   Using the comma as a thousands separator: >>> &#39;{:,}&#39;.format(1234567890) &#39;1,234,567,890&#39;   Expressing a percentage: >>> points = 19.5 >>> total = 22 >>> &#39;Correct answers: {:.2%}&#39;.format(points\/total) &#39;Correct answers: 88.64%&#39;   Using type-specific formatting: >>> import datetime >>> d = datetime.datetime(2010, 7, 4, 12, 15, 58) >>> &#39;{:%Y-%m-%d %H:%M:%S}&#39;.format(d) &#39;2010-07-04 12:15:58&#39;   Nesting arguments and more complex examples: >>> for align, text in zip(&#39;<^>&#39;, [&#39;left&#39;, &#39;center&#39;, &#39;right&#39;]): ...     &#39;{0:{fill}{align}16}&#39;.format(text, fill=align, align=align) ... &#39;left<<<<<<<<<<<<&#39; &#39;^^^^^center^^^^^&#39; &#39;>>>>>>>>>>>right&#39; >>> >>> octets = [192, 168, 0, 1] >>> &#39;{:02X}{:02X}{:02X}{:02X}&#39;.format(*octets) &#39;C0A80001&#39; >>> int(_, 16) 3232235521 >>> >>> width = 5 >>> for num in range(5,12): ...     for base in &#39;dXob&#39;: ...         print &#39;{0:{width}{base}}&#39;.format(num, base=base, width=width), ...     print ...     5     5     5   101     6     6     6   110     7     7     7   111     8     8    10  1000     9     9    11  1001    10     A    12  1010    11     B    13  1011      7.1.4. Template strings\u00b6  New in version 2.4. Templates provide simpler string substitutions as described in PEP 292. Instead of the normal -based substitutions, Templates support $-based substitutions, using the following rules:  $$ is an escape; it is replaced with a single $. $identifier names a substitution placeholder matching a mapping key of \"identifier\".  By default, \"identifier\" must spell a Python identifier.  The first non-identifier character after the $ character terminates this placeholder specification. ${identifier} is equivalent to $identifier.  It is required when valid identifier characters follow the placeholder but are not part of the placeholder, such as \"${noun}ification\".  Any other appearance of $ in the string will result in a ValueError being raised. The string module provides a Template class that implements these rules.  The methods of Template are:   class string.Template(template)\u00b6 The constructor takes a single argument which is the template string.   substitute(mapping[, **kws])\u00b6 Performs the template substitution, returning a new string.  mapping is any dictionary-like object with keys that match the placeholders in the template.  Alternatively, you can provide keyword arguments, where the keywords are the placeholders.  When both mapping and kws are given and there are duplicates, the placeholders from kws take precedence.    safe_substitute(mapping[, **kws])\u00b6 Like substitute(), except that if placeholders are missing from mapping and kws, instead of raising a KeyError exception, the original placeholder will appear in the resulting string intact.  Also, unlike with substitute(), any other appearances of the $ will simply return $ instead of raising ValueError. While other exceptions may still occur, this method is called &#8220;safe&#8221; because substitutions always tries to return a usable string instead of raising an exception.  In another sense, safe_substitute() may be anything other than safe, since it will silently ignore malformed templates containing dangling delimiters, unmatched braces, or placeholders that are not valid Python identifiers.   Template instances also provide one public data attribute:   template\u00b6 This is the object passed to the constructor&#8217;s template argument.  In general, you shouldn&#8217;t change it, but read-only access is not enforced.    Here is an example of how to use a Template: >>> from string import Template >>> s = Template('$who likes $what') >>> s.substitute(who='tim', what='kung pao') 'tim likes kung pao' >>> d = dict(who='tim') >>> Template('Give $who $100').substitute(d) Traceback (most recent call last): [...] ValueError: Invalid placeholder in string: line 1, col 10 >>> Template('$who likes $what').substitute(d) Traceback (most recent call last): [...] KeyError: 'what' >>> Template('$who likes $what').safe_substitute(d) 'tim likes $what'  Advanced usage: you can derive subclasses of Template to customize the placeholder syntax, delimiter character, or the entire regular expression used to parse template strings.  To do this, you can override these class attributes:  delimiter &#8211; This is the literal string describing a placeholder introducing delimiter.  The default value is $.  Note that this should not be a regular expression, as the implementation will call re.escape() on this string as needed. idpattern &#8211; This is the regular expression describing the pattern for non-braced placeholders (the braces will be added automatically as appropriate).  The default value is the regular expression [_a-z][_a-z0-9]*.  Alternatively, you can provide the entire regular expression pattern by overriding the class attribute pattern.  If you do this, the value must be a regular expression object with four named capturing groups.  The capturing groups correspond to the rules given above, along with the invalid placeholder rule:  escaped &#8211; This group matches the escape sequence, e.g. $$, in the default pattern. named &#8211; This group matches the unbraced placeholder name; it should not include the delimiter in capturing group. braced &#8211; This group matches the brace enclosed placeholder name; it should not include either the delimiter or braces in the capturing group. invalid &#8211; This group matches any other delimiter pattern (usually a single delimiter), and it should appear last in the regular expression.    7.1.5. String functions\u00b6 The following functions are available to operate on string and Unicode objects. They are not available as string methods.   string.capwords(s[, sep])\u00b6 Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().  If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words.    string.maketrans(from, to)\u00b6 Return a translation table suitable for passing to translate(), that will map each character in from into the character at the same position in to; from and to must have the same length.  Note Don&#8217;t use strings derived from lowercase and uppercase as arguments; in some locales, these don&#8217;t have the same length.  For case conversions, always use str.lower() and str.upper().      7.1.6. Deprecated string functions\u00b6 The following list of functions are also defined as methods of string and Unicode objects; see section String Methods for more information on those.  You should consider these functions as deprecated, although they will not be removed until Python 3.0.  The functions defined in this module are:   string.atof(s)\u00b6  Deprecated since version 2.0: Use the float() built-in function. Convert a string to a floating point number.  The string must have the standard syntax for a floating point literal in Python, optionally preceded by a sign (+ or -).  Note that this behaves identical to the built-in function float() when passed a string.  Note When passing in a string, values for NaN and Infinity may be returned, depending on the underlying C library.  The specific set of strings accepted which cause these values to be returned depends entirely on the C library and is known to vary.      string.atoi(s[, base])\u00b6  Deprecated since version 2.0: Use the int() built-in function. Convert string s to an integer in the given base.  The string must consist of one or more digits, optionally preceded by a sign (+ or -).  The base defaults to 10.  If it is 0, a default base is chosen depending on the leading characters of the string (after stripping the sign): 0x or 0X means 16, 0 means 8, anything else means 10.  If base is 16, a leading 0x or 0X is always accepted, though not required.  This behaves identically to the built-in function int() when passed a string.  (Also note: for a more flexible interpretation of numeric literals, use the built-in function eval().)     string.atol(s[, base])\u00b6  Deprecated since version 2.0: Use the long() built-in function. Convert string s to a long integer in the given base. The string must consist of one or more digits, optionally preceded by a sign (+ or -). The base argument has the same meaning as for atoi().  A trailing l or L is not allowed, except if the base is 0.  Note that when invoked without base or with base set to 10, this behaves identical to the built-in function long() when passed a string.     string.capitalize(word)\u00b6 Return a copy of word with only its first character capitalized.    string.expandtabs(s[, tabsize])\u00b6 Expand tabs in a string replacing them by one or more spaces, depending on the current column and the given tab size.  The column number is reset to zero after each newline occurring in the string. This doesn&#8217;t understand other non-printing characters or escape sequences.  The tab size defaults to 8.    string.find(s, sub[, start[, end]])\u00b6 Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end].  Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices.    string.rfind(s, sub[, start[, end]])\u00b6 Like find() but find the highest index.    string.index(s, sub[, start[, end]])\u00b6 Like find() but raise ValueError when the substring is not found.    string.rindex(s, sub[, start[, end]])\u00b6 Like rfind() but raise ValueError when the substring is not found.    string.count(s, sub[, start[, end]])\u00b6 Return the number of (non-overlapping) occurrences of substring sub in string s[start:end]. Defaults for start and end and interpretation of negative values are the same as for slices.    string.lower(s)\u00b6 Return a copy of s, but with upper case letters converted to lower case.    string.split(s[, sep[, maxsplit]])\u00b6 Return a list of the words of the string s.  If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab,  newline, return, formfeed).  If the second argument sep is present and not None, it specifies a string to be used as the  word separator.  The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string.  The optional third argument maxsplit defaults to 0.  If it is nonzero, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string.     string.rsplit(s[, sep[, maxsplit]])\u00b6 Return a list of the words of the string s, scanning s from the end.  To all intents and purposes, the resulting list of words is the same as returned by split(), except when the optional third argument maxsplit is explicitly specified and nonzero.  When maxsplit is nonzero, at most maxsplit number of splits &#8211; the rightmost ones &#8211; occur, and the remainder of the string is returned as the first element of the list (thus, the list will have at most maxsplit+1 elements).  New in version 2.4.     string.splitfields(s[, sep[, maxsplit]])\u00b6 This function behaves identically to split().  (In the past, split() was only used with one argument, while splitfields() was only used with two arguments.)    string.join(words[, sep])\u00b6 Concatenate a list or tuple of words with intervening occurrences of  sep. The default value for sep is a single space character.  It is always true that string.join(string.split(s, sep), sep) equals s.    string.joinfields(words[, sep])\u00b6 This function behaves identically to join().  (In the past,  join() was only used with one argument, while joinfields() was only used with two arguments.) Note that there is no joinfields() method on string objects; use the join() method instead.    string.lstrip(s[, chars])\u00b6 Return a copy of the string with leading characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the beginning of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.     string.rstrip(s[, chars])\u00b6 Return a copy of the string with trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the end of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.     string.strip(s[, chars])\u00b6 Return a copy of the string with leading and trailing characters removed.  If chars is omitted or None, whitespace characters are removed.  If given and not None, chars must be a string; the characters in the string will be stripped from the both ends of the string this method is called on.  Changed in version 2.2.3: The chars parameter was added.  The chars parameter cannot be passed in earlier 2.2 versions.     string.swapcase(s)\u00b6 Return a copy of s, but with lower case letters converted to upper case and vice versa.    string.translate(s, table[, deletechars])\u00b6 Delete all characters from s that are in deletechars (if  present), and then translate the characters using table, which  must be a 256-character string giving the translation for each character value, indexed by its ordinal.  If table is None, then only the character deletion step is performed.    string.upper(s)\u00b6 Return a copy of s, but with lower case letters converted to upper case.    string.ljust(s, width[, fillchar])\u00b6  string.rjust(s, width[, fillchar])\u00b6  string.center(s, width[, fillchar])\u00b6 These functions respectively left-justify, right-justify and center a string in a field of given width.  They return a string that is at least width characters wide, created by padding the string s with the character fillchar (default is a space) until the given width on the right, left or both sides. The string is never truncated.    string.zfill(s, width)\u00b6 Pad a numeric string on the left with zero digits until the given width is reached.  Strings starting with a sign are handled correctly.    string.replace(str, old, new[, maxreplace])\u00b6 Return a copy of string str with all occurrences of substring old replaced by new.  If the optional argument maxreplace is given, the first maxreplace occurrences are replaced."},{"url":"http:\/\/docs.python.org\/library\/string.html#string.atof","title":"string.atof","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.atoi","title":"string.atoi","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.atol","title":"string.atol","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.capitalize","title":"string.capitalize","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.capwords","title":"string.capwords","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.count","title":"string.count","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.expandtabs","title":"string.expandtabs","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.find","title":"string.find","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter","title":"string.Formatter","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter.check_unused_args","title":"string.Formatter.check_unused_args","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter.convert_field","title":"string.Formatter.convert_field","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter.format","title":"string.Formatter.format","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter.format_field","title":"string.Formatter.format_field","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter.get_field","title":"string.Formatter.get_field","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter.get_value","title":"string.Formatter.get_value","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter.parse","title":"string.Formatter.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Formatter.vformat","title":"string.Formatter.vformat","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.index","title":"string.index","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.join","title":"string.join","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.joinfields","title":"string.joinfields","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.ljust","title":"string.ljust","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.lower","title":"string.lower","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.lstrip","title":"string.lstrip","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.maketrans","title":"string.maketrans","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.replace","title":"string.replace","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.rfind","title":"string.rfind","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.rindex","title":"string.rindex","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.rsplit","title":"string.rsplit","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.rstrip","title":"string.rstrip","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.split","title":"string.split","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.splitfields","title":"string.splitfields","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.strip","title":"string.strip","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.swapcase","title":"string.swapcase","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Template","title":"string.Template","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Template.safe_substitute","title":"string.Template.safe_substitute","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.Template.substitute","title":"string.Template.substitute","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.translate","title":"string.translate","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.upper","title":"string.upper","description":""},{"url":"http:\/\/docs.python.org\/library\/string.html#string.zfill","title":"string.zfill","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html","title":"re","description":"7.2. re &#8212; Regular expression operations\u00b6 This module provides regular expression matching operations similar to those found in Perl. Both patterns and strings to be searched can be Unicode strings as well as 8-bit strings. Regular expressions use the backslash character ('\\') to indicate special forms or to allow special characters to be used without invoking their special meaning.  This collides with Python&#8217;s usage of the same character for the same purpose in string literals; for example, to match a literal backslash, one might have to write '\\\\\\\\' as the pattern string, because the regular expression must be \\\\, and each backslash must be expressed as \\\\ inside a regular Python string literal. The solution is to use Python&#8217;s raw string notation for regular expression patterns; backslashes are not handled in any special way in a string literal prefixed with 'r'.  So r\"\\n\" is a two-character string containing '\\' and 'n', while \"\\n\" is a one-character string containing a newline.  Usually patterns will be expressed in Python code using this raw string notation. It is important to note that most regular expression operations are available as module-level functions and RegexObject methods.  The functions are shortcuts that don&#8217;t require you to compile a regex object first, but miss some fine-tuning parameters.  See also  Mastering Regular Expressions Book on regular expressions by Jeffrey Friedl, published by O&#8217;Reilly.  The second edition of the book no longer covers Python at all, but the first edition covered writing good regular expression patterns in great detail.    7.2.1. Regular Expression Syntax\u00b6 A regular expression (or RE) specifies a set of strings that matches it; the functions in this module let you check if a particular string matches a given regular expression (or if a given regular expression matches a particular string, which comes down to the same thing). Regular expressions can be concatenated to form new regular expressions; if A and B are both regular expressions, then AB is also a regular expression. In general, if a string p matches A and another string q matches B, the string pq will match AB.  This holds unless A or B contain low precedence operations; boundary conditions between A and B; or have numbered group references.  Thus, complex expressions can easily be constructed from simpler primitive expressions like the ones described here.  For details of the theory and implementation of regular expressions, consult the Friedl book referenced above, or almost any textbook about compiler construction. A brief explanation of the format of regular expressions follows.  For further information and a gentler presentation, consult the Regular Expression HOWTO. Regular expressions can contain both special and ordinary characters. Most ordinary characters, like 'A', 'a', or '0', are the simplest regular expressions; they simply match themselves.  You can concatenate ordinary characters, so last matches the string 'last'.  (In the rest of this section, we&#8217;ll write RE&#8217;s in this special style, usually without quotes, and strings to be matched 'in single quotes'.) Some characters, like '|' or '(', are special. Special characters either stand for classes of ordinary characters, or affect how the regular expressions around them are interpreted. Regular expression pattern strings may not contain null bytes, but can specify the null byte using the \\number notation, e.g., '\\x00'. The special characters are:  '.' (Dot.)  In the default mode, this matches any character except a newline.  If the DOTALL flag has been specified, this matches any character including a newline. '^' (Caret.)  Matches the start of the string, and in MULTILINE mode also matches immediately after each newline. '$' Matches the end of the string or just before the newline at the end of the string, and in MULTILINE mode also matches before a newline.  foo matches both &#8216;foo&#8217; and &#8216;foobar&#8217;, while the regular expression foo$ matches only &#8216;foo&#8217;.  More interestingly, searching for foo.$ in 'foo1\\nfoo2\\n' matches &#8216;foo2&#8217; normally, but &#8216;foo1&#8217; in MULTILINE mode; searching for a single $ in 'foo\\n' will find two (empty) matches: one just before the newline, and one at the end of the string. '*' Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible.  ab* will match &#8216;a&#8217;, &#8216;ab&#8217;, or &#8216;a&#8217; followed by any number of &#8216;b&#8217;s. '+' Causes the resulting RE to match 1 or more repetitions of the preceding RE. ab+ will match &#8216;a&#8217; followed by any non-zero number of &#8216;b&#8217;s; it will not match just &#8216;a&#8217;. '?' Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab? will match either &#8216;a&#8217; or &#8216;ab&#8217;. *?, +?, ?? The '*', '+', and '?' qualifiers are all greedy; they match as much text as possible.  Sometimes this behaviour isn&#8217;t desired; if the RE <.*> is matched against '<H1>title<\/H1>', it will match the entire string, and not just '<H1>'.  Adding '?' after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched.  Using .*? in the previous expression will match only '<H1>'. {m} Specifies that exactly m copies of the previous RE should be matched; fewer matches cause the entire RE not to match.  For example, a{6} will match exactly six 'a' characters, but not five. {m,n} Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as many repetitions as possible.  For example, a{3,5} will match from 3 to 5 'a' characters.  Omitting m specifies a lower bound of zero,  and omitting n specifies an infinite upper bound.  As an example, a{4,}b will match aaaab or a thousand 'a' characters followed by a b, but not aaab. The comma may not be omitted or the modifier would be confused with the previously described form. {m,n}? Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as few repetitions as possible.  This is the non-greedy version of the previous qualifier.  For example, on the 6-character string 'aaaaaa', a{3,5} will match 5 'a' characters, while a{3,5}? will only match 3 characters. '\\' Either escapes special characters (permitting you to match characters like '*', '?', and so forth), or signals a special sequence; special sequences are discussed below. If you&#8217;re not using a raw string to express the pattern, remember that Python also uses the backslash as an escape sequence in string literals; if the escape sequence isn&#8217;t recognized by Python&#8217;s parser, the backslash and subsequent character are included in the resulting string.  However, if Python would recognize the resulting sequence, the backslash should be repeated twice.  This is complicated and hard to understand, so it&#8217;s highly recommended that you use raw strings for all but the simplest expressions.  [] Used to indicate a set of characters.  In a set:  Characters can be listed individually, e.g. [amk] will match 'a', 'm', or 'k'. Ranges of characters can be indicated by giving two characters and separating them by a '-', for example [a-z] will match any lowercase ASCII letter, [0-5][0-9] will match all the two-digits numbers from 00 to 59, and [0-9A-Fa-f] will match any hexadecimal digit.  If - is escaped (e.g. [a\\-z]) or if it&#8217;s placed as the first or last character (e.g. [a-]), it will match a literal '-'. Special characters lose their special meaning inside sets.  For example, [(+*)] will match any of the literal characters '(', '+', '*', or ')'. Character classes such as \\w or \\S (defined below) are also accepted inside a set, although the characters they match depends on whether LOCALE or  UNICODE mode is in force. Characters that are not within a range can be matched by complementing the set.  If the first character of the set is '^', all the characters that are not in the set will be matched.  For example, [^5] will match any character except '5', and [^^] will match any character except '^'.  ^ has no special meaning if it&#8217;s not the first character in the set. To match a literal ']' inside a set, precede it with a backslash, or place it at the beginning of the set.  For example, both [()[\\]{}] and []()[{}] will both match a parenthesis.   '|' A|B, where A and B can be arbitrary REs, creates a regular expression that will match either A or B.  An arbitrary number of REs can be separated by the '|' in this way.  This can be used inside groups (see below) as well.  As the target string is scanned, REs separated by '|' are tried from left to right. When one pattern completely matches, that branch is accepted. This means that once A matches, B will not be tested further, even if it would produce a longer overall match.  In other words, the '|' operator is never greedy.  To match a literal '|', use \\|, or enclose it inside a character class, as in [|]. (...) Matches whatever regular expression is inside the parentheses, and indicates the start and end of a group; the contents of a group can be retrieved after a match has been performed, and can be matched later in the string with the \\number special sequence, described below.  To match the literals '(' or ')', use \\( or \\), or enclose them inside a character class: [(] [)]. (?...) This is an extension notation (a '?' following a '(' is not meaningful otherwise).  The first character after the '?' determines what the meaning and further syntax of the construct is. Extensions usually do not create a new group; (?P<name>...) is the only exception to this rule. Following are the currently supported extensions. (?iLmsux) (One or more letters from the set 'i', 'L', 'm', 's', 'u', 'x'.)  The group matches the empty string; the letters set the corresponding flags: re.I (ignore case), re.L (locale dependent), re.M (multi-line), re.S (dot matches all), re.U (Unicode dependent), and re.X (verbose), for the entire regular expression. (The flags are described in Module Contents.) This is useful if you wish to include the flags as part of the regular expression, instead of passing a flag argument to the re.compile() function. Note that the (?x) flag changes how the expression is parsed. It should be used first in the expression string, or after one or more whitespace characters. If there are non-whitespace characters before the flag, the results are undefined.  (?:...) A non-capturing version of regular parentheses.  Matches whatever regular expression is inside the parentheses, but the substring matched by the group cannot be retrieved after performing a match or referenced later in the pattern. (?P<name>...) Similar to regular parentheses, but the substring matched by the group is accessible within the rest of the regular expression via the symbolic group name name.  Group names must be valid Python identifiers, and each group name must be defined only once within a regular expression.  A symbolic group is also a numbered group, just as if the group were not named.  So the group named id in the example below can also be referenced as the numbered group 1. For example, if the pattern is (?P<id>[a-zA-Z_]\\w*), the group can be referenced by its name in arguments to methods of match objects, such as m.group('id') or m.end('id'), and also by name in the regular expression itself (using (?P=id)) and replacement text given to .sub() (using \\g<id>).  (?P=name) Matches whatever text was matched by the earlier group named name. (?#...) A comment; the contents of the parentheses are simply ignored. (?=...) Matches if ... matches next, but doesn&#8217;t consume any of the string.  This is called a lookahead assertion.  For example, Isaac (?=Asimov) will match 'Isaac ' only if it&#8217;s followed by 'Asimov'. (?!...) Matches if ... doesn&#8217;t match next.  This is a negative lookahead assertion. For example, Isaac (?!Asimov) will match 'Isaac ' only if it&#8217;s not followed by 'Asimov'. (?<=...) Matches if the current position in the string is preceded by a match for ... that ends at the current position.  This is called a positive lookbehind assertion. (?<=abc)def will find a match in abcdef, since the lookbehind will back up 3 characters and check if the contained pattern matches. The contained pattern must only match strings of some fixed length, meaning that abc or a|b are allowed, but a* and a{3,4} are not.  Note that patterns which start with positive lookbehind assertions will never match at the beginning of the string being searched; you will most likely want to use the search() function rather than the match() function: >>> import re >>> m = re.search(&#39;(?<=abc)def&#39;, &#39;abcdef&#39;) >>> m.group(0) &#39;def&#39;   This example looks for a word following a hyphen: >>> m = re.search(&#39;(?<=-)\\w+&#39;, &#39;spam-egg&#39;) >>> m.group(0) &#39;egg&#39;    (?<!...) Matches if the current position in the string is not preceded by a match for ....  This is called a negative lookbehind assertion.  Similar to positive lookbehind assertions, the contained pattern must only match strings of some fixed length.  Patterns which start with negative lookbehind assertions may match at the beginning of the string being searched. (?(id\/name)yes-pattern|no-pattern) Will try to match with yes-pattern if the group with given id or name exists, and with no-pattern if it doesn&#8217;t. no-pattern is optional and can be omitted. For example,  (<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>) is a poor email matching pattern, which will match with '<user@host.com>' as well as 'user@host.com', but not with '<user@host.com'.  New in version 2.4.   The special sequences consist of '\\' and a character from the list below. If the ordinary character is not on the list, then the resulting RE will match the second character.  For example, \\$ matches the character '$'.  \\number Matches the contents of the group of the same number.  Groups are numbered starting from 1.  For example, (.+) \\1 matches 'the the' or '55 55', but not 'the end' (note the space after the group).  This special sequence can only be used to match one of the first 99 groups.  If the first digit of number is 0, or number is 3 octal digits long, it will not be interpreted as a group match, but as the character with octal value number. Inside the '[' and ']' of a character class, all numeric escapes are treated as characters. \\A Matches only at the start of the string. \\b Matches the empty string, but only at the beginning or end of a word.  A word is defined as a sequence of alphanumeric or underscore characters, so the end of a word is indicated by whitespace or a non-alphanumeric, non-underscore character. Note that  \\b is defined as the boundary between \\w and \\W, so the precise set of characters deemed to be alphanumeric depends on the values of the UNICODE and LOCALE flags.  Inside a character range, \\b represents the backspace character, for compatibility with Python&#8217;s string literals. \\B Matches the empty string, but only when it is not at the beginning or end of a word.  This is just the opposite of \\b, so is also subject to the settings of LOCALE and UNICODE. \\d When the UNICODE flag is not specified, matches any decimal digit; this is equivalent to the set [0-9].  With UNICODE, it will match whatever is classified as a decimal digit in the Unicode character properties database. \\D When the UNICODE flag is not specified, matches any non-digit character; this is equivalent to the set  [^0-9].  With UNICODE, it will match  anything other than character marked as digits in the Unicode character  properties database. \\s When the LOCALE and UNICODE flags are not specified, matches any whitespace character; this is equivalent to the set [ \\t\\n\\r\\f\\v]. With LOCALE, it will match this set plus whatever characters are defined as space for the current locale. If UNICODE is set, this will match the characters [ \\t\\n\\r\\f\\v] plus whatever is classified as space in the Unicode character properties database. \\S When the LOCALE and UNICODE flags are not specified, matches any non-whitespace character; this is equivalent to the set [^ \\t\\n\\r\\f\\v] With LOCALE, it will match any character not in this set, and not defined as space in the current locale. If UNICODE is set, this will match anything other than [ \\t\\n\\r\\f\\v] and characters marked as space in the Unicode character properties database. \\w When the LOCALE and UNICODE flags are not specified, matches any alphanumeric character and the underscore; this is equivalent to the set [a-zA-Z0-9_].  With LOCALE, it will match the set [0-9_] plus whatever characters are defined as alphanumeric for the current locale.  If UNICODE is set, this will match the characters [0-9_] plus whatever is classified as alphanumeric in the Unicode character properties database. \\W When the LOCALE and UNICODE flags are not specified, matches any non-alphanumeric character; this is equivalent to the set [^a-zA-Z0-9_]. With LOCALE, it will match any character not in the set [0-9_], and not defined as alphanumeric for the current locale. If UNICODE is set, this will match anything other than [0-9_] and characters marked as alphanumeric in the Unicode character properties database. \\Z Matches only at the end of the string.  Most of the standard escapes supported by Python string literals are also accepted by the regular expression parser: \\a      \\b      \\f      \\n \\r      \\t      \\v      \\x \\\\  Octal escapes are included in a limited form: If the first digit is a 0, or if there are three octal digits, it is considered an octal escape. Otherwise, it is a group reference.  As for string literals, octal escapes are always at most three digits in length.   7.2.2. Matching vs Searching\u00b6 Python offers two different primitive operations based on regular expressions: match checks for a match only at the beginning of the string, while search checks for a match anywhere in the string (this is what Perl does by default). Note that match may differ from search even when using a regular expression beginning with '^': '^' matches only at the start of the string, or in MULTILINE mode also immediately following a newline.  The &#8220;match&#8221; operation succeeds only if the pattern matches at the start of the string regardless of mode, or at the starting position given by the optional pos argument regardless of whether a newline precedes it. >>> re.match(\"c\", \"abcdef\")  # No match >>> re.search(\"c\", \"abcdef\") # Match <_sre.SRE_Match object at ...>     7.2.3. Module Contents\u00b6 The module defines several functions, constants, and an exception. Some of the functions are simplified versions of the full featured methods for compiled regular expressions.  Most non-trivial applications always use the compiled form.   re.compile(pattern, flags=0)\u00b6 Compile a regular expression pattern into a regular expression object, which can be used for matching using its match() and search() methods, described below. The expression&#8217;s behaviour can be modified by specifying a flags value. Values can be any of the following variables, combined using bitwise OR (the | operator). The sequence prog = re.compile(pattern) result = prog.match(string)   is equivalent to result = re.match(pattern, string)   but using re.compile() and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program.  Note The compiled versions of the most recent patterns passed to re.match(), re.search() or re.compile() are cached, so programs that use only a few regular expressions at a time needn&#8217;t worry about compiling regular expressions.      re.DEBUG\u00b6 Display debug information about compiled expression.    re.I\u00b6  re.IGNORECASE\u00b6 Perform case-insensitive matching; expressions like [A-Z] will match lowercase letters, too.  This is not affected by the current locale.    re.L\u00b6  re.LOCALE\u00b6 Make \\w, \\W, \\b, \\B, \\s and \\S dependent on the current locale.    re.M\u00b6  re.MULTILINE\u00b6 When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).  By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string.    re.S\u00b6  re.DOTALL\u00b6 Make the '.' special character match any character at all, including a newline; without this flag, '.' will match anything except a newline.    re.U\u00b6  re.UNICODE\u00b6 Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S dependent on the Unicode character properties database.  New in version 2.0.     re.X\u00b6  re.VERBOSE\u00b6 This flag allows you to write regular expressions that look nicer. Whitespace within the pattern is ignored, except when in a character class or preceded by an unescaped backslash, and, when a line contains a '#' neither in a character class or preceded by an unescaped backslash, all characters from the leftmost such '#' through the end of the line are ignored. That means that the two following regular expression objects that match a decimal number are functionally equal: a = re.compile(r\"\"\"\\d +  # the integral part                    \\.    # the decimal point                    \\d *  # some fractional digits\"\"\", re.X) b = re.compile(r\"\\d+\\.\\d*\")       re.search(pattern, string, flags=0)\u00b6 Scan through string looking for a location where the regular expression pattern produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.    re.match(pattern, string, flags=0)\u00b6 If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding MatchObject instance. Return None if the string does not match the pattern; note that this is different from a zero-length match.  Note If you want to locate a match anywhere in string, use search() instead.      re.split(pattern, string, maxsplit=0, flags=0)\u00b6 Split string by the occurrences of pattern.  If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list. If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as the final element of the list.  (Incompatibility note: in the original Python 1.5 release, maxsplit was ignored.  This has been fixed in later releases.) >>> re.split(&#39;\\W+&#39;, &#39;Words, words, words.&#39;) [&#39;Words&#39;, &#39;words&#39;, &#39;words&#39;, &#39;&#39;] >>> re.split(&#39;(\\W+)&#39;, &#39;Words, words, words.&#39;) [&#39;Words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;.&#39;, &#39;&#39;] >>> re.split(&#39;\\W+&#39;, &#39;Words, words, words.&#39;, 1) [&#39;Words&#39;, &#39;words, words.&#39;] >>> re.split(&#39;[a-f]+&#39;, &#39;0a3B9&#39;, flags=re.IGNORECASE) [&#39;0&#39;, &#39;3&#39;, &#39;9&#39;]   If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string.  The same holds for the end of the string: >>> re.split(&#39;(\\W+)&#39;, &#39;...words, words...&#39;) [&#39;&#39;, &#39;...&#39;, &#39;words&#39;, &#39;, &#39;, &#39;words&#39;, &#39;...&#39;, &#39;&#39;]   That way, separator components are always found at the same relative indices within the result list (e.g., if there&#8217;s one capturing group in the separator, the 0th, the 2nd and so forth). Note that split will never split a string on an empty pattern match. For example: >>> re.split(&#39;x*&#39;, &#39;foo&#39;) [&#39;foo&#39;] >>> re.split(\"(?m)^$\", \"foo\\n\\nbar\\n\") [&#39;foo\\n\\nbar\\n&#39;]    Changed in version 2.7: Added the optional flags argument.     re.findall(pattern, string, flags=0)\u00b6 Return all non-overlapping matches of pattern in string, as a list of strings.  The string is scanned left-to-right, and matches are returned in the order found.  If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group.  Empty matches are included in the result unless they touch the beginning of another match.  New in version 1.5.2.  Changed in version 2.4: Added the optional flags argument.     re.finditer(pattern, string, flags=0)\u00b6 Return an iterator yielding MatchObject instances over all non-overlapping matches for the RE pattern in string.  The string is scanned left-to-right, and matches are returned in the order found.  Empty matches are included in the result unless they touch the beginning of another match.  New in version 2.2.  Changed in version 2.4: Added the optional flags argument.     re.sub(pattern, repl, string, count=0, flags=0)\u00b6 Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.  If the pattern isn&#8217;t found, string is returned unchanged.  repl can be a string or a function; if it is a string, any backslash escapes in it are processed.  That is, \\n is converted to a single newline character, \\r is converted to a carriage return, and so forth.  Unknown escapes such as \\j are left alone.  Backreferences, such as \\6, are replaced with the substring matched by group 6 in the pattern. For example: >>> re.sub(r&#39;def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):&#39;, ...        r&#39;static PyObject*\\npy_\\1(void)\\n{&#39;, ...        &#39;def myfunc():&#39;) &#39;static PyObject*\\npy_myfunc(void)\\n{&#39;   If repl is a function, it is called for every non-overlapping occurrence of pattern.  The function takes a single match object argument, and returns the replacement string.  For example: >>> def dashrepl(matchobj): ...     if matchobj.group(0) == &#39;-&#39;: return &#39; &#39; ...     else: return &#39;-&#39; >>> re.sub(&#39;-{1,2}&#39;, dashrepl, &#39;pro----gram-files&#39;) &#39;pro--gram files&#39; >>> re.sub(r&#39;\\sAND\\s&#39;, &#39; & &#39;, &#39;Baked Beans And Spam&#39;, flags=re.IGNORECASE) &#39;Baked Beans & Spam&#39;   The pattern may be a string or an RE object. The optional argument count is the maximum number of pattern occurrences to be replaced; count must be a non-negative integer.  If omitted or zero, all occurrences will be replaced. Empty matches for the pattern are replaced only when not adjacent to a previous match, so sub('x*', '-', 'abc') returns '-a-b-c-'. In addition to character escapes and backreferences as described above, \\g<name> will use the substring matched by the group named name, as defined by the (?P<name>...) syntax. \\g<number> uses the corresponding group number; \\g<2> is therefore equivalent to \\2, but isn&#8217;t ambiguous in a replacement such as \\g<2>0.  \\20 would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character '0'.  The backreference \\g<0> substitutes in the entire substring matched by the RE.  Changed in version 2.7: Added the optional flags argument.     re.subn(pattern, repl, string, count=0, flags=0)\u00b6 Perform the same operation as sub(), but return a tuple (new_string, number_of_subs_made).  Changed in version 2.7: Added the optional flags argument.     re.escape(string)\u00b6 Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.    re.purge()\u00b6 Clear the regular expression cache.    exception re.error\u00b6 Exception raised when a string passed to one of the functions here is not a valid regular expression (for example, it might contain unmatched parentheses) or when some other error occurs during compilation or matching.  It is never an error if a string contains no match for a pattern.    7.2.4. Regular Expression Objects\u00b6   class re.RegexObject\u00b6 The RegexObject class supports the following methods and attributes:   search(string[, pos[, endpos]])\u00b6 Scan through string looking for a location where this regular expression produces a match, and return a corresponding MatchObject instance. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string. The optional second parameter pos gives an index in the string where the search is to start; it defaults to 0.  This is not completely equivalent to slicing the string; the '^' pattern character matches at the real beginning of the string and at positions just after a newline, but not necessarily at the index where the search is to start. The optional parameter endpos limits how far the string will be searched; it will be as if the string is endpos characters long, so only the characters from pos to endpos - 1 will be searched for a match.  If endpos is less than pos, no match will be found, otherwise, if rx is a compiled regular expression object, rx.search(string, 0, 50) is equivalent to rx.search(string[:50], 0). >>> pattern = re.compile(\"d\") >>> pattern.search(\"dog\")     # Match at index 0 <_sre.SRE_Match object at ...> >>> pattern.search(\"dog\", 1)  # No match; search doesn&#39;t include the \"d\"       match(string[, pos[, endpos]])\u00b6 If zero or more characters at the beginning of string match this regular expression, return a corresponding MatchObject instance.  Return None if the string does not match the pattern; note that this is different from a zero-length match. The optional pos and endpos parameters have the same meaning as for the search() method.  Note If you want to locate a match anywhere in string, use search() instead.  >>> pattern = re.compile(\"o\") >>> pattern.match(\"dog\")      # No match as \"o\" is not at the start of \"dog\". >>> pattern.match(\"dog\", 1)   # Match as \"o\" is the 2nd character of \"dog\". <_sre.SRE_Match object at ...>       split(string, maxsplit=0)\u00b6 Identical to the split() function, using the compiled pattern.    findall(string[, pos[, endpos]])\u00b6 Similar to the findall() function, using the compiled pattern, but also accepts optional pos and endpos parameters that limit the search region like for match().    finditer(string[, pos[, endpos]])\u00b6 Similar to the finditer() function, using the compiled pattern, but also accepts optional pos and endpos parameters that limit the search region like for match().    sub(repl, string, count=0)\u00b6 Identical to the sub() function, using the compiled pattern.    subn(repl, string, count=0)\u00b6 Identical to the subn() function, using the compiled pattern.    flags\u00b6 The flags argument used when the RE object was compiled, or 0 if no flags were provided.    groups\u00b6 The number of capturing groups in the pattern.    groupindex\u00b6 A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.  The dictionary is empty if no symbolic groups were used in the pattern.    pattern\u00b6 The pattern string from which the RE object was compiled.      7.2.5. Match Objects\u00b6   class re.MatchObject\u00b6 Match Objects always have a boolean value of True, so that you can test whether e.g. match() resulted in a match with a simple if statement.  They support the following methods and attributes:   expand(template)\u00b6 Return the string obtained by doing backslash substitution on the template string template, as done by the sub() method.  Escapes such as \\n are converted to the appropriate characters, and numeric backreferences (\\1, \\2) and named backreferences (\\g<1>, \\g<name>) are replaced by the contents of the corresponding group.    group([group1, ...])\u00b6 Returns one or more subgroups of the match.  If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument. Without arguments, group1 defaults to zero (the whole match is returned). If a groupN argument is zero, the corresponding return value is the entire matching string; if it is in the inclusive range [1..99], it is the string matching the corresponding parenthesized group.  If a group number is negative or larger than the number of groups defined in the pattern, an IndexError exception is raised. If a group is contained in a part of the pattern that did not match, the corresponding result is None. If a group is contained in a part of the pattern that matched multiple times, the last match is returned. >>> m = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\") >>> m.group(0)       # The entire match &#39;Isaac Newton&#39; >>> m.group(1)       # The first parenthesized subgroup. &#39;Isaac&#39; >>> m.group(2)       # The second parenthesized subgroup. &#39;Newton&#39; >>> m.group(1, 2)    # Multiple arguments give us a tuple. (&#39;Isaac&#39;, &#39;Newton&#39;)   If the regular expression uses the (?P<name>...) syntax, the groupN arguments may also be strings identifying groups by their group name.  If a string argument is not used as a group name in the pattern, an IndexError exception is raised. A moderately complicated example: >>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\") >>> m.group(&#39;first_name&#39;) &#39;Malcolm&#39; >>> m.group(&#39;last_name&#39;) &#39;Reynolds&#39;   Named groups can also be referred to by their index: >>> m.group(1) &#39;Malcolm&#39; >>> m.group(2) &#39;Reynolds&#39;   If a group matches multiple times, only the last match is accessible: >>> m = re.match(r\"(..)+\", \"a1b2c3\")  # Matches 3 times. >>> m.group(1)                        # Returns only the last match. &#39;c3&#39;       groups([default])\u00b6 Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern.  The default argument is used for groups that did not participate in the match; it defaults to None.  (Incompatibility note: in the original Python 1.5 release, if the tuple was one element long, a string would be returned instead.  In later versions (from 1.5.1 on), a singleton tuple is returned in such cases.) For example: >>> m = re.match(r\"(\\d+)\\.(\\d+)\", \"24.1632\") >>> m.groups() (&#39;24&#39;, &#39;1632&#39;)   If we make the decimal place and everything after it optional, not all groups might participate in the match.  These groups will default to None unless the default argument is given: >>> m = re.match(r\"(\\d+)\\.?(\\d+)?\", \"24\") >>> m.groups()      # Second group defaults to None. (&#39;24&#39;, None) >>> m.groups(&#39;0&#39;)   # Now, the second group defaults to &#39;0&#39;. (&#39;24&#39;, &#39;0&#39;)       groupdict([default])\u00b6 Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name.  The default argument is used for groups that did not participate in the match; it defaults to None.  For example: >>> m = re.match(r\"(?P<first_name>\\w+) (?P<last_name>\\w+)\", \"Malcolm Reynolds\") >>> m.groupdict() {&#39;first_name&#39;: &#39;Malcolm&#39;, &#39;last_name&#39;: &#39;Reynolds&#39;}       start([group])\u00b6  end([group])\u00b6 Return the indices of the start and end of the substring matched by group; group defaults to zero (meaning the whole matched substring). Return -1 if group exists but did not contribute to the match.  For a match object m, and a group g that did contribute to the match, the substring matched by group g (equivalent to m.group(g)) is m.string[m.start(g):m.end(g)]   Note that m.start(group) will equal m.end(group) if group matched a null string.  For example, after m = re.search('b(c?)', 'cba'), m.start(0) is 1, m.end(0) is 2, m.start(1) and m.end(1) are both 2, and m.start(2) raises an IndexError exception. An example that will remove remove_this from email addresses: >>> email = \"tony@tiremove_thisger.net\" >>> m = re.search(\"remove_this\", email) >>> email[:m.start()] + email[m.end():] &#39;tony@tiger.net&#39;       span([group])\u00b6 For MatchObject m, return the 2-tuple (m.start(group), m.end(group)). Note that if group did not contribute to the match, this is (-1, -1).  group defaults to zero, the entire match.    pos\u00b6 The value of pos which was passed to the search() or match() method of the RegexObject.  This is the index into the string at which the RE engine started looking for a match.    endpos\u00b6 The value of endpos which was passed to the search() or match() method of the RegexObject.  This is the index into the string beyond which the RE engine will not go.    lastindex\u00b6 The integer index of the last matched capturing group, or None if no group was matched at all. For example, the expressions (a)b, ((a)(b)), and ((ab)) will have lastindex == 1 if applied to the string 'ab', while the expression (a)(b) will have lastindex == 2, if applied to the same string.    lastgroup\u00b6 The name of the last matched capturing group, or None if the group didn&#8217;t have a name, or if no group was matched at all.    re\u00b6 The regular expression object whose match() or search() method produced this MatchObject instance.    string\u00b6 The string passed to match() or search().      7.2.6. Examples\u00b6  7.2.6.1. Checking For a Pair\u00b6 In this example, we&#8217;ll use the following helper function to display match objects a little more gracefully: def displaymatch(match):     if match is None:         return None     return &#39;<Match: %r, groups=%r>&#39;  (match.group(), match.groups())   Suppose you are writing a poker program where a player&#8217;s hand is represented as a 5-character string with each character representing a card, &#8220;a&#8221; for ace, &#8220;k&#8221; for king, &#8220;q&#8221; for queen, &#8220;j&#8221; for jack, &#8220;t&#8221; for 10, and &#8220;2&#8221; through &#8220;9&#8221; representing the card with that value. To see if a given string is a valid hand, one could do the following: >>> valid = re.compile(r\"^[a2-9tjqk]{5}$\") >>> displaymatch(valid.match(\"akt5q\"))  # Valid. \"<Match: &#39;akt5q&#39;, groups=()>\" >>> displaymatch(valid.match(\"akt5e\"))  # Invalid. >>> displaymatch(valid.match(\"akt\"))    # Invalid. >>> displaymatch(valid.match(\"727ak\"))  # Valid. \"<Match: &#39;727ak&#39;, groups=()>\"   That last hand, \"727ak\", contained a pair, or two of the same valued cards. To match this with a regular expression, one could use backreferences as such: >>> pair = re.compile(r\".*(.).*\\1\") >>> displaymatch(pair.match(\"717ak\"))     # Pair of 7s. \"<Match: &#39;717&#39;, groups=(&#39;7&#39;,)>\" >>> displaymatch(pair.match(\"718ak\"))     # No pairs. >>> displaymatch(pair.match(\"354aa\"))     # Pair of aces. \"<Match: &#39;354aa&#39;, groups=(&#39;a&#39;,)>\"   To find out what card the pair consists of, one could use the group() method of MatchObject in the following manner: >>> pair.match(\"717ak\").group(1) &#39;7&#39;  # Error because re.match() returns None, which doesn&#39;t have a group() method: >>> pair.match(\"718ak\").group(1) Traceback (most recent call last):   File \"<pyshell#23>\", line 1, in <module>     re.match(r\".*(.).*\\1\", \"718ak\").group(1) AttributeError: &#39;NoneType&#39; object has no attribute &#39;group&#39;  >>> pair.match(\"354aa\").group(1) &#39;a&#39;     7.2.6.2. Simulating scanf()\u00b6 Python does not currently have an equivalent to scanf().  Regular expressions are generally more powerful, though also more verbose, than scanf() format strings.  The table below offers some more-or-less equivalent mappings between scanf() format tokens and regular expressions.       scanf() Token Regular Expression    %c .  %5c .{5}  %d [-+]?\\d+  %e, %E, %f, %g [-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?  %i [-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)  %o 0[0-7]*  %s \\S+  %u \\d+  %x, %X 0[xX][\\dA-Fa-f]+    To extract the filename and numbers from a string like \/usr\/sbin\/sendmail - 0 errors, 4 warnings  you would use a scanf() format like %s - %d errors, %d warnings  The equivalent regular expression would be (\\S+) - (\\d+) errors, (\\d+) warnings    7.2.6.3. Avoiding recursion\u00b6 If you create regular expressions that require the engine to perform a lot of recursion, you may encounter a RuntimeError exception with the message maximum recursion limit exceeded. For example, >>> s = &#39;Begin &#39; + 1000*&#39;a very long string &#39; + &#39;end&#39; >>> re.match(&#39;Begin (\\w| )*? end&#39;, s).end() Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"\/usr\/local\/lib\/python2.5\/re.py\", line 132, in match     return _compile(pattern, flags).match(string) RuntimeError: maximum recursion limit exceeded   You can often restructure your regular expression to avoid recursion. Starting with Python 2.3, simple uses of the *? pattern are special-cased to avoid recursion.  Thus, the above regular expression can avoid recursion by being recast as Begin [a-zA-Z0-9_ ]*?end.  As a further benefit, such regular expressions will run faster than their recursive equivalents.   7.2.6.4. search() vs. match()\u00b6 In a nutshell, match() only attempts to match a pattern at the beginning of a string where search() will match a pattern anywhere in a string. For example: >>> re.match(\"o\", \"dog\")  # No match as \"o\" is not the first letter of \"dog\". >>> re.search(\"o\", \"dog\") # Match as search() looks everywhere in the string. <_sre.SRE_Match object at ...>    Note The following applies only to regular expression objects like those created with re.compile(\"pattern\"), not the primitives re.match(pattern, string) or re.search(pattern, string).  match() has an optional second parameter that gives an index in the string where the search is to start: >>> pattern = re.compile(\"o\") >>> pattern.match(\"dog\")      # No match as \"o\" is not at the start of \"dog.\"  # Equivalent to the above expression as 0 is the default starting index: >>> pattern.match(\"dog\", 0)  # Match as \"o\" is the 2nd character of \"dog\" (index 0 is the first): >>> pattern.match(\"dog\", 1) <_sre.SRE_Match object at ...> >>> pattern.match(\"dog\", 2)   # No match as \"o\" is not the 3rd character of \"dog.\"     7.2.6.5. Making a Phonebook\u00b6 split() splits a string into a list delimited by the passed pattern.  The method is invaluable for converting textual data into data structures that can be easily read and modified by Python as demonstrated in the following example that creates a phonebook. First, here is the input.  Normally it may come from a file, here we are using triple-quoted string syntax: >>> input = \"\"\"Ross McFluff: 834.345.1254 155 Elm Street ... ... Ronald Heathmore: 892.345.3428 436 Finley Avenue ... Frank Burger: 925.541.7625 662 South Dogwood Way ... ... ... Heather Albrecht: 548.326.4584 919 Park Place\"\"\"   The entries are separated by one or more newlines. Now we convert the string into a list with each nonempty line having its own entry: >>> entries = re.split(\"\\n+\", input) >>> entries [&#39;Ross McFluff: 834.345.1254 155 Elm Street&#39;, &#39;Ronald Heathmore: 892.345.3428 436 Finley Avenue&#39;, &#39;Frank Burger: 925.541.7625 662 South Dogwood Way&#39;, &#39;Heather Albrecht: 548.326.4584 919 Park Place&#39;]   Finally, split each entry into a list with first name, last name, telephone number, and address.  We use the maxsplit parameter of split() because the address has spaces, our splitting pattern, in it: >>> [re.split(\":? \", entry, 3) for entry in entries] [[&#39;Ross&#39;, &#39;McFluff&#39;, &#39;834.345.1254&#39;, &#39;155 Elm Street&#39;], [&#39;Ronald&#39;, &#39;Heathmore&#39;, &#39;892.345.3428&#39;, &#39;436 Finley Avenue&#39;], [&#39;Frank&#39;, &#39;Burger&#39;, &#39;925.541.7625&#39;, &#39;662 South Dogwood Way&#39;], [&#39;Heather&#39;, &#39;Albrecht&#39;, &#39;548.326.4584&#39;, &#39;919 Park Place&#39;]]   The :? pattern matches the colon after the last name, so that it does not occur in the result list.  With a maxsplit of 4, we could separate the house number from the street name: >>> [re.split(\":? \", entry, 4) for entry in entries] [[&#39;Ross&#39;, &#39;McFluff&#39;, &#39;834.345.1254&#39;, &#39;155&#39;, &#39;Elm Street&#39;], [&#39;Ronald&#39;, &#39;Heathmore&#39;, &#39;892.345.3428&#39;, &#39;436&#39;, &#39;Finley Avenue&#39;], [&#39;Frank&#39;, &#39;Burger&#39;, &#39;925.541.7625&#39;, &#39;662&#39;, &#39;South Dogwood Way&#39;], [&#39;Heather&#39;, &#39;Albrecht&#39;, &#39;548.326.4584&#39;, &#39;919&#39;, &#39;Park Place&#39;]]     7.2.6.6. Text Munging\u00b6 sub() replaces every occurrence of a pattern with a string or the result of a function.  This example demonstrates using sub() with a function to &#8220;munge&#8221; text, or randomize the order of all the characters in each word of a sentence except for the first and last characters: >>> def repl(m): ...   inner_word = list(m.group(2)) ...   random.shuffle(inner_word) ...   return m.group(1) + \"\".join(inner_word) + m.group(3) >>> text = \"Professor Abdolmalek, please report your absences promptly.\" >>> re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text) &#39;Poefsrosr Aealmlobdk, pslaee reorpt your abnseces plmrptoy.&#39; >>> re.sub(r\"(\\w)(\\w+)(\\w)\", repl, text) &#39;Pofsroser Aodlambelk, plasee reoprt yuor asnebces potlmrpy.&#39;     7.2.6.7. Finding all Adverbs\u00b6 findall() matches all occurrences of a pattern, not just the first one as search() does.  For example, if one was a writer and wanted to find all of the adverbs in some text, he or she might use findall() in the following manner: >>> text = \"He was carefully disguised but captured quickly by police.\" >>> re.findall(r\"\\w+ly\", text) [&#39;carefully&#39;, &#39;quickly&#39;]     7.2.6.8. Finding all Adverbs and their Positions\u00b6 If one wants more information about all matches of a pattern than the matched text, finditer() is useful as it provides instances of MatchObject instead of strings.  Continuing with the previous example, if one was a writer who wanted to find all of the adverbs and their positions in some text, he or she would use finditer() in the following manner: >>> text = \"He was carefully disguised but captured quickly by police.\" >>> for m in re.finditer(r\"\\w+ly\", text): ...     print &#39;%02d-%02d: %s&#39;  (m.start(), m.end(), m.group(0)) 07-16: carefully 40-47: quickly     7.2.6.9. Raw String Notation\u00b6 Raw string notation (r\"text\") keeps regular expressions sane.  Without it, every backslash ('\\') in a regular expression would have to be prefixed with another one to escape it.  For example, the two following lines of code are functionally identical: >>> re.match(r\"\\W(.)\\1\\W\", \" ff \") <_sre.SRE_Match object at ...> >>> re.match(\"\\\\W(.)\\\\1\\\\W\", \" ff \") <_sre.SRE_Match object at ...>   When one wants to match a literal backslash, it must be escaped in the regular expression.  With raw string notation, this means r\"\\\\\".  Without raw string notation, one must use \"\\\\\\\\\", making the following lines of code functionally identical: >>> re.match(r\"\\\\\", r\"\\\\\") <_sre.SRE_Match object at ...> >>> re.match(\"\\\\\\\\\", r\"\\\\\") <_sre.SRE_Match object at ...>"},{"url":"http:\/\/docs.python.org\/library\/re.html#re.compile","title":"re.compile","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.escape","title":"re.escape","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.findall","title":"re.findall","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.finditer","title":"re.finditer","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.match","title":"re.match","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.MatchObject","title":"re.MatchObject","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.MatchObject.expand","title":"re.MatchObject.expand","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.MatchObject.group","title":"re.MatchObject.group","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.MatchObject.groupdict","title":"re.MatchObject.groupdict","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.MatchObject.groups","title":"re.MatchObject.groups","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.MatchObject.span","title":"re.MatchObject.span","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.MatchObject.start","title":"re.MatchObject.start","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.purge","title":"re.purge","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.RegexObject","title":"re.RegexObject","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.RegexObject.findall","title":"re.RegexObject.findall","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.RegexObject.finditer","title":"re.RegexObject.finditer","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.RegexObject.match","title":"re.RegexObject.match","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.RegexObject.search","title":"re.RegexObject.search","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.RegexObject.split","title":"re.RegexObject.split","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.RegexObject.sub","title":"re.RegexObject.sub","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.RegexObject.subn","title":"re.RegexObject.subn","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.search","title":"re.search","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.split","title":"re.split","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.sub","title":"re.sub","description":""},{"url":"http:\/\/docs.python.org\/library\/re.html#re.subn","title":"re.subn","description":""},{"url":"http:\/\/docs.python.org\/library\/stringio.html","title":"StringIO","description":"7.5. StringIO &#8212; Read and write strings as files\u00b6 This module implements a file-like class, StringIO, that reads and writes a string buffer (also known as memory files).  See the description of file objects for operations (section File Objects). (For standard strings, see str and unicode.)   class StringIO.StringIO([buffer])\u00b6 When a StringIO object is created, it can be initialized to an existing string by passing the string to the constructor. If no string is given, the StringIO will start empty. In both cases, the initial file position starts at zero. The StringIO object can accept either Unicode or 8-bit strings, but mixing the two may take some care.  If both are used, 8-bit strings that cannot be interpreted as 7-bit ASCII (that use the 8th bit) will cause a UnicodeError to be raised when getvalue() is called.   The following methods of StringIO objects require special mention:   StringIO.getvalue()\u00b6 Retrieve the entire contents of the &#8220;file&#8221; at any time before the StringIO object&#8217;s close() method is called.  See the note above for information about mixing Unicode and 8-bit strings; such mixing can cause this method to raise UnicodeError.    StringIO.close()\u00b6 Free the memory buffer.  Attempting to do further operations with a closed StringIO object will raise a ValueError.  Example usage: import StringIO  output = StringIO.StringIO() output.write(&#39;First line.\\n&#39;) print >>output, &#39;Second line.&#39;  # Retrieve file contents -- this will be # &#39;First line.\\nSecond line.\\n&#39; contents = output.getvalue()  # Close object and discard memory buffer -- # .getvalue() will now raise an exception. output.close()    7.6. cStringIO &#8212; Faster version of StringIO\u00b6 The module cStringIO provides an interface similar to that of the StringIO module.  Heavy use of StringIO.StringIO objects can be made more efficient by using the function StringIO() from this module instead.   cStringIO.StringIO([s])\u00b6 Return a StringIO-like stream for reading or writing. Since this is a factory function which returns objects of built-in types, there&#8217;s no way to build your own version using subclassing.  It&#8217;s not possible to set attributes on it.  Use the original StringIO module in those cases. Unlike the StringIO module, this module is not able to accept Unicode strings that cannot be encoded as plain ASCII strings. Another difference from the StringIO module is that calling StringIO() with a string parameter creates a read-only object. Unlike an object created without a string parameter, it does not have write methods. These objects are not generally visible.  They turn up in tracebacks as StringI and StringO.   The following data objects are provided as well:   cStringIO.InputType\u00b6 The type object of the objects created by calling StringIO() with a string parameter.    cStringIO.OutputType\u00b6 The type object of the objects returned by calling StringIO() with no parameters.  There is a C API to the module as well; refer to the module source for  more information. Example usage: import cStringIO  output = cStringIO.StringIO() output.write(&#39;First line.\\n&#39;) print >>output, &#39;Second line.&#39;  # Retrieve file contents -- this will be # &#39;First line.\\nSecond line.\\n&#39; contents = output.getvalue()  # Close object and discard memory buffer -- # .getvalue() will now raise an exception. output.close()"},{"url":"http:\/\/docs.python.org\/library\/stringio.html#StringIO_cStringIO.StringIO","title":"cStringIO.StringIO","description":""},{"url":"http:\/\/docs.python.org\/library\/stringio.html#StringIO.StringIO","title":"StringIO.StringIO","description":""},{"url":"http:\/\/docs.python.org\/library\/stringio.html#StringIO.StringIO.close","title":"StringIO.StringIO.close","description":""},{"url":"http:\/\/docs.python.org\/library\/stringio.html#StringIO.StringIO.getvalue","title":"StringIO.StringIO.getvalue","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html","title":"","description":null},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#class.__subclasses__","title":"class.__subclasses__","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#class.mro","title":"class.mro","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#container.__iter__","title":"container.__iter__","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#contextmanager.__enter__","title":"contextmanager.__enter__","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#contextmanager.__exit__","title":"contextmanager.__exit__","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict","title":"dict","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.clear","title":"dict.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.copy","title":"dict.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.fromkeys","title":"dict.fromkeys","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.get","title":"dict.get","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.has_key","title":"dict.has_key","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.items","title":"dict.items","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.iteritems","title":"dict.iteritems","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.iterkeys","title":"dict.iterkeys","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.itervalues","title":"dict.itervalues","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.keys","title":"dict.keys","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.pop","title":"dict.pop","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.popitem","title":"dict.popitem","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.setdefault","title":"dict.setdefault","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.update","title":"dict.update","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.values","title":"dict.values","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.viewitems","title":"dict.viewitems","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.viewkeys","title":"dict.viewkeys","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#dict.viewvalues","title":"dict.viewvalues","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.close","title":"file.close","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.fileno","title":"file.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.flush","title":"file.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.isatty","title":"file.isatty","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.next","title":"file.next","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.read","title":"file.read","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.readline","title":"file.readline","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.readlines","title":"file.readlines","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.seek","title":"file.seek","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.tell","title":"file.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.truncate","title":"file.truncate","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.write","title":"file.write","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.writelines","title":"file.writelines","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#file.xreadlines","title":"file.xreadlines","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#float.as_integer_ratio","title":"float.as_integer_ratio","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#float.fromhex","title":"float.fromhex","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#float.hex","title":"float.hex","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#float.is_integer","title":"float.is_integer","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#int.bit_length","title":"int.bit_length","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#iterator.__iter__","title":"iterator.__iter__","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#iterator.next","title":"iterator.next","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#long.bit_length","title":"long.bit_length","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#memoryview","title":"memoryview","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#memoryview.tobytes","title":"memoryview.tobytes","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#memoryview.tolist","title":"memoryview.tolist","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set","title":"set","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.add","title":"set.add","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.clear","title":"set.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.copy","title":"set.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.difference","title":"set.difference","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.difference_update","title":"set.difference_update","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.discard","title":"set.discard","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.intersection","title":"set.intersection","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.intersection_update","title":"set.intersection_update","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.isdisjoint","title":"set.isdisjoint","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.issubset","title":"set.issubset","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.issuperset","title":"set.issuperset","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.pop","title":"set.pop","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.remove","title":"set.remove","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.symmetric_difference","title":"set.symmetric_difference","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.symmetric_difference_update","title":"set.symmetric_difference_update","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.union","title":"set.union","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#set.update","title":"set.update","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.capitalize","title":"str.capitalize","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.center","title":"str.center","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.count","title":"str.count","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.decode","title":"str.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.encode","title":"str.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.endswith","title":"str.endswith","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.expandtabs","title":"str.expandtabs","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.find","title":"str.find","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.format","title":"str.format","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.index","title":"str.index","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.isalnum","title":"str.isalnum","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.isalpha","title":"str.isalpha","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.isdigit","title":"str.isdigit","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.islower","title":"str.islower","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.isspace","title":"str.isspace","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.istitle","title":"str.istitle","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.isupper","title":"str.isupper","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.join","title":"str.join","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.ljust","title":"str.ljust","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.lower","title":"str.lower","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.lstrip","title":"str.lstrip","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.partition","title":"str.partition","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.replace","title":"str.replace","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.rfind","title":"str.rfind","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.rindex","title":"str.rindex","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.rjust","title":"str.rjust","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.rpartition","title":"str.rpartition","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.rsplit","title":"str.rsplit","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.rstrip","title":"str.rstrip","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.split","title":"str.split","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.splitlines","title":"str.splitlines","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.startswith","title":"str.startswith","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.strip","title":"str.strip","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.swapcase","title":"str.swapcase","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.title","title":"str.title","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.translate","title":"str.translate","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.upper","title":"str.upper","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#str.zfill","title":"str.zfill","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#unicode.isdecimal","title":"unicode.isdecimal","description":""},{"url":"http:\/\/docs.python.org\/library\/stdtypes.html#unicode.isnumeric","title":"unicode.isnumeric","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html","title":"difflib","description":null},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.context_diff","title":"difflib.context_diff","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.Differ","title":"difflib.Differ","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.Differ.compare","title":"difflib.Differ.compare","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.get_close_matches","title":"difflib.get_close_matches","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.HtmlDiff","title":"difflib.HtmlDiff","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.HtmlDiff.__init__","title":"difflib.HtmlDiff.__init__","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.HtmlDiff.make_file","title":"difflib.HtmlDiff.make_file","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.HtmlDiff.make_table","title":"difflib.HtmlDiff.make_table","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.IS_CHARACTER_JUNK","title":"difflib.IS_CHARACTER_JUNK","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.IS_LINE_JUNK","title":"difflib.IS_LINE_JUNK","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.ndiff","title":"difflib.ndiff","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.restore","title":"difflib.restore","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher","title":"difflib.SequenceMatcher","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.find_longest_match","title":"difflib.SequenceMatcher.find_longest_match","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.get_grouped_opcodes","title":"difflib.SequenceMatcher.get_grouped_opcodes","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.get_matching_blocks","title":"difflib.SequenceMatcher.get_matching_blocks","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.get_opcodes","title":"difflib.SequenceMatcher.get_opcodes","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.quick_ratio","title":"difflib.SequenceMatcher.quick_ratio","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.ratio","title":"difflib.SequenceMatcher.ratio","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.real_quick_ratio","title":"difflib.SequenceMatcher.real_quick_ratio","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.set_seq1","title":"difflib.SequenceMatcher.set_seq1","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.set_seq2","title":"difflib.SequenceMatcher.set_seq2","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.SequenceMatcher.set_seqs","title":"difflib.SequenceMatcher.set_seqs","description":""},{"url":"http:\/\/docs.python.org\/library\/difflib.html#difflib.unified_diff","title":"difflib.unified_diff","description":""},{"url":"http:\/\/docs.python.org\/library\/textwrap.html","title":"textwrap","description":null},{"url":"http:\/\/docs.python.org\/library\/textwrap.html#textwrap.dedent","title":"textwrap.dedent","description":""},{"url":"http:\/\/docs.python.org\/library\/textwrap.html#textwrap.fill","title":"textwrap.fill","description":""},{"url":"http:\/\/docs.python.org\/library\/textwrap.html#textwrap.TextWrapper","title":"textwrap.TextWrapper","description":""},{"url":"http:\/\/docs.python.org\/library\/textwrap.html#textwrap.TextWrapper.fill","title":"textwrap.TextWrapper.fill","description":""},{"url":"http:\/\/docs.python.org\/library\/textwrap.html#textwrap.TextWrapper.wrap","title":"textwrap.TextWrapper.wrap","description":""},{"url":"http:\/\/docs.python.org\/library\/textwrap.html#textwrap.wrap","title":"textwrap.wrap","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html","title":"unicodedata","description":"7.9. unicodedata &#8212; Unicode Database\u00b6 This module provides access to the Unicode Character Database which defines character properties for all Unicode characters. The data in this database is based on the UnicodeData.txt file version 5.2.0 which is publicly available from ftp:\/\/ftp.unicode.org\/. The module uses the same names and symbols as defined by the UnicodeData File Format 5.2.0 (see http:\/\/www.unicode.org\/reports\/tr44\/tr44-4.html). It defines the following functions:   unicodedata.lookup(name)\u00b6 Look up character by name.  If a character with the given name is found, return the corresponding Unicode character.  If not found, KeyError is raised.    unicodedata.name(unichr[, default])\u00b6 Returns the name assigned to the Unicode character unichr as a string. If no name is defined, default is returned, or, if not given, ValueError is raised.    unicodedata.decimal(unichr[, default])\u00b6 Returns the decimal value assigned to the Unicode character unichr as integer. If no such value is defined, default is returned, or, if not given, ValueError is raised.    unicodedata.digit(unichr[, default])\u00b6 Returns the digit value assigned to the Unicode character unichr as integer. If no such value is defined, default is returned, or, if not given, ValueError is raised.    unicodedata.numeric(unichr[, default])\u00b6 Returns the numeric value assigned to the Unicode character unichr as float. If no such value is defined, default is returned, or, if not given, ValueError is raised.    unicodedata.category(unichr)\u00b6 Returns the general category assigned to the Unicode character unichr as string.    unicodedata.bidirectional(unichr)\u00b6 Returns the bidirectional category assigned to the Unicode character unichr as string. If no such value is defined, an empty string is returned.    unicodedata.combining(unichr)\u00b6 Returns the canonical combining class assigned to the Unicode character unichr as integer. Returns 0 if no combining class is defined.    unicodedata.east_asian_width(unichr)\u00b6 Returns the east asian width assigned to the Unicode character unichr as string.  New in version 2.4.     unicodedata.mirrored(unichr)\u00b6 Returns the mirrored property assigned to the Unicode character unichr as integer. Returns 1 if the character has been identified as a &#8220;mirrored&#8221; character in bidirectional text, 0 otherwise.    unicodedata.decomposition(unichr)\u00b6 Returns the character decomposition mapping assigned to the Unicode character unichr as string. An empty string is returned in case no such mapping is defined.    unicodedata.normalize(form, unistr)\u00b6 Return the normal form form for the Unicode string unistr. Valid values for form are &#8216;NFC&#8217;, &#8216;NFKC&#8217;, &#8216;NFD&#8217;, and &#8216;NFKD&#8217;. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0327 (COMBINING CEDILLA) U+0043 (LATIN CAPITAL LETTER C). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn&#8217;t, they may not compare equal.  New in version 2.3.   In addition, the module exposes the following constant:   unicodedata.unidata_version\u00b6 The version of the Unicode database used in this module.  New in version 2.3.     unicodedata.ucd_3_2_0\u00b6 This is an object that has the same methods as the entire module, but uses the Unicode database version 3.2 instead, for applications that require this specific version of the Unicode database (such as IDNA).  New in version 2.5.   Examples: >>> import unicodedata >>> unicodedata.lookup(&#39;LEFT CURLY BRACKET&#39;) u&#39;{&#39; >>> unicodedata.name(u&#39;\/&#39;) &#39;SOLIDUS&#39; >>> unicodedata.decimal(u&#39;9&#39;) 9 >>> unicodedata.decimal(u&#39;a&#39;) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: not a decimal >>> unicodedata.category(u&#39;A&#39;)  # &#39;L&#39;etter, &#39;u&#39;ppercase &#39;Lu&#39; >>> unicodedata.bidirectional(u&#39;\\u0660&#39;) # &#39;A&#39;rabic, &#39;N&#39;umber &#39;AN&#39;"},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.bidirectional","title":"unicodedata.bidirectional","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.category","title":"unicodedata.category","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.combining","title":"unicodedata.combining","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.decimal","title":"unicodedata.decimal","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.decomposition","title":"unicodedata.decomposition","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.digit","title":"unicodedata.digit","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.east_asian_width","title":"unicodedata.east_asian_width","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.lookup","title":"unicodedata.lookup","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.mirrored","title":"unicodedata.mirrored","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.name","title":"unicodedata.name","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.normalize","title":"unicodedata.normalize","description":""},{"url":"http:\/\/docs.python.org\/library\/unicodedata.html#unicodedata.numeric","title":"unicodedata.numeric","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html","title":"stringprep","description":"7.10. stringprep &#8212; Internet String Preparation\u00b6  New in version 2.3. When identifying things (such as host names) in the internet, it is often necessary to compare such identifications for &#8220;equality&#8221;. Exactly how this comparison is executed may depend on the application domain, e.g. whether it should be case-insensitive or not. It may be also necessary to restrict the possible identifications, to allow only identifications consisting of &#8220;printable&#8221; characters. RFC 3454 defines a procedure for &#8220;preparing&#8221; Unicode strings in internet protocols. Before passing strings onto the wire, they are processed with the preparation procedure, after which they have a certain normalized form. The RFC defines a set of tables, which can be combined into profiles. Each profile must define which tables it uses, and what other optional parts of the stringprep procedure are part of the profile. One example of a stringprep profile is nameprep, which is used for internationalized domain names. The module stringprep only exposes the tables from RFC 3454. As these tables would be very large to represent them as dictionaries or lists, the module uses the Unicode character database internally. The module source code itself was generated using the mkstringprep.py utility. As a result, these tables are exposed as functions, not as data structures. There are two kinds of tables in the RFC: sets and mappings. For a set, stringprep provides the &#8220;characteristic function&#8221;, i.e. a function that returns true if the parameter is part of the set. For mappings, it provides the mapping function: given the key, it returns the associated value. Below is a list of all functions available in the module.   stringprep.in_table_a1(code)\u00b6 Determine whether code is in tableA.1 (Unassigned code points in Unicode 3.2).    stringprep.in_table_b1(code)\u00b6 Determine whether code is in tableB.1 (Commonly mapped to nothing).    stringprep.map_table_b2(code)\u00b6 Return the mapped value for code according to tableB.2 (Mapping for case-folding used with NFKC).    stringprep.map_table_b3(code)\u00b6 Return the mapped value for code according to tableB.3 (Mapping for case-folding used with no normalization).    stringprep.in_table_c11(code)\u00b6 Determine whether code is in tableC.1.1  (ASCII space characters).    stringprep.in_table_c12(code)\u00b6 Determine whether code is in tableC.1.2  (Non-ASCII space characters).    stringprep.in_table_c11_c12(code)\u00b6 Determine whether code is in tableC.1  (Space characters, union of C.1.1 and C.1.2).    stringprep.in_table_c21(code)\u00b6 Determine whether code is in tableC.2.1  (ASCII control characters).    stringprep.in_table_c22(code)\u00b6 Determine whether code is in tableC.2.2  (Non-ASCII control characters).    stringprep.in_table_c21_c22(code)\u00b6 Determine whether code is in tableC.2  (Control characters, union of C.2.1 and C.2.2).    stringprep.in_table_c3(code)\u00b6 Determine whether code is in tableC.3  (Private use).    stringprep.in_table_c4(code)\u00b6 Determine whether code is in tableC.4  (Non-character code points).    stringprep.in_table_c5(code)\u00b6 Determine whether code is in tableC.5  (Surrogate codes).    stringprep.in_table_c6(code)\u00b6 Determine whether code is in tableC.6  (Inappropriate for plain text).    stringprep.in_table_c7(code)\u00b6 Determine whether code is in tableC.7  (Inappropriate for canonical representation).    stringprep.in_table_c8(code)\u00b6 Determine whether code is in tableC.8  (Change display properties or are deprecated).    stringprep.in_table_c9(code)\u00b6 Determine whether code is in tableC.9  (Tagging characters).    stringprep.in_table_d1(code)\u00b6 Determine whether code is in tableD.1  (Characters with bidirectional property &#8220;R&#8221; or &#8220;AL&#8221;).    stringprep.in_table_d2(code)\u00b6 Determine whether code is in tableD.2  (Characters with bidirectional property &#8220;L&#8221;)."},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_a1","title":"stringprep.in_table_a1","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_b1","title":"stringprep.in_table_b1","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c11","title":"stringprep.in_table_c11","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c11_c12","title":"stringprep.in_table_c11_c12","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c12","title":"stringprep.in_table_c12","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c21","title":"stringprep.in_table_c21","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c21_c22","title":"stringprep.in_table_c21_c22","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c22","title":"stringprep.in_table_c22","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c3","title":"stringprep.in_table_c3","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c4","title":"stringprep.in_table_c4","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c5","title":"stringprep.in_table_c5","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c6","title":"stringprep.in_table_c6","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c7","title":"stringprep.in_table_c7","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c8","title":"stringprep.in_table_c8","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_c9","title":"stringprep.in_table_c9","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_d1","title":"stringprep.in_table_d1","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.in_table_d2","title":"stringprep.in_table_d2","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.map_table_b2","title":"stringprep.map_table_b2","description":""},{"url":"http:\/\/docs.python.org\/library\/stringprep.html#stringprep.map_table_b3","title":"stringprep.map_table_b3","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html","title":"codecs","description":null},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.backslashreplace_errors","title":"codecs.backslashreplace_errors","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.Codec.decode","title":"codecs.Codec.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.Codec.encode","title":"codecs.Codec.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.EncodedFile","title":"codecs.EncodedFile","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.getdecoder","title":"codecs.getdecoder","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.getencoder","title":"codecs.getencoder","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.getincrementaldecoder","title":"codecs.getincrementaldecoder","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.getincrementalencoder","title":"codecs.getincrementalencoder","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.getreader","title":"codecs.getreader","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.getwriter","title":"codecs.getwriter","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.ignore_errors","title":"codecs.ignore_errors","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.IncrementalDecoder","title":"codecs.IncrementalDecoder","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.IncrementalDecoder.decode","title":"codecs.IncrementalDecoder.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.IncrementalDecoder.reset","title":"codecs.IncrementalDecoder.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.IncrementalEncoder","title":"codecs.IncrementalEncoder","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.IncrementalEncoder.encode","title":"codecs.IncrementalEncoder.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.IncrementalEncoder.reset","title":"codecs.IncrementalEncoder.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.iterdecode","title":"codecs.iterdecode","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.iterencode","title":"codecs.iterencode","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.lookup","title":"codecs.lookup","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.lookup_error","title":"codecs.lookup_error","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.open","title":"codecs.open","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.register","title":"codecs.register","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.register_error","title":"codecs.register_error","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.replace_errors","title":"codecs.replace_errors","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamReader","title":"codecs.StreamReader","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamReader.read","title":"codecs.StreamReader.read","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamReader.readline","title":"codecs.StreamReader.readline","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamReader.readlines","title":"codecs.StreamReader.readlines","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamReader.reset","title":"codecs.StreamReader.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamReaderWriter","title":"codecs.StreamReaderWriter","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamRecoder","title":"codecs.StreamRecoder","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamWriter","title":"codecs.StreamWriter","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamWriter.reset","title":"codecs.StreamWriter.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamWriter.write","title":"codecs.StreamWriter.write","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.StreamWriter.writelines","title":"codecs.StreamWriter.writelines","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.strict_errors","title":"codecs.strict_errors","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs.xmlcharrefreplace_errors","title":"codecs.xmlcharrefreplace_errors","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs_encodings.idna.nameprep","title":"encodings.idna.nameprep","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs_encodings.idna.ToASCII","title":"encodings.idna.ToASCII","description":""},{"url":"http:\/\/docs.python.org\/library\/codecs.html#codecs_encodings.idna.ToUnicode","title":"encodings.idna.ToUnicode","description":""},{"url":"http:\/\/docs.python.org\/library\/fpformat.html","title":"fpformat","description":"7.11. fpformat &#8212; Floating point conversions\u00b6  Deprecated since version 2.6: The fpformat module has been removed in Python 3.0. The fpformat module defines functions for dealing with floating point numbers representations in 100% pure Python.  Note This module is unnecessary: everything here can be done using the  string interpolation operator described in the String Formatting Operations section.  The fpformat module defines the following functions and an exception:   fpformat.fix(x, digs)\u00b6 Format x as [-]ddd.ddd with digs digits after the point and at least one digit before. If digs <= 0, the decimal point is suppressed. x can be either a number or a string that looks like one. digs is an integer. Return value is a string.     fpformat.sci(x, digs)\u00b6 Format x as [-]d.dddE[+-]ddd with digs digits after the  point and exactly one digit before. If digs <= 0, one digit is kept and the point is suppressed. x can be either a real number, or a string that looks like one. digs is an integer. Return value is a string.     exception fpformat.NotANumber\u00b6 Exception raised when a string passed to fix() or sci() as the x parameter does not look like a number. This is a subclass of ValueError when the standard exceptions are strings.  The exception value is the improperly formatted string that caused the exception to be raised.  Example: >>> import fpformat >>> fpformat.fix(1.23, 1) &#39;1.2&#39;"},{"url":"http:\/\/docs.python.org\/library\/fpformat.html#fpformat.fix","title":"fpformat.fix","description":""},{"url":"http:\/\/docs.python.org\/library\/fpformat.html#fpformat.sci","title":"fpformat.sci","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html","title":"calendar","description":"8.2. calendar &#8212; General calendar-related functions\u00b6 Source code: Lib\/calendar.py  This module allows you to output calendars like the Unix cal program, and provides additional useful functions related to the calendar. By default, these calendars have Monday as the first day of the week, and Sunday as the last (the European convention). Use setfirstweekday() to set the first day of the week to Sunday (6) or to any other weekday.  Parameters that specify dates are given as integers. For related functionality, see also the datetime and time modules. Most of these functions and classes rely on the datetime module which uses an idealized calendar, the current Gregorian calendar indefinitely extended in both directions.  This matches the definition of the &#8220;proleptic Gregorian&#8221; calendar in Dershowitz and Reingold&#8217;s book &#8220;Calendrical Calculations&#8221;, where it&#8217;s the base calendar for all computations.   class calendar.Calendar([firstweekday])\u00b6 Creates a Calendar object. firstweekday is an integer specifying the first day of the week. 0 is Monday (the default), 6 is Sunday. A Calendar object provides several methods that can be used for preparing the calendar data for formatting. This class doesn&#8217;t do any formatting itself. This is the job of subclasses.  New in version 2.5. Calendar instances have the following methods:   iterweekdays()\u00b6 Return an iterator for the week day numbers that will be used for one week.  The first value from the iterator will be the same as the value of the firstweekday property.    itermonthdates(year, month)\u00b6 Return an iterator for the month month (1-12) in the year year. This iterator will return all days (as datetime.date objects) for the month and all days before the start of the month or after the end of the month that are required to get a complete week.    itermonthdays2(year, month)\u00b6 Return an iterator for the month month in the year year similar to itermonthdates(). Days returned will be tuples consisting of a day number and a week day number.    itermonthdays(year, month)\u00b6 Return an iterator for the month month in the year year similar to itermonthdates(). Days returned will simply be day numbers.    monthdatescalendar(year, month)\u00b6 Return a list of the weeks in the month month of the year as full weeks.  Weeks are lists of seven datetime.date objects.    monthdays2calendar(year, month)\u00b6 Return a list of the weeks in the month month of the year as full weeks.  Weeks are lists of seven tuples of day numbers and weekday numbers.    monthdayscalendar(year, month)\u00b6 Return a list of the weeks in the month month of the year as full weeks.  Weeks are lists of seven day numbers.    yeardatescalendar(year[, width])\u00b6 Return the data for the specified year ready for formatting. The return value is a list of month rows. Each month row contains up to width months (defaulting to 3). Each month contains between 4 and 6 weeks and each week contains 1&#8211;7 days. Days are datetime.date objects.    yeardays2calendar(year[, width])\u00b6 Return the data for the specified year ready for formatting (similar to yeardatescalendar()). Entries in the week lists are tuples of day numbers and weekday numbers. Day numbers outside this month are zero.    yeardayscalendar(year[, width])\u00b6 Return the data for the specified year ready for formatting (similar to yeardatescalendar()). Entries in the week lists are day numbers. Day numbers outside this month are zero.      class calendar.TextCalendar([firstweekday])\u00b6 This class can be used to generate plain text calendars.  New in version 2.5. TextCalendar instances have the following methods:   formatmonth(theyear, themonth[, w[, l]])\u00b6 Return a month&#8217;s calendar in a multi-line string. If w is provided, it specifies the width of the date columns, which are centered. If l is given, it specifies the number of lines that each week will use. Depends on the first weekday as specified in the constructor or set by the setfirstweekday() method.    prmonth(theyear, themonth[, w[, l]])\u00b6 Print a month&#8217;s calendar as returned by formatmonth().    formatyear(theyear[, w[, l[, c[, m]]]])\u00b6 Return a m-column calendar for an entire year as a multi-line string. Optional parameters w, l, and c are for date column width, lines per week, and number of spaces between month columns, respectively. Depends on the first weekday as specified in the constructor or set by the setfirstweekday() method.  The earliest year for which a calendar can be generated is platform-dependent.    pryear(theyear[, w[, l[, c[, m]]]])\u00b6 Print the calendar for an entire year as returned by formatyear().      class calendar.HTMLCalendar([firstweekday])\u00b6 This class can be used to generate HTML calendars.  New in version 2.5. HTMLCalendar instances have the following methods:   formatmonth(theyear, themonth[, withyear])\u00b6 Return a month&#8217;s calendar as an HTML table. If withyear is true the year will be included in the header, otherwise just the month name will be used.    formatyear(theyear[, width])\u00b6 Return a year&#8217;s calendar as an HTML table. width (defaulting to 3) specifies the number of months per row.    formatyearpage(theyear[, width[, css[, encoding]]])\u00b6 Return a year&#8217;s calendar as a complete HTML page. width (defaulting to 3) specifies the number of months per row. css is the name for the cascading style sheet to be used. None can be passed if no style sheet should be used. encoding specifies the encoding to be used for the output (defaulting to the system default encoding).      class calendar.LocaleTextCalendar([firstweekday[, locale]])\u00b6 This subclass of TextCalendar can be passed a locale name in the constructor and will return month and weekday names in the specified locale. If this locale includes an encoding all strings containing month and weekday names will be returned as unicode.  New in version 2.5.     class calendar.LocaleHTMLCalendar([firstweekday[, locale]])\u00b6 This subclass of HTMLCalendar can be passed a locale name in the constructor and will return month and weekday names in the specified locale. If this locale includes an encoding all strings containing month and weekday names will be returned as unicode.  New in version 2.5.    Note The formatweekday() and formatmonthname() methods of these two classes temporarily change the current locale to the given locale.  Because the current locale is a process-wide setting, they are not thread-safe.  For simple text calendars this module provides the following functions.   calendar.setfirstweekday(weekday)\u00b6 Sets the weekday (0 is Monday, 6 is Sunday) to start each week. The values MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, and SUNDAY are provided for convenience. For example, to set the first weekday to Sunday: import calendar calendar.setfirstweekday(calendar.SUNDAY)    New in version 2.0.     calendar.firstweekday()\u00b6 Returns the current setting for the weekday to start each week.  New in version 2.0.     calendar.isleap(year)\u00b6 Returns True if year is a leap year, otherwise False.    calendar.leapdays(y1, y2)\u00b6 Returns the number of leap years in the range from y1 to y2 (exclusive), where y1 and y2 are years.  Changed in version 2.0: This function didn&#8217;t work for ranges spanning a century change in Python 1.5.2.     calendar.weekday(year, month, day)\u00b6 Returns the day of the week (0 is Monday) for year (1970&#8211;...), month (1&#8211;12), day (1&#8211;31).    calendar.weekheader(n)\u00b6 Return a header containing abbreviated weekday names. n specifies the width in characters for one weekday.    calendar.monthrange(year, month)\u00b6 Returns weekday of first day of the month and number of days in month,  for the specified year and month.    calendar.monthcalendar(year, month)\u00b6 Returns a matrix representing a month&#8217;s calendar.  Each row represents a week; days outside of the month a represented by zeros. Each week begins with Monday unless set by setfirstweekday().    calendar.prmonth(theyear, themonth[, w[, l]])\u00b6 Prints a month&#8217;s calendar as returned by month().    calendar.month(theyear, themonth[, w[, l]])\u00b6 Returns a month&#8217;s calendar in a multi-line string using the formatmonth() of the TextCalendar class.  New in version 2.0.     calendar.prcal(year[, w[, l[, c]]])\u00b6 Prints the calendar for an entire year as returned by  calendar().    calendar.calendar(year[, w[, l[, c]]])\u00b6 Returns a 3-column calendar for an entire year as a multi-line string using the formatyear() of the TextCalendar class.  New in version 2.0.     calendar.timegm(tuple)\u00b6 An unrelated but handy function that takes a time tuple such as returned by the gmtime() function in the time module, and returns the corresponding Unix timestamp value, assuming an epoch of 1970, and the POSIX encoding.  In fact, time.gmtime() and timegm() are each others&#8217; inverse.  New in version 2.0.   The calendar module exports the following data attributes:   calendar.day_name\u00b6 An array that represents the days of the week in the current locale.    calendar.day_abbr\u00b6 An array that represents the abbreviated days of the week in the current locale.    calendar.month_name\u00b6 An array that represents the months of the year in the current locale.  This follows normal convention of January being month number 1, so it has a length of 13 and  month_name[0] is the empty string.    calendar.month_abbr\u00b6 An array that represents the abbreviated months of the year in the current locale.  This follows normal convention of January being month number 1, so it has a length of 13 and  month_abbr[0] is the empty string.   See also  Module datetime Object-oriented interface to dates and times with similar functionality to the time module. Module time Low-level time related functions."},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar_calendar_calendar.calendar","title":"calendar.calendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar","title":"calendar.Calendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar_calendar_calendar.calendar","title":"calendar.calendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar","title":"calendar.Calendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.itermonthdates","title":"calendar.Calendar.itermonthdates","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.itermonthdays","title":"calendar.Calendar.itermonthdays","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.itermonthdays2","title":"calendar.Calendar.itermonthdays2","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.iterweekdays","title":"calendar.Calendar.iterweekdays","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.monthdatescalendar","title":"calendar.Calendar.monthdatescalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.monthdays2calendar","title":"calendar.Calendar.monthdays2calendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.monthdayscalendar","title":"calendar.Calendar.monthdayscalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.yeardatescalendar","title":"calendar.Calendar.yeardatescalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.yeardays2calendar","title":"calendar.Calendar.yeardays2calendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.Calendar.yeardayscalendar","title":"calendar.Calendar.yeardayscalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.firstweekday","title":"calendar.firstweekday","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.HTMLCalendar","title":"calendar.HTMLCalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.HTMLCalendar.formatmonth","title":"calendar.HTMLCalendar.formatmonth","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.HTMLCalendar.formatyear","title":"calendar.HTMLCalendar.formatyear","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.HTMLCalendar.formatyearpage","title":"calendar.HTMLCalendar.formatyearpage","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.isleap","title":"calendar.isleap","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.leapdays","title":"calendar.leapdays","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.LocaleHTMLCalendar","title":"calendar.LocaleHTMLCalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.LocaleTextCalendar","title":"calendar.LocaleTextCalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.month","title":"calendar.month","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.monthcalendar","title":"calendar.monthcalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.monthrange","title":"calendar.monthrange","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.prcal","title":"calendar.prcal","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.prmonth","title":"calendar.prmonth","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.setfirstweekday","title":"calendar.setfirstweekday","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.TextCalendar","title":"calendar.TextCalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.TextCalendar.formatmonth","title":"calendar.TextCalendar.formatmonth","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.TextCalendar.formatyear","title":"calendar.TextCalendar.formatyear","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.TextCalendar.prmonth","title":"calendar.TextCalendar.prmonth","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.TextCalendar.pryear","title":"calendar.TextCalendar.pryear","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.timegm","title":"calendar.timegm","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.weekday","title":"calendar.weekday","description":""},{"url":"http:\/\/docs.python.org\/library\/calendar.html#calendar.weekheader","title":"calendar.weekheader","description":""},{"url":"http:\/\/docs.python.org\/library\/heapq.html","title":"heapq","description":"8.4. heapq &#8212; Heap queue algorithm\u00b6  New in version 2.3. Source code: Lib\/heapq.py  This module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm. Heaps are binary trees for which every parent node has a value less than or equal to any of its children.  This implementation uses arrays for which heap[k] <= heap[2*k+1] and heap[k] <= heap[2*k+2] for all k, counting elements from zero.  For the sake of comparison, non-existing elements are considered to be infinite.  The interesting property of a heap is that its smallest element is always the root, heap[0]. The API below differs from textbook heap algorithms in two aspects: (a) We use zero-based indexing.  This makes the relationship between the index for a node and the indexes for its children slightly less obvious, but is more suitable since Python uses zero-based indexing. (b) Our pop method returns the smallest item, not the largest (called a &#8220;min heap&#8221; in textbooks; a &#8220;max heap&#8221; is more common in texts because of its suitability for in-place sorting). These two make it possible to view the heap as a regular Python list without surprises: heap[0] is the smallest item, and heap.sort() maintains the heap invariant! To create a heap, use a list initialized to [], or you can transform a populated list into a heap via function heapify(). The following functions are provided:   heapq.heappush(heap, item)\u00b6 Push the value item onto the heap, maintaining the heap invariant.    heapq.heappop(heap)\u00b6 Pop and return the smallest item from the heap, maintaining the heap invariant.  If the heap is empty, IndexError is raised.    heapq.heappushpop(heap, item)\u00b6 Push item on the heap, then pop and return the smallest item from the heap.  The combined action runs more efficiently than heappush() followed by a separate call to heappop().  New in version 2.6.     heapq.heapify(x)\u00b6 Transform list x into a heap, in-place, in linear time.    heapq.heapreplace(heap, item)\u00b6 Pop and return the smallest item from the heap, and also push the new item. The heap size doesn&#8217;t change. If the heap is empty, IndexError is raised. This one step operation is more efficient than a heappop() followed by heappush() and can be more appropriate when using a fixed-size heap. The pop\/push combination always returns an element from the heap and replaces it with item. The value returned may be larger than the item added.  If that isn&#8217;t desired, consider using heappushpop() instead.  Its push\/pop combination returns the smaller of the two values, leaving the larger value on the heap.   The module also offers three general purpose functions based on heaps.   heapq.merge(*iterables)\u00b6 Merge multiple sorted inputs into a single sorted output (for example, merge timestamped entries from multiple log files).  Returns an iterator over the sorted values. Similar to sorted(itertools.chain(*iterables)) but returns an iterable, does not pull the data into memory all at once, and assumes that each of the input streams is already sorted (smallest to largest).  New in version 2.6.     heapq.nlargest(n, iterable[, key])\u00b6 Return a list with the n largest elements from the dataset defined by iterable.  key, if provided, specifies a function of one argument that is used to extract a comparison key from each element in the iterable: key=str.lower Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]  New in version 2.4.  Changed in version 2.5: Added the optional key argument.     heapq.nsmallest(n, iterable[, key])\u00b6 Return a list with the n smallest elements from the dataset defined by iterable.  key, if provided, specifies a function of one argument that is used to extract a comparison key from each element in the iterable: key=str.lower Equivalent to:  sorted(iterable, key=key)[:n]  New in version 2.4.  Changed in version 2.5: Added the optional key argument.   The latter two functions perform best for smaller values of n.  For larger values, it is more efficient to use the sorted() function.  Also, when n==1, it is more efficient to use the built-in min() and max() functions.  8.4.1. Basic Examples\u00b6 A heapsort can be implemented by pushing all values onto a heap and then popping off the smallest values one at a time: >>> def heapsort(iterable): ...     &#39;Equivalent to sorted(iterable)&#39; ...     h = [] ...     for value in iterable: ...         heappush(h, value) ...     return [heappop(h) for i in range(len(h))] ... >>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]   Heap elements can be tuples.  This is useful for assigning comparison values (such as task priorities) alongside the main record being tracked: >>> h = [] >>> heappush(h, (5, &#39;write code&#39;)) >>> heappush(h, (7, &#39;release product&#39;)) >>> heappush(h, (1, &#39;write spec&#39;)) >>> heappush(h, (3, &#39;create tests&#39;)) >>> heappop(h) (1, &#39;write spec&#39;)     8.4.2. Priority Queue Implementation Notes\u00b6 A priority queue is common use for a heap, and it presents several implementation challenges:  Sort stability:  how do you get two tasks with equal priorities to be returned in the order they were originally added? In the future with Python 3, tuple comparison breaks for (priority, task) pairs if the priorities are equal and the tasks do not have a default comparison order. If the priority of a task changes, how do you move it to a new position in the heap? Or if a pending task needs to be deleted, how do you find it and remove it from the queue?  A solution to the first two challenges is to store entries as 3-element list including the priority, an entry count, and the task.  The entry count serves as a tie-breaker so that two tasks with the same priority are returned in the order they were added. And since no two entry counts are the same, the tuple comparison will never attempt to directly compare two tasks. The remaining challenges revolve around finding a pending task and making changes to its priority or removing it entirely.  Finding a task can be done with a dictionary pointing to an entry in the queue. Removing the entry or changing its priority is more difficult because it would break the heap structure invariants.  So, a possible solution is to mark the existing entry as removed and add a new entry with the revised priority: pq = []                         # list of entries arranged in a heap entry_finder = {}               # mapping of tasks to entries REMOVED = &#39;<removed-task>&#39;      # placeholder for a removed task counter = itertools.count()     # unique sequence count  def add_task(task, priority=0):     &#39;Add a new task or update the priority of an existing task&#39;     if task in entry_finder:         remove_task(task)     count = next(counter)     entry = [priority, count, task]     entry_finder[task] = entry     heappush(pq, entry)  def remove_task(task):     &#39;Mark an existing task as REMOVED.  Raise KeyError if not found.&#39;     entry = entry_finder.pop(task)     entry[-1] = REMOVED  def pop_task():     &#39;Remove and return the lowest priority task. Raise KeyError if empty.&#39;     while pq:         priority, count, task = heappop(pq)         if task is not REMOVED:             del entry_finder[task]             return task     raise KeyError(&#39;pop from an empty priority queue&#39;)     8.4.3. Theory\u00b6 Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for all k, counting elements from 0.  For the sake of comparison, non-existing elements are considered to be infinite.  The interesting property of a heap is that a[0] is always its smallest element. The strange invariant above is meant to be an efficient memory representation for a tournament.  The numbers below are k, not a[k]:                                0                1                                 2        3               4                5               6    7       8       9       10      11      12      13      14  15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30  In the tree above, each cell k is topping 2*k+1 and 2*k+2. In an usual binary tournament we see in sports, each cell is the winner over the two cells it tops, and we can trace the winner down the tree to see all opponents s\/he had.  However, in many computer applications of such tournaments, we do not need to trace the history of a winner. To be more memory efficient, when a winner is promoted, we try to replace it by something else at a lower level, and the rule becomes that a cell and the two cells it tops contain three different items, but the top cell &#8220;wins&#8221; over the two topped cells. If this heap invariant is protected at all time, index 0 is clearly the overall winner.  The simplest algorithmic way to remove it and find the &#8220;next&#8221; winner is to move some loser (let&#8217;s say cell 30 in the diagram above) into the 0 position, and then percolate this new 0 down the tree, exchanging values, until the invariant is re-established. This is clearly logarithmic on the total number of items in the tree. By iterating over all items, you get an O(n log n) sort. A nice feature of this sort is that you can efficiently insert new items while the sort is going on, provided that the inserted items are not &#8220;better&#8221; than the last 0&#8217;th element you extracted.  This is especially useful in simulation contexts, where the tree holds all incoming events, and the &#8220;win&#8221; condition means the smallest scheduled time.  When an event schedule other events for execution, they are scheduled into the future, so they can easily go into the heap.  So, a heap is a good structure for implementing schedulers (this is what I used for my MIDI sequencer :-). Various structures for implementing schedulers have been extensively studied, and heaps are good for this, as they are reasonably speedy, the speed is almost constant, and the worst case is not much different than the average case. However, there are other representations which are more efficient overall, yet the worst cases might be terrible. Heaps are also very useful in big disk sorts.  You most probably all know that a big sort implies producing &#8220;runs&#8221; (which are pre-sorted sequences, which size is usually related to the amount of CPU memory), followed by a merging passes for these runs, which merging is often very cleverly organised [1]. It is very important that the initial sort produces the longest runs possible.  Tournaments are a good way to that.  If, using all the memory available to hold a tournament, you replace and percolate items that happen to fit the current run, you&#8217;ll produce runs which are twice the size of the memory for random input, and much better for input fuzzily ordered. Moreover, if you output the 0&#8217;th item on disk and get an input which may not fit in the current tournament (because the value &#8220;wins&#8221; over the last output value), it cannot fit in the heap, so the size of the heap decreases.  The freed memory could be cleverly reused immediately for progressively building a second heap, which grows at exactly the same rate the first heap is melting.  When the first heap completely vanishes, you switch heaps and start a new run.  Clever and quite effective! In a word, heaps are useful memory structures to know.  I use them in a few applications, and I think it is good to keep a &#8216;heap&#8217; module around. :-) Footnotes    [1]The disk balancing algorithms which are current, nowadays, are more annoying than clever, and this is a consequence of the seeking capabilities of the disks. On devices which cannot seek, like big tape drives, the story was quite different, and one had to be very clever to ensure (far in advance) that each tape movement will be the most effective possible (that is, will best participate at &#8220;progressing&#8221; the merge).  Some tapes were even able to read backwards, and this was also used to avoid the rewinding time. Believe me, real good tape sorts were quite spectacular to watch! From all times, sorting has always been a Great Art! :-)"},{"url":"http:\/\/docs.python.org\/library\/heapq.html#heapq.heapify","title":"heapq.heapify","description":""},{"url":"http:\/\/docs.python.org\/library\/heapq.html#heapq.heappop","title":"heapq.heappop","description":""},{"url":"http:\/\/docs.python.org\/library\/heapq.html#heapq.heappush","title":"heapq.heappush","description":""},{"url":"http:\/\/docs.python.org\/library\/heapq.html#heapq.heappushpop","title":"heapq.heappushpop","description":""},{"url":"http:\/\/docs.python.org\/library\/heapq.html#heapq.heapreplace","title":"heapq.heapreplace","description":""},{"url":"http:\/\/docs.python.org\/library\/heapq.html#heapq.merge","title":"heapq.merge","description":""},{"url":"http:\/\/docs.python.org\/library\/heapq.html#heapq.nlargest","title":"heapq.nlargest","description":""},{"url":"http:\/\/docs.python.org\/library\/heapq.html#heapq.nsmallest","title":"heapq.nsmallest","description":""},{"url":"http:\/\/docs.python.org\/library\/bisect.html","title":"bisect","description":"8.5. bisect &#8212; Array bisection algorithm\u00b6  New in version 2.1. Source code: Lib\/bisect.py  This module provides support for maintaining a list in sorted order without having to sort the list after each insertion.  For long lists of items with expensive comparison operations, this can be an improvement over the more common approach.  The module is called bisect because it uses a basic bisection algorithm to do its work.  The source code may be most useful as a working example of the algorithm (the boundary conditions are already right!). The following functions are provided:   bisect.bisect_left(a, x, lo=0, hi=len(a))\u00b6 Locate the insertion point for x in a to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used.  If x is already present in a, the insertion point will be before (to the left of) any existing entries.  The return value is suitable for use as the first parameter to list.insert() assuming that a is already sorted. The returned insertion point i partitions the array a into two halves so that all(val < x for val in a[lo:i]) for the left side and all(val >= x for val in a[i:hi]) for the right side.     bisect.bisect_right(a, x, lo=0, hi=len(a))\u00b6  bisect.bisect(a, x, lo=0, hi=len(a))\u00b6 Similar to bisect_left(), but returns an insertion point which comes after (to the right of) any existing entries of x in a. The returned insertion point i partitions the array a into two halves so that all(val <= x for val in a[lo:i]) for the left side and all(val > x for val in a[i:hi]) for the right side.     bisect.insort_left(a, x, lo=0, hi=len(a))\u00b6 Insert x in a in sorted order.  This is equivalent to a.insert(bisect.bisect_left(a, x, lo, hi), x) assuming that a is already sorted.  Keep in mind that the O(log n) search is dominated by the slow O(n) insertion step.    bisect.insort_right(a, x, lo=0, hi=len(a))\u00b6  bisect.insort(a, x, lo=0, hi=len(a))\u00b6 Similar to insort_left(), but inserting x in a after any existing entries of x.   See also SortedCollection recipe that uses bisect to build a full-featured collection class with straight-forward search methods and support for a key-function.  The keys are precomputed to save unnecessary calls to the key function during searches.   8.5.1. Searching Sorted Lists\u00b6 The above bisect() functions are useful for finding insertion points but can be tricky or awkward to use for common searching tasks. The following five functions show how to transform them into the standard lookups for sorted lists: def index(a, x):     &#39;Locate the leftmost value exactly equal to x&#39;     i = bisect_left(a, x)     if i != len(a) and a[i] == x:         return i     raise ValueError  def find_lt(a, x):     &#39;Find rightmost value less than x&#39;     i = bisect_left(a, x)     if i:         return a[i-1]     raise ValueError  def find_le(a, x):     &#39;Find rightmost value less than or equal to x&#39;     i = bisect_right(a, x)     if i:         return a[i-1]     raise ValueError  def find_gt(a, x):     &#39;Find leftmost value greater than x&#39;     i = bisect_right(a, x)     if i != len(a):         return a[i]     raise ValueError  def find_ge(a, x):     &#39;Find leftmost item greater than or equal to x&#39;     i = bisect_left(a, x)     if i != len(a):         return a[i]     raise ValueError     8.5.2. Other Examples\u00b6 The bisect() function can be useful for numeric table lookups. This example uses bisect() to look up a letter grade for an exam score (say) based on a set of ordered numeric breakpoints: 90 and up is an &#8216;A&#8217;, 80 to 89 is a &#8216;B&#8217;, and so on: >>> def grade(score, breakpoints=[60, 70, 80, 90], grades=&#39;FDCBA&#39;): ...     i = bisect(breakpoints, score) ...     return grades[i] ... >>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]] [&#39;F&#39;, &#39;A&#39;, &#39;C&#39;, &#39;C&#39;, &#39;B&#39;, &#39;A&#39;, &#39;A&#39;]   Unlike the sorted() function, it does not make sense for the bisect() functions to have key or reversed arguments because that would lead to an inefficient design (successive calls to bisect functions would not &#8220;remember&#8221; all of the previous key lookups). Instead, it is better to search a list of precomputed keys to find the index of the record in question: >>> data = [(&#39;red&#39;, 5), (&#39;blue&#39;, 1), (&#39;yellow&#39;, 8), (&#39;black&#39;, 0)] >>> data.sort(key=lambda r: r[1]) >>> keys = [r[1] for r in data]         # precomputed list of keys >>> data[bisect_left(keys, 0)] (&#39;black&#39;, 0) >>> data[bisect_left(keys, 1)] (&#39;blue&#39;, 1) >>> data[bisect_left(keys, 5)] (&#39;red&#39;, 5) >>> data[bisect_left(keys, 8)] (&#39;yellow&#39;, 8)"},{"url":"http:\/\/docs.python.org\/library\/bisect.html#bisect.bisect_left","title":"bisect.bisect_left","description":""},{"url":"http:\/\/docs.python.org\/library\/bisect.html#bisect.bisect_right","title":"bisect.bisect_right","description":""},{"url":"http:\/\/docs.python.org\/library\/bisect.html#bisect.insort_left","title":"bisect.insort_left","description":""},{"url":"http:\/\/docs.python.org\/library\/bisect.html#bisect.insort_right","title":"bisect.insort_right","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html","title":"array","description":"8.6. array &#8212; Efficient arrays of numeric values\u00b6 This module defines an object type which can compactly represent an array of basic values: characters, integers, floating point numbers.  Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained.  The type is specified at object creation time by using a type code, which is a single character.  The following type codes are defined:         Type code C Type Python Type Minimum size in bytes    'c' char character 1  'b' signed char int 1  'B' unsigned char int 1  'u' Py_UNICODE Unicode character 2 (see note)  'h' signed short int 2  'H' unsigned short int 2  'i' signed int int 2  'I' unsigned int long 2  'l' signed long int 4  'L' unsigned long long 4  'f' float float 4  'd' double float 8     Note The 'u' typecode corresponds to Python&#8217;s unicode character.  On narrow Unicode builds this is 2-bytes, on wide builds this is 4-bytes.  The actual representation of values is determined by the machine architecture (strictly speaking, by the C implementation).  The actual size can be accessed through the itemsize attribute.  The values stored  for 'L' and 'I' items will be represented as Python long integers when retrieved, because Python&#8217;s plain integer type cannot represent the full range of C&#8217;s unsigned (long) integers. The module defines the following type:   class array.array(typecode[, initializer])\u00b6 A new array whose items are restricted by typecode, and initialized from the optional initializer value, which must be a list, string, or iterable over elements of the appropriate type.  Changed in version 2.4: Formerly, only lists or strings were accepted. If given a list or string, the initializer is passed to the new array&#8217;s fromlist(), fromstring(), or fromunicode() method (see below) to add initial items to the array.  Otherwise, the iterable initializer is passed to the extend() method.     array.ArrayType\u00b6 Obsolete alias for array.  Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication.  When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, TypeError is raised. Array objects also implement the buffer interface, and may be used wherever buffer objects are supported. The following data items and methods are also supported:   array.typecode\u00b6 The typecode character used to create the array.    array.itemsize\u00b6 The length in bytes of one array item in the internal representation.    array.append(x)\u00b6 Append a new item with value x to the end of the array.    array.buffer_info()\u00b6 Return a tuple (address, length) giving the current memory address and the length in elements of the buffer used to hold array&#8217;s contents.  The size of the memory buffer in bytes can be computed as array.buffer_info()[1] * array.itemsize.  This is occasionally useful when working with low-level (and inherently unsafe) I\/O interfaces that require memory addresses, such as certain ioctl() operations.  The returned numbers are valid as long as the array exists and no length-changing operations are applied to it.  Note When using array objects from code written in C or C++ (the only way to effectively make use of this information), it makes more sense to use the buffer interface supported by array objects.  This method is maintained for backward compatibility and should be avoided in new code.  The buffer interface is documented in Buffers and Memoryview Objects.      array.byteswap()\u00b6 &#8220;Byteswap&#8221; all items of the array.  This is only supported for values which are 1, 2, 4, or 8 bytes in size; for other types of values, RuntimeError is raised.  It is useful when reading data from a file written on a machine with a different byte order.    array.count(x)\u00b6 Return the number of occurrences of x in the array.    array.extend(iterable)\u00b6 Append items from iterable to the end of the array.  If iterable is another array, it must have exactly the same type code; if not, TypeError will be raised.  If iterable is not an array, it must be iterable and its elements must be the right type to be appended to the array.  Changed in version 2.4: Formerly, the argument could only be another array.     array.fromfile(f, n)\u00b6 Read n items (as machine values) from the file object f and append them to the end of the array.  If less than n items are available, EOFError is raised, but the items that were available are still inserted into the array. f must be a real built-in file object; something else with a read() method won&#8217;t do.    array.fromlist(list)\u00b6 Append items from the list.  This is equivalent to for x in list: a.append(x) except that if there is a type error, the array is unchanged.    array.fromstring(s)\u00b6 Appends items from the string, interpreting the string as an array of machine values (as if it had been read from a file using the fromfile() method).    array.fromunicode(s)\u00b6 Extends this array with data from the given unicode string.  The array must be a type 'u' array; otherwise a ValueError is raised.  Use array.fromstring(unicodestring.encode(enc)) to append Unicode data to an array of some other type.    array.index(x)\u00b6 Return the smallest i such that i is the index of the first occurrence of x in the array.    array.insert(i, x)\u00b6 Insert a new item with value x in the array before position i. Negative values are treated as being relative to the end of the array.    array.pop([i])\u00b6 Removes the item with the index i from the array and returns it. The optional argument defaults to -1, so that by default the last item is removed and returned.    array.read(f, n)\u00b6  Deprecated since version 1.5.1: Use the fromfile() method. Read n items (as machine values) from the file object f and append them to the end of the array.  If less than n items are available, EOFError is raised, but the items that were available are still inserted into the array. f must be a real built-in file object; something else with a read() method won&#8217;t do.     array.remove(x)\u00b6 Remove the first occurrence of x from the array.    array.reverse()\u00b6 Reverse the order of the items in the array.    array.tofile(f)\u00b6 Write all items (as machine values) to the file object f.    array.tolist()\u00b6 Convert the array to an ordinary list with the same items.    array.tostring()\u00b6 Convert the array to an array of machine values and return the string representation (the same sequence of bytes that would be written to a file by the tofile() method.)    array.tounicode()\u00b6 Convert the array to a unicode string.  The array must be a type 'u' array; otherwise a ValueError is raised. Use array.tostring().decode(enc) to obtain a unicode string from an array of some other type.    array.write(f)\u00b6  Deprecated since version 1.5.1: Use the tofile() method. Write all items (as machine values) to the file object f.   When an array object is printed or converted to a string, it is represented as array(typecode, initializer).  The initializer is omitted if the array is empty, otherwise it is a string if the typecode is 'c', otherwise it is a list of numbers.  The string is guaranteed to be able to be converted back to an array with the same type and value using eval(), so long as the array() function has been imported using from array import array. Examples: array(&#39;l&#39;) array(&#39;c&#39;, &#39;hello world&#39;) array(&#39;u&#39;, u&#39;hello \\u2641&#39;) array(&#39;l&#39;, [1, 2, 3, 4, 5]) array(&#39;d&#39;, [1.0, 2.0, 3.14])    See also  Module struct Packing and unpacking of heterogeneous binary data. Module xdrlib Packing and unpacking of External Data Representation (XDR) data as used in some remote procedure call systems. The Numerical Python Manual The Numeric Python extension (NumPy) defines another array type; see http:\/\/numpy.sourceforge.net\/ for further information about Numerical Python. (A PDF version of the NumPy manual is available at http:\/\/numpy.sourceforge.net\/numdoc\/numdoc.pdf)."},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array","title":"array.array","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.append","title":"array.array.append","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.buffer_info","title":"array.array.buffer_info","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.byteswap","title":"array.array.byteswap","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.count","title":"array.array.count","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.extend","title":"array.array.extend","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.fromfile","title":"array.array.fromfile","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.fromlist","title":"array.array.fromlist","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.fromstring","title":"array.array.fromstring","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.fromunicode","title":"array.array.fromunicode","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.index","title":"array.array.index","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.insert","title":"array.array.insert","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.pop","title":"array.array.pop","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.read","title":"array.array.read","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.remove","title":"array.array.remove","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.reverse","title":"array.array.reverse","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.tofile","title":"array.array.tofile","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.tolist","title":"array.array.tolist","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.tostring","title":"array.array.tostring","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.tounicode","title":"array.array.tounicode","description":""},{"url":"http:\/\/docs.python.org\/library\/array.html#array.array.write","title":"array.array.write","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html","title":"datetime","description":null},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date","title":"datetime.date","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.__str__","title":"datetime.date.__str__","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.ctime","title":"datetime.date.ctime","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.isocalendar","title":"datetime.date.isocalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.isoformat","title":"datetime.date.isoformat","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.isoweekday","title":"datetime.date.isoweekday","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.replace","title":"datetime.date.replace","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.strftime","title":"datetime.date.strftime","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.timetuple","title":"datetime.date.timetuple","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.toordinal","title":"datetime.date.toordinal","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.date.weekday","title":"datetime.date.weekday","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime","title":"datetime.datetime","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.__str__","title":"datetime.datetime.__str__","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.astimezone","title":"datetime.datetime.astimezone","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.ctime","title":"datetime.datetime.ctime","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.date","title":"datetime.datetime.date","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.dst","title":"datetime.datetime.dst","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.isocalendar","title":"datetime.datetime.isocalendar","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.isoformat","title":"datetime.datetime.isoformat","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.isoweekday","title":"datetime.datetime.isoweekday","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.replace","title":"datetime.datetime.replace","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.strftime","title":"datetime.datetime.strftime","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.time","title":"datetime.datetime.time","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.timetuple","title":"datetime.datetime.timetuple","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.timetz","title":"datetime.datetime.timetz","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.toordinal","title":"datetime.datetime.toordinal","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.tzname","title":"datetime.datetime.tzname","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.utcoffset","title":"datetime.datetime.utcoffset","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.utctimetuple","title":"datetime.datetime.utctimetuple","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.weekday","title":"datetime.datetime.weekday","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.time","title":"datetime.time","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.time.__str__","title":"datetime.time.__str__","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.time.dst","title":"datetime.time.dst","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.time.isoformat","title":"datetime.time.isoformat","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.time.replace","title":"datetime.time.replace","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.time.strftime","title":"datetime.time.strftime","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.time.tzname","title":"datetime.time.tzname","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.time.utcoffset","title":"datetime.time.utcoffset","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.timedelta","title":"datetime.timedelta","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.timedelta.total_seconds","title":"datetime.timedelta.total_seconds","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.tzinfo","title":"datetime.tzinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.tzinfo.dst","title":"datetime.tzinfo.dst","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.tzinfo.fromutc","title":"datetime.tzinfo.fromutc","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.tzinfo.tzname","title":"datetime.tzinfo.tzname","description":""},{"url":"http:\/\/docs.python.org\/library\/datetime.html#datetime.tzinfo.utcoffset","title":"datetime.tzinfo.utcoffset","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html","title":"collections","description":null},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Container","title":"collections.Container","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Counter","title":"collections.Counter","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Counter.elements","title":"collections.Counter.elements","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Counter.fromkeys","title":"collections.Counter.fromkeys","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Counter.most_common","title":"collections.Counter.most_common","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Counter.subtract","title":"collections.Counter.subtract","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Counter.update","title":"collections.Counter.update","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.defaultdict","title":"collections.defaultdict","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.defaultdict.__missing__","title":"collections.defaultdict.__missing__","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque","title":"collections.deque","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.append","title":"collections.deque.append","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.appendleft","title":"collections.deque.appendleft","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.clear","title":"collections.deque.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.count","title":"collections.deque.count","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.extend","title":"collections.deque.extend","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.extendleft","title":"collections.deque.extendleft","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.pop","title":"collections.deque.pop","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.popleft","title":"collections.deque.popleft","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.remove","title":"collections.deque.remove","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.reverse","title":"collections.deque.reverse","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.deque.rotate","title":"collections.deque.rotate","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Iterable","title":"collections.Iterable","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Iterator","title":"collections.Iterator","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Mapping","title":"collections.Mapping","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.MappingView","title":"collections.MappingView","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.namedtuple","title":"collections.namedtuple","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.OrderedDict","title":"collections.OrderedDict","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.OrderedDict.popitem","title":"collections.OrderedDict.popitem","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Sequence","title":"collections.Sequence","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.Set","title":"collections.Set","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.somenamedtuple._asdict","title":"collections.somenamedtuple._asdict","description":""},{"url":"http:\/\/docs.python.org\/library\/collections.html#collections.somenamedtuple._replace","title":"collections.somenamedtuple._replace","description":""},{"url":"http:\/\/docs.python.org\/library\/sched.html","title":"sched","description":"8.8. sched &#8212; Event scheduler\u00b6 Source code: Lib\/sched.py  The sched module defines a class which implements a general purpose event scheduler:   class sched.scheduler(timefunc, delayfunc)\u00b6 The scheduler class defines a generic interface to scheduling events. It needs two functions to actually deal with the &#8220;outside world&#8221; &#8212; timefunc should be callable without arguments, and return  a number (the &#8220;time&#8221;, in any units whatsoever).  The delayfunc function should be callable with one argument, compatible with the output of timefunc, and should delay that many time units. delayfunc will also be called with the argument 0 after each event is run to allow other threads an opportunity to run in multi-threaded applications.  Example: >>> import sched, time >>> s = sched.scheduler(time.time, time.sleep) >>> def print_time(): print \"From print_time\", time.time() ... >>> def print_some_times(): ...     print time.time() ...     s.enter(5, 1, print_time, ()) ...     s.enter(10, 1, print_time, ()) ...     s.run() ...     print time.time() ... >>> print_some_times() 930343690.257 From print_time 930343695.274 From print_time 930343700.273 930343700.276   In multi-threaded environments, the scheduler class has limitations with respect to thread-safety, inability to insert a new task before the one currently pending in a running scheduler, and holding up the main thread until the event queue is empty.  Instead, the preferred approach is to use the threading.Timer class instead. Example: >>> import time >>> from threading import Timer >>> def print_time(): ...     print \"From print_time\", time.time() ... >>> def print_some_times(): ...     print time.time() ...     Timer(5, print_time, ()).start() ...     Timer(10, print_time, ()).start() ...     time.sleep(11)  # sleep while time-delay events execute ...     print time.time() ... >>> print_some_times() 930343690.257 From print_time 930343695.274 From print_time 930343700.273 930343701.301    8.8.1. Scheduler Objects\u00b6 scheduler instances have the following methods and attributes:   scheduler.enterabs(time, priority, action, argument)\u00b6 Schedule a new event. The time argument should be a numeric type compatible with the return value of the timefunc function passed  to the constructor. Events scheduled for the same time will be executed in the order of their priority. Executing the event means executing action(*argument).  argument must be a sequence holding the parameters for action. Return value is an event which may be used for later cancellation of the event (see cancel()).     scheduler.enter(delay, priority, action, argument)\u00b6 Schedule an event for delay more time units. Other than the relative time, the other arguments, the effect and the return value are the same as those for enterabs().    scheduler.cancel(event)\u00b6 Remove the event from the queue. If event is not an event currently in the queue, this method will raise a ValueError.    scheduler.empty()\u00b6 Return true if the event queue is empty.    scheduler.run()\u00b6 Run all scheduled events. This function will wait  (using the delayfunc() function passed to the constructor) for the next event, then execute it and so on until there are no more scheduled events. Either action or delayfunc can raise an exception.  In either case, the scheduler will maintain a consistent state and propagate the exception.  If an exception is raised by action, the event will not be attempted in future calls to run(). If a sequence of events takes longer to run than the time available before the next event, the scheduler will simply fall behind.  No events will be dropped; the calling code is responsible for canceling  events which are no longer pertinent.     scheduler.queue\u00b6 Read-only attribute returning a list of upcoming events in the order they will be run.  Each event is shown as a named tuple with the following fields:  time, priority, action, argument.  New in version 2.6."},{"url":"http:\/\/docs.python.org\/library\/sched.html#sched.scheduler","title":"sched.scheduler","description":""},{"url":"http:\/\/docs.python.org\/library\/sched.html#sched.scheduler.cancel","title":"sched.scheduler.cancel","description":""},{"url":"http:\/\/docs.python.org\/library\/sched.html#sched.scheduler.empty","title":"sched.scheduler.empty","description":""},{"url":"http:\/\/docs.python.org\/library\/sched.html#sched.scheduler.enter","title":"sched.scheduler.enter","description":""},{"url":"http:\/\/docs.python.org\/library\/sched.html#sched.scheduler.enterabs","title":"sched.scheduler.enterabs","description":""},{"url":"http:\/\/docs.python.org\/library\/sched.html#sched.scheduler.run","title":"sched.scheduler.run","description":""},{"url":"http:\/\/docs.python.org\/library\/mutex.html","title":"mutex","description":"8.9. mutex &#8212; Mutual exclusion support\u00b6  Deprecated since version 2.6: The mutex module has been removed in Python 3.0. The mutex module defines a class that allows mutual-exclusion via acquiring and releasing locks. It does not require (or imply) threading or multi-tasking, though it could be useful for those purposes. The mutex module defines the following class:   class mutex.mutex\u00b6 Create a new (unlocked) mutex. A mutex has two pieces of state &#8212; a &#8220;locked&#8221; bit and a queue. When the mutex is not locked, the queue is empty. Otherwise, the queue contains zero or more (function, argument) pairs representing functions (or methods) waiting to acquire the lock. When the mutex is unlocked while the queue is not empty, the first queue entry is removed and its  function(argument) pair called, implying it now has the lock. Of course, no multi-threading is implied &#8211; hence the funny interface for lock(), where a function is called once the lock is acquired.    8.9.1. Mutex Objects\u00b6 mutex objects have following methods:   mutex.test()\u00b6 Check whether the mutex is locked.    mutex.testandset()\u00b6 &#8220;Atomic&#8221; test-and-set, grab the lock if it is not set, and return True, otherwise, return False.    mutex.lock(function, argument)\u00b6 Execute function(argument), unless the mutex is locked. In the case it is locked, place the function and argument on the queue. See unlock() for explanation of when function(argument) is executed in that case.    mutex.unlock()\u00b6 Unlock the mutex if queue is empty, otherwise execute the first element in the queue."},{"url":"http:\/\/docs.python.org\/library\/mutex.html#mutex.mutex","title":"mutex.mutex","description":""},{"url":"http:\/\/docs.python.org\/library\/mutex.html#mutex.mutex.lock","title":"mutex.mutex.lock","description":""},{"url":"http:\/\/docs.python.org\/library\/mutex.html#mutex.mutex.test","title":"mutex.mutex.test","description":""},{"url":"http:\/\/docs.python.org\/library\/mutex.html#mutex.mutex.testandset","title":"mutex.mutex.testandset","description":""},{"url":"http:\/\/docs.python.org\/library\/mutex.html#mutex.mutex.unlock","title":"mutex.mutex.unlock","description":""},{"url":"http:\/\/docs.python.org\/library\/sets.html","title":"sets","description":null},{"url":"http:\/\/docs.python.org\/library\/sets.html#sets.ImmutableSet","title":"sets.ImmutableSet","description":""},{"url":"http:\/\/docs.python.org\/library\/sets.html#sets.Set","title":"sets.Set","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html","title":"Queue","description":"8.10. Queue &#8212; A synchronized queue class\u00b6  Note The Queue module has been renamed to queue in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  Source code: Lib\/Queue.py  The Queue module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads.  The Queue class in this module implements all the required locking semantics.  It depends on the availability of thread support in Python; see the threading module. Implements three types of queue whose only difference is the order that the entries are retrieved.  In a FIFO queue, the first tasks added are the first retrieved. In a LIFO queue, the most recently added entry is the first retrieved (operating like a stack).  With a priority queue, the entries are kept sorted (using the heapq module) and the lowest valued entry is retrieved first. The Queue module defines the following classes and exceptions:   class Queue.Queue(maxsize=0)\u00b6 Constructor for a FIFO queue.  maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If maxsize is less than or equal to zero, the queue size is infinite.    class Queue.LifoQueue(maxsize=0)\u00b6 Constructor for a LIFO queue.  maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If maxsize is less than or equal to zero, the queue size is infinite.  New in version 2.6.     class Queue.PriorityQueue(maxsize=0)\u00b6 Constructor for a priority queue.  maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue.  Insertion will block once this size has been reached, until queue items are consumed.  If maxsize is less than or equal to zero, the queue size is infinite. The lowest valued entries are retrieved first (the lowest valued entry is the one returned by sorted(list(entries))[0]).  A typical pattern for entries is a tuple in the form: (priority_number, data).  New in version 2.6.     exception Queue.Empty\u00b6 Exception raised when non-blocking get() (or get_nowait()) is called on a Queue object which is empty.    exception Queue.Full\u00b6 Exception raised when non-blocking put() (or put_nowait()) is called on a Queue object which is full.   See also collections.deque is an alternative implementation of unbounded queues with fast atomic append() and popleft() operations that do not require locking.   8.10.1. Queue Objects\u00b6 Queue objects (Queue, LifoQueue, or PriorityQueue) provide the public methods described below.   Queue.qsize()\u00b6 Return the approximate size of the queue.  Note, qsize() > 0 doesn&#8217;t guarantee that a subsequent get() will not block, nor will qsize() < maxsize guarantee that put() will not block.    Queue.empty()\u00b6 Return True if the queue is empty, False otherwise.  If empty() returns True it doesn&#8217;t guarantee that a subsequent call to put() will not block.  Similarly, if empty() returns False it doesn&#8217;t guarantee that a subsequent call to get() will not block.    Queue.full()\u00b6 Return True if the queue is full, False otherwise.  If full() returns True it doesn&#8217;t guarantee that a subsequent call to get() will not block.  Similarly, if full() returns False it doesn&#8217;t guarantee that a subsequent call to put() will not block.    Queue.put(item[, block[, timeout]])\u00b6 Put item into the queue. If optional args block is true and timeout is None (the default), block if necessary until a free slot is available. If timeout is a positive number, it blocks at most timeout seconds and raises the Full exception if no free slot was available within that time. Otherwise (block is false), put an item on the queue if a free slot is immediately available, else raise the Full exception (timeout is ignored in that case).  New in version 2.3: The timeout parameter.     Queue.put_nowait(item)\u00b6 Equivalent to put(item, False).    Queue.get([block[, timeout]])\u00b6 Remove and return an item from the queue. If optional args block is true and timeout is None (the default), block if necessary until an item is available. If timeout is a positive number, it blocks at most timeout seconds and raises the Empty exception if no item was available within that time. Otherwise (block is false), return an item if one is immediately available, else raise the Empty exception (timeout is ignored in that case).  New in version 2.3: The timeout parameter.     Queue.get_nowait()\u00b6 Equivalent to get(False).  Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads.   Queue.task_done()\u00b6 Indicate that a formerly enqueued task is complete.  Used by queue consumer threads.  For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete. If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue). Raises a ValueError if called more times than there were items placed in the queue.  New in version 2.5.     Queue.join()\u00b6 Blocks until all items in the queue have been gotten and processed. The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer thread calls task_done() to indicate that the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, join() unblocks.  New in version 2.5.   Example of how to wait for enqueued tasks to be completed: def worker():     while True:         item = q.get()         do_work(item)         q.task_done()  q = Queue() for i in range(num_worker_threads):      t = Thread(target=worker)      t.daemon = True      t.start()  for item in source():     q.put(item)  q.join()       # block until all tasks are done"},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.LifoQueue","title":"Queue.LifoQueue","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.PriorityQueue","title":"Queue.PriorityQueue","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue","title":"Queue.Queue","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.empty","title":"Queue.Queue.empty","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.full","title":"Queue.Queue.full","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.get","title":"Queue.Queue.get","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.get_nowait","title":"Queue.Queue.get_nowait","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.join","title":"Queue.Queue.join","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.put","title":"Queue.Queue.put","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.put_nowait","title":"Queue.Queue.put_nowait","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.qsize","title":"Queue.Queue.qsize","description":""},{"url":"http:\/\/docs.python.org\/library\/queue.html#Queue.Queue.task_done","title":"Queue.Queue.task_done","description":""},{"url":"http:\/\/docs.python.org\/library\/new.html","title":"new","description":"8.16. new &#8212; Creation of runtime internal objects\u00b6  Deprecated since version 2.6: The new module has been removed in Python 3.0.  Use the types module&#8217;s classes instead. The new module allows an interface to the interpreter object creation functions. This is for use primarily in marshal-type functions, when a new object needs to be created &#8220;magically&#8221; and not by using the regular creation functions. This module provides a low-level interface to the interpreter, so care must be exercised when using this module. It is possible to supply non-sensical arguments which crash the interpreter when the object is used. The new module defines the following functions:   new.instance(class[, dict])\u00b6 This function creates an instance of class with dictionary dict without calling the __init__() constructor.  If dict is omitted or None, a new, empty dictionary is created for the new instance.  Note that there are no guarantees that the object will be in a consistent state.    new.instancemethod(function, instance, class)\u00b6 This function will return a method object, bound to instance, or unbound if instance is None.  function must be callable.    new.function(code, globals[, name[, argdefs[, closure]]])\u00b6 Returns a (Python) function with the given code and globals. If name is given, it must be a string or None.  If it is a string, the function will have the given name, otherwise the function name will be taken from code.co_name.  If argdefs is given, it must be a tuple and will be used to determine the default values of parameters.  If closure is given, it must be None or a tuple of cell objects containing objects to bind to the names in code.co_freevars.    new.code(argcount, nlocals, stacksize, flags, codestring, constants, names, varnames, filename, name, firstlineno, lnotab)\u00b6 This function is an interface to the PyCode_New() C function.    new.module(name[, doc])\u00b6 This function returns a new module object with name name. name must be a string. The optional doc argument can have any type.    new.classobj(name, baseclasses, dict)\u00b6 This function returns a new class object, with name name, derived from baseclasses (which should be a tuple of classes) and with namespace dict."},{"url":"http:\/\/docs.python.org\/library\/new.html#new.classobj","title":"new.classobj","description":""},{"url":"http:\/\/docs.python.org\/library\/new.html#new.code","title":"new.code","description":""},{"url":"http:\/\/docs.python.org\/library\/new.html#new.function","title":"new.function","description":""},{"url":"http:\/\/docs.python.org\/library\/new.html#new.instance","title":"new.instance","description":""},{"url":"http:\/\/docs.python.org\/library\/new.html#new.instancemethod","title":"new.instancemethod","description":""},{"url":"http:\/\/docs.python.org\/library\/new.html#new.module","title":"new.module","description":""},{"url":"http:\/\/docs.python.org\/library\/types.html","title":"types","description":"8.15. types &#8212; Names for built-in types\u00b6 Source code: Lib\/types.py  This module defines names for some object types that are used by the standard Python interpreter, but not for the types defined by various extension modules. Also, it does not include some of the types that arise during processing such as the listiterator type. It is safe to use from types import * &#8212; the module does not export any names besides the ones listed here. New names exported by future versions of this module will all end in Type. Typical use is for functions that do different things depending on their argument types, like the following: from types import * def delete(mylist, item):     if type(item) is IntType:        del mylist[item]     else:        mylist.remove(item)   Starting in Python 2.2, built-in factory functions such as int() and str() are also names for the corresponding types.  This is now the preferred way to access the type instead of using the types module. Accordingly, the example above should be written as follows: def delete(mylist, item):     if isinstance(item, int):        del mylist[item]     else:        mylist.remove(item)   The module defines the following names:   types.NoneType\u00b6 The type of None.    types.TypeType\u00b6 The type of type objects (such as returned by type()); alias of the built-in type.     types.BooleanType\u00b6 The type of the bool values True and False; alias of the built-in bool.  New in version 2.3.     types.IntType\u00b6 The type of integers (e.g. 1); alias of the built-in int.    types.LongType\u00b6 The type of long integers (e.g. 1L); alias of the built-in long.    types.FloatType\u00b6 The type of floating point numbers (e.g. 1.0); alias of the built-in float.    types.ComplexType\u00b6 The type of complex numbers (e.g. 1.0j).  This is not defined if Python was built without complex number support.    types.StringType\u00b6 The type of character strings (e.g. 'Spam'); alias of the built-in str.    types.UnicodeType\u00b6 The type of Unicode character strings (e.g. u'Spam').  This is not defined if Python was built without Unicode support.  It&#8217;s an alias of the built-in unicode.    types.TupleType\u00b6 The type of tuples (e.g. (1, 2, 3, 'Spam')); alias of the built-in tuple.    types.ListType\u00b6 The type of lists (e.g. [0, 1, 2, 3]); alias of the built-in list.    types.DictType\u00b6 The type of dictionaries (e.g. {'Bacon': 1, 'Ham': 0}); alias of the built-in dict.    types.DictionaryType\u00b6 An alternate name for DictType.    types.FunctionType\u00b6  types.LambdaType\u00b6 The type of user-defined functions and functions created by lambda expressions.    types.GeneratorType\u00b6 The type of generator-iterator objects, produced by calling a generator function.  New in version 2.2.     types.CodeType\u00b6 The type for code objects such as returned by compile().     types.ClassType\u00b6 The type of user-defined old-style classes.    types.InstanceType\u00b6 The type of instances of user-defined classes.    types.MethodType\u00b6 The type of methods of user-defined class instances.    types.UnboundMethodType\u00b6 An alternate name for MethodType.    types.BuiltinFunctionType\u00b6  types.BuiltinMethodType\u00b6 The type of built-in functions like len() or sys.exit(), and methods of built-in classes.  (Here, the term &#8220;built-in&#8221; means &#8220;written in C&#8221;.)    types.ModuleType\u00b6 The type of modules.    types.FileType\u00b6 The type of open file objects such as sys.stdout; alias of the built-in file.    types.XRangeType\u00b6 The type of range objects returned by xrange(); alias of the built-in xrange.     types.SliceType\u00b6 The type of objects returned by slice(); alias of the built-in slice.     types.EllipsisType\u00b6 The type of Ellipsis.    types.TracebackType\u00b6 The type of traceback objects such as found in sys.exc_traceback.    types.FrameType\u00b6 The type of frame objects such as found in tb.tb_frame if tb is a traceback object.    types.BufferType\u00b6 The type of buffer objects created by the buffer() function.     types.DictProxyType\u00b6 The type of dict proxies, such as TypeType.__dict__.    types.NotImplementedType\u00b6 The type of NotImplemented    types.GetSetDescriptorType\u00b6 The type of objects defined in extension modules with PyGetSetDef, such as FrameType.f_locals or array.array.typecode.  This type is used as descriptor for object attributes; it has the same purpose as the property type, but for classes defined in extension modules.  New in version 2.5.     types.MemberDescriptorType\u00b6 The type of objects defined in extension modules with PyMemberDef, such as datetime.timedelta.days.  This type is used as descriptor for simple C data members which use standard conversion functions; it has the same purpose as the property type, but for classes defined in extension modules.  CPython implementation detail: In other implementations of Python, this type may be identical to GetSetDescriptorType.   New in version 2.5.     types.StringTypes\u00b6 A sequence containing StringType and UnicodeType used to facilitate easier checking for any string object.  Using this is more portable than using a sequence of the two string types constructed elsewhere since it only contains UnicodeType if it has been built in the running version of Python.  For example: isinstance(s, types.StringTypes).  New in version 2.2."},{"url":"http:\/\/docs.python.org\/library\/userdict.html","title":"UserDict","description":"8.12. UserDict &#8212; Class wrapper for dictionary objects\u00b6 Source code: Lib\/UserDict.py  The module defines a mixin,  DictMixin, defining all dictionary methods for classes that already have a minimum mapping interface.  This greatly simplifies writing classes that need to be substitutable for dictionaries (such as the shelve module). This module also defines a class, UserDict, that acts as a wrapper around dictionary objects.  The need for this class has been largely supplanted by the ability to subclass directly from dict (a feature that became available starting with Python version 2.2).  Prior to the introduction of dict, the UserDict class was used to create dictionary-like sub-classes that obtained new behaviors by overriding existing methods or adding new ones. The UserDict module defines the UserDict class and DictMixin:   class UserDict.UserDict([initialdata])\u00b6 Class that simulates a dictionary.  The instance&#8217;s contents are kept in a regular dictionary, which is accessible via the data attribute of UserDict instances.  If initialdata is provided, data is initialized with its contents; note that a reference to initialdata will not be kept, allowing it be used for other purposes.  Note For backward compatibility, instances of UserDict are not iterable.      class UserDict.IterableUserDict([initialdata])\u00b6 Subclass of UserDict that supports direct iteration (e.g.  for key in myDict).  In addition to supporting the methods and operations of mappings (see section Mapping Types &#8212; dict), UserDict and IterableUserDict instances provide the following attribute:   IterableUserDict.data\u00b6 A real dictionary used to store the contents of the UserDict class.    class UserDict.DictMixin\u00b6 Mixin defining all dictionary methods for classes that already have a minimum dictionary interface including __getitem__(), __setitem__(), __delitem__(), and keys(). This mixin should be used as a superclass.  Adding each of the above methods adds progressively more functionality.  For instance, defining all but __delitem__() will preclude only pop() and popitem() from the full interface. In addition to the four base methods, progressively more efficiency comes with defining __contains__(), __iter__(), and iteritems(). Since the mixin has no knowledge of the subclass constructor, it does not define __init__() or copy(). Starting with Python version 2.6, it is recommended to use collections.MutableMapping instead of DictMixin.    8.13. UserList &#8212; Class wrapper for list objects\u00b6  Note This module is available for backward compatibility only.  If you are writing code that does not need to work with versions of Python earlier than Python 2.2, please consider subclassing directly from the built-in list type.  This module defines a class that acts as a wrapper around list objects.  It is a useful base class for your own list-like classes, which can inherit from them and override existing methods or add new ones.  In this way one can add new behaviors to lists. The UserList module defines the UserList class:   class UserList.UserList([list])\u00b6 Class that simulates a list.  The instance&#8217;s contents are kept in a regular list, which is accessible via the data attribute of UserList instances.  The instance&#8217;s contents are initially set to a copy of list, defaulting to the empty list [].  list can be any iterable, e.g. a real Python list or a UserList object.  Note The UserList class has been moved to the collections module in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.    In addition to supporting the methods and operations of mutable sequences (see section Sequence Types &#8212; str, unicode, list, tuple, bytearray, buffer, xrange), UserList instances provide the following attribute:   UserList.data\u00b6 A real Python list object used to store the contents of the UserList class.  Subclassing requirements: Subclasses of UserList are expect to offer a constructor which can be called with either no arguments or one argument.  List operations which return a new sequence attempt to create an instance of the actual implementation class.  To do so, it assumes that the constructor can be called with a single parameter, which is a sequence object used as a data source. If a derived class does not wish to comply with this requirement, all of the special methods supported by this class will need to be overridden; please consult the sources for information about the methods which need to be provided in that case.  Changed in version 2.0: Python versions 1.5.2 and 1.6 also required that the constructor be callable with no parameters, and offer a mutable data attribute.  Earlier versions of Python did not attempt to create instances of the derived class.  8.14. UserString &#8212; Class wrapper for string objects\u00b6  Note This UserString class from this module is available for backward compatibility only.  If you are writing code that does not need to work with versions of Python earlier than Python 2.2, please consider subclassing directly from the built-in str type instead of using UserString (there is no built-in equivalent to MutableString).  This module defines a class that acts as a wrapper around string objects.  It is a useful base class for your own string-like classes, which can inherit from them and override existing methods or add new ones.  In this way one can add new behaviors to strings. It should be noted that these classes are highly inefficient compared to real string or Unicode objects; this is especially the case for MutableString. The UserString module defines the following classes:   class UserString.UserString([sequence])\u00b6 Class that simulates a string or a Unicode string object.  The instance&#8217;s content is kept in a regular string or Unicode string object, which is accessible via the data attribute of UserString instances.  The instance&#8217;s contents are initially set to a copy of sequence.  sequence can be either a regular Python string or Unicode string, an instance of UserString (or a subclass) or an arbitrary sequence which can be converted into a string using the built-in str() function.  Note The UserString class has been moved to the collections module in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.      class UserString.MutableString([sequence])\u00b6 This class is derived from the UserString above and redefines strings to be mutable.  Mutable strings can&#8217;t be used as dictionary keys, because dictionaries require immutable objects as keys.  The main intention of this class is to serve as an educational example for inheritance and necessity to remove (override) the __hash__() method in order to trap attempts to use a mutable object as dictionary key, which would be otherwise very error prone and hard to track down.  Deprecated since version 2.6: The MutableString class has been removed in Python 3.0.   In addition to supporting the methods and operations of string and Unicode objects (see section String Methods), UserString instances provide the following attribute:   MutableString.data\u00b6 A real Python string or Unicode object used to store the content of the UserString class."},{"url":"http:\/\/docs.python.org\/library\/userdict.html#UserDict.DictMixin","title":"UserDict.DictMixin","description":""},{"url":"http:\/\/docs.python.org\/library\/userdict.html#UserDict.IterableUserDict","title":"UserDict.IterableUserDict","description":""},{"url":"http:\/\/docs.python.org\/library\/userdict.html#UserDict.UserDict","title":"UserDict.UserDict","description":""},{"url":"http:\/\/docs.python.org\/library\/userdict.html#UserDict_UserList.UserList","title":"UserList.UserList","description":""},{"url":"http:\/\/docs.python.org\/library\/userdict.html#UserDict_UserString.MutableString","title":"UserString.MutableString","description":""},{"url":"http:\/\/docs.python.org\/library\/userdict.html#UserDict_UserString.UserString","title":"UserString.UserString","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html","title":"weakref","description":"8.11. weakref &#8212; Weak references\u00b6  New in version 2.1. Source code: Lib\/weakref.py  The weakref module allows the Python programmer to create weak references to objects. In the following, the term referent means the object which is referred to by a weak reference. A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else.  A primary use for weak references is to implement caches or mappings holding large objects, where it&#8217;s desired that a large object not be kept alive solely because it appears in a cache or mapping. For example, if you have a number of large binary image objects, you may wish to associate a name with each.  If you used a Python dictionary to map names to images, or images to names, the image objects would remain alive just because they appeared as values or keys in the dictionaries.  The WeakKeyDictionary and WeakValueDictionary classes supplied by the weakref module are an alternative, using weak references to construct mappings that don&#8217;t keep objects alive solely because they appear in the mapping objects.  If, for example, an image object is a value in a WeakValueDictionary, then when the last remaining references to that image object are the weak references held by weak mappings, garbage collection can reclaim the object, and its corresponding entries in weak mappings are simply deleted. WeakKeyDictionary and WeakValueDictionary use weak references in their implementation, setting up callback functions on the weak references that notify the weak dictionaries when a key or value has been reclaimed by garbage collection.  Most programs should find that using one of these weak dictionary types is all they need &#8211; it&#8217;s not usually necessary to create your own weak references directly.  The low-level machinery used by the weak dictionary implementations is exposed by the weakref module for the benefit of advanced uses.  Note Weak references to an object are cleared before the object&#8217;s __del__() is called, to ensure that the weak reference callback (if any) finds the object still alive.  Not all objects can be weakly referenced; those objects which can include class instances, functions written in Python (but not in C), methods (both bound and unbound), sets, frozensets, file objects, generators, type objects, DBcursor objects from the bsddb module, sockets, arrays, deques, regular expression pattern objects, and code objects.  Changed in version 2.4: Added support for files, sockets, arrays, and patterns.  Changed in version 2.7: Added support for thread.lock, threading.Lock, and code objects. Several built-in types such as list and dict do not directly support weak references but can add support through subclassing: class Dict(dict):     pass  obj = Dict(red=1, green=2, blue=3)   # this object is weak referenceable    CPython implementation detail: Other built-in types such as tuple and long do not support weak references even when subclassed.  Extension types can easily be made to support weak references; see Weak Reference Support.   class weakref.ref(object[, callback])\u00b6 Return a weak reference to object.  The original object can be retrieved by calling the reference object if the referent is still alive; if the referent is no longer alive, calling the reference object will cause None to be returned.  If callback is provided and not None, and the returned weakref object is still alive, the callback will be called when the object is about to be finalized; the weak reference object will be passed as the only parameter to the callback; the referent will no longer be available. It is allowable for many weak references to be constructed for the same object. Callbacks registered for each weak reference will be called from the most recently registered callback to the oldest registered callback. Exceptions raised by the callback will be noted on the standard error output, but cannot be propagated; they are handled in exactly the same way as exceptions raised from an object&#8217;s __del__() method. Weak references are hashable if the object is hashable.  They will maintain their hash value even after the object was deleted.  If hash() is called the first time only after the object was deleted, the call will raise TypeError. Weak references support tests for equality, but not ordering.  If the referents are still alive, two references have the same equality relationship as their referents (regardless of the callback).  If either referent has been deleted, the references are equal only if the reference objects are the same object.  Changed in version 2.4: This is now a subclassable type rather than a factory function; it derives from object.     weakref.proxy(object[, callback])\u00b6 Return a proxy to object which uses a weak reference.  This supports use of the proxy in most contexts instead of requiring the explicit dereferencing used with weak reference objects.  The returned object will have a type of either ProxyType or CallableProxyType, depending on whether object is callable.  Proxy objects are not hashable regardless of the referent; this avoids a number of problems related to their fundamentally mutable nature, and prevent their use as dictionary keys.  callback is the same as the parameter of the same name to the ref() function.    weakref.getweakrefcount(object)\u00b6 Return the number of weak references and proxies which refer to object.    weakref.getweakrefs(object)\u00b6 Return a list of all weak reference and proxy objects which refer to object.    class weakref.WeakKeyDictionary([dict])\u00b6 Mapping class that references keys weakly.  Entries in the dictionary will be discarded when there is no longer a strong reference to the key.  This can be used to associate additional data with an object owned by other parts of an application without adding attributes to those objects.  This can be especially useful with objects that override attribute accesses.  Note Caution: Because a WeakKeyDictionary is built on top of a Python dictionary, it must not change size when iterating over it.  This can be difficult to ensure for a WeakKeyDictionary because actions performed by the program during iteration may cause items in the dictionary to vanish &#8220;by magic&#8221; (as a side effect of garbage collection).    WeakKeyDictionary objects have the following additional methods.  These expose the internal references directly.  The references are not guaranteed to be &#8220;live&#8221; at the time they are used, so the result of calling the references needs to be checked before being used.  This can be used to avoid creating references that will cause the garbage collector to keep the keys around longer than needed.   WeakKeyDictionary.iterkeyrefs()\u00b6 Return an iterator that yields the weak references to the keys.  New in version 2.5.     WeakKeyDictionary.keyrefs()\u00b6 Return a list of weak references to the keys.  New in version 2.5.     class weakref.WeakValueDictionary([dict])\u00b6 Mapping class that references values weakly.  Entries in the dictionary will be discarded when no strong reference to the value exists any more.  Note Caution:  Because a WeakValueDictionary is built on top of a Python dictionary, it must not change size when iterating over it.  This can be difficult to ensure for a WeakValueDictionary because actions performed by the program during iteration may cause items in the dictionary to vanish &#8220;by magic&#8221; (as a side effect of garbage collection).    WeakValueDictionary objects have the following additional methods. These method have the same issues as the iterkeyrefs() and keyrefs() methods of WeakKeyDictionary objects.   WeakValueDictionary.itervaluerefs()\u00b6 Return an iterator that yields the weak references to the values.  New in version 2.5.     WeakValueDictionary.valuerefs()\u00b6 Return a list of weak references to the values.  New in version 2.5.     class weakref.WeakSet([elements])\u00b6 Set class that keeps weak references to its elements.  An element will be discarded when no strong reference to it exists any more.  New in version 2.7.     weakref.ReferenceType\u00b6 The type object for weak references objects.    weakref.ProxyType\u00b6 The type object for proxies of objects which are not callable.    weakref.CallableProxyType\u00b6 The type object for proxies of callable objects.    weakref.ProxyTypes\u00b6 Sequence containing all the type objects for proxies.  This can make it simpler to test if an object is a proxy without being dependent on naming both proxy types.    exception weakref.ReferenceError\u00b6 Exception raised when a proxy object is used but the underlying object has been collected.  This is the same as the standard ReferenceError exception.   See also  PEP 0205 - Weak References The proposal and rationale for this feature, including links to earlier implementations and information about similar features in other languages.    8.11.1. Weak Reference Objects\u00b6 Weak reference objects have no attributes or methods, but do allow the referent to be obtained, if it still exists, by calling it: >>> import weakref >>> class Object: ...     pass ... >>> o = Object() >>> r = weakref.ref(o) >>> o2 = r() >>> o is o2 True   If the referent no longer exists, calling the reference object returns None: >>> del o, o2 >>> print r() None   Testing that a weak reference object is still live should be done using the expression ref() is not None.  Normally, application code that needs to use a reference object should follow this pattern: # r is a weak reference object o = r() if o is None:     # referent has been garbage collected     print \"Object has been deallocated; can&#39;t frobnicate.\" else:     print \"Object is still live!\"     o.do_something_useful()   Using a separate test for &#8220;liveness&#8221; creates race conditions in threaded applications; another thread can cause a weak reference to become invalidated before the weak reference is called; the idiom shown above is safe in threaded applications as well as single-threaded applications. Specialized versions of ref objects can be created through subclassing. This is used in the implementation of the WeakValueDictionary to reduce the memory overhead for each entry in the mapping.  This may be most useful to associate additional information with a reference, but could also be used to insert additional processing on calls to retrieve the referent. This example shows how a subclass of ref can be used to store additional information about an object and affect the value that&#8217;s returned when the referent is accessed: import weakref  class ExtendedRef(weakref.ref):     def __init__(self, ob, callback=None, **annotations):         super(ExtendedRef, self).__init__(ob, callback)         self.__counter = 0         for k, v in annotations.iteritems():             setattr(self, k, v)      def __call__(self):         \"\"\"Return a pair containing the referent and the number of         times the reference has been called.         \"\"\"         ob = super(ExtendedRef, self).__call__()         if ob is not None:             self.__counter += 1             ob = (ob, self.__counter)         return ob     8.11.2. Example\u00b6 This simple example shows how an application can use objects IDs to retrieve objects that it has seen before.  The IDs of the objects can then be used in other data structures without forcing the objects to remain alive, but the objects can still be retrieved by ID if they do. import weakref  _id2obj_dict = weakref.WeakValueDictionary()  def remember(obj):     oid = id(obj)     _id2obj_dict[oid] = obj     return oid  def id2obj(oid):     return _id2obj_dict[oid]"},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.getweakrefcount","title":"weakref.getweakrefcount","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.getweakrefs","title":"weakref.getweakrefs","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.proxy","title":"weakref.proxy","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.ref","title":"weakref.ref","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.WeakKeyDictionary","title":"weakref.WeakKeyDictionary","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.WeakKeyDictionary.iterkeyrefs","title":"weakref.WeakKeyDictionary.iterkeyrefs","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.WeakKeyDictionary.keyrefs","title":"weakref.WeakKeyDictionary.keyrefs","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.WeakSet","title":"weakref.WeakSet","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.WeakValueDictionary","title":"weakref.WeakValueDictionary","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.WeakValueDictionary.itervaluerefs","title":"weakref.WeakValueDictionary.itervaluerefs","description":""},{"url":"http:\/\/docs.python.org\/library\/weakref.html#weakref.WeakValueDictionary.valuerefs","title":"weakref.WeakValueDictionary.valuerefs","description":""},{"url":"http:\/\/docs.python.org\/library\/copy.html","title":"copy","description":"8.17. copy &#8212; Shallow and deep copy operations\u00b6 This module provides generic (shallow and deep) copying operations. Interface summary:   copy.copy(x)\u00b6 Return a shallow copy of x.    copy.deepcopy(x)\u00b6 Return a deep copy of x.    exception copy.error\u00b6 Raised for module specific errors.  The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):  A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original. A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.  Two problems often exist with deep copy operations that don&#8217;t exist with shallow copy operations:  Recursive objects (compound objects that, directly or indirectly, contain a reference to themselves) may cause a recursive loop. Because deep copy copies everything it may copy too much, e.g., administrative data structures that should be shared even between copies.  The deepcopy() function avoids these problems by:  keeping a &#8220;memo&#8221; dictionary of objects already copied during the current copying pass; and letting user-defined classes override the copying operation or the set of components copied.  This module does not copy types like module, method, stack trace, stack frame, file, socket, window, array, or any similar types.  It does &#8220;copy&#8221; functions and classes (shallow and deeply), by returning the original object unchanged; this is compatible with the way these are treated by the pickle module. Shallow copies of dictionaries can be made using dict.copy(), and of lists by assigning a slice of the entire list, for example, copied_list = original_list[:].  Changed in version 2.5: Added copying functions. Classes can use the same interfaces to control copying that they use to control pickling.  See the description of module pickle for information on these methods.  The copy module does not use the copy_reg registration module. In order for a class to define its own copy implementation, it can define special methods __copy__() and __deepcopy__().  The former is called to implement the shallow copy operation; no additional arguments are passed. The latter is called to implement the deep copy operation; it is passed one argument, the memo dictionary.  If the __deepcopy__() implementation needs to make a deep copy of a component, it should call the deepcopy() function with the component as first argument and the memo dictionary as second argument.  See also  Module pickle Discussion of the special methods used to support object state retrieval and restoration."},{"url":"http:\/\/docs.python.org\/library\/copy.html#copy.copy","title":"copy.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/copy.html#copy.deepcopy","title":"copy.deepcopy","description":""},{"url":"http:\/\/docs.python.org\/library\/repr.html","title":"repr","description":"8.19. repr &#8212; Alternate repr() implementation\u00b6  Note The repr module has been renamed to reprlib in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  Source code: Lib\/repr.py  The repr module provides a means for producing object representations with limits on the size of the resulting strings. This is used in the Python debugger and may be useful in other contexts as well. This module provides a class, an instance, and a function:   class repr.Repr\u00b6 Class which provides formatting services useful in implementing functions similar to the built-in repr(); size limits for  different object types are added to avoid the generation of representations which are excessively long.    repr.aRepr\u00b6 This is an instance of Repr which is used to provide the repr() function described below.  Changing the attributes of this object will affect the size limits used by repr() and the Python debugger.    repr.repr(obj)\u00b6 This is the repr() method of aRepr.  It returns a string similar to that returned by the built-in function of the same name, but with limits on most sizes.   8.19.1. Repr Objects\u00b6 Repr instances provide several attributes which can be used to provide size limits for the representations of different object types,  and methods which format specific object types.   Repr.maxlevel\u00b6 Depth limit on the creation of recursive representations.  The default is 6.    Repr.maxdict\u00b6  Repr.maxlist\u00b6  Repr.maxtuple\u00b6  Repr.maxset\u00b6  Repr.maxfrozenset\u00b6  Repr.maxdeque\u00b6  Repr.maxarray\u00b6 Limits on the number of entries represented for the named object type.  The default is 4 for maxdict, 5 for maxarray, and  6 for the others.  New in version 2.4: maxset, maxfrozenset, and set.     Repr.maxlong\u00b6 Maximum number of characters in the representation for a long integer.  Digits are dropped from the middle.  The default is 40.    Repr.maxstring\u00b6 Limit on the number of characters in the representation of the string.  Note that the &#8220;normal&#8221; representation of the string is used as the character source: if escape sequences are needed in the representation, these may be mangled when the representation is shortened.  The default is 30.    Repr.maxother\u00b6 This limit is used to control the size of object types for which no specific formatting method is available on the Repr object. It is applied in a similar manner as maxstring.  The default is 20.    Repr.repr(obj)\u00b6 The equivalent to the built-in repr() that uses the formatting imposed by the instance.    Repr.repr1(obj, level)\u00b6 Recursive implementation used by repr().  This uses the type of obj to determine which formatting method to call, passing it obj and level.  The type-specific methods should call repr1() to perform recursive formatting, with level - 1 for the value of level in the recursive  call.    Repr.repr_TYPE(obj, level) Formatting methods for specific types are implemented as methods with a name based on the type name.  In the method name, TYPE is replaced by string.join(string.split(type(obj).__name__, '_')). Dispatch to these methods is handled by repr1(). Type-specific methods which need to recursively format a value should call self.repr1(subobj, level - 1).    8.19.2. Subclassing Repr Objects\u00b6 The use of dynamic dispatching by Repr.repr1() allows subclasses of Repr to add support for additional built-in object types or to modify the handling of types already supported. This example shows how special support for file objects could be added: import repr as reprlib import sys  class MyRepr(reprlib.Repr):     def repr_file(self, obj, level):         if obj.name in [&#39;<stdin>&#39;, &#39;<stdout>&#39;, &#39;<stderr>&#39;]:             return obj.name         else:             return repr(obj)  aRepr = MyRepr() print aRepr.repr(sys.stdin)          # prints &#39;<stdin>&#39;"},{"url":"http:\/\/docs.python.org\/library\/repr.html#repr_repr_repr.Repr","title":"repr.Repr","description":""},{"url":"http:\/\/docs.python.org\/library\/repr.html#repr.repr","title":"repr.repr","description":""},{"url":"http:\/\/docs.python.org\/library\/repr.html#repr_repr_repr.Repr","title":"repr.Repr","description":""},{"url":"http:\/\/docs.python.org\/library\/repr.html#repr.Repr.repr","title":"repr.Repr.repr","description":""},{"url":"http:\/\/docs.python.org\/library\/repr.html#repr.Repr.repr1","title":"repr.Repr.repr1","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html","title":"pprint","description":"8.18. pprint &#8212; Data pretty printer\u00b6 Source code: Lib\/pprint.py  The pprint module provides a capability to &#8220;pretty-print&#8221; arbitrary Python data structures in a form which can be used as input to the interpreter. If the formatted structures include objects which are not fundamental Python types, the representation may not be loadable.  This may be the case if objects such as files, sockets, classes, or instances are included, as well as many other built-in objects which are not representable as Python constants. The formatted representation keeps objects on a single line if it can, and breaks them onto multiple lines if they don&#8217;t fit within the allowed width. Construct PrettyPrinter objects explicitly if you need to adjust the width constraint.  Changed in version 2.5: Dictionaries are sorted by key before the display is computed; before 2.5, a dictionary was sorted only if its display required more than one line, although that wasn&#8217;t documented.  Changed in version 2.6: Added support for set and frozenset. The pprint module defines one class:   class pprint.PrettyPrinter(...)\u00b6 Construct a PrettyPrinter instance.  This constructor understands several keyword parameters.  An output stream may be set using the stream keyword; the only method used on the stream object is the file protocol&#8217;s write() method.  If not specified, the PrettyPrinter adopts sys.stdout.  Three additional parameters may be used to control the formatted representation.  The keywords are indent, depth, and width.  The amount of indentation added for each recursive level is specified by indent; the default is one.  Other values can cause output to look a little odd, but can make nesting easier to spot.  The number of levels which may be printed is controlled by depth; if the data structure being printed is too deep, the next contained level is replaced by ....  By default, there is no constraint on the depth of the objects being formatted.  The desired output width is constrained using the width parameter; the default is 80 characters.  If a structure cannot be formatted within the constrained width, a best effort will be made. >>> import pprint >>> stuff = [&#39;spam&#39;, &#39;eggs&#39;, &#39;lumberjack&#39;, &#39;knights&#39;, &#39;ni&#39;] >>> stuff.insert(0, stuff[:]) >>> pp = pprint.PrettyPrinter(indent=4) >>> pp.pprint(stuff) [   [&#39;spam&#39;, &#39;eggs&#39;, &#39;lumberjack&#39;, &#39;knights&#39;, &#39;ni&#39;],     &#39;spam&#39;,     &#39;eggs&#39;,     &#39;lumberjack&#39;,     &#39;knights&#39;,     &#39;ni&#39;] >>> tup = (&#39;spam&#39;, (&#39;eggs&#39;, (&#39;lumberjack&#39;, (&#39;knights&#39;, (&#39;ni&#39;, (&#39;dead&#39;, ... (&#39;parrot&#39;, (&#39;fresh fruit&#39;,)))))))) >>> pp = pprint.PrettyPrinter(depth=6) >>> pp.pprint(tup) (&#39;spam&#39;, (&#39;eggs&#39;, (&#39;lumberjack&#39;, (&#39;knights&#39;, (&#39;ni&#39;, (&#39;dead&#39;, (...)))))))     The PrettyPrinter class supports several derivative functions:   pprint.pformat(object[, indent[, width[, depth]]])\u00b6 Return the formatted representation of object as a string.  indent, width and depth will be passed to the PrettyPrinter constructor as formatting parameters.  Changed in version 2.4: The parameters indent, width and depth were added.     pprint.pprint(object[, stream[, indent[, width[, depth]]]])\u00b6 Prints the formatted representation of object on stream, followed by a newline.  If stream is omitted, sys.stdout is used.  This may be used in the interactive interpreter instead of a print statement for inspecting values.    indent, width and depth will be passed to the PrettyPrinter constructor as formatting parameters. >>> import pprint >>> stuff = [&#39;spam&#39;, &#39;eggs&#39;, &#39;lumberjack&#39;, &#39;knights&#39;, &#39;ni&#39;] >>> stuff.insert(0, stuff) >>> pprint.pprint(stuff) [<Recursion on list with id=...>,  &#39;spam&#39;,  &#39;eggs&#39;,  &#39;lumberjack&#39;,  &#39;knights&#39;,  &#39;ni&#39;]    Changed in version 2.4: The parameters indent, width and depth were added.     pprint.isreadable(object)\u00b6 Determine if the formatted representation of object is &#8220;readable,&#8221; or can be used to reconstruct the value using eval().  This always returns False for recursive objects. >>> pprint.isreadable(stuff) False       pprint.isrecursive(object)\u00b6 Determine if object requires a recursive representation.  One more support function is also defined:   pprint.saferepr(object)\u00b6 Return a string representation of object, protected against recursive data structures.  If the representation of object exposes a recursive entry, the recursive reference will be represented as <Recursion on typename with id=number>.  The representation is not otherwise formatted. >>> pprint.saferepr(stuff) \"[<Recursion on list with id=...>, &#39;spam&#39;, &#39;eggs&#39;, &#39;lumberjack&#39;, &#39;knights&#39;, &#39;ni&#39;]\"      8.18.1. PrettyPrinter Objects\u00b6 PrettyPrinter instances have the following methods:   PrettyPrinter.pformat(object)\u00b6 Return the formatted representation of object.  This takes into account the options passed to the PrettyPrinter constructor.    PrettyPrinter.pprint(object)\u00b6 Print the formatted representation of object on the configured stream, followed by a newline.  The following methods provide the implementations for the corresponding functions of the same names.  Using these methods on an instance is slightly more efficient since new PrettyPrinter objects don&#8217;t need to be created.   PrettyPrinter.isreadable(object)\u00b6 Determine if the formatted representation of the object is &#8220;readable,&#8221; or can be used to reconstruct the value using eval().  Note that this returns False for recursive objects.  If the depth parameter of the PrettyPrinter is set and the object is deeper than allowed, this returns False.     PrettyPrinter.isrecursive(object)\u00b6 Determine if the object requires a recursive representation.  This method is provided as a hook to allow subclasses to modify the way objects are converted to strings.  The default implementation uses the internals of the saferepr() implementation.   PrettyPrinter.format(object, context, maxlevels, level)\u00b6 Returns three values: the formatted version of object as a string, a flag indicating whether the result is readable, and a flag indicating whether recursion was detected.  The first argument is the object to be presented.  The second is a dictionary which contains the id() of objects that are part of the current presentation context (direct and indirect containers for object that are affecting the presentation) as the keys; if an object needs to be presented which is already represented in context, the third return value should be True.  Recursive calls to the format() method should add additional entries for containers to this dictionary.  The third argument, maxlevels, gives the requested limit to recursion; this will be 0 if there is no requested limit.  This argument should be passed unmodified to recursive calls. The fourth argument, level, gives the current level; recursive calls should be passed a value less than that of the current call.  New in version 2.3.     8.18.2. pprint Example\u00b6 This example demonstrates several uses of the pprint() function and its parameters. >>> import pprint >>> tup = (&#39;spam&#39;, (&#39;eggs&#39;, (&#39;lumberjack&#39;, (&#39;knights&#39;, (&#39;ni&#39;, (&#39;dead&#39;, ... (&#39;parrot&#39;, (&#39;fresh fruit&#39;,)))))))) >>> stuff = [&#39;a&#39; * 10, tup, [&#39;a&#39; * 30, &#39;b&#39; * 30], [&#39;c&#39; * 20, &#39;d&#39; * 20]] >>> pprint.pprint(stuff) [&#39;aaaaaaaaaa&#39;,  (&#39;spam&#39;,   (&#39;eggs&#39;,    (&#39;lumberjack&#39;,     (&#39;knights&#39;, (&#39;ni&#39;, (&#39;dead&#39;, (&#39;parrot&#39;, (&#39;fresh fruit&#39;,)))))))),  [&#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#39;, &#39;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&#39;],  [&#39;cccccccccccccccccccc&#39;, &#39;dddddddddddddddddddd&#39;]] >>> pprint.pprint(stuff, depth=3) [&#39;aaaaaaaaaa&#39;,  (&#39;spam&#39;, (&#39;eggs&#39;, (...))),  [&#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#39;, &#39;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&#39;],  [&#39;cccccccccccccccccccc&#39;, &#39;dddddddddddddddddddd&#39;]] >>> pprint.pprint(stuff, width=60) [&#39;aaaaaaaaaa&#39;,  (&#39;spam&#39;,   (&#39;eggs&#39;,    (&#39;lumberjack&#39;,     (&#39;knights&#39;,      (&#39;ni&#39;, (&#39;dead&#39;, (&#39;parrot&#39;, (&#39;fresh fruit&#39;,)))))))),  [&#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#39;,   &#39;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&#39;],  [&#39;cccccccccccccccccccc&#39;, &#39;dddddddddddddddddddd&#39;]]"},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.isreadable","title":"pprint.isreadable","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.isrecursive","title":"pprint.isrecursive","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.pformat","title":"pprint.pformat","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.pprint","title":"pprint.pprint","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.PrettyPrinter","title":"pprint.PrettyPrinter","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.PrettyPrinter.format","title":"pprint.PrettyPrinter.format","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.PrettyPrinter.isreadable","title":"pprint.PrettyPrinter.isreadable","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.PrettyPrinter.isrecursive","title":"pprint.PrettyPrinter.isrecursive","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.PrettyPrinter.pformat","title":"pprint.PrettyPrinter.pformat","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.PrettyPrinter.pprint","title":"pprint.PrettyPrinter.pprint","description":""},{"url":"http:\/\/docs.python.org\/library\/pprint.html#pprint.saferepr","title":"pprint.saferepr","description":""},{"url":"http:\/\/docs.python.org\/library\/numbers.html","title":"numbers","description":"9.1. numbers &#8212; Numeric abstract base classes\u00b6  New in version 2.6. The numbers module (PEP 3141) defines a hierarchy of numeric abstract base classes which progressively define more operations.  None of the types defined in this module can be instantiated.   class numbers.Number\u00b6 The root of the numeric hierarchy. If you just want to check if an argument x is a number, without caring what kind, use isinstance(x, Number).   9.1.1. The numeric tower\u00b6   class numbers.Complex\u00b6 Subclasses of this type describe complex numbers and include the operations that work on the built-in complex type. These are: conversions to complex and bool, real, imag, +, -, *, \/, abs(), conjugate(), ==, and !=. All except - and != are abstract.   real\u00b6 Abstract. Retrieves the real component of this number.    imag\u00b6 Abstract. Retrieves the imaginary component of this number.    conjugate()\u00b6 Abstract. Returns the complex conjugate. For example, (1+3j).conjugate() == (1-3j).      class numbers.Real\u00b6 To Complex, Real adds the operations that work on real numbers. In short, those are: a conversion to float, math.trunc(), round(), math.floor(), math.ceil(), divmod(), \/\/, , <, <=, >, and >=. Real also provides defaults for complex(), real, imag, and conjugate().     class numbers.Rational\u00b6 Subtypes Real and adds numerator and denominator properties, which should be in lowest terms. With these, it provides a default for float().   numerator\u00b6 Abstract.    denominator\u00b6 Abstract.      class numbers.Integral\u00b6 Subtypes Rational and adds a conversion to int. Provides defaults for float(), numerator, and denominator, and bit-string operations: <<, >>, &, ^, |, ~.    9.1.2. Notes for type implementors\u00b6 Implementors should be careful to make equal numbers equal and hash them to the same values. This may be subtle if there are two different extensions of the real numbers. For example, fractions.Fraction implements hash() as follows: def __hash__(self):     if self.denominator == 1:         # Get integers right.         return hash(self.numerator)     # Expensive check, but definitely correct.     if self == float(self):         return hash(float(self))     else:         # Use tuple&#39;s hash to avoid a high collision rate on         # simple fractions.         return hash((self.numerator, self.denominator))    9.1.2.1. Adding More Numeric ABCs\u00b6 There are, of course, more possible ABCs for numbers, and this would be a poor hierarchy if it precluded the possibility of adding those. You can add MyFoo between Complex and Real with: class MyFoo(Complex): ... MyFoo.register(Real)     9.1.2.2. Implementing the arithmetic operations\u00b6 We want to implement the arithmetic operations so that mixed-mode operations either call an implementation whose author knew about the types of both arguments, or convert both to the nearest built in type and do the operation there. For subtypes of Integral, this means that __add__() and __radd__() should be defined as: class MyIntegral(Integral):      def __add__(self, other):         if isinstance(other, MyIntegral):             return do_my_adding_stuff(self, other)         elif isinstance(other, OtherTypeIKnowAbout):             return do_my_other_adding_stuff(self, other)         else:             return NotImplemented      def __radd__(self, other):         if isinstance(other, MyIntegral):             return do_my_adding_stuff(other, self)         elif isinstance(other, OtherTypeIKnowAbout):             return do_my_other_adding_stuff(other, self)         elif isinstance(other, Integral):             return int(other) + int(self)         elif isinstance(other, Real):             return float(other) + float(self)         elif isinstance(other, Complex):             return complex(other) + complex(self)         else:             return NotImplemented   There are 5 different cases for a mixed-type operation on subclasses of Complex. I&#8217;ll refer to all of the above code that doesn&#8217;t refer to MyIntegral and OtherTypeIKnowAbout as &#8220;boilerplate&#8221;. a will be an instance of A, which is a subtype of Complex (a : A <: Complex), and b : B <: Complex. I&#8217;ll consider a + b:   If A defines an __add__() which accepts b, all is well. If A falls back to the boilerplate code, and it were to return a value from __add__(), we&#8217;d miss the possibility that B defines a more intelligent __radd__(), so the boilerplate should return NotImplemented from __add__(). (Or A may not implement __add__() at all.) Then B&#8216;s __radd__() gets a chance. If it accepts a, all is well. If it falls back to the boilerplate, there are no more possible methods to try, so this is where the default implementation should live. If B <: A, Python tries B.__radd__ before A.__add__. This is ok, because it was implemented with knowledge of A, so it can handle those instances before delegating to Complex.   If A <: Complex and B <: Real without sharing any other knowledge, then the appropriate shared operation is the one involving the built in complex, and both __radd__() s land there, so a+b == b+a. Because most of the operations on any given type will be very similar, it can be useful to define a helper function which generates the forward and reverse instances of any given operator. For example, fractions.Fraction uses: def _operator_fallbacks(monomorphic_operator, fallback_operator):     def forward(a, b):         if isinstance(b, (int, long, Fraction)):             return monomorphic_operator(a, b)         elif isinstance(b, float):             return fallback_operator(float(a), b)         elif isinstance(b, complex):             return fallback_operator(complex(a), b)         else:             return NotImplemented     forward.__name__ = &#39;__&#39; + fallback_operator.__name__ + &#39;__&#39;     forward.__doc__ = monomorphic_operator.__doc__      def reverse(b, a):         if isinstance(a, Rational):             # Includes ints.             return monomorphic_operator(a, b)         elif isinstance(a, numbers.Real):             return fallback_operator(float(a), float(b))         elif isinstance(a, numbers.Complex):             return fallback_operator(complex(a), complex(b))         else:             return NotImplemented     reverse.__name__ = &#39;__r&#39; + fallback_operator.__name__ + &#39;__&#39;     reverse.__doc__ = monomorphic_operator.__doc__      return forward, reverse  def _add(a, b):     \"\"\"a + b\"\"\"     return Fraction(a.numerator * b.denominator +                     b.numerator * a.denominator,                     a.denominator * b.denominator)  __add__, __radd__ = _operator_fallbacks(_add, operator.add)  # ..."},{"url":"http:\/\/docs.python.org\/library\/numbers.html#numbers.Complex","title":"numbers.Complex","description":""},{"url":"http:\/\/docs.python.org\/library\/numbers.html#numbers.Complex.conjugate","title":"numbers.Complex.conjugate","description":""},{"url":"http:\/\/docs.python.org\/library\/numbers.html#numbers.Integral","title":"numbers.Integral","description":""},{"url":"http:\/\/docs.python.org\/library\/numbers.html#numbers.Number","title":"numbers.Number","description":""},{"url":"http:\/\/docs.python.org\/library\/numbers.html#numbers.Rational","title":"numbers.Rational","description":""},{"url":"http:\/\/docs.python.org\/library\/numbers.html#numbers.Real","title":"numbers.Real","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html","title":"math","description":"9.2. math &#8212; Mathematical functions\u00b6 This module is always available.  It provides access to the mathematical functions defined by the C standard. These functions cannot be used with complex numbers; use the functions of the same name from the cmath module if you require support for complex numbers.  The distinction between functions which support complex numbers and those which don&#8217;t is made since most users do not want to learn quite as much mathematics as required to understand complex numbers.  Receiving an exception instead of a complex result allows earlier detection of the unexpected complex number used as a parameter, so that the programmer can determine how and why it was generated in the first place. The following functions are provided by this module.  Except when explicitly noted otherwise, all return values are floats.  9.2.1. Number-theoretic and representation functions\u00b6   math.ceil(x)\u00b6 Return the ceiling of x as a float, the smallest integer value greater than or equal to x.    math.copysign(x, y)\u00b6 Return x with the sign of y.  On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0.  New in version 2.6.     math.fabs(x)\u00b6 Return the absolute value of x.    math.factorial(x)\u00b6 Return x factorial.  Raises ValueError if x is not integral or is negative.  New in version 2.6.     math.floor(x)\u00b6 Return the floor of x as a float, the largest integer value less than or equal to x.    math.fmod(x, y)\u00b6 Return fmod(x, y), as defined by the platform C library. Note that the Python expression x  y may not return the same result.  The intent of the C standard is that fmod(x, y) be exactly (mathematically; to infinite precision) equal to x - n*y for some integer n such that the result has the same sign as x and magnitude less than abs(y).  Python&#8217;s x  y returns a result with the sign of y instead, and may not be exactly computable for float arguments. For example, fmod(-1e-100, 1e100) is -1e-100, but the result of Python&#8217;s -1e-100  1e100 is 1e100-1e-100, which cannot be represented exactly as a float, and rounds to the surprising 1e100.  For this reason, function fmod() is generally preferred when working with floats, while Python&#8217;s x  y is preferred when working with integers.    math.frexp(x)\u00b6 Return the mantissa and exponent of x as the pair (m, e).  m is a float and e is an integer such that x == m * 2**e exactly. If x is zero, returns (0.0, 0), otherwise 0.5 <= abs(m) < 1.  This is used to &#8220;pick apart&#8221; the internal representation of a float in a portable way.    math.fsum(iterable)\u00b6 Return an accurate floating point sum of values in the iterable.  Avoids loss of precision by tracking multiple intermediate partial sums: >>> sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]) 0.9999999999999999 >>> fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]) 1.0   The algorithm&#8217;s accuracy depends on IEEE-754 arithmetic guarantees and the typical case where the rounding mode is half-even.  On some non-Windows builds, the underlying C library uses extended precision addition and may occasionally double-round an intermediate sum causing it to be off in its least significant bit. For further discussion and two alternative approaches, see the ASPN cookbook recipes for accurate floating point summation.  New in version 2.6.     math.isinf(x)\u00b6 Check if the float x is positive or negative infinity.  New in version 2.6.     math.isnan(x)\u00b6 Check if the float x is a NaN (not a number).  For more information on NaNs, see the IEEE 754 standards.  New in version 2.6.     math.ldexp(x, i)\u00b6 Return x * (2**i).  This is essentially the inverse of function frexp().    math.modf(x)\u00b6 Return the fractional and integer parts of x.  Both results carry the sign of x and are floats.    math.trunc(x)\u00b6 Return the Real value x truncated to an Integral (usually a long integer).  Uses the __trunc__ method.  New in version 2.6.   Note that frexp() and modf() have a different call\/return pattern than their C equivalents: they take a single argument and return a pair of values, rather than returning their second return value through an &#8216;output parameter&#8217; (there is no such thing in Python). For the ceil(), floor(), and modf() functions, note that all floating-point numbers of sufficiently large magnitude are exact integers. Python floats typically carry no more than 53 bits of precision (the same as the platform C double type), in which case any float x with abs(x) >= 2**52 necessarily has no fractional bits.   9.2.2. Power and logarithmic functions\u00b6   math.exp(x)\u00b6 Return e**x.    math.expm1(x)\u00b6 Return e**x - 1.  For small floats x, the subtraction in exp(x) - 1 can result in a significant loss of precision; the expm1() function provides a way to compute this quantity to full precision: >>> from math import exp, expm1 >>> exp(1e-5) - 1  # gives result accurate to 11 places 1.0000050000069649e-05 >>> expm1(1e-5)    # result accurate to full precision 1.0000050000166668e-05    New in version 2.7.     math.log(x[, base])\u00b6 With one argument, return the natural logarithm of x (to base e). With two arguments, return the logarithm of x to the given base, calculated as log(x)\/log(base).  Changed in version 2.3: base argument added.     math.log1p(x)\u00b6 Return the natural logarithm of 1+x (base e). The result is calculated in a way which is accurate for x near zero.  New in version 2.6.     math.log10(x)\u00b6 Return the base-10 logarithm of x.  This is usually more accurate than log(x, 10).    math.pow(x, y)\u00b6 Return x raised to the power y.  Exceptional cases follow Annex &#8216;F&#8217; of the C99 standard as far as possible.  In particular, pow(1.0, x) and pow(x, 0.0) always return 1.0, even when x is a zero or a NaN.  If both x and y are finite, x is negative, and y is not an integer then pow(x, y) is undefined, and raises ValueError.  Changed in version 2.6: The outcome of 1**nan and nan**0 was undefined.     math.sqrt(x)\u00b6 Return the square root of x.    9.2.3. Trigonometric functions\u00b6   math.acos(x)\u00b6 Return the arc cosine of x, in radians.    math.asin(x)\u00b6 Return the arc sine of x, in radians.    math.atan(x)\u00b6 Return the arc tangent of x, in radians.    math.atan2(y, x)\u00b6 Return atan(y \/ x), in radians. The result is between -pi and pi. The vector in the plane from the origin to point (x, y) makes this angle with the positive X axis. The point of atan2() is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, atan(1) and atan2(1, 1) are both pi\/4, but atan2(-1, -1) is -3*pi\/4.    math.cos(x)\u00b6 Return the cosine of x radians.    math.hypot(x, y)\u00b6 Return the Euclidean norm, sqrt(x*x + y*y). This is the length of the vector from the origin to point (x, y).    math.sin(x)\u00b6 Return the sine of x radians.    math.tan(x)\u00b6 Return the tangent of x radians.    9.2.4. Angular conversion\u00b6   math.degrees(x)\u00b6 Converts angle x from radians to degrees.    math.radians(x)\u00b6 Converts angle x from degrees to radians.    9.2.5. Hyperbolic functions\u00b6   math.acosh(x)\u00b6 Return the inverse hyperbolic cosine of x.  New in version 2.6.     math.asinh(x)\u00b6 Return the inverse hyperbolic sine of x.  New in version 2.6.     math.atanh(x)\u00b6 Return the inverse hyperbolic tangent of x.  New in version 2.6.     math.cosh(x)\u00b6 Return the hyperbolic cosine of x.    math.sinh(x)\u00b6 Return the hyperbolic sine of x.    math.tanh(x)\u00b6 Return the hyperbolic tangent of x.    9.2.6. Special functions\u00b6   math.erf(x)\u00b6 Return the error function at x.  New in version 2.7.     math.erfc(x)\u00b6 Return the complementary error function at x.  New in version 2.7.     math.gamma(x)\u00b6 Return the Gamma function at x.  New in version 2.7.     math.lgamma(x)\u00b6 Return the natural logarithm of the absolute value of the Gamma function at x.  New in version 2.7.     9.2.7. Constants\u00b6   math.pi\u00b6 The mathematical constant \u03c0 = 3.141592..., to available precision.    math.e\u00b6 The mathematical constant e = 2.718281..., to available precision.   CPython implementation detail: The math module consists mostly of thin wrappers around the platform C math library functions.  Behavior in exceptional cases follows Annex F of the C99 standard where appropriate.  The current implementation will raise ValueError for invalid operations like sqrt(-1.0) or log(0.0) (where C99 Annex F recommends signaling invalid operation or divide-by-zero), and OverflowError for results that overflow (for example, exp(1000.0)).  A NaN will not be returned from any of the functions above unless one or more of the input arguments was a NaN; in that case, most functions will return a NaN, but (again following C99 Annex F) there are some exceptions to this rule, for example pow(float('nan'), 0.0) or hypot(float('nan'), float('inf')). Note that Python makes no effort to distinguish signaling NaNs from quiet NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior is to treat all NaNs as though they were quiet.  Changed in version 2.6: Behavior in special cases now aims to follow C99 Annex F.  In earlier versions of Python the behavior in special cases was loosely specified.   See also  Module cmath Complex number versions of many of these functions."},{"url":"http:\/\/docs.python.org\/library\/math.html#math.acos","title":"math.acos","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.acosh","title":"math.acosh","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.asin","title":"math.asin","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.asinh","title":"math.asinh","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.atan","title":"math.atan","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.atan2","title":"math.atan2","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.atanh","title":"math.atanh","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.ceil","title":"math.ceil","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.copysign","title":"math.copysign","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.cos","title":"math.cos","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.cosh","title":"math.cosh","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.degrees","title":"math.degrees","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.erf","title":"math.erf","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.erfc","title":"math.erfc","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.exp","title":"math.exp","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.expm1","title":"math.expm1","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.fabs","title":"math.fabs","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.factorial","title":"math.factorial","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.floor","title":"math.floor","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.fmod","title":"math.fmod","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.frexp","title":"math.frexp","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.fsum","title":"math.fsum","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.gamma","title":"math.gamma","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.hypot","title":"math.hypot","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.isinf","title":"math.isinf","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.isnan","title":"math.isnan","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.ldexp","title":"math.ldexp","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.lgamma","title":"math.lgamma","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.log","title":"math.log","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.log10","title":"math.log10","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.log1p","title":"math.log1p","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.modf","title":"math.modf","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.pow","title":"math.pow","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.radians","title":"math.radians","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.sin","title":"math.sin","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.sinh","title":"math.sinh","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.sqrt","title":"math.sqrt","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.tan","title":"math.tan","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.tanh","title":"math.tanh","description":""},{"url":"http:\/\/docs.python.org\/library\/math.html#math.trunc","title":"math.trunc","description":""},{"url":"http:\/\/docs.python.org\/library\/fractions.html","title":"fractions","description":"9.5. fractions &#8212; Rational numbers\u00b6  New in version 2.6. Source code: Lib\/fractions.py  The fractions module provides support for rational number arithmetic. A Fraction instance can be constructed from a pair of integers, from another rational number, or from a string.   class fractions.Fraction(numerator=0, denominator=1)\u00b6  class fractions.Fraction(other_fraction)  class fractions.Fraction(float)  class fractions.Fraction(decimal)  class fractions.Fraction(string) The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator\/denominator. If denominator is 0, it raises a ZeroDivisionError. The second version requires that other_fraction is an instance of numbers.Rational and returns a Fraction instance with the same value.  The next two versions accept either a float or a decimal.Decimal instance, and return a Fraction instance with exactly the same value.  Note that due to the usual issues with binary floating-point (see Floating Point Arithmetic:  Issues and Limitations), the argument to Fraction(1.1) is not exactly equal to 11\/10, and so Fraction(1.1) does not return Fraction(11, 10) as one might expect. (But see the documentation for the limit_denominator() method below.) The last version of the constructor expects a string or unicode instance. The usual form for this instance is: [sign] numerator ['\/' denominator]  where the optional sign may be either &#8216;+&#8217; or &#8216;-&#8216; and numerator and denominator (if present) are strings of decimal digits.  In addition, any string that represents a finite value and is accepted by the float constructor is also accepted by the Fraction constructor.  In either form the input string may also have leading and\/or trailing whitespace. Here are some examples: >>> from fractions import Fraction >>> Fraction(16, -10) Fraction(-8, 5) >>> Fraction(123) Fraction(123, 1) >>> Fraction() Fraction(0, 1) >>> Fraction(&#39;3\/7&#39;) Fraction(3, 7) [40794 refs] >>> Fraction(&#39; -3\/7 &#39;) Fraction(-3, 7) >>> Fraction(&#39;1.414213 \\t\\n&#39;) Fraction(1414213, 1000000) >>> Fraction(&#39;-.125&#39;) Fraction(-1, 8) >>> Fraction(&#39;7e-6&#39;) Fraction(7, 1000000) >>> Fraction(2.25) Fraction(9, 4) >>> Fraction(1.1) Fraction(2476979795053773, 2251799813685248) >>> from decimal import Decimal >>> Fraction(Decimal(&#39;1.1&#39;)) Fraction(11, 10)   The Fraction class inherits from the abstract base class numbers.Rational, and implements all of the methods and operations from that class.  Fraction instances are hashable, and should be treated as immutable.  In addition, Fraction has the following methods:  Changed in version 2.7: The Fraction constructor now accepts float and decimal.Decimal instances.   from_float(flt)\u00b6 This class method constructs a Fraction representing the exact value of flt, which must be a float. Beware that Fraction.from_float(0.3) is not the same value as Fraction(3, 10)  Note From Python 2.7 onwards, you can also construct a Fraction instance directly from a float.      from_decimal(dec)\u00b6 This class method constructs a Fraction representing the exact value of dec, which must be a decimal.Decimal.  Note From Python 2.7 onwards, you can also construct a Fraction instance directly from a decimal.Decimal instance.      limit_denominator(max_denominator=1000000)\u00b6 Finds and returns the closest Fraction to self that has denominator at most max_denominator.  This method is useful for finding rational approximations to a given floating-point number: >>> from fractions import Fraction >>> Fraction(&#39;3.1415926535897932&#39;).limit_denominator(1000) Fraction(355, 113)   or for recovering a rational number that&#8217;s represented as a float: >>> from math import pi, cos >>> Fraction(cos(pi\/3)) Fraction(4503599627370497, 9007199254740992) >>> Fraction(cos(pi\/3)).limit_denominator() Fraction(1, 2) >>> Fraction(1.1).limit_denominator() Fraction(11, 10)         fractions.gcd(a, b)\u00b6 Return the greatest common divisor of the integers a and b.  If either a or b is nonzero, then the absolute value of gcd(a, b) is the largest integer that divides both a and b.  gcd(a,b) has the same sign as b if b is nonzero; otherwise it takes the sign of a.  gcd(0, 0) returns 0.   See also  Module numbers The abstract base classes making up the numeric tower."},{"url":"http:\/\/docs.python.org\/library\/fractions.html#fractions.Fraction","title":"fractions.Fraction","description":""},{"url":"http:\/\/docs.python.org\/library\/fractions.html#fractions.Fraction.from_decimal","title":"fractions.Fraction.from_decimal","description":""},{"url":"http:\/\/docs.python.org\/library\/fractions.html#fractions.Fraction.from_float","title":"fractions.Fraction.from_float","description":""},{"url":"http:\/\/docs.python.org\/library\/fractions.html#fractions.Fraction.limit_denominator","title":"fractions.Fraction.limit_denominator","description":""},{"url":"http:\/\/docs.python.org\/library\/fractions.html#fractions.gcd","title":"fractions.gcd","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html","title":"cmath","description":"9.3. cmath &#8212; Mathematical functions for complex numbers\u00b6 This module is always available.  It provides access to mathematical functions for complex numbers.  The functions in this module accept integers, floating-point numbers or complex numbers as arguments. They will also accept any Python object that has either a __complex__() or a __float__() method: these methods are used to convert the object to a complex or floating-point number, respectively, and the function is then applied to the result of the conversion.  Note On platforms with hardware and system-level support for signed zeros, functions involving branch cuts are continuous on both sides of the branch cut: the sign of the zero distinguishes one side of the branch cut from the other.  On platforms that do not support signed zeros the continuity is as specified below.   9.3.1. Conversions to and from polar coordinates\u00b6 A Python complex number z is stored internally using rectangular or Cartesian coordinates.  It is completely determined by its real part z.real and its imaginary part z.imag.  In other words: z == z.real + z.imag*1j   Polar coordinates give an alternative way to represent a complex number.  In polar coordinates, a complex number z is defined by the modulus r and the phase angle phi. The modulus r is the distance from z to the origin, while the phase phi is the counterclockwise angle, measured in radians, from the positive x-axis to the line segment that joins the origin to z. The following functions can be used to convert from the native rectangular coordinates to polar coordinates and back.   cmath.phase(x)\u00b6 Return the phase of x (also known as the argument of x), as a float.  phase(x) is equivalent to math.atan2(x.imag, x.real).  The result lies in the range [-\u03c0, \u03c0], and the branch cut for this operation lies along the negative real axis, continuous from above.  On systems with support for signed zeros (which includes most systems in current use), this means that the sign of the result is the same as the sign of x.imag, even when x.imag is zero: >>> phase(complex(-1.0, 0.0)) 3.1415926535897931 >>> phase(complex(-1.0, -0.0)) -3.1415926535897931    New in version 2.6.    Note The modulus (absolute value) of a complex number x can be computed using the built-in abs() function.  There is no separate cmath module function for this operation.    cmath.polar(x)\u00b6 Return the representation of x in polar coordinates.  Returns a pair (r, phi) where r is the modulus of x and phi is the phase of x.  polar(x) is equivalent to (abs(x), phase(x)).  New in version 2.6.     cmath.rect(r, phi)\u00b6 Return the complex number x with polar coordinates r and phi. Equivalent to r * (math.cos(phi) + math.sin(phi)*1j).  New in version 2.6.     9.3.2. Power and logarithmic functions\u00b6   cmath.exp(x)\u00b6 Return the exponential value e**x.    cmath.log(x[, base])\u00b6 Returns the logarithm of x to the given base. If the base is not specified, returns the natural logarithm of x. There is one branch cut, from 0 along the negative real axis to -\u221e, continuous from above.  Changed in version 2.4: base argument added.     cmath.log10(x)\u00b6 Return the base-10 logarithm of x. This has the same branch cut as log().    cmath.sqrt(x)\u00b6 Return the square root of x. This has the same branch cut as log().    9.3.3. Trigonometric functions\u00b6   cmath.acos(x)\u00b6 Return the arc cosine of x. There are two branch cuts: One extends right from 1 along the real axis to \u221e, continuous from below. The other extends left from -1 along the real axis to -\u221e, continuous from above.    cmath.asin(x)\u00b6 Return the arc sine of x. This has the same branch cuts as acos().    cmath.atan(x)\u00b6 Return the arc tangent of x. There are two branch cuts: One extends from 1j along the imaginary axis to \u221ej, continuous from the right. The other extends from -1j along the imaginary axis to -\u221ej, continuous from the left.  Changed in version 2.6: direction of continuity of upper cut reversed     cmath.cos(x)\u00b6 Return the cosine of x.    cmath.sin(x)\u00b6 Return the sine of x.    cmath.tan(x)\u00b6 Return the tangent of x.    9.3.4. Hyperbolic functions\u00b6   cmath.acosh(x)\u00b6 Return the hyperbolic arc cosine of x. There is one branch cut, extending left from 1 along the real axis to -\u221e, continuous from above.    cmath.asinh(x)\u00b6 Return the hyperbolic arc sine of x. There are two branch cuts: One extends from 1j along the imaginary axis to \u221ej, continuous from the right.  The other extends from -1j along the imaginary axis to -\u221ej, continuous from the left.  Changed in version 2.6: branch cuts moved to match those recommended by the C99 standard     cmath.atanh(x)\u00b6 Return the hyperbolic arc tangent of x. There are two branch cuts: One extends from 1 along the real axis to \u221e, continuous from below. The other extends from -1 along the real axis to -\u221e, continuous from above.  Changed in version 2.6: direction of continuity of right cut reversed     cmath.cosh(x)\u00b6 Return the hyperbolic cosine of x.    cmath.sinh(x)\u00b6 Return the hyperbolic sine of x.    cmath.tanh(x)\u00b6 Return the hyperbolic tangent of x.    9.3.5. Classification functions\u00b6   cmath.isinf(x)\u00b6 Return True if the real or the imaginary part of x is positive or negative infinity.  New in version 2.6.     cmath.isnan(x)\u00b6 Return True if the real or imaginary part of x is not a number (NaN).  New in version 2.6.     9.3.6. Constants\u00b6   cmath.pi\u00b6 The mathematical constant \u03c0, as a float.    cmath.e\u00b6 The mathematical constant e, as a float.  Note that the selection of functions is similar, but not identical, to that in module math.  The reason for having two modules is that some users aren&#8217;t interested in complex numbers, and perhaps don&#8217;t even know what they are.  They would rather have math.sqrt(-1) raise an exception than return a complex number. Also note that the functions defined in cmath always return a complex number, even if the answer can be expressed as a real number (in which case the complex number has an imaginary part of zero). A note on branch cuts: They are curves along which the given function fails to be continuous.  They are a necessary feature of many complex functions.  It is assumed that if you need to compute with complex functions, you will understand about branch cuts.  Consult almost any (not too elementary) book on complex variables for enlightenment.  For information of the proper choice of branch cuts for numerical purposes, a good reference should be the following:  See also Kahan, W:  Branch cuts for complex elementary functions; or, Much ado about nothing&#8217;s sign bit.  In Iserles, A., and Powell, M. (eds.), The state of the art in numerical analysis. Clarendon Press (1987) pp165-211."},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.acos","title":"cmath.acos","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.acosh","title":"cmath.acosh","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.asin","title":"cmath.asin","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.asinh","title":"cmath.asinh","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.atan","title":"cmath.atan","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.atanh","title":"cmath.atanh","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.cos","title":"cmath.cos","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.cosh","title":"cmath.cosh","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.exp","title":"cmath.exp","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.isinf","title":"cmath.isinf","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.isnan","title":"cmath.isnan","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.log","title":"cmath.log","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.log10","title":"cmath.log10","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.phase","title":"cmath.phase","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.polar","title":"cmath.polar","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.rect","title":"cmath.rect","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.sin","title":"cmath.sin","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.sinh","title":"cmath.sinh","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.sqrt","title":"cmath.sqrt","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.tan","title":"cmath.tan","description":""},{"url":"http:\/\/docs.python.org\/library\/cmath.html#cmath.tanh","title":"cmath.tanh","description":""},{"url":"http:\/\/docs.python.org\/library\/functools.html","title":"functools","description":"9.8. functools &#8212; Higher order functions and operations on callable objects\u00b6  New in version 2.5. Source code: Lib\/functools.py  The functools module is for higher-order functions: functions that act on or return other functions. In general, any callable object can be treated as a function for the purposes of this module. The functools module defines the following functions:   functools.cmp_to_key(func)\u00b6 Transform an old-style comparison function to a key-function.  Used with tools that accept key functions (such as sorted(), min(), max(), heapq.nlargest(), heapq.nsmallest(), itertools.groupby()).  This function is primarily used as a transition tool for programs being converted to Py3.x where comparison functions are no longer supported. A compare function is any callable that accept two arguments, compares them, and returns a negative number for less-than, zero for equality, or a positive number for greater-than.  A key function is a callable that accepts one argument and returns another value that indicates the position in the desired collation sequence. Example: sorted(iterable, key=cmp_to_key(locale.strcoll))  # locale-aware sort order    New in version 2.7.     functools.total_ordering(cls)\u00b6 Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.  This simplifies the effort involved in specifying all of the possible rich comparison operations: The class must define one of __lt__(), __le__(), __gt__(), or __ge__(). In addition, the class should supply an __eq__() method. For example: @total_ordering class Student:     def __eq__(self, other):         return ((self.lastname.lower(), self.firstname.lower()) ==                 (other.lastname.lower(), other.firstname.lower()))     def __lt__(self, other):         return ((self.lastname.lower(), self.firstname.lower()) <                 (other.lastname.lower(), other.firstname.lower()))    New in version 2.7.     functools.reduce(function, iterable[, initializer])\u00b6 This is the same function as reduce().  It is made available in this module to allow writing code more forward-compatible with Python 3.  New in version 2.6.     functools.partial(func[, *args][, **keywords])\u00b6 Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords. If more arguments are supplied to the call, they are appended to args. If additional keyword arguments are supplied, they extend and override keywords. Roughly equivalent to: def partial(func, *args, **keywords):     def newfunc(*fargs, **fkeywords):         newkeywords = keywords.copy()         newkeywords.update(fkeywords)         return func(*(args + fargs), **newkeywords)     newfunc.func = func     newfunc.args = args     newfunc.keywords = keywords     return newfunc   The partial() is used for partial function application which &#8220;freezes&#8221; some portion of a function&#8217;s arguments and\/or keywords resulting in a new object with a simplified signature.  For example, partial() can be used to create a callable that behaves like the int() function where the base argument defaults to two: >>> from functools import partial >>> basetwo = partial(int, base=2) >>> basetwo.__doc__ = &#39;Convert base 2 string to an int.&#39; >>> basetwo(&#39;10010&#39;) 18       functools.update_wrapper(wrapper, wrapped[, assigned][, updated])\u00b6 Update a wrapper function to look like the wrapped function. The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants WRAPPER_ASSIGNMENTS (which assigns to the wrapper function&#8217;s __name__, __module__ and __doc__, the documentation string) and WRAPPER_UPDATES (which updates the wrapper function&#8217;s __dict__, i.e. the instance dictionary). The main intended use for this function is in decorator functions which wrap the decorated function and return the wrapper. If the wrapper function is not updated, the metadata of the returned function will reflect the wrapper definition rather than the original function definition, which is typically less than helpful.     functools.wraps(wrapped[, assigned][, updated])\u00b6 This is a convenience function for invoking partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated) as a function decorator when defining a wrapper function. For example: >>> from functools import wraps >>> def my_decorator(f): ...     @wraps(f) ...     def wrapper(*args, **kwds): ...         print &#39;Calling decorated function&#39; ...         return f(*args, **kwds) ...     return wrapper ... >>> @my_decorator ... def example(): ...     \"\"\"Docstring\"\"\" ...     print &#39;Called example function&#39; ... >>> example() Calling decorated function Called example function >>> example.__name__ &#39;example&#39; >>> example.__doc__ &#39;Docstring&#39;   Without the use of this decorator factory, the name of the example function would have been 'wrapper', and the docstring of the original example() would have been lost.    9.8.1. partial Objects\u00b6 partial objects are callable objects created by partial(). They have three read-only attributes:   partial.func\u00b6 A callable object or function.  Calls to the partial object will be forwarded to func with new arguments and keywords.    partial.args\u00b6 The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call.    partial.keywords\u00b6 The keyword arguments that will be supplied when the partial object is called.  partial objects are like function objects in that they are callable, weak referencable, and can have attributes.  There are some important differences.  For instance, the __name__ and __doc__ attributes are not created automatically.  Also, partial objects defined in classes behave like static methods and do not transform into bound methods during instance attribute look-up."},{"url":"http:\/\/docs.python.org\/library\/functools.html#functools.cmp_to_key","title":"functools.cmp_to_key","description":""},{"url":"http:\/\/docs.python.org\/library\/functools.html#functools.partial","title":"functools.partial","description":""},{"url":"http:\/\/docs.python.org\/library\/functools.html#functools.reduce","title":"functools.reduce","description":""},{"url":"http:\/\/docs.python.org\/library\/functools.html#functools.total_ordering","title":"functools.total_ordering","description":""},{"url":"http:\/\/docs.python.org\/library\/functools.html#functools.update_wrapper","title":"functools.update_wrapper","description":""},{"url":"http:\/\/docs.python.org\/library\/functools.html#functools.wraps","title":"functools.wraps","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html","title":"itertools","description":null},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.chain","title":"itertools.chain","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.combinations","title":"itertools.combinations","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.combinations_with_replacement","title":"itertools.combinations_with_replacement","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.compress","title":"itertools.compress","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.count","title":"itertools.count","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.cycle","title":"itertools.cycle","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.dropwhile","title":"itertools.dropwhile","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.groupby","title":"itertools.groupby","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.ifilter","title":"itertools.ifilter","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.ifilterfalse","title":"itertools.ifilterfalse","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.imap","title":"itertools.imap","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.islice","title":"itertools.islice","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.izip","title":"itertools.izip","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.izip_longest","title":"itertools.izip_longest","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.permutations","title":"itertools.permutations","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.product","title":"itertools.product","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.repeat","title":"itertools.repeat","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.starmap","title":"itertools.starmap","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.takewhile","title":"itertools.takewhile","description":""},{"url":"http:\/\/docs.python.org\/library\/itertools.html#itertools.tee","title":"itertools.tee","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html","title":"decimal","description":"9.4. decimal &#8212; Decimal fixed point and floating point arithmetic\u00b6  New in version 2.4. The decimal module provides support for decimal floating point arithmetic.  It offers several advantages over the float datatype:  Decimal &#8220;is based on a floating-point model which was designed with people in mind, and necessarily has a paramount guiding principle &#8211; computers must provide an arithmetic that works in the same way as the arithmetic that people learn at school.&#8221; &#8211; excerpt from the decimal arithmetic specification.  Decimal numbers can be represented exactly.  In contrast, numbers like 1.1 and 2.2 do not have an exact representations in binary floating point.  End users typically would not expect 1.1 + 2.2 to display as 3.3000000000000003 as it does with binary floating point.  The exactness carries over into arithmetic.  In decimal floating point, 0.1 + 0.1 + 0.1 - 0.3 is exactly equal to zero.  In binary floating point, the result is 5.5511151231257827e-017.  While near to zero, the differences prevent reliable equality testing and differences can accumulate. For this reason, decimal is preferred in accounting applications which have strict equality invariants.  The decimal module incorporates a notion of significant places so that 1.30 + 1.20 is 2.50.  The trailing zero is kept to indicate significance. This is the customary presentation for monetary applications. For multiplication, the &#8220;schoolbook&#8221; approach uses all the figures in the multiplicands.  For instance, 1.3 * 1.2 gives 1.56 while 1.30 * 1.20 gives 1.5600.  Unlike hardware based binary floating point, the decimal module has a user alterable precision (defaulting to 28 places) which can be as large as needed for a given problem: >>> from decimal import * >>> getcontext().prec = 6 >>> Decimal(1) \/ Decimal(7) Decimal(&#39;0.142857&#39;) >>> getcontext().prec = 28 >>> Decimal(1) \/ Decimal(7) Decimal(&#39;0.1428571428571428571428571429&#39;)    Both binary and decimal floating point are implemented in terms of published standards.  While the built-in float type exposes only a modest portion of its capabilities, the decimal module exposes all required parts of the standard. When needed, the programmer has full control over rounding and signal handling. This includes an option to enforce exact arithmetic by using exceptions to block any inexact operations.  The decimal module was designed to support &#8220;without prejudice, both exact unrounded decimal arithmetic (sometimes called fixed-point arithmetic) and rounded floating-point arithmetic.&#8221;  &#8211; excerpt from the decimal arithmetic specification.   The module design is centered around three concepts:  the decimal number, the context for arithmetic, and signals. A decimal number is immutable.  It has a sign, coefficient digits, and an exponent.  To preserve significance, the coefficient digits do not truncate trailing zeros.  Decimals also include special values such as Infinity, -Infinity, and NaN.  The standard also differentiates -0 from +0. The context for arithmetic is an environment specifying precision, rounding rules, limits on exponents, flags indicating the results of operations, and trap enablers which determine whether signals are treated as exceptions.  Rounding options include ROUND_CEILING, ROUND_DOWN, ROUND_FLOOR, ROUND_HALF_DOWN, ROUND_HALF_EVEN, ROUND_HALF_UP, ROUND_UP, and ROUND_05UP. Signals are groups of exceptional conditions arising during the course of computation.  Depending on the needs of the application, signals may be ignored, considered as informational, or treated as exceptions. The signals in the decimal module are: Clamped, InvalidOperation, DivisionByZero, Inexact, Rounded, Subnormal, Overflow, and Underflow. For each signal there is a flag and a trap enabler.  When a signal is encountered, its flag is set to one, then, if the trap enabler is set to one, an exception is raised.  Flags are sticky, so the user needs to reset them before monitoring a calculation.  See also  IBM&#8217;s General Decimal Arithmetic Specification, The General Decimal Arithmetic Specification. IEEE standard 854-1987, Unofficial IEEE 854 Text.    9.4.1. Quick-start Tutorial\u00b6 The usual start to using decimals is importing the module, viewing the current context with getcontext() and, if necessary, setting new values for precision, rounding, or enabled traps: >>> from decimal import * >>> getcontext() Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999,         capitals=1, flags=[], traps=[Overflow, DivisionByZero,         InvalidOperation])  >>> getcontext().prec = 7       # Set a new precision   Decimal instances can be constructed from integers, strings, floats, or tuples. Construction from an integer or a float performs an exact conversion of the value of that integer or float.  Decimal numbers include special values such as NaN which stands for &#8220;Not a number&#8221;, positive and negative Infinity, and -0. >>> getcontext().prec = 28 >>> Decimal(10) Decimal(&#39;10&#39;) >>> Decimal(&#39;3.14&#39;) Decimal(&#39;3.14&#39;) >>> Decimal(3.14) Decimal(&#39;3.140000000000000124344978758017532527446746826171875&#39;) >>> Decimal((0, (3, 1, 4), -2)) Decimal(&#39;3.14&#39;) >>> Decimal(str(2.0 ** 0.5)) Decimal(&#39;1.41421356237&#39;) >>> Decimal(2) ** Decimal(&#39;0.5&#39;) Decimal(&#39;1.414213562373095048801688724&#39;) >>> Decimal(&#39;NaN&#39;) Decimal(&#39;NaN&#39;) >>> Decimal(&#39;-Infinity&#39;) Decimal(&#39;-Infinity&#39;)   The significance of a new Decimal is determined solely by the number of digits input.  Context precision and rounding only come into play during arithmetic operations. >>> getcontext().prec = 6 >>> Decimal(&#39;3.0&#39;) Decimal(&#39;3.0&#39;) >>> Decimal(&#39;3.1415926535&#39;) Decimal(&#39;3.1415926535&#39;) >>> Decimal(&#39;3.1415926535&#39;) + Decimal(&#39;2.7182818285&#39;) Decimal(&#39;5.85987&#39;) >>> getcontext().rounding = ROUND_UP >>> Decimal(&#39;3.1415926535&#39;) + Decimal(&#39;2.7182818285&#39;) Decimal(&#39;5.85988&#39;)   Decimals interact well with much of the rest of Python.  Here is a small decimal floating point flying circus: >>> data = map(Decimal, &#39;1.34 1.87 3.45 2.35 1.00 0.03 9.25&#39;.split()) >>> max(data) Decimal(&#39;9.25&#39;) >>> min(data) Decimal(&#39;0.03&#39;) >>> sorted(data) [Decimal(&#39;0.03&#39;), Decimal(&#39;1.00&#39;), Decimal(&#39;1.34&#39;), Decimal(&#39;1.87&#39;),  Decimal(&#39;2.35&#39;), Decimal(&#39;3.45&#39;), Decimal(&#39;9.25&#39;)] >>> sum(data) Decimal(&#39;19.29&#39;) >>> a,b,c = data[:3] >>> str(a) &#39;1.34&#39; >>> float(a) 1.34 >>> round(a, 1)     # round() first converts to binary floating point 1.3 >>> int(a) 1 >>> a * 5 Decimal(&#39;6.70&#39;) >>> a * b Decimal(&#39;2.5058&#39;) >>> c  a Decimal(&#39;0.77&#39;)   And some mathematical functions are also available to Decimal: >>> getcontext().prec = 28 >>> Decimal(2).sqrt() Decimal(&#39;1.414213562373095048801688724&#39;) >>> Decimal(1).exp() Decimal(&#39;2.718281828459045235360287471&#39;) >>> Decimal(&#39;10&#39;).ln() Decimal(&#39;2.302585092994045684017991455&#39;) >>> Decimal(&#39;10&#39;).log10() Decimal(&#39;1&#39;)   The quantize() method rounds a number to a fixed exponent.  This method is useful for monetary applications that often round results to a fixed number of places: >>> Decimal(&#39;7.325&#39;).quantize(Decimal(&#39;.01&#39;), rounding=ROUND_DOWN) Decimal(&#39;7.32&#39;) >>> Decimal(&#39;7.325&#39;).quantize(Decimal(&#39;1.&#39;), rounding=ROUND_UP) Decimal(&#39;8&#39;)   As shown above, the getcontext() function accesses the current context and allows the settings to be changed.  This approach meets the needs of most applications. For more advanced work, it may be useful to create alternate contexts using the Context() constructor.  To make an alternate active, use the setcontext() function. In accordance with the standard, the Decimal module provides two ready to use standard contexts, BasicContext and ExtendedContext. The former is especially useful for debugging because many of the traps are enabled: >>> myothercontext = Context(prec=60, rounding=ROUND_HALF_DOWN) >>> setcontext(myothercontext) >>> Decimal(1) \/ Decimal(7) Decimal(&#39;0.142857142857142857142857142857142857142857142857142857142857&#39;)  >>> ExtendedContext Context(prec=9, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999,         capitals=1, flags=[], traps=[]) >>> setcontext(ExtendedContext) >>> Decimal(1) \/ Decimal(7) Decimal(&#39;0.142857143&#39;) >>> Decimal(42) \/ Decimal(0) Decimal(&#39;Infinity&#39;)  >>> setcontext(BasicContext) >>> Decimal(42) \/ Decimal(0) Traceback (most recent call last):   File \"<pyshell#143>\", line 1, in -toplevel-     Decimal(42) \/ Decimal(0) DivisionByZero: x \/ 0   Contexts also have signal flags for monitoring exceptional conditions encountered during computations.  The flags remain set until explicitly cleared, so it is best to clear the flags before each set of monitored computations by using the clear_flags() method. >>> setcontext(ExtendedContext) >>> getcontext().clear_flags() >>> Decimal(355) \/ Decimal(113) Decimal(&#39;3.14159292&#39;) >>> getcontext() Context(prec=9, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999,         capitals=1, flags=[Rounded, Inexact], traps=[])   The flags entry shows that the rational approximation to Pi was rounded (digits beyond the context precision were thrown away) and that the result is inexact (some of the discarded digits were non-zero). Individual traps are set using the dictionary in the traps field of a context: >>> setcontext(ExtendedContext) >>> Decimal(1) \/ Decimal(0) Decimal(&#39;Infinity&#39;) >>> getcontext().traps[DivisionByZero] = 1 >>> Decimal(1) \/ Decimal(0) Traceback (most recent call last):   File \"<pyshell#112>\", line 1, in -toplevel-     Decimal(1) \/ Decimal(0) DivisionByZero: x \/ 0   Most programs adjust the current context only once, at the beginning of the program.  And, in many applications, data is converted to Decimal with a single cast inside a loop.  With context set and decimals created, the bulk of the program manipulates the data no differently than with other Python numeric types.   9.4.2. Decimal objects\u00b6   class decimal.Decimal([value[, context]])\u00b6 Construct a new Decimal object based from value. value can be an integer, string, tuple, float, or another Decimal object. If no value is given, returns Decimal('0').  If value is a string, it should conform to the decimal numeric string syntax after leading and trailing whitespace characters are removed: sign           ::=  '+' | '-' digit          ::=  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' indicator      ::=  'e' | 'E' digits         ::=  digit [digit]... decimal-part   ::=  digits '.' [digits] | ['.'] digits exponent-part  ::=  indicator [sign] digits infinity       ::=  'Infinity' | 'Inf' nan            ::=  'NaN' [digits] | 'sNaN' [digits] numeric-value  ::=  decimal-part [exponent-part] | infinity numeric-string ::=  [sign] numeric-value | [sign] nan  If value is a unicode string then other Unicode decimal digits are also permitted where digit appears above.  These include decimal digits from various other alphabets (for example, Arabic-Indic and Devan\u0101gar\u012b digits) along with the fullwidth digits u'\\uff10' through u'\\uff19'. If value is a tuple, it should have three components, a sign (0 for positive or 1 for negative), a tuple of digits, and an integer exponent. For example, Decimal((0, (1, 4, 1, 4), -3)) returns Decimal('1.414'). If value is a float, the binary floating point value is losslessly converted to its exact decimal equivalent.  This conversion can often require 53 or more digits of precision.  For example, Decimal(float('1.1')) converts to Decimal('1.100000000000000088817841970012523233890533447265625'). The context precision does not affect how many digits are stored. That is determined exclusively by the number of digits in value. For example, Decimal('3.00000') records all five zeros even if the context precision is only three. The purpose of the context argument is determining what to do if value is a malformed string.  If the context traps InvalidOperation, an exception is raised; otherwise, the constructor returns a new Decimal with the value of NaN. Once constructed, Decimal objects are immutable.  Changed in version 2.6: leading and trailing whitespace characters are permitted when creating a Decimal instance from a string.  Changed in version 2.7: The argument to the constructor is now permitted to be a float instance. Decimal floating point objects share many properties with the other built-in numeric types such as float and int.  All of the usual math operations and special methods apply.  Likewise, decimal objects can be copied, pickled, printed, used as dictionary keys, used as set elements, compared, sorted, and coerced to another type (such as float or long). Decimal objects cannot generally be combined with floats in arithmetic operations: an attempt to add a Decimal to a float, for example, will raise a TypeError. There&#8217;s one exception to this rule: it&#8217;s possible to use Python&#8217;s comparison operators to compare a float instance x with a Decimal instance y.  Without this exception, comparisons between Decimal and float instances would follow the general rules for comparing objects of different types described in the Expressions section of the reference manual, leading to confusing results.  Changed in version 2.7: A comparison between a float instance x and a Decimal instance y now returns a result based on the values of x and y.  In earlier versions x < y returned the same (arbitrary) result for any Decimal instance x and any float instance y. In addition to the standard numeric properties, decimal floating point objects also have a number of specialized methods:   adjusted()\u00b6 Return the adjusted exponent after shifting out the coefficient&#8217;s rightmost digits until only the lead digit remains: Decimal('321e+5').adjusted() returns seven.  Used for determining the position of the most significant digit with respect to the decimal point.    as_tuple()\u00b6 Return a named tuple representation of the number: DecimalTuple(sign, digits, exponent).  Changed in version 2.6: Use a named tuple.     canonical()\u00b6 Return the canonical encoding of the argument.  Currently, the encoding of a Decimal instance is always canonical, so this operation returns its argument unchanged.  New in version 2.6.     compare(other[, context])\u00b6 Compare the values of two Decimal instances.  This operation behaves in the same way as the usual comparison method __cmp__(), except that compare() returns a Decimal instance rather than an integer, and if either operand is a NaN then the result is a NaN: a or b is a NaN ==> Decimal('NaN') a < b           ==> Decimal('-1') a == b          ==> Decimal('0') a > b           ==> Decimal('1')      compare_signal(other[, context])\u00b6 This operation is identical to the compare() method, except that all NaNs signal.  That is, if neither operand is a signaling NaN then any quiet NaN operand is treated as though it were a signaling NaN.  New in version 2.6.     compare_total(other)\u00b6 Compare two operands using their abstract representation rather than their numerical value.  Similar to the compare() method, but the result gives a total ordering on Decimal instances.  Two Decimal instances with the same numeric value but different representations compare unequal in this ordering: >>> Decimal(&#39;12.0&#39;).compare_total(Decimal(&#39;12&#39;)) Decimal(&#39;-1&#39;)   Quiet and signaling NaNs are also included in the total ordering.  The result of this function is Decimal('0') if both operands have the same representation, Decimal('-1') if the first operand is lower in the total order than the second, and Decimal('1') if the first operand is higher in the total order than the second operand.  See the specification for details of the total order.  New in version 2.6.     compare_total_mag(other)\u00b6 Compare two operands using their abstract representation rather than their value as in compare_total(), but ignoring the sign of each operand. x.compare_total_mag(y) is equivalent to x.copy_abs().compare_total(y.copy_abs()).  New in version 2.6.     conjugate()\u00b6 Just returns self, this method is only to comply with the Decimal Specification.  New in version 2.6.     copy_abs()\u00b6 Return the absolute value of the argument.  This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed.  New in version 2.6.     copy_negate()\u00b6 Return the negation of the argument.  This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed.  New in version 2.6.     copy_sign(other)\u00b6 Return a copy of the first operand with the sign set to be the same as the sign of the second operand.  For example: >>> Decimal(&#39;2.3&#39;).copy_sign(Decimal(&#39;-1.5&#39;)) Decimal(&#39;-2.3&#39;)   This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed.  New in version 2.6.     exp([context])\u00b6 Return the value of the (natural) exponential function e**x at the given number.  The result is correctly rounded using the ROUND_HALF_EVEN rounding mode. >>> Decimal(1).exp() Decimal(&#39;2.718281828459045235360287471&#39;) >>> Decimal(321).exp() Decimal(&#39;2.561702493119680037517373933E+139&#39;)    New in version 2.6.     from_float(f)\u00b6 Classmethod that converts a float to a decimal number, exactly. Note Decimal.from_float(0.1) is not the same as Decimal(&#8216;0.1&#8217;). Since 0.1 is not exactly representable in binary floating point, the value is stored as the nearest representable value which is 0x1.999999999999ap-4.  That equivalent value in decimal is 0.1000000000000000055511151231257827021181583404541015625.  Note From Python 2.7 onwards, a Decimal instance can also be constructed directly from a float.  >>> Decimal.from_float(0.1) Decimal(&#39;0.1000000000000000055511151231257827021181583404541015625&#39;) >>> Decimal.from_float(float(&#39;nan&#39;)) Decimal(&#39;NaN&#39;) >>> Decimal.from_float(float(&#39;inf&#39;)) Decimal(&#39;Infinity&#39;) >>> Decimal.from_float(float(&#39;-inf&#39;)) Decimal(&#39;-Infinity&#39;)    New in version 2.7.     fma(other, third[, context])\u00b6 Fused multiply-add.  Return self*other+third with no rounding of the intermediate product self*other. >>> Decimal(2).fma(3, 5) Decimal(&#39;11&#39;)    New in version 2.6.     is_canonical()\u00b6 Return True if the argument is canonical and False otherwise.  Currently, a Decimal instance is always canonical, so this operation always returns True.  New in version 2.6.     is_finite()\u00b6 Return True if the argument is a finite number, and False if the argument is an infinity or a NaN.  New in version 2.6.     is_infinite()\u00b6 Return True if the argument is either positive or negative infinity and False otherwise.  New in version 2.6.     is_nan()\u00b6 Return True if the argument is a (quiet or signaling) NaN and False otherwise.  New in version 2.6.     is_normal()\u00b6 Return True if the argument is a normal finite non-zero number with an adjusted exponent greater than or equal to Emin. Return False if the argument is zero, subnormal, infinite or a NaN.  Note, the term normal is used here in a different sense with the normalize() method which is used to create canonical values.  New in version 2.6.     is_qnan()\u00b6 Return True if the argument is a quiet NaN, and False otherwise.  New in version 2.6.     is_signed()\u00b6 Return True if the argument has a negative sign and False otherwise.  Note that zeros and NaNs can both carry signs.  New in version 2.6.     is_snan()\u00b6 Return True if the argument is a signaling NaN and False otherwise.  New in version 2.6.     is_subnormal()\u00b6 Return True if the argument is subnormal, and False otherwise. A number is subnormal is if it is nonzero, finite, and has an adjusted exponent less than Emin.  New in version 2.6.     is_zero()\u00b6 Return True if the argument is a (positive or negative) zero and False otherwise.  New in version 2.6.     ln([context])\u00b6 Return the natural (base e) logarithm of the operand.  The result is correctly rounded using the ROUND_HALF_EVEN rounding mode.  New in version 2.6.     log10([context])\u00b6 Return the base ten logarithm of the operand.  The result is correctly rounded using the ROUND_HALF_EVEN rounding mode.  New in version 2.6.     logb([context])\u00b6 For a nonzero number, return the adjusted exponent of its operand as a Decimal instance.  If the operand is a zero then Decimal('-Infinity') is returned and the DivisionByZero flag is raised.  If the operand is an infinity then Decimal('Infinity') is returned.  New in version 2.6.     logical_and(other[, context])\u00b6 logical_and() is a logical operation which takes two logical operands (see Logical operands).  The result is the digit-wise and of the two operands.  New in version 2.6.     logical_invert([context])\u00b6 logical_invert() is a logical operation.  The result is the digit-wise inversion of the operand.  New in version 2.6.     logical_or(other[, context])\u00b6 logical_or() is a logical operation which takes two logical operands (see Logical operands).  The result is the digit-wise or of the two operands.  New in version 2.6.     logical_xor(other[, context])\u00b6 logical_xor() is a logical operation which takes two logical operands (see Logical operands).  The result is the digit-wise exclusive or of the two operands.  New in version 2.6.     max(other[, context])\u00b6 Like max(self, other) except that the context rounding rule is applied before returning and that NaN values are either signaled or ignored (depending on the context and whether they are signaling or quiet).    max_mag(other[, context])\u00b6 Similar to the max() method, but the comparison is done using the absolute values of the operands.  New in version 2.6.     min(other[, context])\u00b6 Like min(self, other) except that the context rounding rule is applied before returning and that NaN values are either signaled or ignored (depending on the context and whether they are signaling or quiet).    min_mag(other[, context])\u00b6 Similar to the min() method, but the comparison is done using the absolute values of the operands.  New in version 2.6.     next_minus([context])\u00b6 Return the largest number representable in the given context (or in the current thread&#8217;s context if no context is given) that is smaller than the given operand.  New in version 2.6.     next_plus([context])\u00b6 Return the smallest number representable in the given context (or in the current thread&#8217;s context if no context is given) that is larger than the given operand.  New in version 2.6.     next_toward(other[, context])\u00b6 If the two operands are unequal, return the number closest to the first operand in the direction of the second operand.  If both operands are numerically equal, return a copy of the first operand with the sign set to be the same as the sign of the second operand.  New in version 2.6.     normalize([context])\u00b6 Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal('0') to Decimal('0e0'). Used for producing canonical values for attributes of an equivalence class. For example, Decimal('32.100') and Decimal('0.321000e+2') both normalize to the equivalent value Decimal('32.1').    number_class([context])\u00b6 Return a string describing the class of the operand.  The returned value is one of the following ten strings.  \"-Infinity\", indicating that the operand is negative infinity. \"-Normal\", indicating that the operand is a negative normal number. \"-Subnormal\", indicating that the operand is negative and subnormal. \"-Zero\", indicating that the operand is a negative zero. \"+Zero\", indicating that the operand is a positive zero. \"+Subnormal\", indicating that the operand is positive and subnormal. \"+Normal\", indicating that the operand is a positive normal number. \"+Infinity\", indicating that the operand is positive infinity. \"NaN\", indicating that the operand is a quiet NaN (Not a Number). \"sNaN\", indicating that the operand is a signaling NaN.   New in version 2.6.     quantize(exp[, rounding[, context[, watchexp]]])\u00b6 Return a value equal to the first operand after rounding and having the exponent of the second operand. >>> Decimal(&#39;1.41421356&#39;).quantize(Decimal(&#39;1.000&#39;)) Decimal(&#39;1.414&#39;)   Unlike other operations, if the length of the coefficient after the quantize operation would be greater than precision, then an InvalidOperation is signaled. This guarantees that, unless there is an error condition, the quantized exponent is always equal to that of the right-hand operand. Also unlike other operations, quantize never signals Underflow, even if the result is subnormal and inexact. If the exponent of the second operand is larger than that of the first then rounding may be necessary.  In this case, the rounding mode is determined by the rounding argument if given, else by the given context argument; if neither argument is given the rounding mode of the current thread&#8217;s context is used. If watchexp is set (default), then an error is returned whenever the resulting exponent is greater than Emax or less than Etiny.     radix()\u00b6 Return Decimal(10), the radix (base) in which the Decimal class does all its arithmetic.  Included for compatibility with the specification.  New in version 2.6.     remainder_near(other[, context])\u00b6 Compute the modulo as either a positive or negative value depending on which is closest to zero.  For instance, Decimal(10).remainder_near(6) returns Decimal('-2') which is closer to zero than Decimal('4'). If both are equally close, the one chosen will have the same sign as self.     rotate(other[, context])\u00b6 Return the result of rotating the digits of the first operand by an amount specified by the second operand.  The second operand must be an integer in the range -precision through precision.  The absolute value of the second operand gives the number of places to rotate.  If the second operand is positive then rotation is to the left; otherwise rotation is to the right. The coefficient of the first operand is padded on the left with zeros to length precision if necessary.  The sign and exponent of the first operand are unchanged.  New in version 2.6.     same_quantum(other[, context])\u00b6 Test whether self and other have the same exponent or whether both are NaN.    scaleb(other[, context])\u00b6 Return the first operand with exponent adjusted by the second. Equivalently, return the first operand multiplied by 10**other.  The second operand must be an integer.  New in version 2.6.     shift(other[, context])\u00b6 Return the result of shifting the digits of the first operand by an amount specified by the second operand.  The second operand must be an integer in the range -precision through precision.  The absolute value of the second operand gives the number of places to shift.  If the second operand is positive then the shift is to the left; otherwise the shift is to the right.  Digits shifted into the coefficient are zeros.  The sign and exponent of the first operand are unchanged.  New in version 2.6.     sqrt([context])\u00b6 Return the square root of the argument to full precision.    to_eng_string([context])\u00b6 Convert to an engineering-type string. Engineering notation has an exponent which is a multiple of 3, so there are up to 3 digits left of the decimal place.  For example, converts Decimal('123E+1') to Decimal('1.23E+3')     to_integral([rounding[, context]])\u00b6 Identical to the to_integral_value() method.  The to_integral name has been kept for compatibility with older versions.    to_integral_exact([rounding[, context]])\u00b6 Round to the nearest integer, signaling Inexact or Rounded as appropriate if rounding occurs.  The rounding mode is determined by the rounding parameter if given, else by the given context.  If neither parameter is given then the rounding mode of the current context is used.  New in version 2.6.     to_integral_value([rounding[, context]])\u00b6 Round to the nearest integer without signaling Inexact or Rounded.  If given, applies rounding; otherwise, uses the rounding method in either the supplied context or the current context.  Changed in version 2.6: renamed from to_integral to to_integral_value.  The old name remains valid for compatibility.      9.4.2.1. Logical operands\u00b6 The logical_and(), logical_invert(), logical_or(), and logical_xor() methods expect their arguments to be logical operands.  A logical operand is a Decimal instance whose exponent and sign are both zero, and whose digits are all either 0 or 1.    9.4.3. Context objects\u00b6 Contexts are environments for arithmetic operations.  They govern precision, set rules for rounding, determine which signals are treated as exceptions, and limit the range for exponents. Each thread has its own current context which is accessed or changed using the getcontext() and setcontext() functions:   decimal.getcontext()\u00b6 Return the current context for the active thread.    decimal.setcontext(c)\u00b6 Set the current context for the active thread to c.  Beginning with Python 2.5, you can also use the with statement and the localcontext() function to temporarily change the active context.   decimal.localcontext([c])\u00b6 Return a context manager that will set the current context for the active thread to a copy of c on entry to the with-statement and restore the previous context when exiting the with-statement. If no context is specified, a copy of the current context is used.  New in version 2.5. For example, the following code sets the current decimal precision to 42 places, performs a calculation, and then automatically restores the previous context: from decimal import localcontext  with localcontext() as ctx:     ctx.prec = 42   # Perform a high precision calculation     s = calculate_something() s = +s  # Round the final result back to the default precision     New contexts can also be created using the Context constructor described below. In addition, the module provides three pre-made contexts:   class decimal.BasicContext\u00b6 This is a standard context defined by the General Decimal Arithmetic Specification.  Precision is set to nine.  Rounding is set to ROUND_HALF_UP.  All flags are cleared.  All traps are enabled (treated as exceptions) except Inexact, Rounded, and Subnormal. Because many of the traps are enabled, this context is useful for debugging.     class decimal.ExtendedContext\u00b6 This is a standard context defined by the General Decimal Arithmetic Specification.  Precision is set to nine.  Rounding is set to ROUND_HALF_EVEN.  All flags are cleared.  No traps are enabled (so that exceptions are not raised during computations). Because the traps are disabled, this context is useful for applications that prefer to have result value of NaN or Infinity instead of raising exceptions.  This allows an application to complete a run in the presence of conditions that would otherwise halt the program.     class decimal.DefaultContext\u00b6 This context is used by the Context constructor as a prototype for new contexts.  Changing a field (such a precision) has the effect of changing the default for new contexts created by the Context constructor. This context is most useful in multi-threaded environments.  Changing one of the fields before threads are started has the effect of setting system-wide defaults.  Changing the fields after threads have started is not recommended as it would require thread synchronization to prevent race conditions. In single threaded environments, it is preferable to not use this context at all.  Instead, simply create contexts explicitly as described below. The default values are precision=28, rounding=ROUND_HALF_EVEN, and enabled traps for Overflow, InvalidOperation, and DivisionByZero.   In addition to the three supplied contexts, new contexts can be created with the Context constructor.   class decimal.Context(prec=None, rounding=None, traps=None, flags=None, Emin=None, Emax=None, capitals=1)\u00b6 Creates a new context.  If a field is not specified or is None, the default values are copied from the DefaultContext.  If the flags field is not specified or is None, all flags are cleared. The prec field is a positive integer that sets the precision for arithmetic operations in the context. The rounding option is one of:  ROUND_CEILING (towards Infinity), ROUND_DOWN (towards zero), ROUND_FLOOR (towards -Infinity), ROUND_HALF_DOWN (to nearest with ties going towards zero), ROUND_HALF_EVEN (to nearest with ties going to nearest even integer), ROUND_HALF_UP (to nearest with ties going away from zero), or ROUND_UP (away from zero). ROUND_05UP (away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise towards zero)  The traps and flags fields list any signals to be set. Generally, new contexts should only set traps and leave the flags clear. The Emin and Emax fields are integers specifying the outer limits allowable for exponents. The capitals field is either 0 or 1 (the default). If set to 1, exponents are printed with a capital E; otherwise, a lowercase e is used: Decimal('6.02e+23').  Changed in version 2.6: The ROUND_05UP rounding mode was added. The Context class defines several general purpose methods as well as a large number of methods for doing arithmetic directly in a given context. In addition, for each of the Decimal methods described above (with the exception of the adjusted() and as_tuple() methods) there is a corresponding Context method.  For example, for a Context instance C and Decimal instance x, C.exp(x) is equivalent to x.exp(context=C).  Each Context method accepts a Python integer (an instance of int or long) anywhere that a Decimal instance is accepted.   clear_flags()\u00b6 Resets all of the flags to 0.    copy()\u00b6 Return a duplicate of the context.    copy_decimal(num)\u00b6 Return a copy of the Decimal instance num.    create_decimal(num)\u00b6 Creates a new Decimal instance from num but using self as context. Unlike the Decimal constructor, the context precision, rounding method, flags, and traps are applied to the conversion. This is useful because constants are often given to a greater precision than is needed by the application.  Another benefit is that rounding immediately eliminates unintended effects from digits beyond the current precision. In the following example, using unrounded inputs means that adding zero to a sum can change the result: >>> getcontext().prec = 3 >>> Decimal(&#39;3.4445&#39;) + Decimal(&#39;1.0023&#39;) Decimal(&#39;4.45&#39;) >>> Decimal(&#39;3.4445&#39;) + Decimal(0) + Decimal(&#39;1.0023&#39;) Decimal(&#39;4.44&#39;)   This method implements the to-number operation of the IBM specification. If the argument is a string, no leading or trailing whitespace is permitted.     create_decimal_from_float(f)\u00b6 Creates a new Decimal instance from a float f but rounding using self as the context.  Unlike the Decimal.from_float() class method, the context precision, rounding method, flags, and traps are applied to the conversion. >>> context = Context(prec=5, rounding=ROUND_DOWN) >>> context.create_decimal_from_float(math.pi) Decimal(&#39;3.1415&#39;) >>> context = Context(prec=5, traps=[Inexact]) >>> context.create_decimal_from_float(math.pi) Traceback (most recent call last):     ... Inexact: None    New in version 2.7.     Etiny()\u00b6 Returns a value equal to Emin - prec + 1 which is the minimum exponent value for subnormal results.  When underflow occurs, the exponent is set to Etiny.    Etop()\u00b6 Returns a value equal to Emax - prec + 1.  The usual approach to working with decimals is to create Decimal instances and then apply arithmetic operations which take place within the current context for the active thread.  An alternative approach is to use context methods for calculating within a specific context.  The methods are similar to those for the Decimal class and are only briefly recounted here.   abs(x)\u00b6 Returns the absolute value of x.    add(x, y)\u00b6 Return the sum of x and y.    canonical(x)\u00b6 Returns the same Decimal object x.    compare(x, y)\u00b6 Compares x and y numerically.    compare_signal(x, y)\u00b6 Compares the values of the two operands numerically.    compare_total(x, y)\u00b6 Compares two operands using their abstract representation.    compare_total_mag(x, y)\u00b6 Compares two operands using their abstract representation, ignoring sign.    copy_abs(x)\u00b6 Returns a copy of x with the sign set to 0.    copy_negate(x)\u00b6 Returns a copy of x with the sign inverted.    copy_sign(x, y)\u00b6 Copies the sign from y to x.    divide(x, y)\u00b6 Return x divided by y.    divide_int(x, y)\u00b6 Return x divided by y, truncated to an integer.    divmod(x, y)\u00b6 Divides two numbers and returns the integer part of the result.    exp(x)\u00b6 Returns e ** x.    fma(x, y, z)\u00b6 Returns x multiplied by y, plus z.    is_canonical(x)\u00b6 Returns True if x is canonical; otherwise returns False.    is_finite(x)\u00b6 Returns True if x is finite; otherwise returns False.    is_infinite(x)\u00b6 Returns True if x is infinite; otherwise returns False.    is_nan(x)\u00b6 Returns True if x is a qNaN or sNaN; otherwise returns False.    is_normal(x)\u00b6 Returns True if x is a normal number; otherwise returns False.    is_qnan(x)\u00b6 Returns True if x is a quiet NaN; otherwise returns False.    is_signed(x)\u00b6 Returns True if x is negative; otherwise returns False.    is_snan(x)\u00b6 Returns True if x is a signaling NaN; otherwise returns False.    is_subnormal(x)\u00b6 Returns True if x is subnormal; otherwise returns False.    is_zero(x)\u00b6 Returns True if x is a zero; otherwise returns False.    ln(x)\u00b6 Returns the natural (base e) logarithm of x.    log10(x)\u00b6 Returns the base 10 logarithm of x.    logb(x)\u00b6 Returns the exponent of the magnitude of the operand&#8217;s MSD.    logical_and(x, y)\u00b6 Applies the logical operation and between each operand&#8217;s digits.    logical_invert(x)\u00b6 Invert all the digits in x.    logical_or(x, y)\u00b6 Applies the logical operation or between each operand&#8217;s digits.    logical_xor(x, y)\u00b6 Applies the logical operation xor between each operand&#8217;s digits.    max(x, y)\u00b6 Compares two values numerically and returns the maximum.    max_mag(x, y)\u00b6 Compares the values numerically with their sign ignored.    min(x, y)\u00b6 Compares two values numerically and returns the minimum.    min_mag(x, y)\u00b6 Compares the values numerically with their sign ignored.    minus(x)\u00b6 Minus corresponds to the unary prefix minus operator in Python.    multiply(x, y)\u00b6 Return the product of x and y.    next_minus(x)\u00b6 Returns the largest representable number smaller than x.    next_plus(x)\u00b6 Returns the smallest representable number larger than x.    next_toward(x, y)\u00b6 Returns the number closest to x, in direction towards y.    normalize(x)\u00b6 Reduces x to its simplest form.    number_class(x)\u00b6 Returns an indication of the class of x.    plus(x)\u00b6 Plus corresponds to the unary prefix plus operator in Python.  This operation applies the context precision and rounding, so it is not an identity operation.    power(x, y[, modulo])\u00b6 Return x to the power of y, reduced modulo modulo if given. With two arguments, compute x**y.  If x is negative then y must be integral.  The result will be inexact unless y is integral and the result is finite and can be expressed exactly in &#8216;precision&#8217; digits. The result should always be correctly rounded, using the rounding mode of the current thread&#8217;s context. With three arguments, compute (x**y)  modulo.  For the three argument form, the following restrictions on the arguments hold:   all three arguments must be integral y must be nonnegative at least one of x or y must be nonzero modulo must be nonzero and have at most &#8216;precision&#8217; digits   The value resulting from Context.power(x, y, modulo) is equal to the value that would be obtained by computing (x**y)  modulo with unbounded precision, but is computed more efficiently.  The exponent of the result is zero, regardless of the exponents of x, y and modulo.  The result is always exact.  Changed in version 2.6: y may now be nonintegral in x**y. Stricter requirements for the three-argument version.     quantize(x, y)\u00b6 Returns a value equal to x (rounded), having the exponent of y.    radix()\u00b6 Just returns 10, as this is Decimal, :)    remainder(x, y)\u00b6 Returns the remainder from integer division. The sign of the result, if non-zero, is the same as that of the original dividend.     remainder_near(x, y)\u00b6 Returns x - y * n, where n is the integer nearest the exact value of x \/ y (if the result is 0 then its sign will be the sign of x).    rotate(x, y)\u00b6 Returns a rotated copy of x, y times.    same_quantum(x, y)\u00b6 Returns True if the two operands have the same exponent.    scaleb(x, y)\u00b6 Returns the first operand after adding the second value its exp.    shift(x, y)\u00b6 Returns a shifted copy of x, y times.    sqrt(x)\u00b6 Square root of a non-negative number to context precision.    subtract(x, y)\u00b6 Return the difference between x and y.    to_eng_string(x)\u00b6 Converts a number to a string, using scientific notation.    to_integral_exact(x)\u00b6 Rounds to an integer.    to_sci_string(x)\u00b6 Converts a number to a string using scientific notation.      9.4.4. Signals\u00b6 Signals represent conditions that arise during computation. Each corresponds to one context flag and one context trap enabler. The context flag is set whenever the condition is encountered. After the computation, flags may be checked for informational purposes (for instance, to determine whether a computation was exact). After checking the flags, be sure to clear all flags before starting the next computation. If the context&#8217;s trap enabler is set for the signal, then the condition causes a Python exception to be raised.  For example, if the DivisionByZero trap is set, then a DivisionByZero exception is raised upon encountering the condition.   class decimal.Clamped\u00b6 Altered an exponent to fit representation constraints. Typically, clamping occurs when an exponent falls outside the context&#8217;s Emin and Emax limits.  If possible, the exponent is reduced to fit by adding zeros to the coefficient.     class decimal.DecimalException\u00b6 Base class for other signals and a subclass of ArithmeticError.    class decimal.DivisionByZero\u00b6 Signals the division of a non-infinite number by zero. Can occur with division, modulo division, or when raising a number to a negative power.  If this signal is not trapped, returns Infinity or -Infinity with the sign determined by the inputs to the calculation.     class decimal.Inexact\u00b6 Indicates that rounding occurred and the result is not exact. Signals when non-zero digits were discarded during rounding. The rounded result is returned.  The signal flag or trap is used to detect when results are inexact.     class decimal.InvalidOperation\u00b6 An invalid operation was performed. Indicates that an operation was requested that does not make sense. If not trapped, returns NaN.  Possible causes include: Infinity - Infinity 0 * Infinity Infinity \/ Infinity x  0 Infinity  x x._rescale( non-integer ) sqrt(-x) and x > 0 0 ** 0 x ** (non-integer) x ** Infinity       class decimal.Overflow\u00b6 Numerical overflow. Indicates the exponent is larger than Emax after rounding has occurred.  If not trapped, the result depends on the rounding mode, either pulling inward to the largest representable finite number or rounding outward to Infinity.  In either case, Inexact and Rounded are also signaled.     class decimal.Rounded\u00b6 Rounding occurred though possibly no information was lost. Signaled whenever rounding discards digits; even if those digits are zero (such as rounding 5.00 to 5.0).  If not trapped, returns the result unchanged.  This signal is used to detect loss of significant digits.     class decimal.Subnormal\u00b6 Exponent was lower than Emin prior to rounding. Occurs when an operation result is subnormal (the exponent is too small). If not trapped, returns the result unchanged.     class decimal.Underflow\u00b6 Numerical underflow with result rounded to zero. Occurs when a subnormal result is pushed to zero by rounding. Inexact and Subnormal are also signaled.   The following table summarizes the hierarchy of signals: exceptions.ArithmeticError(exceptions.StandardError)     DecimalException         Clamped         DivisionByZero(DecimalException, exceptions.ZeroDivisionError)         Inexact             Overflow(Inexact, Rounded)             Underflow(Inexact, Rounded, Subnormal)         InvalidOperation         Rounded         Subnormal    9.4.5. Floating Point Notes\u00b6  9.4.5.1. Mitigating round-off error with increased precision\u00b6 The use of decimal floating point eliminates decimal representation error (making it possible to represent 0.1 exactly); however, some operations can still incur round-off error when non-zero digits exceed the fixed precision. The effects of round-off error can be amplified by the addition or subtraction of nearly offsetting quantities resulting in loss of significance.  Knuth provides two instructive examples where rounded floating point arithmetic with insufficient precision causes the breakdown of the associative and distributive properties of addition: # Examples from Seminumerical Algorithms, Section 4.2.2. >>> from decimal import Decimal, getcontext >>> getcontext().prec = 8  >>> u, v, w = Decimal(11111113), Decimal(-11111111), Decimal('7.51111111') >>> (u + v) + w Decimal('9.5111111') >>> u + (v + w) Decimal('10')  >>> u, v, w = Decimal(20000), Decimal(-6), Decimal('6.0000003') >>> (u*v) + (u*w) Decimal('0.01') >>> u * (v+w) Decimal('0.0060000')  The decimal module makes it possible to restore the identities by expanding the precision sufficiently to avoid loss of significance: >>> getcontext().prec = 20 >>> u, v, w = Decimal(11111113), Decimal(-11111111), Decimal(&#39;7.51111111&#39;) >>> (u + v) + w Decimal(&#39;9.51111111&#39;) >>> u + (v + w) Decimal(&#39;9.51111111&#39;) >>> >>> u, v, w = Decimal(20000), Decimal(-6), Decimal(&#39;6.0000003&#39;) >>> (u*v) + (u*w) Decimal(&#39;0.0060000&#39;) >>> u * (v+w) Decimal(&#39;0.0060000&#39;)     9.4.5.2. Special values\u00b6 The number system for the decimal module provides special values including NaN, sNaN, -Infinity, Infinity, and two zeros, +0 and -0. Infinities can be constructed directly with:  Decimal('Infinity'). Also, they can arise from dividing by zero when the DivisionByZero signal is not trapped.  Likewise, when the Overflow signal is not trapped, infinity can result from rounding beyond the limits of the largest representable number. The infinities are signed (affine) and can be used in arithmetic operations where they get treated as very large, indeterminate numbers.  For instance, adding a constant to infinity gives another infinite result. Some operations are indeterminate and return NaN, or if the InvalidOperation signal is trapped, raise an exception.  For example, 0\/0 returns NaN which means &#8220;not a number&#8221;.  This variety of NaN is quiet and, once created, will flow through other computations always resulting in another NaN.  This behavior can be useful for a series of computations that occasionally have missing inputs &#8212; it allows the calculation to proceed while flagging specific results as invalid. A variant is sNaN which signals rather than remaining quiet after every operation.  This is a useful return value when an invalid result needs to interrupt a calculation for special handling. The behavior of Python&#8217;s comparison operators can be a little surprising where a NaN is involved.  A test for equality where one of the operands is a quiet or signaling NaN always returns False (even when doing Decimal('NaN')==Decimal('NaN')), while a test for inequality always returns True.  An attempt to compare two Decimals using any of the <, <=, > or >= operators will raise the InvalidOperation signal if either operand is a NaN, and return False if this signal is not trapped.  Note that the General Decimal Arithmetic specification does not specify the behavior of direct comparisons; these rules for comparisons involving a NaN were taken from the IEEE 854 standard (see Table 3 in section 5.7).  To ensure strict standards-compliance, use the compare() and compare-signal() methods instead. The signed zeros can result from calculations that underflow. They keep the sign that would have resulted if the calculation had been carried out to greater precision.  Since their magnitude is zero, both positive and negative zeros are treated as equal and their sign is informational. In addition to the two signed zeros which are distinct yet equal, there are various representations of zero with differing precisions yet equivalent in value.  This takes a bit of getting used to.  For an eye accustomed to normalized floating point representations, it is not immediately obvious that the following calculation returns a value equal to zero: >>> 1 \/ Decimal(&#39;Infinity&#39;) Decimal(&#39;0E-1000000026&#39;)      9.4.6. Working with threads\u00b6 The getcontext() function accesses a different Context object for each thread.  Having separate thread contexts means that threads may make changes (such as getcontext.prec=10) without interfering with other threads. Likewise, the setcontext() function automatically assigns its target to the current thread. If setcontext() has not been called before getcontext(), then getcontext() will automatically create a new context for use in the current thread. The new context is copied from a prototype context called DefaultContext. To control the defaults so that each thread will use the same values throughout the application, directly modify the DefaultContext object. This should be done before any threads are started so that there won&#8217;t be a race condition between threads calling getcontext(). For example: # Set applicationwide defaults for all threads about to be launched DefaultContext.prec = 12 DefaultContext.rounding = ROUND_DOWN DefaultContext.traps = ExtendedContext.traps.copy() DefaultContext.traps[InvalidOperation] = 1 setcontext(DefaultContext)  # Afterwards, the threads can be started t1.start() t2.start() t3.start()  . . .    9.4.7. Recipes\u00b6 Here are a few recipes that serve as utility functions and that demonstrate ways to work with the Decimal class: def moneyfmt(value, places=2, curr=&#39;&#39;, sep=&#39;,&#39;, dp=&#39;.&#39;,              pos=&#39;&#39;, neg=&#39;-&#39;, trailneg=&#39;&#39;):     \"\"\"Convert Decimal to a money formatted string.      places:  required number of places after the decimal point     curr:    optional currency symbol before the sign (may be blank)     sep:     optional grouping separator (comma, period, space, or blank)     dp:      decimal point indicator (comma or period)              only specify as blank when places is zero     pos:     optional sign for positive numbers: &#39;+&#39;, space or blank     neg:     optional sign for negative numbers: &#39;-&#39;, &#39;(&#39;, space or blank     trailneg:optional trailing minus indicator:  &#39;-&#39;, &#39;)&#39;, space or blank      >>> d = Decimal(&#39;-1234567.8901&#39;)     >>> moneyfmt(d, curr=&#39;$&#39;)     &#39;-$1,234,567.89&#39;     >>> moneyfmt(d, places=0, sep=&#39;.&#39;, dp=&#39;&#39;, neg=&#39;&#39;, trailneg=&#39;-&#39;)     &#39;1.234.568-&#39;     >>> moneyfmt(d, curr=&#39;$&#39;, neg=&#39;(&#39;, trailneg=&#39;)&#39;)     &#39;($1,234,567.89)&#39;     >>> moneyfmt(Decimal(123456789), sep=&#39; &#39;)     &#39;123 456 789.00&#39;     >>> moneyfmt(Decimal(&#39;-0.02&#39;), neg=&#39;<&#39;, trailneg=&#39;>&#39;)     &#39;<0.02>&#39;      \"\"\"     q = Decimal(10) ** -places      # 2 places --> &#39;0.01&#39;     sign, digits, exp = value.quantize(q).as_tuple()     result = []     digits = map(str, digits)     build, next = result.append, digits.pop     if sign:         build(trailneg)     for i in range(places):         build(next() if digits else &#39;0&#39;)     build(dp)     if not digits:         build(&#39;0&#39;)     i = 0     while digits:         build(next())         i += 1         if i == 3 and digits:             i = 0             build(sep)     build(curr)     build(neg if sign else pos)     return &#39;&#39;.join(reversed(result))  def pi():     \"\"\"Compute Pi to the current precision.      >>> print pi()     3.141592653589793238462643383      \"\"\"     getcontext().prec += 2  # extra digits for intermediate steps     three = Decimal(3)      # substitute \"three=3.0\" for regular floats     lasts, t, s, n, na, d, da = 0, three, 3, 1, 0, 0, 24     while s != lasts:         lasts = s         n, na = n+na, na+8         d, da = d+da, da+32         t = (t * n) \/ d         s += t     getcontext().prec -= 2     return +s               # unary plus applies the new precision  def exp(x):     \"\"\"Return e raised to the power of x.  Result type matches input type.      >>> print exp(Decimal(1))     2.718281828459045235360287471     >>> print exp(Decimal(2))     7.389056098930650227230427461     >>> print exp(2.0)     7.38905609893     >>> print exp(2+0j)     (7.38905609893+0j)      \"\"\"     getcontext().prec += 2     i, lasts, s, fact, num = 0, 0, 1, 1, 1     while s != lasts:         lasts = s         i += 1         fact *= i         num *= x         s += num \/ fact     getcontext().prec -= 2     return +s  def cos(x):     \"\"\"Return the cosine of x as measured in radians.      >>> print cos(Decimal(&#39;0.5&#39;))     0.8775825618903727161162815826     >>> print cos(0.5)     0.87758256189     >>> print cos(0.5+0j)     (0.87758256189+0j)      \"\"\"     getcontext().prec += 2     i, lasts, s, fact, num, sign = 0, 0, 1, 1, 1, 1     while s != lasts:         lasts = s         i += 2         fact *= i * (i-1)         num *= x * x         sign *= -1         s += num \/ fact * sign     getcontext().prec -= 2     return +s  def sin(x):     \"\"\"Return the sine of x as measured in radians.      >>> print sin(Decimal(&#39;0.5&#39;))     0.4794255386042030002732879352     >>> print sin(0.5)     0.479425538604     >>> print sin(0.5+0j)     (0.479425538604+0j)      \"\"\"     getcontext().prec += 2     i, lasts, s, fact, num, sign = 1, 0, x, 1, x, 1     while s != lasts:         lasts = s         i += 2         fact *= i * (i-1)         num *= x * x         sign *= -1         s += num \/ fact * sign     getcontext().prec -= 2     return +s     9.4.8. Decimal FAQ\u00b6 Q. It is cumbersome to type decimal.Decimal('1234.5').  Is there a way to minimize typing when using the interactive interpreter? A. Some users abbreviate the constructor to just a single letter: >>> D = decimal.Decimal >>> D(&#39;1.23&#39;) + D(&#39;3.45&#39;) Decimal(&#39;4.68&#39;)   Q. In a fixed-point application with two decimal places, some inputs have many places and need to be rounded.  Others are not supposed to have excess digits and need to be validated.  What methods should be used? A. The quantize() method rounds to a fixed number of decimal places. If the Inexact trap is set, it is also useful for validation:  >>> TWOPLACES = Decimal(10) ** -2       # same as Decimal(&#39;0.01&#39;)   >>> # Round to two places >>> Decimal(&#39;3.214&#39;).quantize(TWOPLACES) Decimal(&#39;3.21&#39;)   >>> # Validate that a number does not exceed two places >>> Decimal(&#39;3.21&#39;).quantize(TWOPLACES, context=Context(traps=[Inexact])) Decimal(&#39;3.21&#39;)   >>> Decimal(&#39;3.214&#39;).quantize(TWOPLACES, context=Context(traps=[Inexact])) Traceback (most recent call last):    ... Inexact: None    Q. Once I have valid two place inputs, how do I maintain that invariant throughout an application? A. Some operations like addition, subtraction, and multiplication by an integer will automatically preserve fixed point.  Others operations, like division and non-integer multiplication, will change the number of decimal places and need to be followed-up with a quantize() step: >>> a = Decimal(&#39;102.72&#39;)           # Initial fixed-point values >>> b = Decimal(&#39;3.17&#39;) >>> a + b                           # Addition preserves fixed-point Decimal(&#39;105.89&#39;) >>> a - b Decimal(&#39;99.55&#39;) >>> a * 42                          # So does integer multiplication Decimal(&#39;4314.24&#39;) >>> (a * b).quantize(TWOPLACES)     # Must quantize non-integer multiplication Decimal(&#39;325.62&#39;) >>> (b \/ a).quantize(TWOPLACES)     # And quantize division Decimal(&#39;0.03&#39;)   In developing fixed-point applications, it is convenient to define functions to handle the quantize() step:  >>> def mul(x, y, fp=TWOPLACES): ...     return (x * y).quantize(fp) >>> def div(x, y, fp=TWOPLACES): ...     return (x \/ y).quantize(fp)   >>> mul(a, b)                       # Automatically preserve fixed-point Decimal(&#39;325.62&#39;) >>> div(b, a) Decimal(&#39;0.03&#39;)    Q. There are many ways to express the same value.  The numbers 200, 200.000, 2E2, and 02E+4 all have the same value at various precisions. Is there a way to transform them to a single recognizable canonical value? A. The normalize() method maps all equivalent values to a single representative: >>> values = map(Decimal, &#39;200 200.000 2E2 .02E+4&#39;.split()) >>> [v.normalize() for v in values] [Decimal(&#39;2E+2&#39;), Decimal(&#39;2E+2&#39;), Decimal(&#39;2E+2&#39;), Decimal(&#39;2E+2&#39;)]   Q. Some decimal values always print with exponential notation.  Is there a way to get a non-exponential representation? A. For some values, exponential notation is the only way to express the number of significant places in the coefficient.  For example, expressing 5.0E+3 as 5000 keeps the value constant but cannot show the original&#8217;s two-place significance. If an application does not care about tracking significance, it is easy to remove the exponent and trailing zeros, losing significance, but keeping the value unchanged: def remove_exponent(d):     &#39;&#39;&#39;Remove exponent and trailing zeros.      >>> remove_exponent(Decimal(&#39;5E+3&#39;))     Decimal(&#39;5000&#39;)      &#39;&#39;&#39;     return d.quantize(Decimal(1)) if d == d.to_integral() else d.normalize()   Q. Is there a way to convert a regular float to a Decimal? A. Yes, any binary floating point number can be exactly expressed as a Decimal though an exact conversion may take more precision than intuition would suggest: >>> Decimal(math.pi) Decimal(&#39;3.141592653589793115997963468544185161590576171875&#39;)   Q. Within a complex calculation, how can I make sure that I haven&#8217;t gotten a spurious result because of insufficient precision or rounding anomalies. A. The decimal module makes it easy to test results.  A best practice is to re-run calculations using greater precision and with various rounding modes. Widely differing results indicate insufficient precision, rounding mode issues, ill-conditioned inputs, or a numerically unstable algorithm. Q. I noticed that context precision is applied to the results of operations but not to the inputs.  Is there anything to watch out for when mixing values of different precisions? A. Yes.  The principle is that all values are considered to be exact and so is the arithmetic on those values.  Only the results are rounded.  The advantage for inputs is that &#8220;what you type is what you get&#8221;.  A disadvantage is that the results can look odd if you forget that the inputs haven&#8217;t been rounded: >>> getcontext().prec = 3 >>> Decimal(&#39;3.104&#39;) + Decimal(&#39;2.104&#39;) Decimal(&#39;5.21&#39;) >>> Decimal(&#39;3.104&#39;) + Decimal(&#39;0.000&#39;) + Decimal(&#39;2.104&#39;) Decimal(&#39;5.20&#39;)   The solution is either to increase precision or to force rounding of inputs using the unary plus operation: >>> getcontext().prec = 3 >>> +Decimal(&#39;1.23456789&#39;)      # unary plus triggers rounding Decimal(&#39;1.23&#39;)   Alternatively, inputs can be rounded upon creation using the Context.create_decimal() method: >>> Context(prec=5, rounding=ROUND_DOWN).create_decimal(&#39;1.2345678&#39;) Decimal(&#39;1.2345&#39;)"},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.BasicContext","title":"decimal.BasicContext","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Clamped","title":"decimal.Clamped","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context","title":"decimal.Context","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.abs","title":"decimal.Context.abs","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.add","title":"decimal.Context.add","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.canonical","title":"decimal.Context.canonical","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.clear_flags","title":"decimal.Context.clear_flags","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.compare","title":"decimal.Context.compare","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.compare_signal","title":"decimal.Context.compare_signal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.compare_total","title":"decimal.Context.compare_total","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.compare_total_mag","title":"decimal.Context.compare_total_mag","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.copy","title":"decimal.Context.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.copy_abs","title":"decimal.Context.copy_abs","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.copy_decimal","title":"decimal.Context.copy_decimal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.copy_negate","title":"decimal.Context.copy_negate","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.copy_sign","title":"decimal.Context.copy_sign","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.create_decimal","title":"decimal.Context.create_decimal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.create_decimal_from_float","title":"decimal.Context.create_decimal_from_float","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.divide","title":"decimal.Context.divide","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.divide_int","title":"decimal.Context.divide_int","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.divmod","title":"decimal.Context.divmod","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.Etiny","title":"decimal.Context.Etiny","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.Etop","title":"decimal.Context.Etop","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.exp","title":"decimal.Context.exp","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.fma","title":"decimal.Context.fma","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_canonical","title":"decimal.Context.is_canonical","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_finite","title":"decimal.Context.is_finite","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_infinite","title":"decimal.Context.is_infinite","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_nan","title":"decimal.Context.is_nan","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_normal","title":"decimal.Context.is_normal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_qnan","title":"decimal.Context.is_qnan","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_signed","title":"decimal.Context.is_signed","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_snan","title":"decimal.Context.is_snan","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_subnormal","title":"decimal.Context.is_subnormal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.is_zero","title":"decimal.Context.is_zero","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.ln","title":"decimal.Context.ln","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.log10","title":"decimal.Context.log10","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.logb","title":"decimal.Context.logb","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.logical_and","title":"decimal.Context.logical_and","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.logical_invert","title":"decimal.Context.logical_invert","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.logical_or","title":"decimal.Context.logical_or","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.logical_xor","title":"decimal.Context.logical_xor","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.max","title":"decimal.Context.max","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.max_mag","title":"decimal.Context.max_mag","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.min","title":"decimal.Context.min","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.min_mag","title":"decimal.Context.min_mag","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.minus","title":"decimal.Context.minus","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.multiply","title":"decimal.Context.multiply","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.next_minus","title":"decimal.Context.next_minus","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.next_plus","title":"decimal.Context.next_plus","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.next_toward","title":"decimal.Context.next_toward","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.normalize","title":"decimal.Context.normalize","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.number_class","title":"decimal.Context.number_class","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.plus","title":"decimal.Context.plus","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.power","title":"decimal.Context.power","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.quantize","title":"decimal.Context.quantize","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.radix","title":"decimal.Context.radix","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.remainder","title":"decimal.Context.remainder","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.remainder_near","title":"decimal.Context.remainder_near","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.rotate","title":"decimal.Context.rotate","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.same_quantum","title":"decimal.Context.same_quantum","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.scaleb","title":"decimal.Context.scaleb","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.shift","title":"decimal.Context.shift","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.sqrt","title":"decimal.Context.sqrt","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.subtract","title":"decimal.Context.subtract","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.to_eng_string","title":"decimal.Context.to_eng_string","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.to_integral_exact","title":"decimal.Context.to_integral_exact","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Context.to_sci_string","title":"decimal.Context.to_sci_string","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal","title":"decimal.Decimal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.adjusted","title":"decimal.Decimal.adjusted","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.as_tuple","title":"decimal.Decimal.as_tuple","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.canonical","title":"decimal.Decimal.canonical","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.compare","title":"decimal.Decimal.compare","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.compare_signal","title":"decimal.Decimal.compare_signal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.compare_total","title":"decimal.Decimal.compare_total","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.compare_total_mag","title":"decimal.Decimal.compare_total_mag","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.conjugate","title":"decimal.Decimal.conjugate","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.copy_abs","title":"decimal.Decimal.copy_abs","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.copy_negate","title":"decimal.Decimal.copy_negate","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.copy_sign","title":"decimal.Decimal.copy_sign","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.exp","title":"decimal.Decimal.exp","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.fma","title":"decimal.Decimal.fma","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.from_float","title":"decimal.Decimal.from_float","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_canonical","title":"decimal.Decimal.is_canonical","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_finite","title":"decimal.Decimal.is_finite","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_infinite","title":"decimal.Decimal.is_infinite","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_nan","title":"decimal.Decimal.is_nan","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_normal","title":"decimal.Decimal.is_normal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_qnan","title":"decimal.Decimal.is_qnan","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_signed","title":"decimal.Decimal.is_signed","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_snan","title":"decimal.Decimal.is_snan","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_subnormal","title":"decimal.Decimal.is_subnormal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.is_zero","title":"decimal.Decimal.is_zero","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.ln","title":"decimal.Decimal.ln","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.log10","title":"decimal.Decimal.log10","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.logb","title":"decimal.Decimal.logb","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.logical_and","title":"decimal.Decimal.logical_and","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.logical_invert","title":"decimal.Decimal.logical_invert","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.logical_or","title":"decimal.Decimal.logical_or","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.logical_xor","title":"decimal.Decimal.logical_xor","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.max","title":"decimal.Decimal.max","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.max_mag","title":"decimal.Decimal.max_mag","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.min","title":"decimal.Decimal.min","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.min_mag","title":"decimal.Decimal.min_mag","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.next_minus","title":"decimal.Decimal.next_minus","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.next_plus","title":"decimal.Decimal.next_plus","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.next_toward","title":"decimal.Decimal.next_toward","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.normalize","title":"decimal.Decimal.normalize","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.number_class","title":"decimal.Decimal.number_class","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.quantize","title":"decimal.Decimal.quantize","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.radix","title":"decimal.Decimal.radix","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.remainder_near","title":"decimal.Decimal.remainder_near","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.rotate","title":"decimal.Decimal.rotate","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.same_quantum","title":"decimal.Decimal.same_quantum","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.scaleb","title":"decimal.Decimal.scaleb","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.shift","title":"decimal.Decimal.shift","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.sqrt","title":"decimal.Decimal.sqrt","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.to_eng_string","title":"decimal.Decimal.to_eng_string","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.to_integral","title":"decimal.Decimal.to_integral","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.to_integral_exact","title":"decimal.Decimal.to_integral_exact","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Decimal.to_integral_value","title":"decimal.Decimal.to_integral_value","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.DecimalException","title":"decimal.DecimalException","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.DefaultContext","title":"decimal.DefaultContext","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.DivisionByZero","title":"decimal.DivisionByZero","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.ExtendedContext","title":"decimal.ExtendedContext","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.getcontext","title":"decimal.getcontext","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Inexact","title":"decimal.Inexact","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.InvalidOperation","title":"decimal.InvalidOperation","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.localcontext","title":"decimal.localcontext","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Overflow","title":"decimal.Overflow","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Rounded","title":"decimal.Rounded","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.setcontext","title":"decimal.setcontext","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Subnormal","title":"decimal.Subnormal","description":""},{"url":"http:\/\/docs.python.org\/library\/decimal.html#decimal.Underflow","title":"decimal.Underflow","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html","title":"fileinput","description":"10.2. fileinput &#8212; Iterate over lines from multiple input streams\u00b6 Source code: Lib\/fileinput.py  This module implements a helper class and functions to quickly write a loop over standard input or a list of files. If you just want to read or write one file see open(). The typical use is: import fileinput for line in fileinput.input():     process(line)   This iterates over the lines of all files listed in sys.argv[1:], defaulting to sys.stdin if the list is empty.  If a filename is '-', it is also replaced by sys.stdin.  To specify an alternative list of filenames, pass it as the first argument to input().  A single file name is also allowed. All files are opened in text mode by default, but you can override this by specifying the mode parameter in the call to input() or FileInput().  If an I\/O error occurs during opening or reading a file, IOError is raised. If sys.stdin is used more than once, the second and further use will return no lines, except perhaps for interactive use, or if it has been explicitly reset (e.g. using sys.stdin.seek(0)). Empty files are opened and immediately closed; the only time their presence in the list of filenames is noticeable at all is when the last file opened is empty. Lines are returned with any newlines intact, which means that the last line in a file may not have one. You can control how files are opened by providing an opening hook via the openhook parameter to fileinput.input() or FileInput(). The hook must be a function that takes two arguments, filename and mode, and returns an accordingly opened file-like object. Two useful hooks are already provided by this module. The following function is the primary interface of this module:   fileinput.input([files[, inplace[, backup[, mode[, openhook]]]]])\u00b6 Create an instance of the FileInput class.  The instance will be used as global state for the functions of this module, and is also returned to use during iteration.  The parameters to this function will be passed along to the constructor of the FileInput class.  Changed in version 2.5: Added the mode and openhook parameters.   The following functions use the global state created by fileinput.input(); if there is no active state, RuntimeError is raised.   fileinput.filename()\u00b6 Return the name of the file currently being read.  Before the first line has been read, returns None.    fileinput.fileno()\u00b6 Return the integer &#8220;file descriptor&#8221; for the current file. When no file is opened (before the first line and between files), returns -1.  New in version 2.5.     fileinput.lineno()\u00b6 Return the cumulative line number of the line that has just been read.  Before the first line has been read, returns 0.  After the last line of the last file has been read, returns the line number of that line.    fileinput.filelineno()\u00b6 Return the line number in the current file.  Before the first line has been read, returns 0.  After the last line of the last file has been read, returns the line number of that line within the file.    fileinput.isfirstline()\u00b6 Returns true if the line just read is the first line of its file, otherwise returns false.    fileinput.isstdin()\u00b6 Returns true if the last line was read from sys.stdin, otherwise returns false.    fileinput.nextfile()\u00b6 Close the current file so that the next iteration will read the first line from the next file (if any); lines not read from the file will not count towards the cumulative line count.  The filename is not changed until after the first line of the next file has been read.  Before the first line has been read, this function has no effect; it cannot be used to skip the first file.  After the last line of the last file has been read, this function has no effect.    fileinput.close()\u00b6 Close the sequence.  The class which implements the sequence behavior provided by the module is available for subclassing as well:   class fileinput.FileInput([files[, inplace[, backup[, mode[, openhook]]]]])\u00b6 Class FileInput is the implementation; its methods filename(), fileno(), lineno(), filelineno(), isfirstline(), isstdin(), nextfile() and close() correspond to the functions of the same name in the module. In addition it has a readline() method which returns the next input line, and a __getitem__() method which implements the sequence behavior.  The sequence must be accessed in strictly sequential order; random access and readline() cannot be mixed. With mode you can specify which file mode will be passed to open(). It must be one of 'r', 'rU', 'U' and 'rb'. The openhook, when given, must be a function that takes two arguments, filename and mode, and returns an accordingly opened file-like object. You cannot use inplace and openhook together.  Changed in version 2.5: Added the mode and openhook parameters.   Optional in-place filtering: if the keyword argument inplace=1 is passed to fileinput.input() or to the FileInput constructor, the file is moved to a backup file and standard output is directed to the input file (if a file of the same name as the backup file already exists, it will be replaced silently).  This makes it possible to write a filter that rewrites its input file in place.  If the backup parameter is given (typically as backup='.<some extension>'), it specifies the extension for the backup file, and the backup file remains around; by default, the extension is '.bak' and it is deleted when the output file is closed.  In-place filtering is disabled when standard input is read.  Note The current implementation does not work for MS-DOS 8+3 filesystems.  The two following opening hooks are provided by this module:   fileinput.hook_compressed(filename, mode)\u00b6 Transparently opens files compressed with gzip and bzip2 (recognized by the extensions '.gz' and '.bz2') using the gzip and bz2 modules.  If the filename extension is not '.gz' or '.bz2', the file is opened normally (ie, using open() without any decompression). Usage example:  fi = fileinput.FileInput(openhook=fileinput.hook_compressed)  New in version 2.5.     fileinput.hook_encoded(encoding)\u00b6 Returns a hook which opens each file with codecs.open(), using the given encoding to read the file. Usage example: fi = fileinput.FileInput(openhook=fileinput.hook_encoded(\"iso-8859-1\"))  Note With this hook, FileInput might return Unicode strings depending on the specified encoding.   New in version 2.5."},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.close","title":"fileinput.close","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.FileInput","title":"fileinput.FileInput","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.filelineno","title":"fileinput.filelineno","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.filename","title":"fileinput.filename","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.fileno","title":"fileinput.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.hook_compressed","title":"fileinput.hook_compressed","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.hook_encoded","title":"fileinput.hook_encoded","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.input","title":"fileinput.input","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.isfirstline","title":"fileinput.isfirstline","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.isstdin","title":"fileinput.isstdin","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.lineno","title":"fileinput.lineno","description":""},{"url":"http:\/\/docs.python.org\/library\/fileinput.html#fileinput.nextfile","title":"fileinput.nextfile","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html","title":"random","description":"9.6. random &#8212; Generate pseudo-random numbers\u00b6 Source code: Lib\/random.py  This module implements pseudo-random number generators for various distributions. For integers, uniform selection from a range. For sequences, uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement. On the real line, there are functions to compute uniform, normal (Gaussian), lognormal, negative exponential, gamma, and beta distributions. For generating distributions of angles, the von Mises distribution is available. Almost all module functions depend on the basic function random(), which generates a random float uniformly in the semi-open range [0.0, 1.0).  Python uses the Mersenne Twister as the core generator.  It produces 53-bit precision floats and has a period of 2**19937-1.  The underlying implementation in C is both fast and threadsafe.  The Mersenne Twister is one of the most extensively tested random number generators in existence.  However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes. The functions supplied by this module are actually bound methods of a hidden instance of the random.Random class.  You can instantiate your own instances of Random to get generators that don&#8217;t share state.  This is especially useful for multi-threaded programs, creating a different instance of Random for each thread, and using the jumpahead() method to make it likely that the generated sequences seen by each thread don&#8217;t overlap. Class Random can also be subclassed if you want to use a different basic generator of your own devising: in that case, override the random(), seed(), getstate(), setstate() and jumpahead() methods. Optionally, a new generator can supply a getrandbits() method &#8212; this allows randrange() to produce selections over an arbitrarily large range.  New in version 2.4: the getrandbits() method. As an example of subclassing, the random module provides the WichmannHill class that implements an alternative generator in pure Python.  The class provides a backward compatible way to reproduce results from earlier versions of Python, which used the Wichmann-Hill algorithm as the core generator.  Note that this Wichmann-Hill generator can no longer be recommended: its period is too short by contemporary standards, and the sequence generated is known to fail some stringent randomness tests.  See the references below for a recent variant that repairs these flaws.  Changed in version 2.3: MersenneTwister replaced Wichmann-Hill as the default generator. The random module also provides the SystemRandom class which uses the system function os.urandom() to generate random numbers from sources provided by the operating system. Bookkeeping functions:   random.seed([x])\u00b6 Initialize the basic random number generator. Optional argument x can be any hashable object. If x is omitted or None, current system time is used; current system time is also used to initialize the generator when the module is first imported.  If randomness sources are provided by the operating system, they are used instead of the system time (see the os.urandom() function for details on availability).  Changed in version 2.4: formerly, operating system resources were not used.     random.getstate()\u00b6 Return an object capturing the current internal state of the generator.  This object can be passed to setstate() to restore the state.  New in version 2.1.  Changed in version 2.6: State values produced in Python 2.6 cannot be loaded into earlier versions.     random.setstate(state)\u00b6 state should have been obtained from a previous call to getstate(), and setstate() restores the internal state of the generator to what it was at the time setstate() was called.  New in version 2.1.     random.jumpahead(n)\u00b6 Change the internal state to one different from and likely far away from the current state.  n is a non-negative integer which is used to scramble the current state vector.  This is most useful in multi-threaded programs, in conjunction with multiple instances of the Random class: setstate() or seed() can be used to force all instances into the same internal state, and then jumpahead() can be used to force the instances&#8217; states far apart.  New in version 2.1.  Changed in version 2.3: Instead of jumping to a specific state, n steps ahead, jumpahead(n) jumps to another state likely to be separated by many steps.     random.getrandbits(k)\u00b6 Returns a python long int with k random bits. This method is supplied with the MersenneTwister generator and some other generators may also provide it as an optional part of the API. When available, getrandbits() enables randrange() to handle arbitrarily large ranges.  New in version 2.4.   Functions for integers:   random.randrange([start], stop[, step])\u00b6 Return a randomly selected element from range(start, stop, step).  This is equivalent to choice(range(start, stop, step)), but doesn&#8217;t actually build a range object.  New in version 1.5.2.     random.randint(a, b)\u00b6 Return a random integer N such that a <= N <= b.  Functions for sequences:   random.choice(seq)\u00b6 Return a random element from the non-empty sequence seq. If seq is empty, raises IndexError.    random.shuffle(x[, random])\u00b6 Shuffle the sequence x in place. The optional argument random is a 0-argument function returning a random float in [0.0, 1.0); by default, this is the function random(). Note that for even rather small len(x), the total number of permutations of x is larger than the period of most random number generators; this implies that most permutations of a long sequence can never be generated.     random.sample(population, k)\u00b6 Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement.  New in version 2.3. Returns a new list containing elements from the population while leaving the original population unchanged.  The resulting list is in selection order so that all sub-slices will also be valid random samples.  This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices). Members of the population need not be hashable or unique.  If the population contains repeats, then each occurrence is a possible selection in the sample. To choose a sample from a range of integers, use an xrange() object as an argument.  This is especially fast and space efficient for sampling from a large population:  sample(xrange(10000000), 60).   The following functions generate specific real-valued distributions. Function parameters are named after the corresponding variables in the distribution&#8217;s equation, as used in common mathematical practice; most of these equations can be found in any statistics text.   random.random()\u00b6 Return the next random floating point number in the range [0.0, 1.0).    random.uniform(a, b)\u00b6 Return a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a. The end-point value b may or may not be included in the range depending on floating-point rounding in the equation a + (b-a) * random().     random.triangular(low, high, mode)\u00b6 Return a random floating point number N such that low <= N <= high and with the specified mode between those bounds.  The low and high bounds default to zero and one.  The mode argument defaults to the midpoint between the bounds, giving a symmetric distribution.  New in version 2.6.     random.betavariate(alpha, beta)\u00b6 Beta distribution.  Conditions on the parameters are alpha > 0 and beta > 0. Returned values range between 0 and 1.    random.expovariate(lambd)\u00b6 Exponential distribution.  lambd is 1.0 divided by the desired mean.  It should be nonzero.  (The parameter would be called &#8220;lambda&#8221;, but that is a reserved word in Python.)  Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative.    random.gammavariate(alpha, beta)\u00b6 Gamma distribution.  (Not the gamma function!)  Conditions on the parameters are alpha > 0 and beta > 0. The probability distribution function is:           x ** (alpha - 1) * math.exp(-x \/ beta) pdf(x) =  --------------------------------------             math.gamma(alpha) * beta ** alpha      random.gauss(mu, sigma)\u00b6 Gaussian distribution.  mu is the mean, and sigma is the standard deviation.  This is slightly faster than the normalvariate() function defined below.    random.lognormvariate(mu, sigma)\u00b6 Log normal distribution.  If you take the natural logarithm of this distribution, you&#8217;ll get a normal distribution with mean mu and standard deviation sigma.  mu can have any value, and sigma must be greater than zero.    random.normalvariate(mu, sigma)\u00b6 Normal distribution.  mu is the mean, and sigma is the standard deviation.    random.vonmisesvariate(mu, kappa)\u00b6 mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero.  If kappa is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2*pi.    random.paretovariate(alpha)\u00b6 Pareto distribution.  alpha is the shape parameter.    random.weibullvariate(alpha, beta)\u00b6 Weibull distribution.  alpha is the scale parameter and beta is the shape parameter.  Alternative Generators:   class random.WichmannHill([seed])\u00b6 Class that implements the Wichmann-Hill algorithm as the core generator. Has all of the same methods as Random plus the whseed() method described below.  Because this class is implemented in pure Python, it is not threadsafe and may require locks between calls.  The period of the generator is 6,953,607,871,644 which is small enough to require care that two independent random sequences do not overlap.    random.whseed([x])\u00b6 This is obsolete, supplied for bit-level compatibility with versions of Python prior to 2.1. See seed() for details.  whseed() does not guarantee that distinct integer arguments yield distinct internal states, and can yield no more than about 2**24 distinct internal states in all.    class random.SystemRandom([seed])\u00b6 Class that uses the os.urandom() function for generating random numbers from sources provided by the operating system. Not available on all systems. Does not rely on software state and sequences are not reproducible. Accordingly, the seed() and jumpahead() methods have no effect and are ignored. The getstate() and setstate() methods raise NotImplementedError if called.  New in version 2.4.   Examples of basic usage: >>> random.random()        # Random float x, 0.0 <= x < 1.0 0.37444887175646646 >>> random.uniform(1, 10)  # Random float x, 1.0 <= x < 10.0 1.1800146073117523 >>> random.randint(1, 10)  # Integer from 1 to 10, endpoints included 7 >>> random.randrange(0, 101, 2)  # Even integer from 0 to 100 26 >>> random.choice(&#39;abcdefghij&#39;)  # Choose a random element &#39;c&#39;  >>> items = [1, 2, 3, 4, 5, 6, 7] >>> random.shuffle(items) >>> items [7, 3, 2, 5, 6, 4, 1]  >>> random.sample([1, 2, 3, 4, 5],  3)  # Choose 3 elements [4, 1, 5]    See also M. Matsumoto and T. Nishimura, &#8220;Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator&#8221;, ACM Transactions on Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 1998. Wichmann, B. A. & Hill, I. D., &#8220;Algorithm AS 183: An efficient and portable pseudo-random number generator&#8221;, Applied Statistics 31 (1982) 188-190. Complementary-Multiply-with-Carry recipe for a compatible alternative random number generator with a long period and comparatively simple update operations."},{"url":"http:\/\/docs.python.org\/library\/random.html#random.betavariate","title":"random.betavariate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.choice","title":"random.choice","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.expovariate","title":"random.expovariate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.gammavariate","title":"random.gammavariate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.gauss","title":"random.gauss","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.getrandbits","title":"random.getrandbits","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.getstate","title":"random.getstate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.jumpahead","title":"random.jumpahead","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.lognormvariate","title":"random.lognormvariate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.normalvariate","title":"random.normalvariate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.paretovariate","title":"random.paretovariate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.randint","title":"random.randint","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.random","title":"random.random","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.randrange","title":"random.randrange","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.sample","title":"random.sample","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.seed","title":"random.seed","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.setstate","title":"random.setstate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.shuffle","title":"random.shuffle","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.SystemRandom","title":"random.SystemRandom","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.triangular","title":"random.triangular","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.uniform","title":"random.uniform","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.vonmisesvariate","title":"random.vonmisesvariate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.weibullvariate","title":"random.weibullvariate","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.whseed","title":"random.whseed","description":""},{"url":"http:\/\/docs.python.org\/library\/random.html#random.WichmannHill","title":"random.WichmannHill","description":""},{"url":"http:\/\/docs.python.org\/library\/statvfs.html","title":"statvfs","description":"10.4. statvfs &#8212; Constants used with os.statvfs()\u00b6  Deprecated since version 2.6: The statvfs module has been deprecated for removal in Python 3.0. The statvfs module defines constants so interpreting the result if os.statvfs(), which returns a tuple, can be made without remembering &#8220;magic numbers.&#8221;  Each of the constants defined in this module is the index of the entry in the tuple returned by os.statvfs() that contains the specified information.   statvfs.F_BSIZE\u00b6 Preferred file system block size.    statvfs.F_FRSIZE\u00b6 Fundamental file system block size.    statvfs.F_BLOCKS\u00b6 Total number of blocks in the filesystem.    statvfs.F_BFREE\u00b6 Total number of free blocks.    statvfs.F_BAVAIL\u00b6 Free blocks available to non-super user.    statvfs.F_FILES\u00b6 Total number of file nodes.    statvfs.F_FFREE\u00b6 Total number of free file nodes.    statvfs.F_FAVAIL\u00b6 Free nodes available to non-super user.    statvfs.F_FLAG\u00b6 Flags. System dependent: see statvfs() man page.    statvfs.F_NAMEMAX\u00b6 Maximum file name length."},{"url":"http:\/\/docs.python.org\/library\/operator.html","title":"operator","description":"9.9. operator &#8212; Standard operators as functions\u00b6 The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python.  For example, operator.add(x, y) is equivalent to the expression x+y.  The function names are those used for special class methods; variants without leading and trailing __ are also provided for convenience. The functions fall into categories that perform object comparisons, logical operations, mathematical operations, sequence operations, and abstract type tests. The object comparison functions are useful for all objects, and are named after the rich comparison operators they support:   operator.lt(a, b)\u00b6  operator.le(a, b)\u00b6  operator.eq(a, b)\u00b6  operator.ne(a, b)\u00b6  operator.ge(a, b)\u00b6  operator.gt(a, b)\u00b6  operator.__lt__(a, b)\u00b6  operator.__le__(a, b)\u00b6  operator.__eq__(a, b)\u00b6  operator.__ne__(a, b)\u00b6  operator.__ge__(a, b)\u00b6  operator.__gt__(a, b)\u00b6 Perform &#8220;rich comparisons&#8221; between a and b. Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.  Note that unlike the built-in cmp(), these functions can return any value, which may or may not be interpretable as a Boolean value. See Comparisons for more information about rich comparisons.  New in version 2.2.   The logical operations are also generally applicable to all objects, and support truth tests, identity tests, and boolean operations:   operator.not_(obj)\u00b6  operator.__not__(obj)\u00b6 Return the outcome of not obj.  (Note that there is no __not__() method for object instances; only the interpreter core defines this operation.  The result is affected by the __nonzero__() and __len__() methods.)    operator.truth(obj)\u00b6 Return True if obj is true, and False otherwise.  This is equivalent to using the bool constructor.    operator.is_(a, b)\u00b6 Return a is b.  Tests object identity.  New in version 2.3.     operator.is_not(a, b)\u00b6 Return a is not b.  Tests object identity.  New in version 2.3.   The mathematical and bitwise operations are the most numerous:   operator.abs(obj)\u00b6  operator.__abs__(obj)\u00b6 Return the absolute value of obj.    operator.add(a, b)\u00b6  operator.__add__(a, b)\u00b6 Return a + b, for a and b numbers.    operator.and_(a, b)\u00b6  operator.__and__(a, b)\u00b6 Return the bitwise and of a and b.    operator.div(a, b)\u00b6  operator.__div__(a, b)\u00b6 Return a \/ b when __future__.division is not in effect.  This is also known as &#8220;classic&#8221; division.    operator.floordiv(a, b)\u00b6  operator.__floordiv__(a, b)\u00b6 Return a \/\/ b.  New in version 2.2.     operator.index(a)\u00b6  operator.__index__(a)\u00b6 Return a converted to an integer.  Equivalent to a.__index__().  New in version 2.5.     operator.inv(obj)\u00b6  operator.invert(obj)\u00b6  operator.__inv__(obj)\u00b6  operator.__invert__(obj)\u00b6 Return the bitwise inverse of the number obj.  This is equivalent to ~obj.  New in version 2.0: The names invert() and __invert__().     operator.lshift(a, b)\u00b6  operator.__lshift__(a, b)\u00b6 Return a shifted left by b.    operator.mod(a, b)\u00b6  operator.__mod__(a, b)\u00b6 Return a  b.    operator.mul(a, b)\u00b6  operator.__mul__(a, b)\u00b6 Return a * b, for a and b numbers.    operator.neg(obj)\u00b6  operator.__neg__(obj)\u00b6 Return obj negated (-obj).    operator.or_(a, b)\u00b6  operator.__or__(a, b)\u00b6 Return the bitwise or of a and b.    operator.pos(obj)\u00b6  operator.__pos__(obj)\u00b6 Return obj positive (+obj).    operator.pow(a, b)\u00b6  operator.__pow__(a, b)\u00b6 Return a ** b, for a and b numbers.  New in version 2.3.     operator.rshift(a, b)\u00b6  operator.__rshift__(a, b)\u00b6 Return a shifted right by b.    operator.sub(a, b)\u00b6  operator.__sub__(a, b)\u00b6 Return a - b.    operator.truediv(a, b)\u00b6  operator.__truediv__(a, b)\u00b6 Return a \/ b when __future__.division is in effect.  This is also known as &#8220;true&#8221; division.  New in version 2.2.     operator.xor(a, b)\u00b6  operator.__xor__(a, b)\u00b6 Return the bitwise exclusive or of a and b.  Operations which work with sequences (some of them with mappings too) include:   operator.concat(a, b)\u00b6  operator.__concat__(a, b)\u00b6 Return a + b for a and b sequences.    operator.contains(a, b)\u00b6  operator.__contains__(a, b)\u00b6 Return the outcome of the test b in a. Note the reversed operands.  New in version 2.0: The name __contains__().     operator.countOf(a, b)\u00b6 Return the number of occurrences of b in a.    operator.delitem(a, b)\u00b6  operator.__delitem__(a, b)\u00b6 Remove the value of a at index b.    operator.delslice(a, b, c)\u00b6  operator.__delslice__(a, b, c)\u00b6 Delete the slice of a from index b to index c-1.  Deprecated since version 2.6: This function is removed in Python 3.x.  Use delitem() with a slice index.     operator.getitem(a, b)\u00b6  operator.__getitem__(a, b)\u00b6 Return the value of a at index b.    operator.getslice(a, b, c)\u00b6  operator.__getslice__(a, b, c)\u00b6 Return the slice of a from index b to index c-1.  Deprecated since version 2.6: This function is removed in Python 3.x.  Use getitem() with a slice index.     operator.indexOf(a, b)\u00b6 Return the index of the first of occurrence of b in a.    operator.repeat(a, b)\u00b6  operator.__repeat__(a, b)\u00b6  Deprecated since version 2.7: Use __mul__() instead. Return a * b where a is a sequence and b is an integer.     operator.sequenceIncludes(...)\u00b6  Deprecated since version 2.0: Use contains() instead. Alias for contains().     operator.setitem(a, b, c)\u00b6  operator.__setitem__(a, b, c)\u00b6 Set the value of a at index b to c.    operator.setslice(a, b, c, v)\u00b6  operator.__setslice__(a, b, c, v)\u00b6 Set the slice of a from index b to index c-1 to the sequence v.  Deprecated since version 2.6: This function is removed in Python 3.x.  Use setitem() with a slice index.   Example use of operator functions: >>> # Elementwise multiplication >>> map(mul, [0, 1, 2, 3], [10, 20, 30, 40]) [0, 20, 60, 120]  >>> # Dot product >>> sum(map(mul, [0, 1, 2, 3], [10, 20, 30, 40])) 200   Many operations have an &#8220;in-place&#8221; version.  The following functions provide a more primitive access to in-place operators than the usual syntax does; for example, the statement x += y is equivalent to x = operator.iadd(x, y).  Another way to put it is to say that z = operator.iadd(x, y) is equivalent to the compound statement z = x; z += y.   operator.iadd(a, b)\u00b6  operator.__iadd__(a, b)\u00b6 a = iadd(a, b) is equivalent to a += b.  New in version 2.5.     operator.iand(a, b)\u00b6  operator.__iand__(a, b)\u00b6 a = iand(a, b) is equivalent to a &= b.  New in version 2.5.     operator.iconcat(a, b)\u00b6  operator.__iconcat__(a, b)\u00b6 a = iconcat(a, b) is equivalent to a += b for a and b sequences.  New in version 2.5.     operator.idiv(a, b)\u00b6  operator.__idiv__(a, b)\u00b6 a = idiv(a, b) is equivalent to a \/= b when __future__.division is not in effect.  New in version 2.5.     operator.ifloordiv(a, b)\u00b6  operator.__ifloordiv__(a, b)\u00b6 a = ifloordiv(a, b) is equivalent to a \/\/= b.  New in version 2.5.     operator.ilshift(a, b)\u00b6  operator.__ilshift__(a, b)\u00b6 a = ilshift(a, b) is equivalent to a <<= b.  New in version 2.5.     operator.imod(a, b)\u00b6  operator.__imod__(a, b)\u00b6 a = imod(a, b) is equivalent to a %= b.  New in version 2.5.     operator.imul(a, b)\u00b6  operator.__imul__(a, b)\u00b6 a = imul(a, b) is equivalent to a *= b.  New in version 2.5.     operator.ior(a, b)\u00b6  operator.__ior__(a, b)\u00b6 a = ior(a, b) is equivalent to a |= b.  New in version 2.5.     operator.ipow(a, b)\u00b6  operator.__ipow__(a, b)\u00b6 a = ipow(a, b) is equivalent to a **= b.  New in version 2.5.     operator.irepeat(a, b)\u00b6  operator.__irepeat__(a, b)\u00b6  Deprecated since version 2.7: Use __imul__() instead. a = irepeat(a, b) is equivalent to a *= b where a is a sequence and b is an integer.  New in version 2.5.     operator.irshift(a, b)\u00b6  operator.__irshift__(a, b)\u00b6 a = irshift(a, b) is equivalent to a >>= b.  New in version 2.5.     operator.isub(a, b)\u00b6  operator.__isub__(a, b)\u00b6 a = isub(a, b) is equivalent to a -= b.  New in version 2.5.     operator.itruediv(a, b)\u00b6  operator.__itruediv__(a, b)\u00b6 a = itruediv(a, b) is equivalent to a \/= b when __future__.division is in effect.  New in version 2.5.     operator.ixor(a, b)\u00b6  operator.__ixor__(a, b)\u00b6 a = ixor(a, b) is equivalent to a ^= b.  New in version 2.5.   The operator module also defines a few predicates to test the type of objects; however, these are not all reliable.  It is preferable to test abstract base classes instead (see collections and numbers for details).   operator.isCallable(obj)\u00b6  Deprecated since version 2.0: Use isinstance(x, collections.Callable) instead. Returns true if the object obj can be called like a function, otherwise it returns false.  True is returned for functions, bound and unbound methods, class objects, and instance objects which support the __call__() method.     operator.isMappingType(obj)\u00b6  Deprecated since version 2.7: Use isinstance(x, collections.Mapping) instead. Returns true if the object obj supports the mapping interface. This is true for dictionaries and all instance objects defining __getitem__().     operator.isNumberType(obj)\u00b6  Deprecated since version 2.7: Use isinstance(x, numbers.Number) instead. Returns true if the object obj represents a number.  This is true for all numeric types implemented in C.     operator.isSequenceType(obj)\u00b6  Deprecated since version 2.7: Use isinstance(x, collections.Sequence) instead. Returns true if the object obj supports the sequence protocol. This returns true for all objects which define sequence methods in C, and for all instance objects defining __getitem__().   The operator module also defines tools for generalized attribute and item lookups.  These are useful for making fast field extractors as arguments for map(), sorted(), itertools.groupby(), or other functions that expect a function argument.   operator.attrgetter(attr[, args...])\u00b6 Return a callable object that fetches attr from its operand. If more than one attribute is requested, returns a tuple of attributes. After, f = attrgetter('name'), the call f(b) returns b.name.  After, f = attrgetter('name', 'date'), the call f(b) returns (b.name, b.date).  Equivalent to: def attrgetter(*items):     if len(items) == 1:         attr = items[0]         def g(obj):             return resolve_attr(obj, attr)     else:         def g(obj):             return tuple(resolve_att(obj, attr) for attr in items)     return g  def resolve_attr(obj, attr):     for name in attr.split(\".\"):         obj = getattr(obj, name)     return obj   The attribute names can also contain dots; after f = attrgetter('date.month'), the call f(b) returns b.date.month.  New in version 2.4.  Changed in version 2.5: Added support for multiple attributes.  Changed in version 2.6: Added support for dotted attributes.     operator.itemgetter(item[, args...])\u00b6 Return a callable object that fetches item from its operand using the operand&#8217;s __getitem__() method.  If multiple items are specified, returns a tuple of lookup values.  Equivalent to: def itemgetter(*items):     if len(items) == 1:         item = items[0]         def g(obj):             return obj[item]     else:         def g(obj):             return tuple(obj[item] for item in items)     return g   The items can be any type accepted by the operand&#8217;s __getitem__() method.  Dictionaries accept any hashable value.  Lists, tuples, and strings accept an index or a slice: >>> itemgetter(1)(&#39;ABCDEFG&#39;) &#39;B&#39; >>> itemgetter(1,3,5)(&#39;ABCDEFG&#39;) (&#39;B&#39;, &#39;D&#39;, &#39;F&#39;) >>> itemgetter(slice(2,None))(&#39;ABCDEFG&#39;) &#39;CDEFG&#39;    New in version 2.4.  Changed in version 2.5: Added support for multiple item extraction. Example of using itemgetter() to retrieve specific fields from a tuple record: >>> inventory = [(&#39;apple&#39;, 3), (&#39;banana&#39;, 2), (&#39;pear&#39;, 5), (&#39;orange&#39;, 1)] >>> getcount = itemgetter(1) >>> map(getcount, inventory) [3, 2, 5, 1] >>> sorted(inventory, key=getcount) [(&#39;orange&#39;, 1), (&#39;banana&#39;, 2), (&#39;apple&#39;, 3), (&#39;pear&#39;, 5)]       operator.methodcaller(name[, args...])\u00b6 Return a callable object that calls the method name on its operand.  If additional arguments and\/or keyword arguments are given, they will be given to the method as well.  After f = methodcaller('name'), the call f(b) returns b.name().  After f = methodcaller('name', 'foo', bar=1), the call f(b) returns b.name('foo', bar=1).  Equivalent to: def methodcaller(name, *args, **kwargs):     def caller(obj):         return getattr(obj, name)(*args, **kwargs)     return caller    New in version 2.6.    9.9.1. Mapping Operators to Functions\u00b6 This table shows how abstract operations correspond to operator symbols in the Python syntax and the functions in the operator module.        Operation Syntax Function    Addition a + b add(a, b)  Concatenation seq1 + seq2 concat(seq1, seq2)  Containment Test obj in seq contains(seq, obj)  Division a \/ b div(a, b) (without __future__.division)  Division a \/ b truediv(a, b) (with __future__.division)  Division a \/\/ b floordiv(a, b)  Bitwise And a & b and_(a, b)  Bitwise Exclusive Or a ^ b xor(a, b)  Bitwise Inversion ~ a invert(a)  Bitwise Or a | b or_(a, b)  Exponentiation a ** b pow(a, b)  Identity a is b is_(a, b)  Identity a is not b is_not(a, b)  Indexed Assignment obj[k] = v setitem(obj, k, v)  Indexed Deletion del obj[k] delitem(obj, k)  Indexing obj[k] getitem(obj, k)  Left Shift a << b lshift(a, b)  Modulo a  b mod(a, b)  Multiplication a * b mul(a, b)  Negation (Arithmetic) - a neg(a)  Negation (Logical) not a not_(a)  Positive + a pos(a)  Right Shift a >> b rshift(a, b)  Sequence Repetition seq * i repeat(seq, i)  Slice Assignment seq[i:j] = values setitem(seq, slice(i, j), values)  Slice Deletion del seq[i:j] delitem(seq, slice(i, j))  Slicing seq[i:j] getitem(seq, slice(i, j))  String Formatting s  obj mod(s, obj)  Subtraction a - b sub(a, b)  Truth Test obj truth(obj)  Ordering a < b lt(a, b)  Ordering a <= b le(a, b)  Equality a == b eq(a, b)  Difference a != b ne(a, b)  Ordering a >= b ge(a, b)  Ordering a > b gt(a, b)"},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.abs","title":"operator.abs","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.add","title":"operator.add","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.and_","title":"operator.and_","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.attrgetter","title":"operator.attrgetter","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.concat","title":"operator.concat","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.contains","title":"operator.contains","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.countOf","title":"operator.countOf","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.delitem","title":"operator.delitem","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.delslice","title":"operator.delslice","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.div","title":"operator.div","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.floordiv","title":"operator.floordiv","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.getitem","title":"operator.getitem","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.getslice","title":"operator.getslice","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.iadd","title":"operator.iadd","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.iand","title":"operator.iand","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.iconcat","title":"operator.iconcat","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.idiv","title":"operator.idiv","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.ifloordiv","title":"operator.ifloordiv","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.ilshift","title":"operator.ilshift","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.imod","title":"operator.imod","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.imul","title":"operator.imul","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.index","title":"operator.index","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.indexOf","title":"operator.indexOf","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.inv","title":"operator.inv","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.ior","title":"operator.ior","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.ipow","title":"operator.ipow","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.irepeat","title":"operator.irepeat","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.irshift","title":"operator.irshift","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.is_","title":"operator.is_","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.is_not","title":"operator.is_not","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.isCallable","title":"operator.isCallable","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.isMappingType","title":"operator.isMappingType","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.isNumberType","title":"operator.isNumberType","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.isSequenceType","title":"operator.isSequenceType","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.isub","title":"operator.isub","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.itemgetter","title":"operator.itemgetter","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.itruediv","title":"operator.itruediv","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.ixor","title":"operator.ixor","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.lshift","title":"operator.lshift","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.lt","title":"operator.lt","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.methodcaller","title":"operator.methodcaller","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.mod","title":"operator.mod","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.mul","title":"operator.mul","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.neg","title":"operator.neg","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.not_","title":"operator.not_","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.or_","title":"operator.or_","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.pos","title":"operator.pos","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.pow","title":"operator.pow","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.repeat","title":"operator.repeat","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.rshift","title":"operator.rshift","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.sequenceIncludes","title":"operator.sequenceIncludes","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.setitem","title":"operator.setitem","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.setslice","title":"operator.setslice","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.sub","title":"operator.sub","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.truediv","title":"operator.truediv","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.truth","title":"operator.truth","description":""},{"url":"http:\/\/docs.python.org\/library\/operator.html#operator.xor","title":"operator.xor","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html","title":"os.path","description":"10.1. os.path &#8212; Common pathname manipulations\u00b6 This module implements some useful functions on pathnames. To read or write files see open(), and for accessing the filesystem see the os module.  Note On Windows, many of these functions do not properly support UNC pathnames. splitunc() and ismount() do handle them correctly.   Note Since different operating systems have different path name conventions, there are several versions of this module in the standard library.  The os.path module is always the path module suitable for the operating system Python is running on, and therefore usable for local paths.  However, you can also import and use the individual modules if you want to manipulate a path that is always in one of the different formats.  They all have the same interface:  posixpath for UNIX-style paths ntpath for Windows paths macpath for old-style MacOS paths os2emxpath for OS\/2 EMX paths     os.path.abspath(path)\u00b6 Return a normalized absolutized version of the pathname path. On most platforms, this is equivalent to normpath(join(os.getcwd(), path)).  New in version 1.5.2.     os.path.basename(path)\u00b6 Return the base name of pathname path.  This is the second half of the pair returned by split(path).  Note that the result of this function is different from the Unix basename program; where basename for '\/foo\/bar\/' returns 'bar', the basename() function returns an empty string ('').    os.path.commonprefix(list)\u00b6 Return the longest path prefix (taken character-by-character) that is a prefix of all paths in  list.  If list is empty, return the empty string (''). Note that this may return invalid paths because it works a character at a time.    os.path.dirname(path)\u00b6 Return the directory name of pathname path.  This is the first half of the pair returned by split(path).    os.path.exists(path)\u00b6 Return True if path refers to an existing path.  Returns False for broken symbolic links. On some platforms, this function may return False if permission is not granted to execute os.stat() on the requested file, even if the path physically exists.    os.path.lexists(path)\u00b6 Return True if path refers to an existing path. Returns True for broken symbolic links.   Equivalent to exists() on platforms lacking os.lstat().  New in version 2.4.     os.path.expanduser(path)\u00b6 On Unix and Windows, return the argument with an initial component of ~ or ~user replaced by that user&#8216;s home directory. On Unix, an initial ~ is replaced by the environment variable HOME if it is set; otherwise the current user&#8217;s home directory is looked up in the password directory through the built-in module pwd. An initial ~user is looked up directly in the password directory. On Windows, HOME and USERPROFILE will be used if set, otherwise a combination of HOMEPATH and HOMEDRIVE will be used.  An initial ~user is handled by stripping the last directory component from the created user path derived above. If the expansion fails or if the path does not begin with a tilde, the path is returned unchanged.     os.path.expandvars(path)\u00b6 Return the argument with environment variables expanded.  Substrings of the form $name or ${name} are replaced by the value of environment variable name.  Malformed variable names and references to non-existing variables are left unchanged. On Windows,  expansions are supported in addition to $name and ${name}.     os.path.getatime(path)\u00b6 Return the time of last access of path.  The return value is a number giving the number of seconds since the epoch (see the  time module).  Raise os.error if the file does not exist or is inaccessible.  New in version 1.5.2.  Changed in version 2.3: If os.stat_float_times() returns True, the result is a floating point number.     os.path.getmtime(path)\u00b6 Return the time of last modification of path.  The return value is a number giving the number of seconds since the epoch (see the  time module). Raise os.error if the file does not exist or is inaccessible.  New in version 1.5.2.  Changed in version 2.3: If os.stat_float_times() returns True, the result is a floating point number.     os.path.getctime(path)\u00b6 Return the system&#8217;s ctime which, on some systems (like Unix) is the time of the last change, and, on others (like Windows), is the creation time for path. The return value is a number giving the number of seconds since the epoch (see the  time module).  Raise os.error if the file does not exist or is inaccessible.  New in version 2.3.     os.path.getsize(path)\u00b6 Return the size, in bytes, of path.  Raise os.error if the file does not exist or is inaccessible.  New in version 1.5.2.     os.path.isabs(path)\u00b6 Return True if path is an absolute pathname.  On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter.    os.path.isfile(path)\u00b6 Return True if path is an existing regular file.  This follows symbolic links, so both islink() and isfile() can be true for the same path.    os.path.isdir(path)\u00b6 Return True if path is an existing directory.  This follows symbolic links, so both islink() and isdir() can be true for the same path.    os.path.islink(path)\u00b6 Return True if path refers to a directory entry that is a symbolic link. Always False if symbolic links are not supported.    os.path.ismount(path)\u00b6 Return True if pathname path is a mount point: a point in a file system where a different file system has been mounted.  The function checks whether path&#8216;s parent, path\/.., is on a different device than path, or whether path\/.. and path point to the same i-node on the same device &#8212; this should detect mount points for all Unix and POSIX variants.    os.path.join(path1[, path2[, ...]])\u00b6 Join one or more path components intelligently.  If any component is an absolute path, all previous components (on Windows, including the previous drive letter, if there was one) are thrown away, and joining continues.  The return value is the concatenation of path1, and optionally path2, etc., with exactly one directory separator (os.sep) following each non-empty part except the last. (This means that an empty last part will result in a path that ends with a separator.)  Note that on Windows, since there is a current directory for each drive, os.path.join(\"c:\", \"foo\") represents a path relative to the current directory on drive C: (c:foo), not c:\\foo.    os.path.normcase(path)\u00b6 Normalize the case of a pathname.  On Unix and Mac OS X, this returns the path unchanged; on case-insensitive filesystems, it converts the path to lowercase.  On Windows, it also converts forward slashes to backward slashes.    os.path.normpath(path)\u00b6 Normalize a pathname.  This collapses redundant separators and up-level references so that A\/\/B, A\/B\/, A\/.\/B and A\/foo\/..\/B all become A\/B. It does not normalize the case (use normcase() for that).  On Windows, it converts forward slashes to backward slashes. It should be understood that this may change the meaning of the path if it contains symbolic links!     os.path.realpath(path)\u00b6 Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path (if they are supported by the operating system).  New in version 2.2.     os.path.relpath(path[, start])\u00b6 Return a relative filepath to path either from the current directory or from an optional start point. start defaults to os.curdir. Availability:  Windows, Unix.  New in version 2.6.     os.path.samefile(path1, path2)\u00b6 Return True if both pathname arguments refer to the same file or directory (as indicated by device number and i-node number). Raise an exception if a os.stat() call on either pathname fails. Availability: Unix.     os.path.sameopenfile(fp1, fp2)\u00b6 Return True if the file descriptors fp1 and fp2 refer to the same file. Availability: Unix.     os.path.samestat(stat1, stat2)\u00b6 Return True if the stat tuples stat1 and stat2 refer to the same file. These structures may have been returned by fstat(), lstat(), or stat().  This function implements the underlying comparison used by samefile() and sameopenfile(). Availability: Unix.     os.path.split(path)\u00b6 Split the pathname path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that.  The tail part will never contain a slash; if path ends in a slash, tail will be empty.  If there is no slash in path, head will be empty.  If path is empty, both head and tail are empty.  Trailing slashes are stripped from head unless it is the root (one or more slashes only).  In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ).    os.path.splitdrive(path)\u00b6 Split the pathname path into a pair (drive, tail) where drive is either a drive specification or the empty string.  On systems which do not use drive specifications, drive will always be the empty string.  In all cases, drive + tail will be the same as path.  New in version 1.3.     os.path.splitext(path)\u00b6 Split the pathname path into a pair (root, ext)  such that root + ext == path, and ext is empty or begins with a period and contains at most one period. Leading periods on the basename are  ignored; splitext('.cshrc') returns  ('.cshrc', '').  Changed in version 2.6: Earlier versions could produce an empty root when the only period was the first character.     os.path.splitunc(path)\u00b6 Split the pathname path into a pair (unc, rest) so that unc is the UNC mount point (such as r'\\\\host\\mount'), if present, and rest the rest of the path (such as  r'\\path\\file.ext').  For paths containing drive letters, unc will always be the empty string. Availability:  Windows.     os.path.walk(path, visit, arg)\u00b6 Calls the function visit with arguments (arg, dirname, names) for each directory in the directory tree rooted at path (including path itself, if it is a directory).  The argument dirname specifies the visited directory, the argument names lists the files in the directory (gotten from os.listdir(dirname)). The visit function may modify names to influence the set of directories visited below dirname, e.g. to avoid visiting certain parts of the tree.  (The object referred to by names must be modified in place, using del or slice assignment.)  Note Symbolic links to directories are not treated as subdirectories, and that walk() therefore will not visit them. To visit linked directories you must identify them with os.path.islink(file) and os.path.isdir(file), and invoke walk() as necessary.   Note This function is deprecated and has been removed in 3.0 in favor of os.walk().      os.path.supports_unicode_filenames\u00b6 True if arbitrary Unicode strings can be used as file names (within limitations imposed by the file system).  New in version 2.3."},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.abspath","title":"os.path.abspath","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.basename","title":"os.path.basename","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.commonprefix","title":"os.path.commonprefix","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.dirname","title":"os.path.dirname","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.exists","title":"os.path.exists","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.expanduser","title":"os.path.expanduser","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.expandvars","title":"os.path.expandvars","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.getatime","title":"os.path.getatime","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.getctime","title":"os.path.getctime","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.getmtime","title":"os.path.getmtime","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.getsize","title":"os.path.getsize","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.isabs","title":"os.path.isabs","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.isdir","title":"os.path.isdir","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.isfile","title":"os.path.isfile","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.islink","title":"os.path.islink","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.ismount","title":"os.path.ismount","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.join","title":"os.path.join","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.lexists","title":"os.path.lexists","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.normcase","title":"os.path.normcase","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.normpath","title":"os.path.normpath","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.realpath","title":"os.path.realpath","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.relpath","title":"os.path.relpath","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.samefile","title":"os.path.samefile","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.sameopenfile","title":"os.path.sameopenfile","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.samestat","title":"os.path.samestat","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.split","title":"os.path.split","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.splitdrive","title":"os.path.splitdrive","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.splitext","title":"os.path.splitext","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.splitunc","title":"os.path.splitunc","description":""},{"url":"http:\/\/docs.python.org\/library\/os.path.html#os.path_os.path.walk","title":"os.path.walk","description":""},{"url":"http:\/\/docs.python.org\/library\/glob.html","title":"glob","description":"10.7. glob &#8212; Unix style pathname pattern expansion\u00b6 Source code: Lib\/glob.py  The glob module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell.  No tilde expansion is done, but *, ?, and character ranges expressed with [] will be correctly matched.  This is done by using the os.listdir() and fnmatch.fnmatch() functions in concert, and not by actually invoking a subshell.  (For tilde and shell variable expansion, use os.path.expanduser() and os.path.expandvars().)   glob.glob(pathname)\u00b6 Return a possibly-empty list of path names that match pathname, which must be a string containing a path specification. pathname can be either absolute (like \/usr\/src\/Python-1.5\/Makefile) or relative (like ..\/..\/Tools\/*\/*.gif), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell).    glob.iglob(pathname)\u00b6 Return an iterator which yields the same values as glob() without actually storing them all simultaneously.  New in version 2.5.   For example, consider a directory containing only the following files: 1.gif, 2.txt, and card.gif.  glob() will produce the following results.  Notice how any leading components of the path are preserved. >>> import glob >>> glob.glob(&#39;.\/[0-9].*&#39;) [&#39;.\/1.gif&#39;, &#39;.\/2.txt&#39;] >>> glob.glob(&#39;*.gif&#39;) [&#39;1.gif&#39;, &#39;card.gif&#39;] >>> glob.glob(&#39;?.gif&#39;) [&#39;1.gif&#39;]    See also  Module fnmatch Shell-style filename (not path) expansion"},{"url":"http:\/\/docs.python.org\/library\/glob.html#glob.glob","title":"glob.glob","description":""},{"url":"http:\/\/docs.python.org\/library\/glob.html#glob.iglob","title":"glob.iglob","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html","title":"stat","description":"10.3. stat &#8212; Interpreting stat() results\u00b6 Source code: Lib\/stat.py  The stat module defines constants and functions for interpreting the results of os.stat(), os.fstat() and os.lstat() (if they exist).  For complete details about the stat(), fstat() and lstat() calls, consult the documentation for your system. The stat module defines the following functions to test for specific file types:   stat.S_ISDIR(mode)\u00b6 Return non-zero if the mode is from a directory.    stat.S_ISCHR(mode)\u00b6 Return non-zero if the mode is from a character special device file.    stat.S_ISBLK(mode)\u00b6 Return non-zero if the mode is from a block special device file.    stat.S_ISREG(mode)\u00b6 Return non-zero if the mode is from a regular file.    stat.S_ISFIFO(mode)\u00b6 Return non-zero if the mode is from a FIFO (named pipe).    stat.S_ISLNK(mode)\u00b6 Return non-zero if the mode is from a symbolic link.    stat.S_ISSOCK(mode)\u00b6 Return non-zero if the mode is from a socket.  Two additional functions are defined for more general manipulation of the file&#8217;s mode:   stat.S_IMODE(mode)\u00b6 Return the portion of the file&#8217;s mode that can be set by os.chmod()&#8212;that is, the file&#8217;s permission bits, plus the sticky bit, set-group-id, and set-user-id bits (on systems that support them).    stat.S_IFMT(mode)\u00b6 Return the portion of the file&#8217;s mode that describes the file type (used by the S_IS*() functions above).  Normally, you would use the os.path.is*() functions for testing the type of a file; the functions here are useful when you are doing multiple tests of the same file and wish to avoid the overhead of the stat() system call for each test.  These are also useful when checking for information about a file that isn&#8217;t handled by os.path, like the tests for block and character devices. Example: import os, sys from stat import *  def walktree(top, callback):     &#39;&#39;&#39;recursively descend the directory tree rooted at top,        calling the callback function for each regular file&#39;&#39;&#39;      for f in os.listdir(top):         pathname = os.path.join(top, f)         mode = os.stat(pathname).st_mode         if S_ISDIR(mode):             # It&#39;s a directory, recurse into it             walktree(pathname, callback)         elif S_ISREG(mode):             # It&#39;s a file, call the callback function             callback(pathname)         else:             # Unknown file type, print a message             print &#39;Skipping %s&#39;  pathname  def visitfile(file):     print &#39;visiting&#39;, file  if __name__ == &#39;__main__&#39;:     walktree(sys.argv[1], visitfile)   All the variables below are simply symbolic indexes into the 10-tuple returned by os.stat(), os.fstat() or os.lstat().   stat.ST_MODE\u00b6 Inode protection mode.    stat.ST_INO\u00b6 Inode number.    stat.ST_DEV\u00b6 Device inode resides on.    stat.ST_NLINK\u00b6 Number of links to the inode.    stat.ST_UID\u00b6 User id of the owner.    stat.ST_GID\u00b6 Group id of the owner.    stat.ST_SIZE\u00b6 Size in bytes of a plain file; amount of data waiting on some special files.    stat.ST_ATIME\u00b6 Time of last access.    stat.ST_MTIME\u00b6 Time of last modification.    stat.ST_CTIME\u00b6 The &#8220;ctime&#8221; as reported by the operating system.  On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details).  The interpretation of &#8220;file size&#8221; changes according to the file type.  For plain files this is the size of the file in bytes.  For FIFOs and sockets under most flavors of Unix (including Linux in particular), the &#8220;size&#8221; is the number of bytes waiting to be read at the time of the call to os.stat(), os.fstat(), or os.lstat(); this can sometimes be useful, especially for polling one of these special files after a non-blocking open.  The meaning of the size field for other character and block devices varies more, depending on the implementation of the underlying system call. The variables below define the flags used in the ST_MODE field. Use of the functions above is more portable than use of the first set of flags:   stat.S_IFMT Bit mask for the file type bit fields.    stat.S_IFSOCK\u00b6 Socket.    stat.S_IFLNK\u00b6 Symbolic link.    stat.S_IFREG\u00b6 Regular file.    stat.S_IFBLK\u00b6 Block device.    stat.S_IFDIR\u00b6 Directory.    stat.S_IFCHR\u00b6 Character device.    stat.S_IFIFO\u00b6 FIFO.  The following flags can also be used in the mode argument of os.chmod():   stat.S_ISUID\u00b6 Set UID bit.    stat.S_ISGID\u00b6 Set-group-ID bit.  This bit has several special uses.  For a directory it indicates that BSD semantics is to be used for that directory: files created there inherit their group ID from the directory, not from the effective group ID of the creating process, and directories created there will also get the S_ISGID bit set.  For a file that does not have the group execution bit (S_IXGRP) set, the set-group-ID bit indicates mandatory file\/record locking (see also S_ENFMT).    stat.S_ISVTX\u00b6 Sticky bit.  When this bit is set on a directory it means that a file in that directory can be renamed or deleted only by the owner of the file, by the owner of the directory, or by a privileged process.    stat.S_IRWXU\u00b6 Mask for file owner permissions.    stat.S_IRUSR\u00b6 Owner has read permission.    stat.S_IWUSR\u00b6 Owner has write permission.    stat.S_IXUSR\u00b6 Owner has execute permission.    stat.S_IRWXG\u00b6 Mask for group permissions.    stat.S_IRGRP\u00b6 Group has read permission.    stat.S_IWGRP\u00b6 Group has write permission.    stat.S_IXGRP\u00b6 Group has execute permission.    stat.S_IRWXO\u00b6 Mask for permissions for others (not in group).    stat.S_IROTH\u00b6 Others have read permission.    stat.S_IWOTH\u00b6 Others have write permission.    stat.S_IXOTH\u00b6 Others have execute permission.    stat.S_ENFMT\u00b6 System V file locking enforcement.  This flag is shared with S_ISGID: file\/record locking is enforced on files that do not have the group execution bit (S_IXGRP) set.    stat.S_IREAD\u00b6 Unix V7 synonym for S_IRUSR.    stat.S_IWRITE\u00b6 Unix V7 synonym for S_IWUSR.    stat.S_IEXEC\u00b6 Unix V7 synonym for S_IXUSR.  The following flags can be used in the flags argument of os.chflags():   stat.UF_NODUMP\u00b6 Do not dump the file.    stat.UF_IMMUTABLE\u00b6 The file may not be changed.    stat.UF_APPEND\u00b6 The file may only be appended to.    stat.UF_OPAQUE\u00b6 The directory is opaque when viewed through a union stack.    stat.UF_NOUNLINK\u00b6 The file may not be renamed or deleted.    stat.UF_COMPRESSED\u00b6 The file is stored compressed (Mac OS X 10.6+).    stat.UF_HIDDEN\u00b6 The file should not be displayed in a GUI (Mac OS X 10.5+).    stat.SF_ARCHIVED\u00b6 The file may be archived.    stat.SF_IMMUTABLE\u00b6 The file may not be changed.    stat.SF_APPEND\u00b6 The file may only be appended to.    stat.SF_NOUNLINK\u00b6 The file may not be renamed or deleted.    stat.SF_SNAPSHOT\u00b6 The file is a snapshot file.  See the *BSD or Mac OS systems man page chflags(2) for more information."},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_IFMT","title":"stat.S_IFMT","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_IMODE","title":"stat.S_IMODE","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_ISBLK","title":"stat.S_ISBLK","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_ISCHR","title":"stat.S_ISCHR","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_ISDIR","title":"stat.S_ISDIR","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_ISFIFO","title":"stat.S_ISFIFO","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_ISLNK","title":"stat.S_ISLNK","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_ISREG","title":"stat.S_ISREG","description":""},{"url":"http:\/\/docs.python.org\/library\/stat.html#stat.S_ISSOCK","title":"stat.S_ISSOCK","description":""},{"url":"http:\/\/docs.python.org\/library\/tempfile.html","title":"tempfile","description":"10.6. tempfile &#8212; Generate temporary files and directories\u00b6 Source code: Lib\/tempfile.py  This module generates temporary files and directories.  It works on all supported platforms. In version 2.3 of Python, this module was overhauled for enhanced security.  It now provides three new functions, NamedTemporaryFile(), mkstemp(), and mkdtemp(), which should eliminate all remaining need to use the insecure mktemp() function.  Temporary file names created by this module no longer contain the process ID; instead a string of six random characters is used. Also, all the user-callable functions now take additional arguments which allow direct control over the location and name of temporary files.  It is no longer necessary to use the global tempdir and template variables. To maintain backward compatibility, the argument order is somewhat odd; it is recommended to use keyword arguments for clarity. The module defines the following user-callable functions:   tempfile.TemporaryFile([mode='w+b'[, bufsize=-1[, suffix=''[, prefix='tmp'[, dir=None]]]]])\u00b6 Return a file-like object that can be used as a temporary storage area. The file is created using mkstemp(). It will be destroyed as soon as it is closed (including an implicit close when the object is garbage collected).  Under Unix, the directory entry for the file is removed immediately after the file is created.  Other platforms do not support this; your code should not rely on a temporary file created using this function having or not having a visible name in the file system. The mode parameter defaults to 'w+b' so that the file created can be read and written without being closed.  Binary mode is used so that it behaves consistently on all platforms without regard for the data that is stored.  bufsize defaults to -1, meaning that the operating system default is used. The dir, prefix and suffix parameters are passed to mkstemp(). The returned object is a true file object on POSIX platforms.  On other platforms, it is a file-like object whose file attribute is the underlying true file object. This file-like object can be used in a with statement, just like a normal file.     tempfile.NamedTemporaryFile([mode='w+b'[, bufsize=-1[, suffix=''[, prefix='tmp'[, dir=None[, delete=True]]]]]])\u00b6 This function operates exactly as TemporaryFile() does, except that the file is guaranteed to have a visible name in the file system (on Unix, the directory entry is not unlinked).  That name can be retrieved from the name attribute of the file object.  Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later).  If delete is true (the default), the file is deleted as soon as it is closed. The returned object is always a file-like object whose file attribute is the underlying true file object. This file-like object can be used in a with statement, just like a normal file.  New in version 2.3.  New in version 2.6: The delete parameter.     tempfile.SpooledTemporaryFile([max_size=0[, mode='w+b'[, bufsize=-1[, suffix=''[, prefix='tmp'[, dir=None]]]]]])\u00b6 This function operates exactly as TemporaryFile() does, except that data is spooled in memory until the file size exceeds max_size, or until the file&#8217;s fileno() method is called, at which point the contents are written to disk and operation proceeds as with TemporaryFile(). The resulting file has one additional method, rollover(), which causes the file to roll over to an on-disk file regardless of its size. The returned object is a file-like object whose _file attribute is either a StringIO object or a true file object, depending on whether rollover() has been called. This file-like object can be used in a with statement, just like a normal file.  New in version 2.6.     tempfile.mkstemp([suffix=''[, prefix='tmp'[, dir=None[, text=False]]]])\u00b6 Creates a temporary file in the most secure manner possible.  There are no race conditions in the file&#8217;s creation, assuming that the platform properly implements the os.O_EXCL flag for os.open().  The file is readable and writable only by the creating user ID.  If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one.  The file descriptor is not inherited by child processes. Unlike TemporaryFile(), the user of mkstemp() is responsible for deleting the temporary file when done with it. If suffix is specified, the file name will end with that suffix, otherwise there will be no suffix.  mkstemp() does not put a dot between the file name and the suffix; if you need one, put it at the beginning of suffix. If prefix is specified, the file name will begin with that prefix; otherwise, a default prefix is used. If dir is specified, the file will be created in that directory; otherwise, a default directory is used.  The default directory is chosen from a platform-dependent list, but the user of the application can control the directory location by setting the TMPDIR, TEMP or TMP environment variables.  There is thus no guarantee that the generated filename will have any nice properties, such as not requiring quoting when passed to external commands via os.popen(). If text is specified, it indicates whether to open the file in binary mode (the default) or text mode.  On some platforms, this makes no difference. mkstemp() returns a tuple containing an OS-level handle to an open file (as would be returned by os.open()) and the absolute pathname of that file, in that order.  New in version 2.3.     tempfile.mkdtemp([suffix=''[, prefix='tmp'[, dir=None]]])\u00b6 Creates a temporary directory in the most secure manner possible. There are no race conditions in the directory&#8217;s creation.  The directory is readable, writable, and searchable only by the creating user ID. The user of mkdtemp() is responsible for deleting the temporary directory and its contents when done with it. The prefix, suffix, and dir arguments are the same as for mkstemp(). mkdtemp() returns the absolute pathname of the new directory.  New in version 2.3.     tempfile.mktemp([suffix=''[, prefix='tmp'[, dir=None]]])\u00b6  Deprecated since version 2.3: Use mkstemp() instead. Return an absolute pathname of a file that did not exist at the time the call is made.  The prefix, suffix, and dir arguments are the same as for mkstemp().  Warning Use of this function may introduce a security hole in your program.  By the time you get around to doing anything with the file name it returns, someone else may have beaten you to the punch.  mktemp() usage can be replaced easily with NamedTemporaryFile(), passing it the delete=False parameter: >>> f = NamedTemporaryFile(delete=False) >>> f <open file &#39;<fdopen>&#39;, mode &#39;w+b&#39; at 0x384698> >>> f.name &#39;\/var\/folders\/5q\/5qTPn6xq2RaWqk+1Ytw3-U+++TI\/-Tmp-\/tmpG7V1Y0&#39; >>> f.write(\"Hello World!\\n\") >>> f.close() >>> os.unlink(f.name) >>> os.path.exists(f.name) False      The module uses two global variables that tell it how to construct a temporary name.  They are initialized at the first call to any of the functions above.  The caller may change them, but this is discouraged; use the appropriate function arguments, instead.   tempfile.tempdir\u00b6 When set to a value other than None, this variable defines the default value for the dir argument to all the functions defined in this module. If tempdir is unset or None at any call to any of the above functions, Python searches a standard list of directories and sets tempdir to the first one which the calling user can create files in. The list is:  The directory named by the TMPDIR environment variable. The directory named by the TEMP environment variable. The directory named by the TMP environment variable. A platform-specific location: On RiscOS, the directory named by the Wimp$ScrapDir environment variable. On Windows, the directories C:\\TEMP, C:\\TMP, \\TEMP, and \\TMP, in that order. On all other platforms, the directories \/tmp, \/var\/tmp, and \/usr\/tmp, in that order.   As a last resort, the current working directory.      tempfile.gettempdir()\u00b6 Return the directory currently selected to create temporary files in. If tempdir is not None, this simply returns its contents; otherwise, the search described above is performed, and the result returned.  New in version 2.3.     tempfile.template\u00b6  Deprecated since version 2.0: Use gettempprefix() instead. When set to a value other than None, this variable defines the prefix of the final component of the filenames returned by mktemp().  A string of six random letters and digits is appended to the prefix to make the filename unique. The default prefix is tmp. Older versions of this module used to require that template be set to None after a call to os.fork(); this has not been necessary since version 1.5.2.     tempfile.gettempprefix()\u00b6 Return the filename prefix used to create temporary files.  This does not contain the directory component.  Using this function is preferred over reading the template variable directly.  New in version 1.5.2."},{"url":"http:\/\/docs.python.org\/library\/tempfile.html#tempfile.gettempdir","title":"tempfile.gettempdir","description":""},{"url":"http:\/\/docs.python.org\/library\/tempfile.html#tempfile.gettempprefix","title":"tempfile.gettempprefix","description":""},{"url":"http:\/\/docs.python.org\/library\/tempfile.html#tempfile.mkdtemp","title":"tempfile.mkdtemp","description":""},{"url":"http:\/\/docs.python.org\/library\/tempfile.html#tempfile.mkstemp","title":"tempfile.mkstemp","description":""},{"url":"http:\/\/docs.python.org\/library\/tempfile.html#tempfile.mktemp","title":"tempfile.mktemp","description":""},{"url":"http:\/\/docs.python.org\/library\/tempfile.html#tempfile.NamedTemporaryFile","title":"tempfile.NamedTemporaryFile","description":""},{"url":"http:\/\/docs.python.org\/library\/tempfile.html#tempfile.SpooledTemporaryFile","title":"tempfile.SpooledTemporaryFile","description":""},{"url":"http:\/\/docs.python.org\/library\/tempfile.html#tempfile.TemporaryFile","title":"tempfile.TemporaryFile","description":""},{"url":"http:\/\/docs.python.org\/library\/fnmatch.html","title":"fnmatch","description":"10.8. fnmatch &#8212; Unix filename pattern matching\u00b6 Source code: Lib\/fnmatch.py  This module provides support for Unix shell-style wildcards, which are not the same as regular expressions (which are documented in the re module).  The special characters used in shell-style wildcards are:       Pattern Meaning    * matches everything  ? matches any single character  [seq] matches any character in seq  [!seq] matches any character not in seq    Note that the filename separator ('\/' on Unix) is not special to this module.  See module glob for pathname expansion (glob uses fnmatch() to match pathname segments).  Similarly, filenames starting with a period are not special for this module, and are matched by the * and ? patterns.   fnmatch.fnmatch(filename, pattern)\u00b6 Test whether the filename string matches the pattern string, returning True or False.  If the operating system is case-insensitive, then both parameters will be normalized to all lower- or upper-case before the comparison is performed.  fnmatchcase() can be used to perform a case-sensitive comparison, regardless of whether that&#8217;s standard for the operating system. This example will print all file names in the current directory with the extension .txt: import fnmatch import os  for file in os.listdir(&#39;.&#39;):     if fnmatch.fnmatch(file, &#39;*.txt&#39;):         print file       fnmatch.fnmatchcase(filename, pattern)\u00b6 Test whether filename matches pattern, returning True or False; the comparison is case-sensitive.    fnmatch.filter(names, pattern)\u00b6 Return the subset of the list of names that match pattern. It is the same as [n for n in names if fnmatch(n, pattern)], but implemented more efficiently.  New in version 2.2.     fnmatch.translate(pattern)\u00b6 Return the shell-style pattern converted to a regular expression. Be aware there is no way to quote meta-characters. Example: >>> import fnmatch, re >>> >>> regex = fnmatch.translate(&#39;*.txt&#39;) >>> regex &#39;.*\\\\.txt$&#39; >>> reobj = re.compile(regex) >>> reobj.match(&#39;foobar.txt&#39;) <_sre.SRE_Match object at 0x...>      See also  Module glob Unix shell-style path expansion."},{"url":"http:\/\/docs.python.org\/library\/fnmatch.html#fnmatch.filter","title":"fnmatch.filter","description":""},{"url":"http:\/\/docs.python.org\/library\/fnmatch.html#fnmatch.fnmatch","title":"fnmatch.fnmatch","description":""},{"url":"http:\/\/docs.python.org\/library\/fnmatch.html#fnmatch.fnmatchcase","title":"fnmatch.fnmatchcase","description":""},{"url":"http:\/\/docs.python.org\/library\/fnmatch.html#fnmatch.translate","title":"fnmatch.translate","description":""},{"url":"http:\/\/docs.python.org\/library\/linecache.html","title":"linecache","description":"10.9. linecache &#8212; Random access to text lines\u00b6 Source code: Lib\/linecache.py  The linecache module allows one to get any line from any file, while attempting to optimize internally, using a cache, the common case where many lines are read from a single file.  This is used by the traceback module to retrieve source lines for inclusion in  the formatted traceback. The linecache module defines the following functions:   linecache.getline(filename, lineno[, module_globals])\u00b6 Get line lineno from file named filename. This function will never raise an exception &#8212; it will return '' on errors (the terminating newline character will be included for lines that are found). If a file named filename is not found, the function will look for it in the module search path, sys.path, after first checking for a PEP 302 __loader__ in module_globals, in case the module was imported from a zipfile or other non-filesystem import source.  New in version 2.5: The module_globals parameter was added.     linecache.clearcache()\u00b6 Clear the cache.  Use this function if you no longer need lines from files previously read using getline().    linecache.checkcache([filename])\u00b6 Check the cache for validity.  Use this function if files in the cache  may have changed on disk, and you require the updated version.  If filename is omitted, it will check all the entries in the cache.  Example: >>> import linecache >>> linecache.getline(&#39;\/etc\/passwd&#39;, 4) &#39;sys:x:3:3:sys:\/dev:\/bin\/sh\\n&#39;"},{"url":"http:\/\/docs.python.org\/library\/linecache.html#linecache.checkcache","title":"linecache.checkcache","description":""},{"url":"http:\/\/docs.python.org\/library\/linecache.html#linecache.clearcache","title":"linecache.clearcache","description":""},{"url":"http:\/\/docs.python.org\/library\/linecache.html#linecache.getline","title":"linecache.getline","description":""},{"url":"http:\/\/docs.python.org\/library\/filecmp.html","title":"filecmp","description":"10.5. filecmp &#8212; File and Directory Comparisons\u00b6 Source code: Lib\/filecmp.py  The filecmp module defines functions to compare files and directories, with various optional time\/correctness trade-offs. For comparing files, see also the difflib module. The filecmp module defines the following functions:   filecmp.cmp(f1, f2[, shallow])\u00b6 Compare the files named f1 and f2, returning True if they seem equal, False otherwise. Unless shallow is given and is false, files with identical os.stat() signatures are taken to be equal. Files that were compared using this function will not be compared again unless their os.stat() signature changes. Note that no external programs are called from this function, giving it portability and efficiency.     filecmp.cmpfiles(dir1, dir2, common[, shallow])\u00b6 Compare the files in the two directories dir1 and dir2 whose names are given by common. Returns three lists of file names: match, mismatch, errors.  match contains the list of files that match, mismatch contains the names of those that don&#8217;t, and errors lists the names of files which could not be compared.  Files are listed in errors if they don&#8217;t exist in one of the directories, the user lacks permission to read them or if the comparison could not be done for some other reason. The shallow parameter has the same meaning and default value as for filecmp.cmp(). For example, cmpfiles('a', 'b', ['c', 'd\/e']) will compare a\/c with b\/c and a\/d\/e with b\/d\/e.  'c' and 'd\/e' will each be in one of the three returned lists.   Example: >>> import filecmp >>> filecmp.cmp(&#39;undoc.rst&#39;, &#39;undoc.rst&#39;) True >>> filecmp.cmp(&#39;undoc.rst&#39;, &#39;index.rst&#39;) False    10.5.1. The dircmp class\u00b6 dircmp instances are built using this constructor:   class filecmp.dircmp(a, b[, ignore[, hide]])\u00b6 Construct a new directory comparison object, to compare the directories a and b. ignore is a list of names to ignore, and defaults to ['RCS', 'CVS', 'tags']. hide is a list of names to hide, and defaults to [os.curdir, os.pardir]. The dircmp class provides the following methods:   report()\u00b6 Print (to sys.stdout) a comparison between a and b.    report_partial_closure()\u00b6 Print a comparison between a and b and common immediate subdirectories.    report_full_closure()\u00b6 Print a comparison between a and b and common subdirectories (recursively).  The dircmp offers a number of interesting attributes that may be used to get various bits of information about the directory trees being compared. Note that via __getattr__() hooks, all attributes are computed lazily, so there is no speed penalty if only those attributes which are lightweight to compute are used.   left_list\u00b6 Files and subdirectories in a, filtered by hide and ignore.    right_list\u00b6 Files and subdirectories in b, filtered by hide and ignore.    common\u00b6 Files and subdirectories in both a and b.    left_only\u00b6 Files and subdirectories only in a.    right_only\u00b6 Files and subdirectories only in b.    common_dirs\u00b6 Subdirectories in both a and b.    common_files\u00b6 Files in both a and b    common_funny\u00b6 Names in both a and b, such that the type differs between the directories, or names for which os.stat() reports an error.    same_files\u00b6 Files which are identical in both a and b.    diff_files\u00b6 Files which are in both a and b, whose contents differ.    funny_files\u00b6 Files which are in both a and b, but could not be compared.    subdirs\u00b6 A dictionary mapping names in common_dirs to dircmp objects."},{"url":"http:\/\/docs.python.org\/library\/filecmp.html#filecmp.cmp","title":"filecmp.cmp","description":""},{"url":"http:\/\/docs.python.org\/library\/filecmp.html#filecmp.cmpfiles","title":"filecmp.cmpfiles","description":""},{"url":"http:\/\/docs.python.org\/library\/filecmp.html#filecmp.dircmp","title":"filecmp.dircmp","description":""},{"url":"http:\/\/docs.python.org\/library\/filecmp.html#filecmp.dircmp.report","title":"filecmp.dircmp.report","description":""},{"url":"http:\/\/docs.python.org\/library\/filecmp.html#filecmp.dircmp.report_full_closure","title":"filecmp.dircmp.report_full_closure","description":""},{"url":"http:\/\/docs.python.org\/library\/filecmp.html#filecmp.dircmp.report_partial_closure","title":"filecmp.dircmp.report_partial_closure","description":""},{"url":"http:\/\/docs.python.org\/library\/dircache.html","title":"dircache","description":"10.11. dircache &#8212; Cached directory listings\u00b6  Deprecated since version 2.6: The dircache module has been removed in Python 3.0. The dircache module defines a function for reading directory listing using a cache, and cache invalidation using the mtime of the directory. Additionally, it defines a function to annotate directories by appending a slash. The dircache module defines the following functions:   dircache.reset()\u00b6 Resets the directory cache.    dircache.listdir(path)\u00b6 Return a directory listing of path, as gotten from os.listdir(). Note that unless path changes, further call to listdir() will not re-read the directory structure. Note that the list returned should be regarded as read-only. (Perhaps a future version should change it to return a tuple?)     dircache.opendir(path)\u00b6 Same as listdir(). Defined for backwards compatibility.    dircache.annotate(head, list)\u00b6 Assume list is a list of paths relative to head, and append, in place, a '\/' to each path which points to a directory.  >>> import dircache >>> a = dircache.listdir(&#39;\/&#39;) >>> a = a[:] # Copy the return value so we can change &#39;a&#39; >>> a [&#39;bin&#39;, &#39;boot&#39;, &#39;cdrom&#39;, &#39;dev&#39;, &#39;etc&#39;, &#39;floppy&#39;, &#39;home&#39;, &#39;initrd&#39;, &#39;lib&#39;, &#39;lost+ found&#39;, &#39;mnt&#39;, &#39;proc&#39;, &#39;root&#39;, &#39;sbin&#39;, &#39;tmp&#39;, &#39;usr&#39;, &#39;var&#39;, &#39;vmlinuz&#39;] >>> dircache.annotate(&#39;\/&#39;, a) >>> a [&#39;bin\/&#39;, &#39;boot\/&#39;, &#39;cdrom\/&#39;, &#39;dev\/&#39;, &#39;etc\/&#39;, &#39;floppy\/&#39;, &#39;home\/&#39;, &#39;initrd\/&#39;, &#39;lib\/ &#39;, &#39;lost+found\/&#39;, &#39;mnt\/&#39;, &#39;proc\/&#39;, &#39;root\/&#39;, &#39;sbin\/&#39;, &#39;tmp\/&#39;, &#39;usr\/&#39;, &#39;var\/&#39;, &#39;vm linuz&#39;]"},{"url":"http:\/\/docs.python.org\/library\/dircache.html#dircache.annotate","title":"dircache.annotate","description":""},{"url":"http:\/\/docs.python.org\/library\/dircache.html#dircache.listdir","title":"dircache.listdir","description":""},{"url":"http:\/\/docs.python.org\/library\/dircache.html#dircache.opendir","title":"dircache.opendir","description":""},{"url":"http:\/\/docs.python.org\/library\/dircache.html#dircache.reset","title":"dircache.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/copy_reg.html","title":"copy_reg","description":"11.3. copy_reg &#8212; Register pickle support functions\u00b6  Note The copy_reg module has been renamed to copyreg in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  The copy_reg module provides support for the pickle and cPickle modules.  The copy module is likely to use this in the future as well.  It provides configuration information about object constructors which are not classes.  Such constructors may be factory functions or class instances.   copy_reg.constructor(object)\u00b6 Declares object to be a valid constructor.  If object is not callable (and hence not valid as a constructor), raises TypeError.    copy_reg.pickle(type, function[, constructor])\u00b6 Declares that function should be used as a &#8220;reduction&#8221; function for objects of type type; type must not be a &#8220;classic&#8221; class object.  (Classic classes are handled differently; see the documentation for the pickle module for details.)  function should return either a string or a tuple containing two or three elements. The optional constructor parameter, if provided, is a callable object which can be used to reconstruct the object when called with the tuple of arguments returned by function at pickling time.  TypeError will be raised if object is a class or constructor is not callable. See the pickle module for more details on the interface expected of function and constructor."},{"url":"http:\/\/docs.python.org\/library\/copy_reg.html#copy_reg_copy_reg.constructor","title":"copy_reg.constructor","description":""},{"url":"http:\/\/docs.python.org\/library\/copy_reg.html#copy_reg_copy_reg.pickle","title":"copy_reg.pickle","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html","title":"shutil","description":"10.10. shutil &#8212; High-level file operations\u00b6 Source code: Lib\/shutil.py  The shutil module offers a number of high-level operations on files and collections of files.  In particular, functions are provided  which support file copying and removal. For operations on individual files, see also the os module.  Warning Even the higher-level file copying functions (copy(), copy2()) can&#8217;t copy all file metadata. On POSIX platforms, this means that file owner and group are lost as well as ACLs.  On Mac OS, the resource fork and other metadata are not used. This means that resources will be lost and file type and creator codes will not be correct. On Windows, file owners, ACLs and alternate data streams are not copied.   10.10.1. Directory and files operations\u00b6   shutil.copyfileobj(fsrc, fdst[, length])\u00b6 Copy the contents of the file-like object fsrc to the file-like object fdst. The integer length, if given, is the buffer size. In particular, a negative length value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if the current file position of the fsrc object is not 0, only the contents from the current file position to the end of the file will be copied.    shutil.copyfile(src, dst)\u00b6 Copy the contents (no metadata) of the file named src to a file named dst. dst must be the complete target file name; look at copy() for a copy that accepts a target directory path.  If src and dst are the same files, Error is raised. The destination location must be writable; otherwise,  an IOError exception will be raised. If dst already exists, it will be replaced.   Special files such as character or block devices and pipes cannot be copied with this function.  src and dst are path names given as strings.    shutil.copymode(src, dst)\u00b6 Copy the permission bits from src to dst.  The file contents, owner, and group are unaffected.  src and dst are path names given as strings.    shutil.copystat(src, dst)\u00b6 Copy the permission bits, last access time, last modification time, and flags from src to dst.  The file contents, owner, and group are unaffected.  src and dst are path names given as strings.    shutil.copy(src, dst)\u00b6 Copy the file src to the file or directory dst.  If dst is a directory, a file with the same basename as src  is created (or overwritten) in the directory specified.  Permission bits are copied.  src and dst are path names given as strings.    shutil.copy2(src, dst)\u00b6 Similar to copy(), but metadata is copied as well &#8211; in fact, this is just copy() followed by copystat().  This is similar to the Unix command cp -p.    shutil.ignore_patterns(*patterns)\u00b6 This factory function creates a function that can be used as a callable for copytree()&#8216;s ignore argument, ignoring files and directories that match one of the glob-style patterns provided.  See the example below.  New in version 2.6.     shutil.copytree(src, dst[, symlinks=False[, ignore=None]])\u00b6 Recursively copy an entire directory tree rooted at src.  The destination directory, named by dst, must not already exist; it will be created as well as missing parent directories.  Permissions and times of directories are copied with copystat(), individual files are copied using copy2(). If symlinks is true, symbolic links in the source tree are represented as symbolic links in the new tree, but the metadata of the original links is NOT copied; if false or omitted, the contents and metadata of the linked files are copied to the new tree. If ignore is given, it must be a callable that will receive as its arguments the directory being visited by copytree(), and a list of its contents, as returned by os.listdir().  Since copytree() is called recursively, the ignore callable will be called once for each directory that is copied.  The callable must return a sequence of directory and file names relative to the current directory (i.e. a subset of the items in its second argument); these names will then be ignored in the copy process.  ignore_patterns() can be used to create such a callable that ignores names based on glob-style patterns. If exception(s) occur, an Error is raised with a list of reasons. The source code for this should be considered an example rather than the ultimate tool.  Changed in version 2.3: Error is raised if any exceptions occur during copying, rather than printing a message.  Changed in version 2.5: Create intermediate directories needed to create dst, rather than raising an error. Copy permissions and times of directories using copystat().  Changed in version 2.6: Added the ignore argument to be able to influence what is being copied.     shutil.rmtree(path[, ignore_errors[, onerror]])\u00b6 Delete an entire directory tree; path must point to a directory (but not a symbolic link to a directory).  If ignore_errors is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception. If onerror is provided, it must be a callable that accepts three parameters: function, path, and excinfo. The first parameter, function, is the function which raised the exception; it will be os.path.islink(), os.listdir(), os.remove() or os.rmdir().  The second parameter, path, will be the path name passed to function.  The third parameter, excinfo, will be the exception information return by sys.exc_info().  Exceptions raised by onerror will not be caught.  Changed in version 2.6: Explicitly check for path being a symbolic link and raise OSError in that case.     shutil.move(src, dst)\u00b6 Recursively move a file or directory (src) to another location (dst). If the destination is a directory or a symlink to a directory, then src is moved inside that directory. The destination directory must not already exist.  If the destination already exists but is not a directory, it may be overwritten depending on os.rename() semantics. If the destination is on the current filesystem, then os.rename() is used.  Otherwise, src is copied (using copy2()) to dst and then removed.  New in version 2.3.     exception shutil.Error\u00b6 This exception collects exceptions that are raised during a multi-file operation. For copytree(), the exception argument is a list of 3-tuples (srcname, dstname, exception).  New in version 2.3.    10.10.1.1. copytree example\u00b6 This example is the implementation of the copytree() function, described above, with the docstring omitted.  It demonstrates many of the other functions provided by this module. def copytree(src, dst, symlinks=False, ignore=None):     names = os.listdir(src)     if ignore is not None:         ignored_names = ignore(src, names)     else:         ignored_names = set()      os.makedirs(dst)     errors = []     for name in names:         if name in ignored_names:             continue         srcname = os.path.join(src, name)         dstname = os.path.join(dst, name)         try:             if symlinks and os.path.islink(srcname):                 linkto = os.readlink(srcname)                 os.symlink(linkto, dstname)             elif os.path.isdir(srcname):                 copytree(srcname, dstname, symlinks, ignore)             else:                 copy2(srcname, dstname)             # XXX What about devices, sockets etc.?         except (IOError, os.error), why:             errors.append((srcname, dstname, str(why)))         # catch the Error from the recursive copytree so that we can         # continue with other files         except Error, err:             errors.extend(err.args[0])     try:         copystat(src, dst)     except WindowsError:         # can&#39;t copy file access times on Windows         pass     except OSError, why:         errors.extend((src, dst, str(why)))     if errors:         raise Error(errors)   Another example that uses the ignore_patterns() helper: from shutil import copytree, ignore_patterns  copytree(source, destination, ignore=ignore_patterns(&#39;*.pyc&#39;, &#39;tmp*&#39;))   This will copy everything except .pyc files and files or directories whose name starts with tmp. Another example that uses the ignore argument to add a logging call: from shutil import copytree import logging  def _logpath(path, names):     logging.info(&#39;Working in %s&#39;  path)     return []   # nothing will be ignored  copytree(source, destination, ignore=_logpath)      10.10.2. Archives operations\u00b6   shutil.make_archive(base_name, format[, root_dir[, base_dir[, verbose[, dry_run[, owner[, group[, logger]]]]]]])\u00b6 Create an archive file (eg. zip or tar) and returns its name. base_name is the name of the file to create, including the path, minus any format-specific extension. format is the archive format: one of &#8220;zip&#8221;, &#8220;tar&#8221;, &#8220;bztar&#8221; or &#8220;gztar&#8221;. root_dir is a directory that will be the root directory of the archive; ie. we typically chdir into root_dir before creating the archive. base_dir is the directory where we start archiving from; ie. base_dir will be the common prefix of all files and directories in the archive. root_dir and base_dir both default to the current directory. owner and group are used when creating a tar archive. By default, uses the current owner and group. logger is an instance of logging.Logger.  New in version 2.7.     shutil.get_archive_formats()\u00b6 Return a list of supported formats for archiving. Each element of the returned sequence is a tuple (name, description) By default shutil provides these formats:  gztar: gzip&#8217;ed tar-file bztar: bzip2&#8217;ed tar-file tar: uncompressed tar file zip: ZIP file  You can register new formats or provide your own archiver for any existing formats, by using register_archive_format().  New in version 2.7.     shutil.register_archive_format(name, function[, extra_args[, description]])\u00b6 Register an archiver for the format name. function is a callable that will be used to invoke the archiver. If given, extra_args is a sequence of (name, value) that will be used as extra keywords arguments when the archiver callable is used. description is used by get_archive_formats() which returns the list of archivers. Defaults to an empty list.  New in version 2.7.     shutil.unregister_archive_format(name)\u00b6 Remove the archive format name from the list of supported formats.  New in version 2.7.    10.10.2.1. Archiving example\u00b6 In this example, we create a gzip&#8217;ed tar-file archive containing all files found in the .ssh directory of the user: >>> from shutil import make_archive >>> import os >>> archive_name = os.path.expanduser(os.path.join(&#39;~&#39;, &#39;myarchive&#39;)) >>> root_dir = os.path.expanduser(os.path.join(&#39;~&#39;, &#39;.ssh&#39;)) >>> make_archive(archive_name, &#39;gztar&#39;, root_dir) &#39;\/Users\/tarek\/myarchive.tar.gz&#39;   The resulting archive contains: $ tar -tzvf \/Users\/tarek\/myarchive.tar.gz drwx------ tarek\/staff       0 2010-02-01 16:23:40 .\/ -rw-r--r-- tarek\/staff     609 2008-06-09 13:26:54 .\/authorized_keys -rwxr-xr-x tarek\/staff      65 2008-06-09 13:26:54 .\/config -rwx------ tarek\/staff     668 2008-06-09 13:26:54 .\/id_dsa -rwxr-xr-x tarek\/staff     609 2008-06-09 13:26:54 .\/id_dsa.pub -rw------- tarek\/staff    1675 2008-06-09 13:26:54 .\/id_rsa -rw-r--r-- tarek\/staff     397 2008-06-09 13:26:54 .\/id_rsa.pub -rw-r--r-- tarek\/staff   37192 2010-02-06 18:23:10 .\/known_hosts"},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.copy","title":"shutil.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.copy2","title":"shutil.copy2","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.copyfile","title":"shutil.copyfile","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.copyfileobj","title":"shutil.copyfileobj","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.copymode","title":"shutil.copymode","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.copystat","title":"shutil.copystat","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.copytree","title":"shutil.copytree","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.get_archive_formats","title":"shutil.get_archive_formats","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.ignore_patterns","title":"shutil.ignore_patterns","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.make_archive","title":"shutil.make_archive","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.move","title":"shutil.move","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.register_archive_format","title":"shutil.register_archive_format","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.rmtree","title":"shutil.rmtree","description":""},{"url":"http:\/\/docs.python.org\/library\/shutil.html#shutil.unregister_archive_format","title":"shutil.unregister_archive_format","description":""},{"url":"http:\/\/docs.python.org\/library\/macpath.html","title":"macpath","description":"10.12. macpath &#8212; Mac OS 9 path manipulation functions\u00b6 This module is the Mac OS 9 (and earlier) implementation of the os.path module. It can be used to manipulate old-style Macintosh pathnames on Mac OS X (or any other platform). The following functions are available in this module: normcase(), normpath(), isabs(), join(), split(), isdir(), isfile(), walk(), exists(). For other functions available in os.path dummy counterparts are available."},{"url":"http:\/\/docs.python.org\/library\/marshal.html","title":"marshal","description":"11.5. marshal &#8212; Internal Python object serialization\u00b6 This module contains functions that can read and write Python values in a binary format.  The format is specific to Python, but independent of machine architecture issues (e.g., you can write a Python value to a file on a PC, transport the file to a Sun, and read it back there).  Details of the format are undocumented on purpose; it may change between Python versions (although it rarely does). [1] This is not a general &#8220;persistence&#8221; module.  For general persistence and transfer of Python objects through RPC calls, see the modules pickle and shelve.  The marshal module exists mainly to support reading and writing the &#8220;pseudo-compiled&#8221; code for Python modules of .pyc files. Therefore, the Python maintainers reserve the right to modify the marshal format in backward incompatible ways should the need arise.  If you&#8217;re serializing and de-serializing Python objects, use the pickle module instead &#8211; the performance is comparable, version independence is guaranteed, and pickle supports a substantially wider range of objects than marshal.  Warning The marshal module is not intended to be secure against erroneous or maliciously constructed data.  Never unmarshal data received from an untrusted or unauthenticated source.  Not all Python object types are supported; in general, only objects whose value is independent from a particular invocation of Python can be written and read by this module.  The following types are supported: booleans, integers, long integers, floating point numbers, complex numbers, strings, Unicode objects, tuples, lists, sets, frozensets, dictionaries, and code objects, where it should be understood that tuples, lists, sets, frozensets and dictionaries are only supported as long as the values contained therein are themselves supported; and recursive lists, sets and dictionaries should not be written (they will cause infinite loops).  The singletons None, Ellipsis and StopIteration can also be marshalled and unmarshalled.  Warning On machines where C&#8217;s long int type has more than 32 bits (such as the DEC Alpha), it is possible to create plain Python integers that are longer than 32 bits. If such an integer is marshaled and read back in on a machine where C&#8217;s long int type has only 32 bits, a Python long integer object is returned instead.  While of a different type, the numeric value is the same.  (This behavior is new in Python 2.2.  In earlier versions, all but the least-significant 32 bits of the value were lost, and a warning message was printed.)  There are functions that read\/write files as well as functions operating on strings. The module defines these functions:   marshal.dump(value, file[, version])\u00b6 Write the value on the open file.  The value must be a supported type.  The file must be an open file object such as sys.stdout or returned by open() or os.popen().  It must be opened in binary mode ('wb' or 'w+b'). If the value has (or contains an object that has) an unsupported type, a ValueError exception is raised &#8212; but garbage data will also be written to the file.  The object will not be properly read back by load().  New in version 2.4: The version argument indicates the data format that dump should use (see below).     marshal.load(file)\u00b6 Read one value from the open file and return it.  If no valid value is read (e.g. because the data has a different Python version&#8217;s incompatible marshal format), raise EOFError, ValueError or TypeError.  The file must be an open file object opened in binary mode ('rb' or 'r+b').  Note If an object containing an unsupported type was marshalled with dump(), load() will substitute None for the unmarshallable type.      marshal.dumps(value[, version])\u00b6 Return the string that would be written to a file by dump(value, file).  The value must be a supported type.  Raise a ValueError exception if value has (or contains an object that has) an unsupported type.  New in version 2.4: The version argument indicates the data format that dumps should use (see below).     marshal.loads(string)\u00b6 Convert the string to a value.  If no valid value is found, raise EOFError, ValueError or TypeError.  Extra characters in the string are ignored.  In addition, the following constants are defined:   marshal.version\u00b6 Indicates the format that the module uses. Version 0 is the historical format, version 1 (added in Python 2.4) shares interned strings and version 2 (added in Python 2.5) uses a binary format for floating point numbers. The current version is 2.  New in version 2.4.   Footnotes    [1]The name of this module stems from a bit of terminology used by the designers of Modula-3 (amongst others), who use the term &#8220;marshalling&#8221; for shipping of data around in a self-contained form. Strictly speaking, &#8220;to marshal&#8221; means to convert some data from internal to external form (in an RPC buffer for instance) and &#8220;unmarshalling&#8221; for the reverse process."},{"url":"http:\/\/docs.python.org\/library\/marshal.html#marshal.dump","title":"marshal.dump","description":""},{"url":"http:\/\/docs.python.org\/library\/marshal.html#marshal.dumps","title":"marshal.dumps","description":""},{"url":"http:\/\/docs.python.org\/library\/marshal.html#marshal.load","title":"marshal.load","description":""},{"url":"http:\/\/docs.python.org\/library\/marshal.html#marshal.loads","title":"marshal.loads","description":""},{"url":"http:\/\/docs.python.org\/library\/anydbm.html","title":"anydbm","description":"11.6. anydbm &#8212; Generic access to DBM-style databases\u00b6  Note The anydbm module has been renamed to dbm in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  anydbm is a generic interface to variants of the DBM database &#8212; dbhash (requires bsddb), gdbm, or dbm.  If none of these modules is installed, the slow-but-simple implementation in module dumbdbm will be used.   anydbm.open(filename[, flag[, mode]])\u00b6 Open the database file filename and return a corresponding object. If the database file already exists, the whichdb module is used to determine its type and the appropriate module is used; if it does not exist, the first module listed above that can be imported is used. The optional flag argument must be one of these values:       Value Meaning    'r' Open existing database for reading only (default)  'w' Open existing database for reading and writing  'c' Open database for reading and writing, creating it if it doesn&#8217;t exist  'n' Always create a new, empty database, open for reading and writing    If not specified, the default value is 'r'. The optional mode argument is the Unix mode of the file, used only when the database has to be created.  It defaults to octal 0666 (and will be modified by the prevailing umask).     exception anydbm.error\u00b6 A tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named anydbm.error as the first item &#8212; the latter is used when anydbm.error is raised.  The object returned by open() supports most of the same functionality as dictionaries; keys and their corresponding values can be stored, retrieved, and deleted, and the has_key() and keys() methods are available.  Keys and values must always be strings. The following example records some hostnames and a corresponding title,  and then prints out the contents of the database: import anydbm  # Open database, creating it if necessary. db = anydbm.open(&#39;cache&#39;, &#39;c&#39;)  # Record some values db[&#39;www.python.org&#39;] = &#39;Python Website&#39; db[&#39;www.cnn.com&#39;] = &#39;Cable News Network&#39;  # Loop through contents.  Other dictionary methods # such as .keys(), .values() also work. for k, v in db.iteritems():     print k, &#39;\\t&#39;, v  # Storing a non-string key or value will raise an exception (most # likely a TypeError). db[&#39;www.yahoo.com&#39;] = 4  # Close when done. db.close()    See also  Module dbhash BSD db database interface. Module dbm Standard Unix database interface. Module dumbdbm Portable implementation of the dbm interface. Module gdbm GNU database interface, based on the dbm interface. Module shelve General object persistence built on top of  the Python dbm interface. Module whichdb Utility module used to determine the type of an existing database."},{"url":"http:\/\/docs.python.org\/library\/anydbm.html#anydbm.open","title":"anydbm.open","description":""},{"url":"http:\/\/docs.python.org\/library\/shelve.html","title":"shelve","description":"11.4. shelve &#8212; Python object persistence\u00b6 Source code: Lib\/shelve.py  A &#8220;shelf&#8221; is a persistent, dictionary-like object.  The difference with &#8220;dbm&#8221; databases is that the values (not the keys!) in a shelf can be essentially arbitrary Python objects &#8212; anything that the pickle module can handle. This includes most class instances, recursive data types, and objects containing lots of shared  sub-objects.  The keys are ordinary strings.   shelve.open(filename[, flag='c'[, protocol=None[, writeback=False]]])\u00b6 Open a persistent dictionary.  The filename specified is the base filename for the underlying database.  As a side-effect, an extension may be added to the filename and more than one file may be created.  By default, the underlying database file is opened for reading and writing.  The optional flag parameter has the same interpretation as the flag parameter of anydbm.open(). By default, version 0 pickles are used to serialize values.  The version of the pickle protocol can be specified with the protocol parameter.  Changed in version 2.3: The protocol parameter was added. Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified.  By default modified objects are written only when assigned to the shelf (see Example).  If the optional writeback parameter is set to True, all entries accessed are also cached in memory, and written back on sync() and close(); this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated). Like file objects, shelve objects should be closed explicitly to ensure that the persistent data is flushed to disk. Since the shelve module stores objects using pickle, the same security precautions apply.  Accordingly, you should avoid loading a shelf from an untrusted source.   Shelf objects support all methods supported by dictionaries.  This eases the transition from dictionary based scripts to those requiring persistent storage. Two additional methods are supported:   Shelf.sync()\u00b6 Write back all entries in the cache if the shelf was opened with writeback set to True.  Also empty the cache and synchronize the persistent dictionary on disk, if feasible.  This is called automatically when the shelf is closed with close().    Shelf.close()\u00b6 Synchronize and close the persistent dict object.  Operations on a closed shelf will fail with a ValueError.   See also Persistent dictionary recipe with widely supported storage formats and having the speed of native dictionaries.   11.4.1. Restrictions\u00b6    The choice of which database package will be used (such as dbm, gdbm or bsddb) depends on which interface is available.  Therefore it is not safe to open the database directly using dbm.  The database is also (unfortunately) subject to the limitations of dbm, if it is used &#8212; this means that (the pickled representation of) the objects stored in the database should be fairly small, and in rare cases key collisions may cause the database to refuse updates. The shelve module does not support concurrent read\/write access to shelved objects.  (Multiple simultaneous read accesses are safe.)  When a program has a shelf open for writing, no other program should have it open for reading or writing.  Unix file locking can be used to solve this, but this differs across Unix versions and requires knowledge about the database implementation used.    class shelve.Shelf(dict[, protocol=None[, writeback=False]])\u00b6 A subclass of UserDict.DictMixin which stores pickled values in the dict object. By default, version 0 pickles are used to serialize values.  The version of the pickle protocol can be specified with the protocol parameter. See the pickle documentation for a discussion of the pickle protocols.  Changed in version 2.3: The protocol parameter was added. If the writeback parameter is True, the object will hold a cache of all entries accessed and write them back to the dict at sync and close times. This allows natural operations on mutable entries, but can consume much more memory and make sync and close take a long time.     class shelve.BsdDbShelf(dict[, protocol=None[, writeback=False]])\u00b6 A subclass of Shelf which exposes first(), next(), previous(), last() and set_location() which are available in the bsddb module but not in other database modules.  The dict object passed to the constructor must support those methods.  This is generally accomplished by calling one of bsddb.hashopen(), bsddb.btopen() or bsddb.rnopen().  The optional protocol and writeback parameters have the same interpretation as for the Shelf class.    class shelve.DbfilenameShelf(filename[, flag='c'[, protocol=None[, writeback=False]]])\u00b6 A subclass of Shelf which accepts a filename instead of a dict-like object.  The underlying file will be opened using anydbm.open().  By default, the file will be created and opened for both read and write.  The optional flag parameter has the same interpretation as for the open() function.  The optional protocol and writeback parameters have the same interpretation as for the Shelf class.    11.4.2. Example\u00b6 To summarize the interface (key is a string, data is an arbitrary object): import shelve  d = shelve.open(filename) # open -- file may get suffix added by low-level                           # library  d[key] = data   # store data at key (overwrites old data if                 # using an existing key) data = d[key]   # retrieve a COPY of data at key (raise KeyError if no                 # such key) del d[key]      # delete data stored at key (raises KeyError                 # if no such key) flag = d.has_key(key)   # true if the key exists klist = d.keys() # a list of all existing keys (slow!)  # as d was opened WITHOUT writeback=True, beware: d[&#39;xx&#39;] = range(4)  # this works as expected, but... d[&#39;xx&#39;].append(5)   # *this doesn&#39;t!* -- d[&#39;xx&#39;] is STILL range(4)!  # having opened d without writeback=True, you need to code carefully: temp = d[&#39;xx&#39;]      # extracts the copy temp.append(5)      # mutates the copy d[&#39;xx&#39;] = temp      # stores the copy right back, to persist it  # or, d=shelve.open(filename,writeback=True) would let you just code # d[&#39;xx&#39;].append(5) and have it work as expected, BUT it would also # consume more memory and make the d.close() operation slower.  d.close()       # close it    See also  Module anydbm Generic interface to dbm-style databases. Module bsddb BSD db database interface. Module dbhash Thin layer around the bsddb which provides an open() function like the other database modules. Module dbm Standard Unix database interface. Module dumbdbm Portable implementation of the dbm interface. Module gdbm GNU database interface, based on the dbm interface. Module pickle Object serialization used by shelve. Module cPickle High-performance version of pickle."},{"url":"http:\/\/docs.python.org\/library\/shelve.html#shelve.BsdDbShelf","title":"shelve.BsdDbShelf","description":""},{"url":"http:\/\/docs.python.org\/library\/shelve.html#shelve.DbfilenameShelf","title":"shelve.DbfilenameShelf","description":""},{"url":"http:\/\/docs.python.org\/library\/shelve.html#shelve.open","title":"shelve.open","description":""},{"url":"http:\/\/docs.python.org\/library\/shelve.html#shelve.Shelf","title":"shelve.Shelf","description":""},{"url":"http:\/\/docs.python.org\/library\/shelve.html#shelve.Shelf.close","title":"shelve.Shelf.close","description":""},{"url":"http:\/\/docs.python.org\/library\/shelve.html#shelve.Shelf.sync","title":"shelve.Shelf.sync","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html","title":"pickle","description":"11.1. pickle &#8212; Python object serialization\u00b6 The pickle module implements a fundamental, but powerful algorithm for serializing and de-serializing a Python object structure.  &#8220;Pickling&#8221; is the process whereby a Python object hierarchy is converted into a byte stream, and &#8220;unpickling&#8221; is the inverse operation, whereby a byte stream is converted back into an object hierarchy.  Pickling (and unpickling) is alternatively known as &#8220;serialization&#8221;, &#8220;marshalling,&#8221; [1] or &#8220;flattening&#8221;, however, to avoid confusion, the terms used here are &#8220;pickling&#8221; and &#8220;unpickling&#8221;. This documentation describes both the pickle module and the cPickle module.  Warning The pickle module is not intended to be secure against erroneous or maliciously constructed data.  Never unpickle data received from an untrusted or unauthenticated source.   11.1.1. Relationship to other Python modules\u00b6 The pickle module has an optimized cousin called the cPickle module.  As its name implies, cPickle is written in C, so it can be up to 1000 times faster than pickle.  However it does not support subclassing of the Pickler() and Unpickler() classes, because in cPickle these are functions, not classes.  Most applications have no need for this functionality, and can benefit from the improved performance of cPickle. Other than that, the interfaces of the two modules are nearly identical; the common interface is described in this manual and differences are pointed out where necessary.  In the following discussions, we use the term &#8220;pickle&#8221; to collectively describe the pickle and cPickle modules. The data streams the two modules produce are guaranteed to be interchangeable. Python has a more primitive serialization module called marshal, but in general pickle should always be the preferred way to serialize Python objects.  marshal exists primarily to support Python&#8217;s .pyc files. The pickle module differs from marshal in several significant ways:  The pickle module keeps track of the objects it has already serialized, so that later references to the same object won&#8217;t be serialized again. marshal doesn&#8217;t do this. This has implications both for recursive objects and object sharing.  Recursive objects are objects that contain references to themselves.  These are not handled by marshal, and in fact, attempting to marshal recursive objects will crash your Python interpreter.  Object sharing happens when there are multiple references to the same object in different places in the object hierarchy being serialized.  pickle stores such objects only once, and ensures that all other references point to the master copy.  Shared objects remain shared, which can be very important for mutable objects.  marshal cannot be used to serialize user-defined classes and their instances.  pickle can save and restore class instances transparently, however the class definition must be importable and live in the same module as when the object was stored.  The marshal serialization format is not guaranteed to be portable across Python versions.  Because its primary job in life is to support .pyc files, the Python implementers reserve the right to change the serialization format in non-backwards compatible ways should the need arise. The pickle serialization format is guaranteed to be backwards compatible across Python releases.   Note that serialization is a more primitive notion than persistence; although pickle reads and writes file objects, it does not handle the issue of naming persistent objects, nor the (even more complicated) issue of concurrent access to persistent objects.  The pickle module can transform a complex object into a byte stream and it can transform the byte stream into an object with the same internal structure.  Perhaps the most obvious thing to do with these byte streams is to write them onto a file, but it is also conceivable to send them across a network or store them in a database.  The module shelve provides a simple interface to pickle and unpickle objects on DBM-style database files.   11.1.2. Data stream format\u00b6 The data format used by pickle is Python-specific.  This has the advantage that there are no restrictions imposed by external standards such as XDR (which can&#8217;t represent pointer sharing); however it means that non-Python programs may not be able to reconstruct pickled Python objects. By default, the pickle data format uses a printable ASCII representation. This is slightly more voluminous than a binary representation.  The big advantage of using printable ASCII (and of some other characteristics of pickle&#8216;s representation) is that for debugging or recovery purposes it is possible for a human to read the pickled file with a standard text editor. There are currently 3 different protocols which can be used for pickling.  Protocol version 0 is the original ASCII protocol and is backwards compatible with earlier versions of Python. Protocol version 1 is the old binary format which is also compatible with earlier versions of Python. Protocol version 2 was introduced in Python 2.3.  It provides much more efficient pickling of new-style classes.  Refer to PEP 307 for more information. If a protocol is not specified, protocol 0 is used. If protocol is specified as a negative value or HIGHEST_PROTOCOL, the highest protocol version available will be used.  Changed in version 2.3: Introduced the protocol parameter. A binary format, which is slightly more efficient, can be chosen by specifying a protocol version >= 1.   11.1.3. Usage\u00b6 To serialize an object hierarchy, you first create a pickler, then you call the pickler&#8217;s dump() method.  To de-serialize a data stream, you first create an unpickler, then you call the unpickler&#8217;s load() method.  The pickle module provides the following constant:   pickle.HIGHEST_PROTOCOL\u00b6 The highest protocol version available.  This value can be passed as a protocol value.  New in version 2.3.    Note Be sure to always open pickle files created with protocols >= 1 in binary mode. For the old ASCII-based pickle protocol 0 you can use either text mode or binary mode as long as you stay consistent. A pickle file written with protocol 0 in binary mode will contain lone linefeeds as line terminators and therefore will look &#8220;funny&#8221; when viewed in Notepad or other editors which do not support this format.  The pickle module provides the following functions to make the pickling process more convenient:   pickle.dump(obj, file[, protocol])\u00b6 Write a pickled representation of obj to the open file object file.  This is equivalent to Pickler(file, protocol).dump(obj). If the protocol parameter is omitted, protocol 0 is used. If protocol is specified as a negative value or HIGHEST_PROTOCOL, the highest protocol version will be used.  Changed in version 2.3: Introduced the protocol parameter. file must have a write() method that accepts a single string argument. It can thus be a file object opened for writing, a StringIO object, or any other custom object that meets this interface.     pickle.load(file)\u00b6 Read a string from the open file object file and interpret it as a pickle data stream, reconstructing and returning the original object hierarchy.  This is equivalent to Unpickler(file).load(). file must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments.  Both methods should return a string.  Thus file can be a file object opened for reading, a StringIO object, or any other custom object that meets this interface. This function automatically determines whether the data stream was written in binary mode or not.     pickle.dumps(obj[, protocol])\u00b6 Return the pickled representation of the object as a string, instead of writing it to a file. If the protocol parameter is omitted, protocol 0 is used. If protocol is specified as a negative value or HIGHEST_PROTOCOL, the highest protocol version will be used.  Changed in version 2.3: The protocol parameter was added.     pickle.loads(string)\u00b6 Read a pickled object hierarchy from a string.  Characters in the string past the pickled object&#8217;s representation are ignored.  The pickle module also defines three exceptions:   exception pickle.PickleError\u00b6 A common base class for the other exceptions defined below.  This inherits from Exception.    exception pickle.PicklingError\u00b6 This exception is raised when an unpicklable object is passed to the dump() method.    exception pickle.UnpicklingError\u00b6 This exception is raised when there is a problem unpickling an object. Note that other exceptions may also be raised during unpickling, including (but not necessarily limited to) AttributeError, EOFError, ImportError, and IndexError.  The pickle module also exports two callables [2], Pickler and Unpickler:   class pickle.Pickler(file[, protocol])\u00b6 This takes a file-like object to which it will write a pickle data stream. If the protocol parameter is omitted, protocol 0 is used. If protocol is specified as a negative value or HIGHEST_PROTOCOL, the highest protocol version will be used.  Changed in version 2.3: Introduced the protocol parameter. file must have a write() method that accepts a single string argument. It can thus be an open file object, a StringIO object, or any other custom object that meets this interface. Pickler objects define one (or two) public methods:   dump(obj)\u00b6 Write a pickled representation of obj to the open file object given in the constructor.  Either the binary or ASCII format will be used, depending on the value of the protocol argument passed to the constructor.    clear_memo()\u00b6 Clears the pickler&#8217;s &#8220;memo&#8221;.  The memo is the data structure that remembers which objects the pickler has already seen, so that shared or recursive objects pickled by reference and not by value.  This method is useful when re-using picklers.  Note Prior to Python 2.3, clear_memo() was only available on the picklers created by cPickle.  In the pickle module, picklers have an instance variable called memo which is a Python dictionary.  So to clear the memo for a pickle module pickler, you could do the following: mypickler.memo.clear()   Code that does not need to support older versions of Python should simply use clear_memo().      It is possible to make multiple calls to the dump() method of the same Pickler instance.  These must then be matched to the same number of calls to the load() method of the corresponding Unpickler instance.  If the same object is pickled by multiple dump() calls, the load() will all yield references to the same object. [3] Unpickler objects are defined as:   class pickle.Unpickler(file)\u00b6 This takes a file-like object from which it will read a pickle data stream. This class automatically determines whether the data stream was written in binary mode or not, so it does not need a flag as in the Pickler factory. file must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments.  Both methods should return a string.  Thus file can be a file object opened for reading, a StringIO object, or any other custom object that meets this interface. Unpickler objects have one (or two) public methods:   load()\u00b6 Read a pickled object representation from the open file object given in the constructor, and return the reconstituted object hierarchy specified therein. This method automatically determines whether the data stream was written in binary mode or not.     noload()\u00b6 This is just like load() except that it doesn&#8217;t actually create any objects.  This is useful primarily for finding what&#8217;s called &#8220;persistent ids&#8221; that may be referenced in a pickle data stream.  See section The pickle protocol below for more details. Note: the noload() method is currently only available on Unpickler objects created with the cPickle module. pickle module Unpicklers do not have the noload() method.       11.1.4. What can be pickled and unpickled?\u00b6 The following types can be pickled:  None, True, and False integers, long integers, floating point numbers, complex numbers normal and Unicode strings tuples, lists, sets, and dictionaries containing only picklable objects functions defined at the top level of a module built-in functions defined at the top level of a module classes that are defined at the top level of a module instances of such classes whose __dict__ or __setstate__() is picklable  (see section The pickle protocol for details)  Attempts to pickle unpicklable objects will raise the PicklingError exception; when this happens, an unspecified number of bytes may have already been written to the underlying file. Trying to pickle a highly recursive data structure may exceed the maximum recursion depth, a RuntimeError will be raised in this case. You can carefully raise this limit with sys.setrecursionlimit(). Note that functions (built-in and user-defined) are pickled by &#8220;fully qualified&#8221; name reference, not by value.  This means that only the function name is pickled, along with the name of the module the function is defined in.  Neither the function&#8217;s code, nor any of its function attributes are pickled.  Thus the defining module must be importable in the unpickling environment, and the module must contain the named object, otherwise an exception will be raised. [4] Similarly, classes are pickled by named reference, so the same restrictions in the unpickling environment apply.  Note that none of the class&#8217;s code or data is pickled, so in the following example the class attribute attr is not restored in the unpickling environment: class Foo:     attr = &#39;a class attr&#39;  picklestring = pickle.dumps(Foo)   These restrictions are why picklable functions and classes must be defined in the top level of a module. Similarly, when class instances are pickled, their class&#8217;s code and data are not pickled along with them.  Only the instance data are pickled.  This is done on purpose, so you can fix bugs in a class or add methods to the class and still load objects that were created with an earlier version of the class.  If you plan to have long-lived objects that will see many versions of a class, it may be worthwhile to put a version number in the objects so that suitable conversions can be made by the class&#8217;s __setstate__() method.   11.1.5. The pickle protocol\u00b6 This section describes the &#8220;pickling protocol&#8221; that defines the interface between the pickler\/unpickler and the objects that are being serialized.  This protocol provides a standard way for you to define, customize, and control how your objects are serialized and de-serialized.  The description in this section doesn&#8217;t cover specific customizations that you can employ to make the unpickling environment slightly safer from untrusted pickle data streams; see section Subclassing Unpicklers for more details.  11.1.5.1. Pickling and unpickling normal class instances\u00b6   object.__getinitargs__()\u00b6 When a pickled class instance is unpickled, its __init__() method is normally not invoked.  If it is desirable that the __init__() method be called on unpickling, an old-style class can define a method __getinitargs__(), which should return a tuple containing the arguments to be passed to the class constructor (__init__() for example).  The __getinitargs__() method is called at pickle time; the tuple it returns is incorporated in the pickle for the instance.    object.__getnewargs__()\u00b6 New-style types can provide a __getnewargs__() method that is used for protocol 2.  Implementing this method is needed if the type establishes some internal invariants when the instance is created, or if the memory allocation is affected by the values passed to the __new__() method for the type (as it is for tuples and strings).  Instances of a new-style class C are created using obj = C.__new__(C, *args)   where args is the result of calling __getnewargs__() on the original object; if there is no __getnewargs__(), an empty tuple is assumed.     object.__getstate__()\u00b6 Classes can further influence how their instances are pickled; if the class defines the method __getstate__(), it is called and the return state is pickled as the contents for the instance, instead of the contents of the instance&#8217;s dictionary.  If there is no __getstate__() method, the instance&#8217;s __dict__ is pickled.    object.__setstate__(state)\u00b6 Upon unpickling, if the class also defines the method __setstate__(), it is called with the unpickled state. [5] If there is no __setstate__() method, the pickled state must be a dictionary and its items are assigned to the new instance&#8217;s dictionary.  If a class defines both __getstate__() and __setstate__(), the state object needn&#8217;t be a dictionary and these methods can do what they want. [6]  Note For new-style classes, if __getstate__() returns a false value, the __setstate__() method will not be called.     Note At unpickling time, some methods like __getattr__(), __getattribute__(), or __setattr__() may be called upon the instance.  In case those methods rely on some internal invariant being true, the type should implement either __getinitargs__() or __getnewargs__() to establish such an invariant; otherwise, neither __new__() nor __init__() will be called.    11.1.5.2. Pickling and unpickling extension types\u00b6   object.__reduce__()\u00b6 When the Pickler encounters an object of a type it knows nothing about &#8212; such as an extension type &#8212; it looks in two places for a hint of how to pickle it.  One alternative is for the object to implement a __reduce__() method.  If provided, at pickling time __reduce__() will be called with no arguments, and it must return either a string or a tuple. If a string is returned, it names a global variable whose contents are pickled as normal.  The string returned by __reduce__() should be the object&#8217;s local name relative to its module; the pickle module searches the module namespace to determine the object&#8217;s module. When a tuple is returned, it must be between two and five elements long. Optional elements can either be omitted, or None can be provided as their value.  The contents of this tuple are pickled as normal and used to reconstruct the object at unpickling time.  The semantics of each element are:  A callable object that will be called to create the initial version of the object.  The next element of the tuple will provide arguments for this callable, and later elements provide additional state information that will subsequently be used to fully reconstruct the pickled data. In the unpickling environment this object must be either a class, a callable registered as a &#8220;safe constructor&#8221; (see below), or it must have an attribute __safe_for_unpickling__ with a true value. Otherwise, an UnpicklingError will be raised in the unpickling environment.  Note that as usual, the callable itself is pickled by name.  A tuple of arguments for the callable object.  Changed in version 2.5: Formerly, this argument could also be None.  Optionally, the object&#8217;s state, which will be passed to the object&#8217;s __setstate__() method as described in section Pickling and unpickling normal class instances.  If the object has no __setstate__() method, then, as above, the value must be a dictionary and it will be added to the object&#8217;s __dict__.  Optionally, an iterator (and not a sequence) yielding successive list items.  These list items will be pickled, and appended to the object using either obj.append(item) or obj.extend(list_of_items).  This is primarily used for list subclasses, but may be used by other classes as long as they have append() and extend() methods with the appropriate signature.  (Whether append() or extend() is used depends on which pickle protocol version is used as well as the number of items to append, so both must be supported.)  Optionally, an iterator (not a sequence) yielding successive dictionary items, which should be tuples of the form (key, value).  These items will be pickled and stored to the object using obj[key] = value. This is primarily used for dictionary subclasses, but may be used by other classes as long as they implement __setitem__().       object.__reduce_ex__(protocol)\u00b6 It is sometimes useful to know the protocol version when implementing __reduce__().  This can be done by implementing a method named __reduce_ex__() instead of __reduce__(). __reduce_ex__(), when it exists, is called in preference over __reduce__() (you may still provide __reduce__() for backwards compatibility).  The __reduce_ex__() method will be called with a single integer argument, the protocol version. The object class implements both __reduce__() and __reduce_ex__(); however, if a subclass overrides __reduce__() but not __reduce_ex__(), the __reduce_ex__() implementation detects this and calls __reduce__().   An alternative to implementing a __reduce__() method on the object to be pickled, is to register the callable with the copy_reg module.  This module provides a way for programs to register &#8220;reduction functions&#8221; and constructors for user-defined types.   Reduction functions have the same semantics and interface as the __reduce__() method described above, except that they are called with a single argument, the object to be pickled. The registered constructor is deemed a &#8220;safe constructor&#8221; for purposes of unpickling as described above.   11.1.5.3. Pickling and unpickling external objects\u00b6 For the benefit of object persistence, the pickle module supports the notion of a reference to an object outside the pickled data stream.  Such objects are referenced by a &#8220;persistent id&#8221;, which is just an arbitrary string of printable ASCII characters. The resolution of such names is not defined by the pickle module; it will delegate this resolution to user defined functions on the pickler and unpickler. [7] To define external persistent id resolution, you need to set the persistent_id attribute of the pickler object and the persistent_load attribute of the unpickler object. To pickle objects that have an external persistent id, the pickler must have a custom persistent_id() method that takes an object as an argument and returns either None or the persistent id for that object.  When None is returned, the pickler simply pickles the object as normal.  When a persistent id string is returned, the pickler will pickle that string, along with a marker so that the unpickler will recognize the string as a persistent id. To unpickle external objects, the unpickler must have a custom persistent_load() function that takes a persistent id string and returns the referenced object. Here&#8217;s a silly example that might shed more light: import pickle from cStringIO import StringIO  src = StringIO() p = pickle.Pickler(src)  def persistent_id(obj):     if hasattr(obj, &#39;x&#39;):         return &#39;the value %d&#39;  obj.x     else:         return None  p.persistent_id = persistent_id  class Integer:     def __init__(self, x):         self.x = x     def __str__(self):         return &#39;My name is integer %d&#39;  self.x  i = Integer(7) print i p.dump(i)  datastream = src.getvalue() print repr(datastream) dst = StringIO(datastream)  up = pickle.Unpickler(dst)  class FancyInteger(Integer):     def __str__(self):         return &#39;I am the integer %d&#39;  self.x  def persistent_load(persid):     if persid.startswith(&#39;the value &#39;):         value = int(persid.split()[2])         return FancyInteger(value)     else:         raise pickle.UnpicklingError, &#39;Invalid persistent id&#39;  up.persistent_load = persistent_load  j = up.load() print j   In the cPickle module, the unpickler&#8217;s persistent_load attribute can also be set to a Python list, in which case, when the unpickler reaches a persistent id, the persistent id string will simply be appended to this list. This functionality exists so that a pickle data stream can be &#8220;sniffed&#8221; for object references without actually instantiating all the objects in a pickle. [8]  Setting persistent_load to a list is usually used in conjunction with the noload() method on the Unpickler.    11.1.6. Subclassing Unpicklers\u00b6 By default, unpickling will import any class that it finds in the pickle data. You can control exactly what gets unpickled and what gets called by customizing your unpickler.  Unfortunately, exactly how you do this is different depending on whether you&#8217;re using pickle or cPickle. [9] In the pickle module, you need to derive a subclass from Unpickler, overriding the load_global() method. load_global() should read two lines from the pickle data stream where the first line will the name of the module containing the class and the second line will be the name of the instance&#8217;s class.  It then looks up the class, possibly importing the module and digging out the attribute, then it appends what it finds to the unpickler&#8217;s stack.  Later on, this class will be assigned to the __class__ attribute of an empty class, as a way of magically creating an instance without calling its class&#8217;s __init__(). Your job (should you choose to accept it), would be to have load_global() push onto the unpickler&#8217;s stack, a known safe version of any class you deem safe to unpickle. It is up to you to produce such a class.  Or you could raise an error if you want to disallow all unpickling of instances.  If this sounds like a hack, you&#8217;re right.  Refer to the source code to make this work. Things are a little cleaner with cPickle, but not by much. To control what gets unpickled, you can set the unpickler&#8217;s find_global attribute to a function or None.  If it is None then any attempts to unpickle instances will raise an UnpicklingError.  If it is a function, then it should accept a module name and a class name, and return the corresponding class object.  It is responsible for looking up the class and performing any necessary imports, and it may raise an error to prevent instances of the class from being unpickled. The moral of the story is that you should be really careful about the source of the strings your application unpickles.   11.1.7. Example\u00b6 For the simplest code, use the dump() and load() functions.  Note that a self-referencing list is pickled and restored correctly. import pickle  data1 = {&#39;a&#39;: [1, 2.0, 3, 4+6j],          &#39;b&#39;: (&#39;string&#39;, u&#39;Unicode string&#39;),          &#39;c&#39;: None}  selfref_list = [1, 2, 3] selfref_list.append(selfref_list)  output = open(&#39;data.pkl&#39;, &#39;wb&#39;)  # Pickle dictionary using protocol 0. pickle.dump(data1, output)  # Pickle the list using the highest protocol available. pickle.dump(selfref_list, output, -1)  output.close()   The following example reads the resulting pickled data.  When reading a pickle-containing file, you should open the file in binary mode because you can&#8217;t be sure if the ASCII or binary format was used. import pprint, pickle  pkl_file = open(&#39;data.pkl&#39;, &#39;rb&#39;)  data1 = pickle.load(pkl_file) pprint.pprint(data1)  data2 = pickle.load(pkl_file) pprint.pprint(data2)  pkl_file.close()   Here&#8217;s a larger example that shows how to modify pickling behavior for a class. The TextReader class opens a text file, and returns the line number and line contents each time its readline() method is called. If a TextReader instance is pickled, all attributes except the file object member are saved. When the instance is unpickled, the file is reopened, and reading resumes from the last location. The __setstate__() and __getstate__() methods are used to implement this behavior. #!\/usr\/local\/bin\/python  class TextReader:     \"\"\"Print and number lines in a text file.\"\"\"     def __init__(self, file):         self.file = file         self.fh = open(file)         self.lineno = 0      def readline(self):         self.lineno = self.lineno + 1         line = self.fh.readline()         if not line:             return None         if line.endswith(\"\\n\"):             line = line[:-1]         return \"%d: %s\"  (self.lineno, line)      def __getstate__(self):         odict = self.__dict__.copy() # copy the dict since we change it         del odict[&#39;fh&#39;]              # remove filehandle entry         return odict      def __setstate__(self, dict):         fh = open(dict[&#39;file&#39;])      # reopen file         count = dict[&#39;lineno&#39;]       # read from file...         while count:                 # until line count is restored             fh.readline()             count = count - 1         self.__dict__.update(dict)   # update attributes         self.fh = fh                 # save the file object   A sample usage might be something like this: >>> import TextReader >>> obj = TextReader.TextReader(\"TextReader.py\") >>> obj.readline() &#39;1: #!\/usr\/local\/bin\/python&#39; >>> obj.readline() &#39;2: &#39; >>> obj.readline() &#39;3: class TextReader:&#39; >>> import pickle >>> pickle.dump(obj, open(&#39;save.p&#39;, &#39;wb&#39;))   If you want to see that pickle works across Python processes, start another Python session, before continuing.  What follows can happen from either the same process or a new process. >>> import pickle >>> reader = pickle.load(open(&#39;save.p&#39;, &#39;rb&#39;)) >>> reader.readline() &#39;4:     \"\"\"Print and number lines in a text file.\"\"\"&#39;    See also  Module copy_reg Pickle interface constructor registration for extension types. Module shelve Indexed databases of objects; uses pickle. Module copy Shallow and deep object copying. Module marshal High-performance serialization of built-in types.     11.2. cPickle &#8212; A faster pickle\u00b6 The cPickle module supports serialization and de-serialization of Python objects, providing an interface and functionality nearly identical to the pickle module.  There are several differences, the most important being performance and subclassability. First, cPickle can be up to 1000 times faster than pickle because the former is implemented in C.  Second, in the cPickle module the callables Pickler() and Unpickler() are functions, not classes. This means that you cannot use them to derive custom pickling and unpickling subclasses.  Most applications have no need for this functionality and should benefit from the greatly improved performance of the cPickle module. The pickle data stream produced by pickle and cPickle are identical, so it is possible to use pickle and cPickle interchangeably with existing pickles. [10] There are additional minor differences in API between cPickle and pickle, however for most applications, they are interchangeable.  More documentation is provided in the pickle module documentation, which includes a list of the documented differences. Footnotes    [1]Don&#8217;t confuse this with the marshal module      [2]In the pickle module these callables are classes, which you could subclass to customize the behavior.  However, in the cPickle module these callables are factory functions and so cannot be subclassed.  One common reason to subclass is to control what objects can actually be unpickled.  See section Subclassing Unpicklers for more details.      [3]Warning: this is intended for pickling multiple objects without intervening modifications to the objects or their parts.  If you modify an object and then pickle it again using the same Pickler instance, the object is not pickled again &#8212; a reference to it is pickled and the Unpickler will return the old value, not the modified one. There are two problems here: (1) detecting changes, and (2) marshalling a minimal set of changes.  Garbage Collection may also become a problem here.      [4]The exception raised will likely be an ImportError or an AttributeError but it could be something else.      [5]These methods can also be used to implement copying class instances.      [6]This protocol is also used by the shallow and deep copying operations defined in the copy module.      [7]The actual mechanism for associating these user defined functions is slightly different for pickle and cPickle.  The description given here works the same for both implementations.  Users of the pickle module could also use subclassing to effect the same results, overriding the persistent_id() and persistent_load() methods in the derived classes.      [8]We&#8217;ll leave you with the image of Guido and Jim sitting around sniffing pickles in their living rooms.      [9]A word of caution: the mechanisms described here use internal attributes and methods, which are subject to change in future versions of Python.  We intend to someday provide a common interface for controlling this behavior, which will work in either pickle or cPickle.      [10]Since the pickle data format is actually a tiny stack-oriented programming language, and some freedom is taken in the encodings of certain objects, it is possible that the two modules produce different data streams for the same input objects.  However it is guaranteed that they will always be able to read each other&#8217;s data streams."},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle_object.__getinitargs__","title":"object.__getinitargs__","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle_object.__getnewargs__","title":"object.__getnewargs__","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle_object.__getstate__","title":"object.__getstate__","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle_object.__reduce__","title":"object.__reduce__","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle_object.__reduce_ex__","title":"object.__reduce_ex__","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle_object.__setstate__","title":"object.__setstate__","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.dump","title":"pickle.dump","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.dumps","title":"pickle.dumps","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.load","title":"pickle.load","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.loads","title":"pickle.loads","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.Pickler","title":"pickle.Pickler","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.Pickler.clear_memo","title":"pickle.Pickler.clear_memo","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.Pickler.dump","title":"pickle.Pickler.dump","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.Unpickler","title":"pickle.Unpickler","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.Unpickler.load","title":"pickle.Unpickler.load","description":""},{"url":"http:\/\/docs.python.org\/library\/pickle.html#pickle.Unpickler.noload","title":"pickle.Unpickler.noload","description":""},{"url":"http:\/\/docs.python.org\/library\/whichdb.html","title":"whichdb","description":"11.7. whichdb &#8212; Guess which DBM module created a database\u00b6  Note The whichdb module&#8217;s only function has been put into the dbm module in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  The single function in this module attempts to guess which of the several simple database modules available&#8211;dbm, gdbm, or dbhash&#8211;should be used to open a given file.   whichdb.whichdb(filename)\u00b6 Returns one of the following values: None if the file can&#8217;t be opened because it&#8217;s unreadable or doesn&#8217;t exist; the empty string ('') if the file&#8217;s format can&#8217;t be guessed; or a string containing the required module name, such as 'dbm' or 'gdbm'."},{"url":"http:\/\/docs.python.org\/library\/whichdb.html#whichdb.whichdb","title":"whichdb.whichdb","description":""},{"url":"http:\/\/docs.python.org\/library\/dbm.html","title":"dbm","description":"11.8. dbm &#8212; Simple &#8220;database&#8221; interface\u00b6 Platforms: Unix  Note The dbm module has been renamed to dbm.ndbm in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  The dbm module provides an interface to the Unix &#8220;(n)dbm&#8221; library.  Dbm objects behave like mappings (dictionaries), except that keys and values are always strings. Printing a dbm object doesn&#8217;t print the keys and values, and the items() and values() methods are not supported. This module can be used with the &#8220;classic&#8221; ndbm interface, the BSD DB compatibility interface, or the GNU GDBM compatibility interface. On Unix, the configure script will attempt to locate the appropriate header file to simplify building this module. The module defines the following:   exception dbm.error\u00b6 Raised on dbm-specific errors, such as I\/O errors. KeyError is raised for general mapping errors like specifying an incorrect key.    dbm.library\u00b6 Name of the ndbm implementation library used.    dbm.open(filename[, flag[, mode]])\u00b6 Open a dbm database and return a dbm object.  The filename argument is the name of the database file (without the .dir or .pag extensions; note that the BSD DB implementation of the interface will append the extension .db and only create one file). The optional flag argument must be one of these values:       Value Meaning    'r' Open existing database for reading only (default)  'w' Open existing database for reading and writing  'c' Open database for reading and writing, creating it if it doesn&#8217;t exist  'n' Always create a new, empty database, open for reading and writing    The optional mode argument is the Unix mode of the file, used only when the database has to be created.  It defaults to octal 0666 (and will be modified by the prevailing umask).    See also  Module anydbm Generic interface to dbm-style databases. Module gdbm Similar interface to the GNU GDBM library. Module whichdb Utility module used to determine the type of an existing database."},{"url":"http:\/\/docs.python.org\/library\/dbm.html#dbm.open","title":"dbm.open","description":""},{"url":"http:\/\/docs.python.org\/library\/gdbm.html","title":"gdbm","description":"11.9. gdbm &#8212; GNU&#8217;s reinterpretation of dbm\u00b6 Platforms: Unix  Note The gdbm module has been renamed to dbm.gnu in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  This module is quite similar to the dbm module, but uses gdbm instead to provide some additional functionality.  Please note that the file formats created by gdbm and dbm are incompatible. The gdbm module provides an interface to the GNU DBM library.  gdbm objects behave like mappings (dictionaries), except that keys and values are always strings. Printing a gdbm object doesn&#8217;t print the keys and values, and the items() and values() methods are not supported. The module defines the following constant and functions:   exception gdbm.error\u00b6 Raised on gdbm-specific errors, such as I\/O errors. KeyError is raised for general mapping errors like specifying an incorrect key.    gdbm.open(filename[, flag[, mode]])\u00b6 Open a gdbm database and return a gdbm object.  The filename argument is the name of the database file. The optional flag argument can be:       Value Meaning    'r' Open existing database for reading only (default)  'w' Open existing database for reading and writing  'c' Open database for reading and writing, creating it if it doesn&#8217;t exist  'n' Always create a new, empty database, open for reading and writing    The following additional characters may be appended to the flag to control how the database is opened:       Value Meaning    'f' Open the database in fast mode.  Writes to the database will not be synchronized.  's' Synchronized mode. This will cause changes to the database to be immediately written to the file.  'u' Do not lock database.    Not all flags are valid for all versions of gdbm.  The module constant open_flags is a string of supported flag characters.  The exception error is raised if an invalid flag is specified. The optional mode argument is the Unix mode of the file, used only when the database has to be created.  It defaults to octal 0666.   In addition to the dictionary-like methods, gdbm objects have the following methods:   gdbm.firstkey()\u00b6 It&#8217;s possible to loop over every key in the database using this method  and the nextkey() method.  The traversal is ordered by gdbm&#8216;s internal hash values, and won&#8217;t be sorted by the key values.  This method returns the starting key.    gdbm.nextkey(key)\u00b6 Returns the key that follows key in the traversal.  The following code prints every key in the database db, without having to create a list in memory that contains them all: k = db.firstkey() while k != None:     print k     k = db.nextkey(k)       gdbm.reorganize()\u00b6 If you have carried out a lot of deletions and would like to shrink the space used by the gdbm file, this routine will reorganize the database.  gdbm will not shorten the length of a database file except by using this reorganization; otherwise, deleted file space will be kept and reused as new (key, value) pairs are added.    gdbm.sync()\u00b6 When the database has been opened in fast mode, this method forces any unwritten data to be written to the disk.   See also  Module anydbm Generic interface to dbm-style databases. Module whichdb Utility module used to determine the type of an existing database."},{"url":"http:\/\/docs.python.org\/library\/gdbm.html#gdbm.firstkey","title":"gdbm.firstkey","description":""},{"url":"http:\/\/docs.python.org\/library\/gdbm.html#gdbm.nextkey","title":"gdbm.nextkey","description":""},{"url":"http:\/\/docs.python.org\/library\/gdbm.html#gdbm.open","title":"gdbm.open","description":""},{"url":"http:\/\/docs.python.org\/library\/gdbm.html#gdbm.reorganize","title":"gdbm.reorganize","description":""},{"url":"http:\/\/docs.python.org\/library\/gdbm.html#gdbm.sync","title":"gdbm.sync","description":""},{"url":"http:\/\/docs.python.org\/library\/dumbdbm.html","title":"dumbdbm","description":"11.12. dumbdbm &#8212; Portable DBM implementation\u00b6  Note The dumbdbm module has been renamed to dbm.dumb in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.   Note The dumbdbm module is intended as a last resort fallback for the anydbm module when no more robust module is available. The dumbdbm module is not written for speed and is not nearly as heavily used as the other database modules.  The dumbdbm module provides a persistent dictionary-like interface which is written entirely in Python.  Unlike other modules such as gdbm and bsddb, no external library is required.  As with other persistent mappings, the keys and values must always be strings. The module defines the following:   exception dumbdbm.error\u00b6 Raised on dumbdbm-specific errors, such as I\/O errors.  KeyError is raised for general mapping errors like specifying an incorrect key.    dumbdbm.open(filename[, flag[, mode]])\u00b6 Open a dumbdbm database and return a dumbdbm object.  The filename argument is the basename of the database file (without any specific extensions).  When a dumbdbm database is created, files with .dat and .dir extensions are created. The optional flag argument is currently ignored; the database is always opened for update, and will be created if it does not exist. The optional mode argument is the Unix mode of the file, used only when the database has to be created.  It defaults to octal 0666 (and will be modified by the prevailing umask).  Changed in version 2.2: The mode argument was ignored in earlier versions.    See also  Module anydbm Generic interface to dbm-style databases. Module dbm Similar interface to the DBM\/NDBM library. Module gdbm Similar interface to the GNU GDBM library. Module shelve Persistence module which stores non-string data. Module whichdb Utility module used to determine the type of an existing database.    11.12.1. Dumbdbm Objects\u00b6 In addition to the methods provided by the UserDict.DictMixin class, dumbdbm objects provide the following methods.   dumbdbm.sync()\u00b6 Synchronize the on-disk directory and data files.  This method is called by the sync() method of Shelve objects."},{"url":"http:\/\/docs.python.org\/library\/dumbdbm.html#dumbdbm.dumbdbm.sync","title":"dumbdbm.dumbdbm.sync","description":""},{"url":"http:\/\/docs.python.org\/library\/dumbdbm.html#dumbdbm.open","title":"dumbdbm.open","description":""},{"url":"http:\/\/docs.python.org\/library\/dbhash.html","title":"dbhash","description":"11.10. dbhash &#8212; DBM-style interface to the BSD database library\u00b6  Deprecated since version 2.6: The dbhash module has been deprecated for removal in Python 3.0. The dbhash module provides a function to open databases using the BSD db library.  This module mirrors the interface of the other Python database modules that provide access to DBM-style databases.  The bsddb module is required  to use dbhash. This module provides an exception and a function:   exception dbhash.error\u00b6 Exception raised on database errors other than KeyError.  It is a synonym for bsddb.error.    dbhash.open(path[, flag[, mode]])\u00b6 Open a db database and return the database object.  The path argument is the name of the database file. The flag argument can be:       Value Meaning    'r' Open existing database for reading only (default)  'w' Open existing database for reading and writing  'c' Open database for reading and writing, creating it if it doesn&#8217;t exist  'n' Always create a new, empty database, open for reading and writing    For platforms on which the BSD db library supports locking, an 'l' can be appended to indicate that locking should be used. The optional mode parameter is used to indicate the Unix permission bits that should be set if a new database must be created; this will be masked by the current umask value for the process.    See also  Module anydbm Generic interface to dbm-style databases. Module bsddb Lower-level interface to the BSD db library. Module whichdb Utility module used to determine the type of an existing database.    11.10.1. Database Objects\u00b6 The database objects returned by open() provide the methods  common to all the DBM-style databases and mapping objects.  The following methods are available in addition to the standard methods.   dbhash.first()\u00b6 It&#8217;s possible to loop over every key\/value pair in the database using this method and the next() method.  The traversal is ordered by the databases internal hash values, and won&#8217;t be sorted by the key values.  This method returns the starting key.    dbhash.last()\u00b6 Return the last key\/value pair in a database traversal.  This may be used to begin a reverse-order traversal; see previous().    dbhash.next()\u00b6 Returns the key next key\/value pair in a database traversal.  The following code prints every key in the database db, without having to create a list in memory that contains them all: print db.first() for i in xrange(1, len(db)):     print db.next()       dbhash.previous()\u00b6 Returns the previous key\/value pair in a forward-traversal of the database. In conjunction with last(), this may be used to implement a reverse-order traversal.    dbhash.sync()\u00b6 This method forces any unwritten data to be written to the disk."},{"url":"http:\/\/docs.python.org\/library\/dbhash.html#dbhash.dbhash.first","title":"dbhash.dbhash.first","description":""},{"url":"http:\/\/docs.python.org\/library\/dbhash.html#dbhash.dbhash.last","title":"dbhash.dbhash.last","description":""},{"url":"http:\/\/docs.python.org\/library\/dbhash.html#dbhash.dbhash.next","title":"dbhash.dbhash.next","description":""},{"url":"http:\/\/docs.python.org\/library\/dbhash.html#dbhash.dbhash.previous","title":"dbhash.dbhash.previous","description":""},{"url":"http:\/\/docs.python.org\/library\/dbhash.html#dbhash.dbhash.sync","title":"dbhash.dbhash.sync","description":""},{"url":"http:\/\/docs.python.org\/library\/dbhash.html#dbhash.open","title":"dbhash.open","description":""},{"url":"http:\/\/docs.python.org\/library\/gzip.html","title":"gzip","description":"12.2. gzip &#8212; Support for gzip files\u00b6 Source code: Lib\/gzip.py  This module provides a simple interface to compress and decompress files just like the GNU programs gzip and gunzip would. The data compression is provided by the zlib module. The gzip module provides the GzipFile class which is modeled after Python&#8217;s File Object. The GzipFile class reads and writes gzip-format files, automatically compressing or decompressing the data so that it looks like an ordinary file object. Note that additional file formats which can be decompressed by the gzip and gunzip programs, such  as those produced by compress and pack, are not supported by this module. For other archive formats, see the bz2, zipfile, and tarfile modules. The module defines the following items:   class gzip.GzipFile([filename[, mode[, compresslevel[, fileobj[, mtime]]]]])\u00b6 Constructor for the GzipFile class, which simulates most of the methods of a file object, with the exception of the readinto() and truncate() methods.  At least one of fileobj and filename must be given a non-trivial value. The new class instance is based on fileobj, which can be a regular file, a StringIO object, or any other object which simulates a file.  It defaults to None, in which case filename is opened to provide a file object. When fileobj is not None, the filename argument is only used to be included in the gzip file header, which may includes the original filename of the uncompressed file.  It defaults to the filename of fileobj, if discernible; otherwise, it defaults to the empty string, and in this case the original filename is not included in the header. The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', or 'wb', depending on whether the file will be read or written.  The default is the mode of fileobj if discernible; otherwise, the default is 'rb'. If not given, the &#8216;b&#8217; flag will be added to the mode to ensure the file is opened in binary mode for cross-platform portability. The compresslevel argument is an integer from 1 to 9 controlling the level of compression; 1 is fastest and produces the least compression, and 9 is slowest and produces the most compression.  The default is 9. The mtime argument is an optional numeric timestamp to be written to the stream when compressing.  All gzip compressed streams are required to contain a timestamp.  If omitted or None, the current time is used.  This module ignores the timestamp when decompressing; however, some programs, such as gunzip, make use of it. The format of the timestamp is the same as that of the return value of time.time() and of the st_mtime attribute of the object returned by os.stat(). Calling a GzipFile object&#8217;s close() method does not close fileobj, since you might wish to append more material after the compressed data.  This also allows you to pass a StringIO object opened for writing as fileobj, and retrieve the resulting memory buffer using the StringIO object&#8217;s getvalue() method. GzipFile supports iteration and the with statement.  Changed in version 2.7: Support for the with statement was added.  Changed in version 2.7: Support for zero-padded files was added.     gzip.open(filename[, mode[, compresslevel]])\u00b6 This is a shorthand for GzipFile(filename, mode, compresslevel). The filename argument is required; mode defaults to 'rb' and compresslevel defaults to 9.   12.2.1. Examples of usage\u00b6 Example of how to read a compressed file: import gzip f = gzip.open(&#39;\/home\/joe\/file.txt.gz&#39;, &#39;rb&#39;) file_content = f.read() f.close()   Example of how to create a compressed GZIP file: import gzip content = \"Lots of content here\" f = gzip.open(&#39;\/home\/joe\/file.txt.gz&#39;, &#39;wb&#39;) f.write(content) f.close()   Example of how to GZIP compress an existing file: import gzip f_in = open(&#39;\/home\/joe\/file.txt&#39;, &#39;rb&#39;) f_out = gzip.open(&#39;\/home\/joe\/file.txt.gz&#39;, &#39;wb&#39;) f_out.writelines(f_in) f_out.close() f_in.close()    See also  Module zlib The basic data compression module needed to support the gzip file format."},{"url":"http:\/\/docs.python.org\/library\/gzip.html#gzip.GzipFile","title":"gzip.GzipFile","description":""},{"url":"http:\/\/docs.python.org\/library\/gzip.html#gzip.open","title":"gzip.open","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html","title":"zlib","description":"12.1. zlib &#8212; Compression compatible with gzip\u00b6 For applications that require data compression, the functions in this module allow compression and decompression, using the zlib library. The zlib library has its own home page at http:\/\/www.zlib.net.   There are known incompatibilities between the Python module and versions of the zlib library earlier than 1.1.3; 1.1.3 has a security vulnerability, so we recommend using 1.1.4 or later. zlib&#8217;s functions have many options and often need to be used in a particular order.  This documentation doesn&#8217;t attempt to cover all of the permutations; consult the zlib manual at http:\/\/www.zlib.net\/manual.html for authoritative information. For reading and writing .gz files see the gzip module. For other archive formats, see the bz2, zipfile, and tarfile modules. The available exception and functions in this module are:   exception zlib.error\u00b6 Exception raised on compression and decompression errors.    zlib.adler32(data[, value])\u00b6 Computes a Adler-32 checksum of data.  (An Adler-32 checksum is almost as reliable as a CRC32 but can be computed much more quickly.)  If value is present, it is used as the starting value of the checksum; otherwise, a fixed default value is used.  This allows computing a running checksum over the concatenation of several inputs.  The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures.  Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm. This function always returns an integer object.    Note To generate the same numeric value across all Python versions and platforms use adler32(data) & 0xffffffff.  If you are only using the checksum in packed binary format this is not necessary as the return value is the correct 32bit binary representation regardless of sign.   Changed in version 2.6: The return value is in the range [-2**31, 2**31-1] regardless of platform.  In older versions the value is signed on some platforms and unsigned on others.  Changed in version 3.0: The return value is unsigned and in the range [0, 2**32-1] regardless of platform.   zlib.compress(string[, level])\u00b6 Compresses the data in string, returning a string contained compressed data. level is an integer from 1 to 9 controlling the level of compression; 1 is fastest and produces the least compression, 9 is slowest and produces the most.  The default value is 6.  Raises the error exception if any error occurs.    zlib.compressobj([level])\u00b6 Returns a compression object, to be used for compressing data streams that won&#8217;t fit into memory at once.  level is an integer from 1 to 9 controlling the level of compression; 1 is fastest and produces the least compression, 9 is slowest and produces the most.  The default value is 6.    zlib.crc32(data[, value])\u00b6 Computes a CRC (Cyclic Redundancy Check)  checksum of data. If value is present, it is used as the starting value of the checksum; otherwise, a fixed default value is used.  This allows computing a running checksum over the concatenation of several inputs.  The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures.  Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm. This function always returns an integer object.    Note To generate the same numeric value across all Python versions and platforms use crc32(data) & 0xffffffff.  If you are only using the checksum in packed binary format this is not necessary as the return value is the correct 32bit binary representation regardless of sign.   Changed in version 2.6: The return value is in the range [-2**31, 2**31-1] regardless of platform.  In older versions the value would be signed on some platforms and unsigned on others.  Changed in version 3.0: The return value is unsigned and in the range [0, 2**32-1] regardless of platform.   zlib.decompress(string[, wbits[, bufsize]])\u00b6 Decompresses the data in string, returning a string containing the uncompressed data.  The wbits parameter controls the size of the window buffer, and is discussed further below. If bufsize is given, it is used as the initial size of the output buffer.  Raises the error exception if any error occurs. The absolute value of wbits is the base two logarithm of the size of the history buffer (the &#8220;window size&#8221;) used when compressing data.  Its absolute value should be between 8 and 15 for the most recent versions of the zlib library, larger values resulting in better compression at the expense of greater memory usage.  When decompressing a stream, wbits must not be smaller than the size originally used to compress the stream; using a too-small value will result in an exception. The default value is therefore the highest value, 15.  When wbits is negative, the standard gzip header is suppressed. bufsize is the initial size of the buffer used to hold decompressed data.  If more space is required, the buffer size will be increased as needed, so you don&#8217;t have to get this value exactly right; tuning it will only save a few calls to malloc().  The default size is 16384.     zlib.decompressobj([wbits])\u00b6 Returns a decompression object, to be used for decompressing data streams that won&#8217;t fit into memory at once.  The wbits parameter controls the size of the window buffer.  Compression objects support the following methods:   Compress.compress(string)\u00b6 Compress string, returning a string containing compressed data for at least part of the data in string.  This data should be concatenated to the output produced by any preceding calls to the compress() method.  Some input may be kept in internal buffers for later processing.    Compress.flush([mode])\u00b6 All pending input is processed, and a string containing the remaining compressed output is returned.  mode can be selected from the constants Z_SYNC_FLUSH,  Z_FULL_FLUSH,  or  Z_FINISH, defaulting to Z_FINISH.  Z_SYNC_FLUSH and Z_FULL_FLUSH allow compressing further strings of data, while Z_FINISH finishes the compressed stream and  prevents compressing any more data.  After calling flush() with mode set to Z_FINISH, the compress() method cannot be called again; the only realistic action is to delete the object.    Compress.copy()\u00b6 Returns a copy of the compression object.  This can be used to efficiently compress a set of data that share a common initial prefix.  New in version 2.5.   Decompression objects support the following methods, and two attributes:   Decompress.unused_data\u00b6 A string which contains any bytes past the end of the compressed data. That is, this remains \"\" until the last byte that contains compression data is available.  If the whole string turned out to contain compressed data, this is \"\", the empty string. The only way to determine where a string of compressed data ends is by actually decompressing it.  This means that when compressed data is contained part of a larger file, you can only find the end of it by reading data and feeding it followed by some non-empty string into a decompression object&#8217;s decompress() method until the unused_data attribute is no longer the empty string.     Decompress.unconsumed_tail\u00b6 A string that contains any data that was not consumed by the last decompress() call because it exceeded the limit for the uncompressed data buffer.  This data has not yet been seen by the zlib machinery, so you must feed it (possibly with further data concatenated to it) back to a subsequent decompress() method call in order to get correct output.    Decompress.decompress(string[, max_length])\u00b6 Decompress string, returning a string containing the uncompressed data corresponding to at least part of the data in string.  This data should be concatenated to the output produced by any preceding calls to the decompress() method.  Some of the input data may be preserved in internal buffers for later processing. If the optional parameter max_length is supplied then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed; and unconsumed data will be stored in the attribute unconsumed_tail. This string must be passed to a subsequent call to decompress() if decompression is to continue.  If max_length is not supplied then the whole input is decompressed, and unconsumed_tail is an empty string.     Decompress.flush([length])\u00b6 All pending input is processed, and a string containing the remaining uncompressed output is returned.  After calling flush(), the decompress() method cannot be called again; the only realistic action is to delete the object. The optional parameter length sets the initial size of the output buffer.     Decompress.copy()\u00b6 Returns a copy of the decompression object.  This can be used to save the state of the decompressor midway through the data stream in order to speed up random seeks into the stream at a future point.  New in version 2.5.    See also  Module gzip Reading and writing gzip-format files. http:\/\/www.zlib.net The zlib library home page. http:\/\/www.zlib.net\/manual.html The zlib manual explains  the semantics and usage of the library&#8217;s many functions."},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.adler32","title":"zlib.adler32","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.compress","title":"zlib.compress","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.Compress.compress","title":"zlib.Compress.compress","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.Compress.copy","title":"zlib.Compress.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.Compress.flush","title":"zlib.Compress.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.compressobj","title":"zlib.compressobj","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.crc32","title":"zlib.crc32","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.decompress","title":"zlib.decompress","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.Decompress.copy","title":"zlib.Decompress.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.Decompress.decompress","title":"zlib.Decompress.decompress","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.Decompress.flush","title":"zlib.Decompress.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/zlib.html#zlib.decompressobj","title":"zlib.decompressobj","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html","title":"bsddb","description":"11.11. bsddb &#8212; Interface to Berkeley DB library\u00b6  Deprecated since version 2.6: The bsddb module has been deprecated for removal in Python 3.0. The bsddb module provides an interface to the Berkeley DB library.  Users can create hash, btree or record based library files using the appropriate open call. Bsddb objects behave generally like dictionaries.  Keys and values must be strings, however, so to use other objects as keys or to store other kinds of objects the user must serialize them somehow, typically using marshal.dumps() or  pickle.dumps(). The bsddb module requires a Berkeley DB library version from 4.0 thru 4.7.  See also  http:\/\/www.jcea.es\/programacion\/pybsddb.htm The website with documentation for the bsddb.db Python Berkeley DB interface that closely mirrors the object oriented interface provided in Berkeley DB 4.x itself. http:\/\/www.oracle.com\/database\/berkeley-db\/ The Berkeley DB library.   A more modern DB, DBEnv and DBSequence object interface is available in the bsddb.db module which closely matches the Berkeley DB C API documented at the above URLs.  Additional features provided by the bsddb.db API include fine tuning, transactions, logging, and multiprocess concurrent database access. The following is a description of the legacy bsddb interface compatible with the old Python bsddb module.  Starting in Python 2.5 this interface should be safe for multithreaded access.  The bsddb.db API is recommended for threading users as it provides better control. The bsddb module defines the following functions that create objects that access the appropriate type of Berkeley DB file.  The first two arguments of each function are the same.  For ease of portability, only the first two arguments should be used in most instances.   bsddb.hashopen(filename[, flag[, mode[, pgsize[, ffactor[, nelem[, cachesize[, lorder[, hflags]]]]]]]])\u00b6 Open the hash format file named filename.  Files never intended to be preserved on disk may be created by passing None as the  filename.  The optional flag identifies the mode used to open the file.  It may be 'r' (read only), 'w' (read-write) , 'c' (read-write - create if necessary; the default) or 'n' (read-write - truncate to zero length).  The other arguments are rarely used and are just passed to the low-level dbopen() function.  Consult the Berkeley DB documentation for their use and interpretation.    bsddb.btopen(filename[, flag[, mode[, btflags[, cachesize[, maxkeypage[, minkeypage[, pgsize[, lorder]]]]]]]])\u00b6 Open the btree format file named filename.  Files never intended  to be preserved on disk may be created by passing None as the  filename.  The optional flag identifies the mode used to open the file.  It may be 'r' (read only), 'w' (read-write), 'c' (read-write - create if necessary; the default) or 'n' (read-write - truncate to zero length).  The other arguments are rarely used and are just passed to the low-level dbopen function. Consult the Berkeley DB documentation for their use and interpretation.    bsddb.rnopen(filename[, flag[, mode[, rnflags[, cachesize[, pgsize[, lorder[, rlen[, delim[, source[, pad]]]]]]]]]])\u00b6 Open a DB record format file named filename.  Files never intended  to be preserved on disk may be created by passing None as the  filename.  The optional flag identifies the mode used to open the file.  It may be 'r' (read only), 'w' (read-write), 'c' (read-write - create if necessary; the default) or 'n' (read-write - truncate to zero length).  The other arguments are rarely used and are just passed to the low-level dbopen function. Consult the Berkeley DB documentation for their use and interpretation.   Note Beginning in 2.3 some Unix versions of Python may have a bsddb185 module. This is present only to allow backwards compatibility with systems which ship with the old Berkeley DB 1.85 database library.  The bsddb185 module should never be used directly in new code. The module has been removed in Python 3.0.  If you find you still need it look in PyPI.   See also  Module dbhash DBM-style interface to the bsddb    11.11.1. Hash, BTree and Record Objects\u00b6 Once instantiated, hash, btree and record objects support the same methods as dictionaries.  In addition, they support the methods listed below.  Changed in version 2.3.1: Added dictionary methods.   bsddbobject.close()\u00b6 Close the underlying file.  The object can no longer be accessed.  Since there is no open open() method for these objects, to open the file again a new bsddb module open function must be called.    bsddbobject.keys()\u00b6 Return the list of keys contained in the DB file.  The order of the list is unspecified and should not be relied on.  In particular, the order of the list returned is different for different file formats.    bsddbobject.has_key(key)\u00b6 Return 1 if the DB file contains the argument as a key.    bsddbobject.set_location(key)\u00b6 Set the cursor to the item indicated by key and return a tuple containing the key and its value.  For binary tree databases (opened using btopen()), if key does not actually exist in the database, the cursor will point to the next item in sorted order and return that key and value.  For other databases, KeyError will be raised if key is not found in the database.    bsddbobject.first()\u00b6 Set the cursor to the first item in the DB file and return it.  The order of keys in the file is unspecified, except in the case of B-Tree databases. This method raises bsddb.error if the database is empty.    bsddbobject.next()\u00b6 Set the cursor to the next item in the DB file and return it.  The order of keys in the file is unspecified, except in the case of B-Tree databases.    bsddbobject.previous()\u00b6 Set the cursor to the previous item in the DB file and return it.  The order of keys in the file is unspecified, except in the case of B-Tree databases.  This is not supported on hashtable databases (those opened with hashopen()).    bsddbobject.last()\u00b6 Set the cursor to the last item in the DB file and return it.  The order of keys in the file is unspecified.  This is not supported on hashtable databases (those opened with hashopen()). This method raises bsddb.error if the database is empty.    bsddbobject.sync()\u00b6 Synchronize the database on disk.  Example: >>> import bsddb >>> db = bsddb.btopen(&#39;\/tmp\/spam.db&#39;, &#39;c&#39;) >>> for i in range(10): db[&#39;%d&#39;i] = &#39;%d&#39; (i*i) ... >>> db[&#39;3&#39;] &#39;9&#39; >>> db.keys() [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;] >>> db.first() (&#39;0&#39;, &#39;0&#39;) >>> db.next() (&#39;1&#39;, &#39;1&#39;) >>> db.last() (&#39;9&#39;, &#39;81&#39;) >>> db.set_location(&#39;2&#39;) (&#39;2&#39;, &#39;4&#39;) >>> db.previous() (&#39;1&#39;, &#39;1&#39;) >>> for k, v in db.iteritems(): ...     print k, v 0 0 1 1 2 4 3 9 4 16 5 25 6 36 7 49 8 64 9 81 >>> &#39;8&#39; in db True >>> db.sync() 0"},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.close","title":"bsddb.bsddbobject.close","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.first","title":"bsddb.bsddbobject.first","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.has_key","title":"bsddb.bsddbobject.has_key","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.keys","title":"bsddb.bsddbobject.keys","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.last","title":"bsddb.bsddbobject.last","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.next","title":"bsddb.bsddbobject.next","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.previous","title":"bsddb.bsddbobject.previous","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.set_location","title":"bsddb.bsddbobject.set_location","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.bsddbobject.sync","title":"bsddb.bsddbobject.sync","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.btopen","title":"bsddb.btopen","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.hashopen","title":"bsddb.hashopen","description":""},{"url":"http:\/\/docs.python.org\/library\/bsddb.html#bsddb.rnopen","title":"bsddb.rnopen","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html","title":"bz2","description":"12.3. bz2 &#8212; Compression compatible with bzip2\u00b6  New in version 2.3. This module provides a comprehensive interface for the bz2 compression library. It implements a complete file interface, one-shot (de)compression functions, and types for sequential (de)compression. For other archive formats, see the gzip, zipfile, and tarfile modules. Here is a summary of the features offered by the bz2 module:  BZ2File class implements a complete file interface, including readline(), readlines(), writelines(), seek(), etc; BZ2File class implements emulated seek() support; BZ2File class implements universal newline support; BZ2File class offers an optimized line iteration using the readahead algorithm borrowed from file objects; Sequential (de)compression supported by BZ2Compressor and BZ2Decompressor classes; One-shot (de)compression supported by compress() and decompress() functions; Thread safety uses individual locking mechanism.   12.3.1. (De)compression of files\u00b6 Handling of compressed files is offered by the BZ2File class.   class bz2.BZ2File(filename[, mode[, buffering[, compresslevel]]])\u00b6 Open a bz2 file. Mode can be either 'r' or 'w', for reading (default) or writing. When opened for writing, the file will be created if it doesn&#8217;t exist, and truncated otherwise. If buffering is given, 0 means unbuffered, and larger numbers specify the buffer size; the default is 0. If compresslevel is given, it must be a number between 1 and 9; the default is 9. Add a 'U' to mode to open the file for input with universal newline support. Any line ending in the input file will be seen as a '\\n' in Python.  Also, a file so opened gains the attribute newlines; the value for this attribute is one of None (no newline read yet), '\\r', '\\n', '\\r\\n' or a tuple containing all the newline types seen. Universal newlines are available only when reading. Instances support iteration in the same way as normal file instances. BZ2File supports the with statement.  Changed in version 2.7: Support for the with statement was added.   close()\u00b6 Close the file. Sets data attribute closed to true. A closed file cannot be used for further I\/O operations. close() may be called more than once without error.    read([size])\u00b6 Read at most size uncompressed bytes, returned as a string. If the size argument is negative or omitted, read until EOF is reached.    readline([size])\u00b6 Return the next line from the file, as a string, retaining newline. A non-negative size argument limits the maximum number of bytes to return (an incomplete line may be returned then). Return an empty string at EOF.    readlines([size])\u00b6 Return a list of lines read. The optional size argument, if given, is an approximate bound on the total number of bytes in the lines returned.    xreadlines()\u00b6 For backward compatibility. BZ2File objects now include the performance optimizations previously implemented in the xreadlines module.  Deprecated since version 2.3: This exists only for compatibility with the method by this name on file objects, which is deprecated.  Use for line in file instead.     seek(offset[, whence])\u00b6 Move to new file position. Argument offset is a byte count. Optional argument whence defaults to os.SEEK_SET or 0 (offset from start of file; offset should be >= 0); other values are os.SEEK_CUR or 1 (move relative to current position; offset can be positive or negative), and os.SEEK_END or 2 (move relative to end of file; offset is usually negative, although many platforms allow seeking beyond the end of a file). Note that seeking of bz2 files is emulated, and depending on the parameters the operation may be extremely slow.     tell()\u00b6 Return the current file position, an integer (may be a long integer).    write(data)\u00b6 Write string data to file. Note that due to buffering, close() may be needed before the file on disk reflects the data written.    writelines(sequence_of_strings)\u00b6 Write the sequence of strings to the file. Note that newlines are not added. The sequence can be any iterable object producing strings. This is equivalent to calling write() for each string.      12.3.2. Sequential (de)compression\u00b6 Sequential compression and decompression is done using the classes BZ2Compressor and BZ2Decompressor.   class bz2.BZ2Compressor([compresslevel])\u00b6 Create a new compressor object. This object may be used to compress data sequentially. If you want to compress data in one shot, use the compress() function instead. The compresslevel parameter, if given, must be a number between 1 and 9; the default is 9.   compress(data)\u00b6 Provide more data to the compressor object. It will return chunks of compressed data whenever possible. When you&#8217;ve finished providing data to compress, call the flush() method to finish the compression process, and return what is left in internal buffers.    flush()\u00b6 Finish the compression process and return what is left in internal buffers. You must not use the compressor object after calling this method.      class bz2.BZ2Decompressor\u00b6 Create a new decompressor object. This object may be used to decompress data sequentially. If you want to decompress data in one shot, use the decompress() function instead.   decompress(data)\u00b6 Provide more data to the decompressor object. It will return chunks of decompressed data whenever possible. If you try to decompress data after the end of stream is found, EOFError will be raised. If any data was found after the end of stream, it&#8217;ll be ignored and saved in unused_data attribute.      12.3.3. One-shot (de)compression\u00b6 One-shot compression and decompression is provided through the compress() and decompress() functions.   bz2.compress(data[, compresslevel])\u00b6 Compress data in one shot. If you want to compress data sequentially, use an instance of BZ2Compressor instead. The compresslevel parameter, if given, must be a number between 1 and 9; the default is 9.    bz2.decompress(data)\u00b6 Decompress data in one shot. If you want to decompress data sequentially, use an instance of BZ2Decompressor instead."},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2Compressor","title":"bz2.BZ2Compressor","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2Compressor.compress","title":"bz2.BZ2Compressor.compress","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2Compressor.flush","title":"bz2.BZ2Compressor.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2Decompressor","title":"bz2.BZ2Decompressor","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2Decompressor.decompress","title":"bz2.BZ2Decompressor.decompress","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File","title":"bz2.BZ2File","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.close","title":"bz2.BZ2File.close","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.read","title":"bz2.BZ2File.read","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.readline","title":"bz2.BZ2File.readline","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.readlines","title":"bz2.BZ2File.readlines","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.seek","title":"bz2.BZ2File.seek","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.tell","title":"bz2.BZ2File.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.write","title":"bz2.BZ2File.write","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.writelines","title":"bz2.BZ2File.writelines","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.BZ2File.xreadlines","title":"bz2.BZ2File.xreadlines","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.compress","title":"bz2.compress","description":""},{"url":"http:\/\/docs.python.org\/library\/bz2.html#bz2.decompress","title":"bz2.decompress","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html","title":"zipfile","description":"12.4. zipfile &#8212; Work with ZIP archives\u00b6  New in version 1.6. Source code: Lib\/zipfile.py  The ZIP file format is a common archive and compression standard. This module provides tools to create, read, write, append, and list a ZIP file.  Any advanced use of this module will require an understanding of the format, as defined in PKZIP Application Note. This module does not currently handle multi-disk ZIP files. It can handle ZIP files that use the ZIP64 extensions (that is ZIP files that are more than 4 GByte in size).  It supports decryption of encrypted files in ZIP archives, but it currently cannot create an encrypted file.  Decryption is extremely slow as it is implemented in native Python rather than C. For other archive formats, see the bz2, gzip, and tarfile modules. The module defines the following items:   exception zipfile.BadZipfile\u00b6 The error raised for bad ZIP files (old name: zipfile.error).    exception zipfile.LargeZipFile\u00b6 The error raised when a ZIP file would require ZIP64 functionality but that has not been enabled.    class zipfile.ZipFile The class for reading and writing ZIP files.  See section ZipFile Objects for constructor details.    class zipfile.PyZipFile\u00b6 Class for creating ZIP archives containing Python libraries.    class zipfile.ZipInfo([filename[, date_time]])\u00b6 Class used to represent information about a member of an archive. Instances of this class are returned by the getinfo() and infolist() methods of ZipFile objects.  Most users of the zipfile module will not need to create these, but only use those created by this module. filename should be the full name of the archive member, and date_time should be a tuple containing six fields which describe the time of the last modification to the file; the fields are described in section ZipInfo Objects.    zipfile.is_zipfile(filename)\u00b6 Returns True if filename is a valid ZIP file based on its magic number, otherwise returns False.  filename may be a file or file-like object too.  Changed in version 2.7: Support for file and file-like objects.     zipfile.ZIP_STORED\u00b6 The numeric constant for an uncompressed archive member.    zipfile.ZIP_DEFLATED\u00b6 The numeric constant for the usual ZIP compression method.  This requires the zlib module.  No other compression methods are currently supported.   See also  PKZIP Application Note Documentation on the ZIP file format by Phil Katz, the creator of the format and algorithms used. Info-ZIP Home Page Information about the Info-ZIP project&#8217;s ZIP archive programs and development libraries.    12.4.1. ZipFile Objects\u00b6   class zipfile.ZipFile(file[, mode[, compression[, allowZip64]]])\u00b6 Open a ZIP file, where file can be either a path to a file (a string) or a file-like object.  The mode parameter should be 'r' to read an existing file, 'w' to truncate and write a new file, or 'a' to append to an existing file.  If mode is 'a' and file refers to an existing ZIP file, then additional files are added to it.  If file does not refer to a ZIP file, then a new ZIP archive is appended to the file.  This is meant for adding a ZIP archive to another file (such as python.exe).  Changed in version 2.6: If mode is a and the file does not exist at all, it is created. compression is the ZIP compression method to use when writing the archive, and should be ZIP_STORED or ZIP_DEFLATED; unrecognized values will cause RuntimeError to be raised.  If ZIP_DEFLATED is specified but the zlib module is not available, RuntimeError is also raised. The default is ZIP_STORED.  If allowZip64 is True zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 2 GB. If it is  false (the default) zipfile will raise an exception when the ZIP file would require ZIP64 extensions. ZIP64 extensions are disabled by default because the default zip and unzip commands on Unix (the InfoZIP utilities) don&#8217;t support these extensions.  Changed in version 2.7.1: If the file is created with mode 'a' or 'w' and then close()d without adding any files to the archive, the appropriate ZIP structures for an empty archive will be written to the file. ZipFile is also a context manager and therefore supports the with statement.  In the example, myzip is closed after the with statement&#8217;s suite is finished&#8212;even if an exception occurs: with ZipFile(&#39;spam.zip&#39;, &#39;w&#39;) as myzip:     myzip.write(&#39;eggs.txt&#39;)    New in version 2.7: Added the ability to use ZipFile as a context manager.     ZipFile.close()\u00b6 Close the archive file.  You must call close() before exiting your program or essential records will not be written.    ZipFile.getinfo(name)\u00b6 Return a ZipInfo object with information about the archive member name.  Calling getinfo() for a name not currently contained in the archive will raise a KeyError.    ZipFile.infolist()\u00b6 Return a list containing a ZipInfo object for each member of the archive.  The objects are in the same order as their entries in the actual ZIP file on disk if an existing archive was opened.    ZipFile.namelist()\u00b6 Return a list of archive members by name.    ZipFile.open(name[, mode[, pwd]])\u00b6 Extract a member from the archive as a file-like object (ZipExtFile). name is the name of the file in the archive, or a ZipInfo object. The mode parameter, if included, must be one of the following: 'r' (the  default), 'U', or 'rU'. Choosing 'U' or  'rU' will enable universal newline support in the read-only object. pwd is the password used for encrypted files. Calling  open() on a closed ZipFile will raise a  RuntimeError.  Note The file-like object is read-only and provides the following methods: read(), readline(), readlines(), __iter__(), next().   Note If the ZipFile was created by passing in a file-like object as the  first argument to the constructor, then the object returned by open() shares the ZipFile&#8217;s file pointer.  Under these  circumstances, the object returned by open() should not  be used after any additional operations are performed on the  ZipFile object.  If the ZipFile was created by passing in a string (the filename) as the first argument to the constructor, then  open() will create a new file object that will be held by the ZipExtFile, allowing it to operate independently of the  ZipFile.   Note The open(), read() and extract() methods can take a filename or a ZipInfo object.  You will appreciate this when trying to read a ZIP file that contains members with duplicate names.   New in version 2.6.     ZipFile.extract(member[, path[, pwd]])\u00b6 Extract a member from the archive to the current working directory; member must be its full name or a ZipInfo object).  Its file information is extracted as accurately as possible.  path specifies a different directory to extract to.  member can be a filename or a ZipInfo object. pwd is the password used for encrypted files.  New in version 2.6.     ZipFile.extractall([path[, members[, pwd]]])\u00b6 Extract all members from the archive to the current working directory.  path specifies a different directory to extract to.  members is optional and must be a subset of the list returned by namelist().  pwd is the password used for encrypted files.  Warning Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of path, e.g. members that have absolute filenames starting with \"\/\" or filenames with two dots \"..\".   New in version 2.6.     ZipFile.printdir()\u00b6 Print a table of contents for the archive to sys.stdout.    ZipFile.setpassword(pwd)\u00b6 Set pwd as default password to extract encrypted files.  New in version 2.6.     ZipFile.read(name[, pwd])\u00b6 Return the bytes of the file name in the archive.  name is the name of the file in the archive, or a ZipInfo object.  The archive must be open for read or append. pwd is the password used for encrypted  files and, if specified, it will override the default password set with setpassword().  Calling read() on a closed ZipFile  will raise a RuntimeError.  Changed in version 2.6: pwd was added, and name can now be a ZipInfo object.     ZipFile.testzip()\u00b6 Read all the files in the archive and check their CRC&#8217;s and file headers. Return the name of the first bad file, or else return None. Calling testzip() on a closed ZipFile will raise a RuntimeError.    ZipFile.write(filename[, arcname[, compress_type]])\u00b6 Write the file named filename to the archive, giving it the archive name arcname (by default, this will be the same as filename, but without a drive letter and with leading path separators removed).  If given, compress_type overrides the value given for the compression parameter to the constructor for the new entry.  The archive must be open with mode 'w' or 'a' &#8211; calling write() on a ZipFile created with mode 'r' will raise a RuntimeError.  Calling  write() on a closed ZipFile will raise a RuntimeError.  Note There is no official file name encoding for ZIP files. If you have unicode file names, you must convert them to byte strings in your desired encoding before passing them to write(). WinZip interprets all file names as encoded in CP437, also known as DOS Latin.   Note Archive names should be relative to the archive root, that is, they should not start with a path separator.   Note If arcname (or filename, if arcname is  not given) contains a null byte, the name of the file in the archive will be truncated at the null byte.      ZipFile.writestr(zinfo_or_arcname, bytes[, compress_type])\u00b6 Write the string bytes to the archive; zinfo_or_arcname is either the file name it will be given in the archive, or a ZipInfo instance.  If it&#8217;s an instance, at least the filename, date, and time must be given.  If it&#8217;s a name, the date and time is set to the current date and time. The archive must be opened with mode 'w' or 'a' &#8211; calling  writestr() on a ZipFile created with mode 'r'  will raise a RuntimeError.  Calling writestr() on a closed ZipFile will raise a RuntimeError. If given, compress_type overrides the value given for the compression parameter to the constructor for the new entry, or in the zinfo_or_arcname (if that is a ZipInfo instance).  Note When passing a ZipInfo instance as the zinfo_or_arcname parameter, the compression method used will be that specified in the compress_type member of the given ZipInfo instance.  By default, the ZipInfo constructor sets this member to ZIP_STORED.   Changed in version 2.7: The compression_type argument.   The following data attributes are also available:   ZipFile.debug\u00b6 The level of debug output to use.  This may be set from 0 (the default, no output) to 3 (the most output).  Debugging information is written to sys.stdout.    ZipFile.comment\u00b6 The comment text associated with the ZIP file.  If assigning a comment to a ZipFile instance created with mode &#8216;a&#8217; or &#8216;w&#8217;, this should be a string no longer than 65535 bytes.  Comments longer than this will be truncated in the written archive when ZipFile.close() is called.    12.4.2. PyZipFile Objects\u00b6 The PyZipFile constructor takes the same parameters as the ZipFile constructor.  Instances have one method in addition to those of ZipFile objects.   PyZipFile.writepy(pathname[, basename])\u00b6 Search for files *.py and add the corresponding file to the archive. The corresponding file is a *.pyo file if available, else a *.pyc file, compiling if necessary.  If the pathname is a file, the filename must end with .py, and just the (corresponding *.py[co]) file is added at the top level (no path information).  If the pathname is a file that does not end with .py, a RuntimeError will be raised.  If it is a directory, and the directory is not a package directory, then all the files *.py[co] are added at the top level.  If the directory is a package directory, then all *.py[co] are added under the package name as a file path, and if any subdirectories are package directories, all of these are added recursively.  basename is intended for internal use only.  The writepy() method makes archives with file names like this: string.pyc                                # Top level name test\/__init__.pyc                         # Package directory test\/test_support.pyc                          # Module test.test_support test\/bogus\/__init__.pyc                   # Subpackage directory test\/bogus\/myfile.pyc                     # Submodule test.bogus.myfile       12.4.3. ZipInfo Objects\u00b6 Instances of the ZipInfo class are returned by the getinfo() and infolist() methods of ZipFile objects.  Each object stores information about a single member of the ZIP archive. Instances have the following attributes:   ZipInfo.filename\u00b6 Name of the file in the archive.    ZipInfo.date_time\u00b6 The time and date of the last modification to the archive member.  This is a tuple of six values:       Index Value    0 Year (>= 1980)  1 Month (one-based)  2 Day of month (one-based)  3 Hours (zero-based)  4 Minutes (zero-based)  5 Seconds (zero-based)     Note The ZIP file format does not support timestamps before 1980.      ZipInfo.compress_type\u00b6 Type of compression for the archive member.    ZipInfo.comment\u00b6 Comment for the individual archive member.    ZipInfo.extra\u00b6 Expansion field data.  The PKZIP Application Note contains some comments on the internal structure of the data contained in this string.    ZipInfo.create_system\u00b6 System which created ZIP archive.    ZipInfo.create_version\u00b6 PKZIP version which created ZIP archive.    ZipInfo.extract_version\u00b6 PKZIP version needed to extract archive.    ZipInfo.reserved\u00b6 Must be zero.    ZipInfo.flag_bits\u00b6 ZIP flag bits.    ZipInfo.volume\u00b6 Volume number of file header.    ZipInfo.internal_attr\u00b6 Internal attributes.    ZipInfo.external_attr\u00b6 External file attributes.    ZipInfo.header_offset\u00b6 Byte offset to the file header.    ZipInfo.CRC\u00b6 CRC-32 of the uncompressed file.    ZipInfo.compress_size\u00b6 Size of the compressed data.    ZipInfo.file_size\u00b6 Size of the uncompressed file."},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.is_zipfile","title":"zipfile.is_zipfile","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.PyZipFile","title":"zipfile.PyZipFile","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.PyZipFile.writepy","title":"zipfile.PyZipFile.writepy","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile","title":"zipfile.ZipFile","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.close","title":"zipfile.ZipFile.close","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.extract","title":"zipfile.ZipFile.extract","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.extractall","title":"zipfile.ZipFile.extractall","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.getinfo","title":"zipfile.ZipFile.getinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.infolist","title":"zipfile.ZipFile.infolist","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.namelist","title":"zipfile.ZipFile.namelist","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.open","title":"zipfile.ZipFile.open","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.printdir","title":"zipfile.ZipFile.printdir","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.read","title":"zipfile.ZipFile.read","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.setpassword","title":"zipfile.ZipFile.setpassword","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.testzip","title":"zipfile.ZipFile.testzip","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.write","title":"zipfile.ZipFile.write","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipFile.writestr","title":"zipfile.ZipFile.writestr","description":""},{"url":"http:\/\/docs.python.org\/library\/zipfile.html#zipfile.ZipInfo","title":"zipfile.ZipInfo","description":""},{"url":"http:\/\/docs.python.org\/library\/robotparser.html","title":"robotparser","description":"13.3. robotparser &#8212;  Parser for robots.txt\u00b6  Note The robotparser module has been renamed urllib.robotparser in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  This module provides a single class, RobotFileParser, which answers questions about whether or not a particular user agent can fetch a URL on the Web site that published the robots.txt file.  For more details on the structure of robots.txt files, see http:\/\/www.robotstxt.org\/orig.html.   class robotparser.RobotFileParser\u00b6 This class provides a set of methods to read, parse and answer questions about a single robots.txt file.   set_url(url)\u00b6 Sets the URL referring to a robots.txt file.    read()\u00b6 Reads the robots.txt URL and feeds it to the parser.    parse(lines)\u00b6 Parses the lines argument.    can_fetch(useragent, url)\u00b6 Returns True if the useragent is allowed to fetch the url according to the rules contained in the parsed robots.txt file.    mtime()\u00b6 Returns the time the robots.txt file was last fetched.  This is useful for long-running web spiders that need to check for new robots.txt files periodically.    modified()\u00b6 Sets the time the robots.txt file was last fetched to the current time.    The following example demonstrates basic use of the RobotFileParser class. >>> import robotparser >>> rp = robotparser.RobotFileParser() >>> rp.set_url(\"http:\/\/www.musi-cal.com\/robots.txt\") >>> rp.read() >>> rp.can_fetch(\"*\", \"http:\/\/www.musi-cal.com\/cgi-bin\/search?city=San+Francisco\") False >>> rp.can_fetch(\"*\", \"http:\/\/www.musi-cal.com\/\") True"},{"url":"http:\/\/docs.python.org\/library\/robotparser.html#robotparser.RobotFileParser","title":"robotparser.RobotFileParser","description":""},{"url":"http:\/\/docs.python.org\/library\/robotparser.html#robotparser.RobotFileParser.can_fetch","title":"robotparser.RobotFileParser.can_fetch","description":""},{"url":"http:\/\/docs.python.org\/library\/robotparser.html#robotparser.RobotFileParser.modified","title":"robotparser.RobotFileParser.modified","description":""},{"url":"http:\/\/docs.python.org\/library\/robotparser.html#robotparser.RobotFileParser.mtime","title":"robotparser.RobotFileParser.mtime","description":""},{"url":"http:\/\/docs.python.org\/library\/robotparser.html#robotparser.RobotFileParser.parse","title":"robotparser.RobotFileParser.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/robotparser.html#robotparser.RobotFileParser.read","title":"robotparser.RobotFileParser.read","description":""},{"url":"http:\/\/docs.python.org\/library\/robotparser.html#robotparser.RobotFileParser.set_url","title":"robotparser.RobotFileParser.set_url","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html","title":"tarfile","description":"12.5. tarfile &#8212; Read and write tar archive files\u00b6  New in version 2.3. Source code: Lib\/tarfile.py  The tarfile module makes it possible to read and write tar archives, including those using gzip or bz2 compression. (.zip files can be read and written using the zipfile module.) Some facts and figures:  reads and writes gzip and bz2 compressed archives.  read\/write support for the POSIX.1-1988 (ustar) format.  read\/write support for the GNU tar format including longname and longlink extensions, read-only support for the sparse extension.  read\/write support for the POSIX.1-2001 (pax) format.  New in version 2.6.  handles directories, regular files, hardlinks, symbolic links, fifos, character devices and block devices and is able to acquire and restore file information like timestamp, access permissions and owner.     tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)\u00b6 Return a TarFile object for the pathname name. For detailed information on TarFile objects and the keyword arguments that are allowed, see TarFile Objects. mode has to be a string of the form 'filemode[:compression]', it defaults to 'r'. Here is a full list of mode combinations:       mode action    'r' or 'r:*' Open for reading with transparent compression (recommended).  'r:' Open for reading exclusively without compression.  'r:gz' Open for reading with gzip compression.  'r:bz2' Open for reading with bzip2 compression.  'a' or 'a:' Open for appending with no compression. The file is created if it does not exist.  'w' or 'w:' Open for uncompressed writing.  'w:gz' Open for gzip compressed writing.  'w:bz2' Open for bzip2 compressed writing.    Note that 'a:gz' or 'a:bz2' is not possible. If mode is not suitable to open a certain (compressed) file for reading, ReadError is raised. Use mode 'r' to avoid this.  If a compression method is not supported, CompressionError is raised. If fileobj is specified, it is used as an alternative to a file object opened for name. It is supposed to be at position 0. For special purposes, there is a second format for mode: 'filemode|[compression]'.  tarfile.open() will return a TarFile object that processes its data as a stream of blocks.  No random seeking will be done on the file. If given, fileobj may be any object that has a read() or write() method (depending on the mode). bufsize specifies the blocksize and defaults to 20 * 512 bytes. Use this variant in combination with e.g. sys.stdin, a socket file object or a tape device. However, such a TarFile object is limited in that it does not allow to be accessed randomly, see Examples.  The currently possible modes:       Mode Action    'r|*' Open a stream of tar blocks for reading with transparent compression.  'r|' Open a stream of uncompressed tar blocks for reading.  'r|gz' Open a gzip compressed stream for reading.  'r|bz2' Open a bzip2 compressed stream for reading.  'w|' Open an uncompressed stream for writing.  'w|gz' Open an gzip compressed stream for writing.  'w|bz2' Open an bzip2 compressed stream for writing.        class tarfile.TarFile\u00b6 Class for reading and writing tar archives. Do not use this class directly, better use tarfile.open() instead. See TarFile Objects.    tarfile.is_tarfile(name)\u00b6 Return True if name is a tar archive file, that the tarfile module can read.    class tarfile.TarFileCompat(filename, mode='r', compression=TAR_PLAIN)\u00b6 Class for limited access to tar archives with a zipfile-like interface. Please consult the documentation of the zipfile module for more details. compression must be one of the following constants:   TAR_PLAIN\u00b6 Constant for an uncompressed tar archive.    TAR_GZIPPED\u00b6 Constant for a gzip compressed tar archive.   Deprecated since version 2.6: The TarFileCompat class has been deprecated for removal in Python 3.0.     exception tarfile.TarError\u00b6 Base class for all tarfile exceptions.    exception tarfile.ReadError\u00b6 Is raised when a tar archive is opened, that either cannot be handled by the tarfile module or is somehow invalid.    exception tarfile.CompressionError\u00b6 Is raised when a compression method is not supported or when the data cannot be decoded properly.    exception tarfile.StreamError\u00b6 Is raised for the limitations that are typical for stream-like TarFile objects.    exception tarfile.ExtractError\u00b6 Is raised for non-fatal errors when using TarFile.extract(), but only if TarFile.errorlevel== 2.    exception tarfile.HeaderError\u00b6 Is raised by TarInfo.frombuf() if the buffer it gets is invalid.  New in version 2.6.   Each of the following constants defines a tar archive format that the tarfile module is able to create. See section Supported tar formats for details.   tarfile.USTAR_FORMAT\u00b6 POSIX.1-1988 (ustar) format.    tarfile.GNU_FORMAT\u00b6 GNU tar format.    tarfile.PAX_FORMAT\u00b6 POSIX.1-2001 (pax) format.    tarfile.DEFAULT_FORMAT\u00b6 The default format for creating archives. This is currently GNU_FORMAT.  The following variables are available on module level:   tarfile.ENCODING\u00b6 The default character encoding i.e. the value from either sys.getfilesystemencoding() or sys.getdefaultencoding().   See also  Module zipfile Documentation of the zipfile standard module. GNU tar manual, Basic Tar Format Documentation for tar archive files, including GNU tar extensions.    12.5.1. TarFile Objects\u00b6 The TarFile object provides an interface to a tar archive. A tar archive is a sequence of blocks. An archive member (a stored file) is made up of a header block followed by data blocks. It is possible to store a file in a tar archive several times. Each archive member is represented by a TarInfo object, see TarInfo Objects for details. A TarFile object can be used as a context manager in a with statement. It will automatically be closed when the block is completed. Please note that in the event of an exception an archive opened for writing will not be finalized; only the internally used file object will be closed. See the Examples section for a use case.  New in version 2.7: Added support for the context manager protocol.   class tarfile.TarFile(name=None, mode='r', fileobj=None, format=DEFAULT_FORMAT, tarinfo=TarInfo, dereference=False, ignore_zeros=False, encoding=ENCODING, errors=None, pax_headers=None, debug=0, errorlevel=0) All following arguments are optional and can be accessed as instance attributes as well. name is the pathname of the archive. It can be omitted if fileobj is given. In this case, the file object&#8217;s name attribute is used if it exists. mode is either 'r' to read from an existing archive, 'a' to append data to an existing file or 'w' to create a new file overwriting an existing one. If fileobj is given, it is used for reading or writing data. If it can be determined, mode is overridden by fileobj&#8216;s mode. fileobj will be used from position 0.  Note fileobj is not closed, when TarFile is closed.  format controls the archive format. It must be one of the constants USTAR_FORMAT, GNU_FORMAT or PAX_FORMAT that are defined at module level.  New in version 2.6. The tarinfo argument can be used to replace the default TarInfo class with a different one.  New in version 2.6. If dereference is False, add symbolic and hard links to the archive. If it is True, add the content of the target files to the archive. This has no effect on systems that do not support symbolic links. If ignore_zeros is False, treat an empty block as the end of the archive. If it is True, skip empty (and invalid) blocks and try to get as many members as possible. This is only useful for reading concatenated or damaged archives. debug can be set from 0 (no debug messages) up to 3 (all debug messages). The messages are written to sys.stderr. If errorlevel is 0, all errors are ignored when using TarFile.extract(). Nevertheless, they appear as error messages in the debug output, when debugging is enabled.  If 1, all fatal errors are raised as OSError or IOError exceptions. If 2, all non-fatal errors are raised as TarError exceptions as well. The encoding and errors arguments control the way strings are converted to unicode objects and vice versa. The default settings will work for most users. See section Unicode issues for in-depth information.  New in version 2.6. The pax_headers argument is an optional dictionary of unicode strings which will be added as a pax global header if format is PAX_FORMAT.  New in version 2.6.     TarFile.open(...)\u00b6 Alternative constructor. The tarfile.open() function is actually a shortcut to this classmethod.    TarFile.getmember(name)\u00b6 Return a TarInfo object for member name. If name can not be found in the archive, KeyError is raised.  Note If a member occurs more than once in the archive, its last occurrence is assumed to be the most up-to-date version.      TarFile.getmembers()\u00b6 Return the members of the archive as a list of TarInfo objects. The list has the same order as the members in the archive.    TarFile.getnames()\u00b6 Return the members as a list of their names. It has the same order as the list returned by getmembers().    TarFile.list(verbose=True)\u00b6 Print a table of contents to sys.stdout. If verbose is False, only the names of the members are printed. If it is True, output similar to that of ls -l is produced.    TarFile.next()\u00b6 Return the next member of the archive as a TarInfo object, when TarFile is opened for reading. Return None if there is no more available.    TarFile.extractall(path=\".\", members=None)\u00b6 Extract all members from the archive to the current working directory or directory path. If optional members is given, it must be a subset of the list returned by getmembers(). Directory information like owner, modification time and permissions are set after all members have been extracted. This is done to work around two problems: A directory&#8217;s modification time is reset each time a file is created in it. And, if a directory&#8217;s permissions do not allow writing, extracting files to it will fail.  Warning Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of path, e.g. members that have absolute filenames starting with \"\/\" or filenames with two dots \"..\".   New in version 2.5.     TarFile.extract(member, path=\"\")\u00b6 Extract a member from the archive to the current working directory, using its full name. Its file information is extracted as accurately as possible. member may be a filename or a TarInfo object. You can specify a different directory using path.  Note The extract() method does not take care of several extraction issues. In most cases you should consider using the extractall() method.   Warning See the warning for extractall().      TarFile.extractfile(member)\u00b6 Extract a member from the archive as a file object. member may be a filename or a TarInfo object. If member is a regular file, a file-like object is returned. If member is a link, a file-like object is constructed from the link&#8217;s target. If member is none of the above, None is returned.  Note The file-like object is read-only.  It provides the methods read(), readline(), readlines(), seek(), tell(), and close(), and also supports iteration over its lines.      TarFile.add(name, arcname=None, recursive=True, exclude=None, filter=None)\u00b6 Add the file name to the archive. name may be any type of file (directory, fifo, symbolic link, etc.). If given, arcname specifies an alternative name for the file in the archive. Directories are added recursively by default. This can be avoided by setting recursive to False. If exclude is given it must be a function that takes one filename argument and returns a boolean value. Depending on this value the respective file is either excluded (True) or added (False). If filter is specified it must be a function that takes a TarInfo object argument and returns the changed TarInfo object. If it instead returns None the TarInfo object will be excluded from the archive. See Examples for an example.  Changed in version 2.6: Added the exclude parameter.  Changed in version 2.7: Added the filter parameter.  Deprecated since version 2.7: The exclude parameter is deprecated, please use the filter parameter instead.  For maximum portability, filter should be used as a keyword argument rather than as a positional argument so that code won&#8217;t be affected when exclude is ultimately removed.     TarFile.addfile(tarinfo, fileobj=None)\u00b6 Add the TarInfo object tarinfo to the archive. If fileobj is given, tarinfo.size bytes are read from it and added to the archive.  You can create TarInfo objects using gettarinfo().  Note On Windows platforms, fileobj should always be opened with mode 'rb' to avoid irritation about the file size.      TarFile.gettarinfo(name=None, arcname=None, fileobj=None)\u00b6 Create a TarInfo object for either the file name or the file object fileobj (using os.fstat() on its file descriptor).  You can modify some of the TarInfo&#8216;s attributes before you add it using addfile(). If given, arcname specifies an alternative name for the file in the archive.    TarFile.close()\u00b6 Close the TarFile. In write mode, two finishing zero blocks are appended to the archive.    TarFile.posix\u00b6 Setting this to True is equivalent to setting the format attribute to USTAR_FORMAT, False is equivalent to GNU_FORMAT.  Changed in version 2.4: posix defaults to False.  Deprecated since version 2.6: Use the format attribute instead.     TarFile.pax_headers\u00b6 A dictionary containing key-value pairs of pax global headers.  New in version 2.6.     12.5.2. TarInfo Objects\u00b6 A TarInfo object represents one member in a TarFile. Aside from storing all required attributes of a file (like file type, size, time, permissions, owner etc.), it provides some useful methods to determine its type. It does not contain the file&#8217;s data itself. TarInfo objects are returned by TarFile&#8216;s methods getmember(), getmembers() and gettarinfo().   class tarfile.TarInfo(name=\"\")\u00b6 Create a TarInfo object.    TarInfo.frombuf(buf)\u00b6 Create and return a TarInfo object from string buffer buf.  New in version 2.6: Raises HeaderError if the buffer is invalid..     TarInfo.fromtarfile(tarfile)\u00b6 Read the next member from the TarFile object tarfile and return it as a TarInfo object.  New in version 2.6.     TarInfo.tobuf(format=DEFAULT_FORMAT, encoding=ENCODING, errors='strict')\u00b6 Create a string buffer from a TarInfo object. For information on the arguments see the constructor of the TarFile class.  Changed in version 2.6: The arguments were added.   A TarInfo object has the following public data attributes:   TarInfo.name\u00b6 Name of the archive member.    TarInfo.size\u00b6 Size in bytes.    TarInfo.mtime\u00b6 Time of last modification.    TarInfo.mode\u00b6 Permission bits.    TarInfo.type\u00b6 File type.  type is usually one of these constants: REGTYPE, AREGTYPE, LNKTYPE, SYMTYPE, DIRTYPE, FIFOTYPE, CONTTYPE, CHRTYPE, BLKTYPE, GNUTYPE_SPARSE.  To determine the type of a TarInfo object more conveniently, use the is_*() methods below.    TarInfo.linkname\u00b6 Name of the target file name, which is only present in TarInfo objects of type LNKTYPE and SYMTYPE.    TarInfo.uid\u00b6 User ID of the user who originally stored this member.    TarInfo.gid\u00b6 Group ID of the user who originally stored this member.    TarInfo.uname\u00b6 User name.    TarInfo.gname\u00b6 Group name.    TarInfo.pax_headers\u00b6 A dictionary containing key-value pairs of an associated pax extended header.  New in version 2.6.   A TarInfo object also provides some convenient query methods:   TarInfo.isfile()\u00b6 Return True if the Tarinfo object is a regular file.    TarInfo.isreg()\u00b6 Same as isfile().    TarInfo.isdir()\u00b6 Return True if it is a directory.    TarInfo.issym()\u00b6 Return True if it is a symbolic link.    TarInfo.islnk()\u00b6 Return True if it is a hard link.    TarInfo.ischr()\u00b6 Return True if it is a character device.    TarInfo.isblk()\u00b6 Return True if it is a block device.    TarInfo.isfifo()\u00b6 Return True if it is a FIFO.    TarInfo.isdev()\u00b6 Return True if it is one of character device, block device or FIFO.    12.5.3. Examples\u00b6 How to extract an entire tar archive to the current working directory: import tarfile tar = tarfile.open(\"sample.tar.gz\") tar.extractall() tar.close()   How to extract a subset of a tar archive with TarFile.extractall() using a generator function instead of a list: import os import tarfile  def py_files(members):     for tarinfo in members:         if os.path.splitext(tarinfo.name)[1] == \".py\":             yield tarinfo  tar = tarfile.open(\"sample.tar.gz\") tar.extractall(members=py_files(tar)) tar.close()   How to create an uncompressed tar archive from a list of filenames: import tarfile tar = tarfile.open(\"sample.tar\", \"w\") for name in [\"foo\", \"bar\", \"quux\"]:     tar.add(name) tar.close()   The same example using the with statement: import tarfile with tarfile.open(\"sample.tar\", \"w\") as tar:     for name in [\"foo\", \"bar\", \"quux\"]:         tar.add(name)   How to read a gzip compressed tar archive and display some member information: import tarfile tar = tarfile.open(\"sample.tar.gz\", \"r:gz\") for tarinfo in tar:     print tarinfo.name, \"is\", tarinfo.size, \"bytes in size and is\",     if tarinfo.isreg():         print \"a regular file.\"     elif tarinfo.isdir():         print \"a directory.\"     else:         print \"something else.\" tar.close()   How to create an archive and reset the user information using the filter parameter in TarFile.add(): import tarfile def reset(tarinfo):     tarinfo.uid = tarinfo.gid = 0     tarinfo.uname = tarinfo.gname = \"root\"     return tarinfo tar = tarfile.open(\"sample.tar.gz\", \"w:gz\") tar.add(\"foo\", filter=reset) tar.close()     12.5.4. Supported tar formats\u00b6 There are three tar formats that can be created with the tarfile module:  The POSIX.1-1988 ustar format (USTAR_FORMAT). It supports filenames up to a length of at best 256 characters and linknames up to 100 characters. The maximum file size is 8 gigabytes. This is an old and limited but widely supported format.  The GNU tar format (GNU_FORMAT). It supports long filenames and linknames, files bigger than 8 gigabytes and sparse files. It is the de facto standard on GNU\/Linux systems. tarfile fully supports the GNU tar extensions for long names, sparse file support is read-only.  The POSIX.1-2001 pax format (PAX_FORMAT). It is the most flexible format with virtually no limits. It supports long filenames and linknames, large files and stores pathnames in a portable way. However, not all tar implementations today are able to handle pax archives properly. The pax format is an extension to the existing ustar format. It uses extra headers for information that cannot be stored otherwise. There are two flavours of pax headers: Extended headers only affect the subsequent file header, global headers are valid for the complete archive and affect all following files. All the data in a pax header is encoded in UTF-8 for portability reasons.   There are some more variants of the tar format which can be read, but not created:  The ancient V7 format. This is the first tar format from Unix Seventh Edition, storing only regular files and directories. Names must not be longer than 100 characters, there is no user\/group name information. Some archives have miscalculated header checksums in case of fields with non-ASCII characters. The SunOS tar extended format. This format is a variant of the POSIX.1-2001 pax format, but is not compatible.    12.5.5. Unicode issues\u00b6 The tar format was originally conceived to make backups on tape drives with the main focus on preserving file system information. Nowadays tar archives are commonly used for file distribution and exchanging archives over networks. One problem of the original format (that all other formats are merely variants of) is that there is no concept of supporting different character encodings. For example, an ordinary tar archive created on a UTF-8 system cannot be read correctly on a Latin-1 system if it contains non-ASCII characters. Names (i.e. filenames, linknames, user\/group names) containing these characters will appear damaged.  Unfortunately, there is no way to autodetect the encoding of an archive. The pax format was designed to solve this problem. It stores non-ASCII names using the universal character encoding UTF-8. When a pax archive is read, these UTF-8 names are converted to the encoding of the local file system. The details of unicode conversion are controlled by the encoding and errors keyword arguments of the TarFile class. The default value for encoding is the local character encoding. It is deduced from sys.getfilesystemencoding() and sys.getdefaultencoding(). In read mode, encoding is used exclusively to convert unicode names from a pax archive to strings in the local character encoding. In write mode, the use of encoding depends on the chosen archive format. In case of PAX_FORMAT, input names that contain non-ASCII characters need to be decoded before being stored as UTF-8 strings. The other formats do not make use of encoding unless unicode objects are used as input names. These are converted to 8-bit character strings before they are added to the archive. The errors argument defines how characters are treated that cannot be converted to or from encoding. Possible values are listed in section Codec Base Classes. In read mode, there is an additional scheme 'utf-8' which means that bad characters are replaced by their UTF-8 representation. This is the default scheme. In write mode the default value for errors is 'strict' to ensure that name information is not altered unnoticed."},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.is_tarfile","title":"tarfile.is_tarfile","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.open","title":"tarfile.open","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile","title":"tarfile.TarFile","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.add","title":"tarfile.TarFile.add","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.addfile","title":"tarfile.TarFile.addfile","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.close","title":"tarfile.TarFile.close","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.extract","title":"tarfile.TarFile.extract","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.extractall","title":"tarfile.TarFile.extractall","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.extractfile","title":"tarfile.TarFile.extractfile","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.getmember","title":"tarfile.TarFile.getmember","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.getmembers","title":"tarfile.TarFile.getmembers","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.getnames","title":"tarfile.TarFile.getnames","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.gettarinfo","title":"tarfile.TarFile.gettarinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.list","title":"tarfile.TarFile.list","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.next","title":"tarfile.TarFile.next","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFile.open","title":"tarfile.TarFile.open","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarFileCompat","title":"tarfile.TarFileCompat","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo","title":"tarfile.TarInfo","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.frombuf","title":"tarfile.TarInfo.frombuf","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.fromtarfile","title":"tarfile.TarInfo.fromtarfile","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.isblk","title":"tarfile.TarInfo.isblk","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.ischr","title":"tarfile.TarInfo.ischr","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.isdev","title":"tarfile.TarInfo.isdev","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.isdir","title":"tarfile.TarInfo.isdir","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.isfifo","title":"tarfile.TarInfo.isfifo","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.isfile","title":"tarfile.TarInfo.isfile","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.islnk","title":"tarfile.TarInfo.islnk","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.isreg","title":"tarfile.TarInfo.isreg","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.issym","title":"tarfile.TarInfo.issym","description":""},{"url":"http:\/\/docs.python.org\/library\/tarfile.html#tarfile.TarInfo.tobuf","title":"tarfile.TarInfo.tobuf","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html","title":"ConfigParser","description":"13.2. ConfigParser &#8212; Configuration file parser\u00b6  Note The ConfigParser module has been renamed to configparser in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  This module defines the class ConfigParser.   The ConfigParser class implements a basic configuration file parser language which provides a structure similar to what you would find on Microsoft Windows INI files.  You can use this to write Python programs which can be customized by end users easily.  Note This library does not interpret or write the value-type prefixes used in the Windows Registry extended version of INI syntax.   See also  Module shlex Support for a creating Unix shell-like mini-languages which can be used as an alternate format for application configuration files. Module json The json module implements a subset of JavaScript syntax which can also be used for this purpose.   The configuration file consists of sections, led by a [section] header and followed by name: value entries, with continuations in the style of RFC 822 (see section 3.1.1, &#8220;LONG HEADER FIELDS&#8221;); name=value is also accepted.  Note that leading whitespace is removed from values. The optional values can contain format strings which refer to other values in the same section, or values in a special DEFAULT section.  Additional defaults can be provided on initialization and retrieval.  Lines beginning with '#' or ';' are ignored and may be used to provide comments. Configuration files may include comments, prefixed by specific characters (# and ;).  Comments may appear on their own in an otherwise empty line, or may be entered in lines holding values or section names.  In the latter case, they need to be preceded by a whitespace character to be recognized as a comment. (For backwards compatibility, only ; starts an inline comment, while # does not.) On top of the core functionality, SafeConfigParser supports interpolation.  This means values can contain format strings which refer to other values in the same section, or values in a special DEFAULT section. Additional defaults can be provided on initialization. For example: [My Section] foodir: %(dir)s\/whatever dir=frob long: this value continues    in the next line  would resolve the %(dir)s to the value of dir (frob in this case). All reference expansions are done on demand. Default values can be specified by passing them into the ConfigParser constructor as a dictionary.  Additional defaults  may be passed into the get() method which will override all others. Sections are normally stored in a built-in dictionary. An alternative dictionary type can be passed to the ConfigParser constructor. For example, if a dictionary type is passed that sorts its keys, the sections will be sorted on write-back, as will be the keys within each section.   class ConfigParser.RawConfigParser([defaults[, dict_type[, allow_no_value]]])\u00b6 The basic configuration object.  When defaults is given, it is initialized into the dictionary of intrinsic defaults.  When dict_type is given, it will be used to create the dictionary objects for the list of sections, for the options within a section, and for the default values.  When allow_no_value is true (default: False), options without values are accepted; the value presented for these is None. This class does not support the magical interpolation behavior. All option names are passed through the optionxform() method.  Its default implementation converts option names to lower case.  New in version 2.3.  Changed in version 2.6: dict_type was added.  Changed in version 2.7: The default dict_type is collections.OrderedDict. allow_no_value was added.     class ConfigParser.ConfigParser([defaults[, dict_type[, allow_no_value]]])\u00b6 Derived class of RawConfigParser that implements the magical interpolation feature and adds optional arguments to the get() and items() methods.  The values in defaults must be appropriate for the %()s string interpolation.  Note that __name__ is an intrinsic default; its value is the section name, and will override any value provided in defaults. All option names used in interpolation will be passed through the optionxform() method just like any other option name reference.  Using the default implementation of optionxform(), the values foo %(bar)s and foo %(BAR)s are equivalent.  New in version 2.3.  Changed in version 2.6: dict_type was added.  Changed in version 2.7: The default dict_type is collections.OrderedDict. allow_no_value was added.     class ConfigParser.SafeConfigParser([defaults[, dict_type[, allow_no_value]]])\u00b6 Derived class of ConfigParser that implements a more-sane variant of the magical interpolation feature.  This implementation is more predictable as well. New applications should prefer this version if they don&#8217;t need to be compatible with older versions of Python.  New in version 2.3.  Changed in version 2.6: dict_type was added.  Changed in version 2.7: The default dict_type is collections.OrderedDict. allow_no_value was added.     exception ConfigParser.Error\u00b6 Base class for all other configparser exceptions.    exception ConfigParser.NoSectionError\u00b6 Exception raised when a specified section is not found.    exception ConfigParser.DuplicateSectionError\u00b6 Exception raised if add_section() is called with the name of a section that is already present.    exception ConfigParser.NoOptionError\u00b6 Exception raised when a specified option is not found in the specified  section.    exception ConfigParser.InterpolationError\u00b6 Base class for exceptions raised when problems occur performing string interpolation.    exception ConfigParser.InterpolationDepthError\u00b6 Exception raised when string interpolation cannot be completed because the number of iterations exceeds MAX_INTERPOLATION_DEPTH. Subclass of InterpolationError.    exception ConfigParser.InterpolationMissingOptionError\u00b6 Exception raised when an option referenced from a value does not exist. Subclass of InterpolationError.  New in version 2.3.     exception ConfigParser.InterpolationSyntaxError\u00b6 Exception raised when the source text into which substitutions are made does not conform to the required syntax. Subclass of InterpolationError.  New in version 2.3.     exception ConfigParser.MissingSectionHeaderError\u00b6 Exception raised when attempting to parse a file which has no section headers.    exception ConfigParser.ParsingError\u00b6 Exception raised when errors occur attempting to parse a file.    ConfigParser.MAX_INTERPOLATION_DEPTH\u00b6 The maximum depth for recursive interpolation for get() when the raw parameter is false.  This is relevant only for the ConfigParser class.   See also  Module shlex Support for a creating Unix shell-like mini-languages which can be used as an alternate format for application configuration files.    13.2.1. RawConfigParser Objects\u00b6 RawConfigParser instances have the following methods:   RawConfigParser.defaults()\u00b6 Return a dictionary containing the instance-wide defaults.    RawConfigParser.sections()\u00b6 Return a list of the sections available; DEFAULT is not included in the list.    RawConfigParser.add_section(section)\u00b6 Add a section named section to the instance.  If a section by the given name already exists, DuplicateSectionError is raised. If the name DEFAULT (or any of it&#8217;s case-insensitive variants) is passed, ValueError is raised.    RawConfigParser.has_section(section)\u00b6 Indicates whether the named section is present in the configuration. The DEFAULT section is not acknowledged.    RawConfigParser.options(section)\u00b6 Returns a list of options available in the specified section.    RawConfigParser.has_option(section, option)\u00b6 If the given section exists, and contains the given option, return True; otherwise return False.  New in version 1.6.     RawConfigParser.read(filenames)\u00b6 Attempt to read and parse a list of filenames, returning a list of filenames which were successfully parsed.  If filenames is a string or Unicode string, it is treated as a single filename. If a file named in filenames cannot be opened, that file will be ignored.  This is designed so that you can specify a list of potential configuration file locations (for example, the current directory, the user&#8217;s home directory, and some system-wide directory), and all existing configuration files in the list will be read.  If none of the named files exist, the ConfigParser instance will contain an empty dataset. An application which requires initial values to be loaded from a file should load the required file or files using readfp() before calling read() for any optional files: import ConfigParser, os  config = ConfigParser.ConfigParser() config.readfp(open(&#39;defaults.cfg&#39;)) config.read([&#39;site.cfg&#39;, os.path.expanduser(&#39;~\/.myapp.cfg&#39;)])    Changed in version 2.4: Returns list of successfully parsed filenames.     RawConfigParser.readfp(fp[, filename])\u00b6 Read and parse configuration data from the file or file-like object in fp (only the readline() method is used).  If filename is omitted and fp has a name attribute, that is used for filename; the default is <???>.    RawConfigParser.get(section, option)\u00b6 Get an option value for the named section.    RawConfigParser.getint(section, option)\u00b6 A convenience method which coerces the option in the specified section to an integer.    RawConfigParser.getfloat(section, option)\u00b6 A convenience method which coerces the option in the specified section to a floating point number.    RawConfigParser.getboolean(section, option)\u00b6 A convenience method which coerces the option in the specified section to a Boolean value.  Note that the accepted values for the option are \"1\", \"yes\", \"true\", and \"on\", which cause this method to return True, and \"0\", \"no\", \"false\", and \"off\", which cause it to return False.  These string values are checked in a case-insensitive manner.  Any other value will cause it to raise ValueError.    RawConfigParser.items(section)\u00b6 Return a list of (name, value) pairs for each option in the given section.    RawConfigParser.set(section, option, value)\u00b6 If the given section exists, set the given option to the specified value; otherwise raise NoSectionError.  While it is possible to use RawConfigParser (or ConfigParser with raw parameters set to true) for internal storage of non-string values, full functionality (including interpolation and output to files) can only be achieved using string values.  New in version 1.6.     RawConfigParser.write(fileobject)\u00b6 Write a representation of the configuration to the specified file object.  This representation can be parsed by a future read() call.  New in version 1.6.     RawConfigParser.remove_option(section, option)\u00b6 Remove the specified option from the specified section. If the section does not exist, raise NoSectionError.  If the option existed to be removed, return True; otherwise return False.  New in version 1.6.     RawConfigParser.remove_section(section)\u00b6 Remove the specified section from the configuration. If the section in fact existed, return True. Otherwise return False.    RawConfigParser.optionxform(option)\u00b6 Transforms the option name option as found in an input file or as passed in by client code to the form that should be used in the internal structures. The default implementation returns a lower-case version of option; subclasses may override this or client code can set an attribute of this name on instances to affect this behavior. You don&#8217;t necessarily need to subclass a ConfigParser to use this method, you can also re-set it on an instance, to a function that takes a string argument.  Setting it to str, for example, would make option names case sensitive: cfgparser = ConfigParser() ... cfgparser.optionxform = str   Note that when reading configuration files, whitespace around the option names are stripped before optionxform() is called.     13.2.2. ConfigParser Objects\u00b6 The ConfigParser class extends some methods of the RawConfigParser interface, adding some optional arguments.   ConfigParser.get(section, option[, raw[, vars]])\u00b6 Get an option value for the named section.  If vars is provided, it must be a dictionary.  The option is looked up in vars (if provided), section, and in defaults in that order. All the '%' interpolations are expanded in the return values, unless the raw argument is true.  Values for interpolation keys are looked up in the same manner as the option.     ConfigParser.items(section[, raw[, vars]])\u00b6 Return a list of (name, value) pairs for each option in the given section. Optional arguments have the same meaning as for the get() method.  New in version 2.3.     13.2.3. SafeConfigParser Objects\u00b6 The SafeConfigParser class implements the same extended interface as ConfigParser, with the following addition:   SafeConfigParser.set(section, option, value)\u00b6 If the given section exists, set the given option to the specified value; otherwise raise NoSectionError.  value must be a string (str or unicode); if not, TypeError is raised.  New in version 2.4.     13.2.4. Examples\u00b6 An example of writing to a configuration file: import ConfigParser  config = ConfigParser.RawConfigParser()  # When adding sections or items, add them in the reverse order of # how you want them to be displayed in the actual file. # In addition, please note that using RawConfigParser&#39;s and the raw # mode of ConfigParser&#39;s respective set functions, you can assign # non-string values to keys internally, but will receive an error # when attempting to write to a file or when you get it in non-raw # mode. SafeConfigParser does not allow such assignments to take place. config.add_section(&#39;Section1&#39;) config.set(&#39;Section1&#39;, &#39;int&#39;, &#39;15&#39;) config.set(&#39;Section1&#39;, &#39;bool&#39;, &#39;true&#39;) config.set(&#39;Section1&#39;, &#39;float&#39;, &#39;3.1415&#39;) config.set(&#39;Section1&#39;, &#39;baz&#39;, &#39;fun&#39;) config.set(&#39;Section1&#39;, &#39;bar&#39;, &#39;Python&#39;) config.set(&#39;Section1&#39;, &#39;foo&#39;, &#39;%(bar)s is %(baz)s!&#39;)  # Writing our configuration file to &#39;example.cfg&#39; with open(&#39;example.cfg&#39;, &#39;wb&#39;) as configfile:     config.write(configfile)   An example of reading the configuration file again: import ConfigParser  config = ConfigParser.RawConfigParser() config.read(&#39;example.cfg&#39;)  # getfloat() raises an exception if the value is not a float # getint() and getboolean() also do this for their respective types float = config.getfloat(&#39;Section1&#39;, &#39;float&#39;) int = config.getint(&#39;Section1&#39;, &#39;int&#39;) print float + int  # Notice that the next output does not interpolate &#39;%(bar)s&#39; or &#39;%(baz)s&#39;. # This is because we are using a RawConfigParser(). if config.getboolean(&#39;Section1&#39;, &#39;bool&#39;):     print config.get(&#39;Section1&#39;, &#39;foo&#39;)   To get interpolation, you will need to use a ConfigParser or SafeConfigParser: import ConfigParser  config = ConfigParser.ConfigParser() config.read(&#39;example.cfg&#39;)  # Set the third, optional argument of get to 1 if you wish to use raw mode. print config.get(&#39;Section1&#39;, &#39;foo&#39;, 0) # -> \"Python is fun!\" print config.get(&#39;Section1&#39;, &#39;foo&#39;, 1) # -> \"%(bar)s is %(baz)s!\"  # The optional fourth argument is a dict with members that will take # precedence in interpolation. print config.get(&#39;Section1&#39;, &#39;foo&#39;, 0, {&#39;bar&#39;: &#39;Documentation&#39;,                                         &#39;baz&#39;: &#39;evil&#39;})   Defaults are available in all three types of ConfigParsers. They are used in interpolation if an option used is not defined elsewhere. import ConfigParser  # New instance with &#39;bar&#39; and &#39;baz&#39; defaulting to &#39;Life&#39; and &#39;hard&#39; each config = ConfigParser.SafeConfigParser({&#39;bar&#39;: &#39;Life&#39;, &#39;baz&#39;: &#39;hard&#39;}) config.read(&#39;example.cfg&#39;)  print config.get(&#39;Section1&#39;, &#39;foo&#39;) # -> \"Python is fun!\" config.remove_option(&#39;Section1&#39;, &#39;bar&#39;) config.remove_option(&#39;Section1&#39;, &#39;baz&#39;) print config.get(&#39;Section1&#39;, &#39;foo&#39;) # -> \"Life is hard!\"   The function opt_move below can be used to move options between sections: def opt_move(config, section1, section2, option):     try:         config.set(section2, option, config.get(section1, option, 1))     except ConfigParser.NoSectionError:         # Create non-existent section         config.add_section(section2)         opt_move(config, section1, section2, option)     else:         config.remove_option(section1, option)   Some configuration files are known to include settings without values, but which otherwise conform to the syntax supported by ConfigParser.  The allow_no_value parameter to the constructor can be used to indicate that such values should be accepted: >>> import ConfigParser >>> import io  >>> sample_config = \"\"\" ... [mysqld] ... user = mysql ... pid-file = \/var\/run\/mysqld\/mysqld.pid ... skip-external-locking ... old_passwords = 1 ... skip-bdb ... skip-innodb ... \"\"\" >>> config = ConfigParser.RawConfigParser(allow_no_value=True) >>> config.readfp(io.BytesIO(sample_config))  >>> # Settings with values are treated as before: >>> config.get(\"mysqld\", \"user\") &#39;mysql&#39;  >>> # Settings without values provide None: >>> config.get(\"mysqld\", \"skip-bdb\")  >>> # Settings which aren&#39;t specified still raise an error: >>> config.get(\"mysqld\", \"does-not-exist\") Traceback (most recent call last):   ... ConfigParser.NoOptionError: No option &#39;does-not-exist&#39; in section: &#39;mysqld&#39;"},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.ConfigParser","title":"ConfigParser.ConfigParser","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.ConfigParser.get","title":"ConfigParser.ConfigParser.get","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.ConfigParser.items","title":"ConfigParser.ConfigParser.items","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser","title":"ConfigParser.RawConfigParser","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.add_section","title":"ConfigParser.RawConfigParser.add_section","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.defaults","title":"ConfigParser.RawConfigParser.defaults","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.get","title":"ConfigParser.RawConfigParser.get","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.getboolean","title":"ConfigParser.RawConfigParser.getboolean","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.getfloat","title":"ConfigParser.RawConfigParser.getfloat","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.getint","title":"ConfigParser.RawConfigParser.getint","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.has_option","title":"ConfigParser.RawConfigParser.has_option","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.has_section","title":"ConfigParser.RawConfigParser.has_section","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.items","title":"ConfigParser.RawConfigParser.items","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.options","title":"ConfigParser.RawConfigParser.options","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.optionxform","title":"ConfigParser.RawConfigParser.optionxform","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.read","title":"ConfigParser.RawConfigParser.read","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.readfp","title":"ConfigParser.RawConfigParser.readfp","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.remove_option","title":"ConfigParser.RawConfigParser.remove_option","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.remove_section","title":"ConfigParser.RawConfigParser.remove_section","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.sections","title":"ConfigParser.RawConfigParser.sections","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.set","title":"ConfigParser.RawConfigParser.set","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.RawConfigParser.write","title":"ConfigParser.RawConfigParser.write","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.SafeConfigParser","title":"ConfigParser.SafeConfigParser","description":""},{"url":"http:\/\/docs.python.org\/library\/configparser.html#ConfigParser.SafeConfigParser.set","title":"ConfigParser.SafeConfigParser.set","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html","title":"csv","description":"13.1. csv &#8212; CSV File Reading and Writing\u00b6  New in version 2.3. The so-called CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases.  There is no &#8220;CSV standard&#8221;, so the format is operationally defined by the many applications which read and write it.  The lack of a standard means that subtle differences often exist in the data produced and consumed by different applications.  These differences can make it annoying to process CSV files from multiple sources.  Still, while the delimiters and quoting characters vary, the overall format is similar enough that it is possible to write a single module which can efficiently manipulate such data, hiding the details of reading and writing the data from the programmer. The csv module implements classes to read and write tabular data in CSV format.  It allows programmers to say, &#8220;write this data in the format preferred by Excel,&#8221; or &#8220;read data from this file which was generated by Excel,&#8221; without knowing the precise details of the CSV format used by Excel.  Programmers can also describe the CSV formats understood by other applications or define their own special-purpose CSV formats. The csv module&#8217;s reader and writer objects read and write sequences.  Programmers can also read and write data in dictionary form using the DictReader and DictWriter classes.  Note This version of the csv module doesn&#8217;t support Unicode input.  Also, there are currently some issues regarding ASCII NUL characters.  Accordingly, all input should be UTF-8 or printable ASCII to be safe; see the examples in section Examples. These restrictions will be removed in the future.   See also  PEP 305 - CSV File API The Python Enhancement Proposal which proposed this addition to Python.    13.1.1. Module Contents\u00b6 The csv module defines the following functions:   csv.reader(csvfile[, dialect='excel'][, fmtparam])\u00b6 Return a reader object which will iterate over lines in the given csvfile. csvfile can be any object which supports the iterator protocol and returns a string each time its next() method is called &#8212; file objects and list objects are both suitable.   If csvfile is a file object, it must be opened with the &#8216;b&#8217; flag on platforms where that makes a difference.  An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect.  It may be an instance of a subclass of the Dialect class or one of the strings returned by the list_dialects() function.  The other optional fmtparam keyword arguments can be given to override individual formatting parameters in the current dialect.  For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters. Each row read from the csv file is returned as a list of strings.  No automatic data type conversion is performed. A short usage example: >>> import csv >>> spamReader = csv.reader(open(&#39;eggs.csv&#39;, &#39;rb&#39;), delimiter=&#39; &#39;, quotechar=&#39;|&#39;) >>> for row in spamReader: ...     print &#39;, &#39;.join(row) Spam, Spam, Spam, Spam, Spam, Baked Beans Spam, Lovely Spam, Wonderful Spam    Changed in version 2.5: The parser is now stricter with respect to multi-line quoted fields. Previously, if a line ended within a quoted field without a terminating newline character, a newline would be inserted into the returned field. This behavior caused problems when reading files which contained carriage return characters within fields. The behavior was changed to return the field without inserting newlines. As a consequence, if newlines embedded within fields are important, the input should be split into lines in a manner which preserves the newline characters.     csv.writer(csvfile[, dialect='excel'][, fmtparam])\u00b6 Return a writer object responsible for converting the user&#8217;s data into delimited strings on the given file-like object.  csvfile can be any object with a write() method.  If csvfile is a file object, it must be opened with the &#8216;b&#8217; flag on platforms where that makes a difference.  An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect.  It may be an instance of a subclass of the Dialect class or one of the strings returned by the list_dialects() function.  The other optional fmtparam keyword arguments can be given to override individual formatting parameters in the current dialect.  For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters. To make it as easy as possible to interface with modules which implement the DB API, the value None is written as the empty string.  While this isn&#8217;t a reversible transformation, it makes it easier to dump SQL NULL data values to CSV files without preprocessing the data returned from a cursor.fetch* call. All other non-string data are stringified with str() before being written. A short usage example: >>> import csv >>> spamWriter = csv.writer(open(&#39;eggs.csv&#39;, &#39;wb&#39;), delimiter=&#39; &#39;, ...                         quotechar=&#39;|&#39;, quoting=csv.QUOTE_MINIMAL) >>> spamWriter.writerow([&#39;Spam&#39;] * 5 + [&#39;Baked Beans&#39;]) >>> spamWriter.writerow([&#39;Spam&#39;, &#39;Lovely Spam&#39;, &#39;Wonderful Spam&#39;])       csv.register_dialect(name[, dialect][, fmtparam])\u00b6 Associate dialect with name.  name must be a string or Unicode object. The dialect can be specified either by passing a sub-class of Dialect, or by fmtparam keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters.    csv.unregister_dialect(name)\u00b6 Delete the dialect associated with name from the dialect registry.  An Error is raised if name is not a registered dialect name.    csv.get_dialect(name)\u00b6 Return the dialect associated with name.  An Error is raised if name is not a registered dialect name.  Changed in version 2.5: This function now returns an immutable Dialect.  Previously an instance of the requested dialect was returned.  Users could modify the underlying class, changing the behavior of active readers and writers.     csv.list_dialects()\u00b6 Return the names of all registered dialects.    csv.field_size_limit([new_limit])\u00b6 Returns the current maximum field size allowed by the parser. If new_limit is given, this becomes the new limit.  New in version 2.5.   The csv module defines the following classes:   class csv.DictReader(csvfile[, fieldnames=None[, restkey=None[, restval=None[, dialect='excel'[, *args, **kwds]]]]])\u00b6 Create an object which operates like a regular reader but maps the information read into a dict whose keys are given by the optional  fieldnames parameter. If the fieldnames parameter is omitted, the values in the first row of the csvfile will be used as the fieldnames.  If the row read has more fields than the fieldnames sequence, the remaining data is added as a sequence keyed by the value of restkey.  If the row read has fewer fields than the fieldnames sequence, the remaining keys take the value of the optional restval parameter.  Any other optional or keyword arguments are passed to the underlying reader instance.    class csv.DictWriter(csvfile, fieldnames[, restval=''[, extrasaction='raise'[, dialect='excel'[, *args, **kwds]]]])\u00b6 Create an object which operates like a regular writer but maps dictionaries onto output rows.  The fieldnames parameter identifies the order in which values in the dictionary passed to the writerow() method are written to the csvfile.  The optional restval parameter specifies the value to be written if the dictionary is missing a key in fieldnames.  If the dictionary passed to the writerow() method contains a key not found in fieldnames, the optional extrasaction parameter indicates what action to take.  If it is set to 'raise' a ValueError is raised.  If it is set to 'ignore', extra values in the dictionary are ignored.  Any other optional or keyword arguments are passed to the underlying writer instance. Note that unlike the DictReader class, the fieldnames parameter of the DictWriter is not optional.  Since Python&#8217;s dict objects are not ordered, there is not enough information available to deduce the order in which the row should be written to the csvfile.     class csv.Dialect\u00b6 The Dialect class is a container class relied on primarily for its attributes, which are used to define the parameters for a specific reader or writer instance.    class csv.excel\u00b6 The excel class defines the usual properties of an Excel-generated CSV file.  It is registered with the dialect name 'excel'.    class csv.excel_tab\u00b6 The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.  It is registered with the dialect name 'excel-tab'.    class csv.Sniffer\u00b6 The Sniffer class is used to deduce the format of a CSV file. The Sniffer class provides two methods:   sniff(sample[, delimiters=None])\u00b6 Analyze the given sample and return a Dialect subclass reflecting the parameters found.  If the optional delimiters parameter is given, it is interpreted as a string containing possible valid delimiter characters.    has_header(sample)\u00b6 Analyze the sample text (presumed to be in CSV format) and return True if the first row appears to be a series of column headers.    An example for Sniffer use: csvfile = open(\"example.csv\", \"rb\") dialect = csv.Sniffer().sniff(csvfile.read(1024)) csvfile.seek(0) reader = csv.reader(csvfile, dialect) # ... process CSV file contents here ...   The csv module defines the following constants:   csv.QUOTE_ALL\u00b6 Instructs writer objects to quote all fields.    csv.QUOTE_MINIMAL\u00b6 Instructs writer objects to only quote those fields which contain special characters such as delimiter, quotechar or any of the characters in lineterminator.    csv.QUOTE_NONNUMERIC\u00b6 Instructs writer objects to quote all non-numeric fields. Instructs the reader to convert all non-quoted fields to type float.     csv.QUOTE_NONE\u00b6 Instructs writer objects to never quote fields.  When the current delimiter occurs in output data it is preceded by the current escapechar character.  If escapechar is not set, the writer will raise Error if any characters that require escaping are encountered. Instructs reader to perform no special processing of quote characters.   The csv module defines the following exception:   exception csv.Error\u00b6 Raised by any of the functions when an error is detected.    13.1.2. Dialects and Formatting Parameters\u00b6 To make it easier to specify the format of input and output records, specific formatting parameters are grouped together into dialects.  A dialect is a subclass of the Dialect class having a set of specific methods and a single validate() method.  When creating reader or writer objects, the programmer can specify a string or a subclass of the Dialect class as the dialect parameter.  In addition to, or instead of, the dialect parameter, the programmer can also specify individual formatting parameters, which have the same names as the attributes defined below for the Dialect class. Dialects support the following attributes:   Dialect.delimiter\u00b6 A one-character string used to separate fields.  It defaults to ','.    Dialect.doublequote\u00b6 Controls how instances of quotechar appearing inside a field should be themselves be quoted.  When True, the character is doubled. When False, the escapechar is used as a prefix to the quotechar.  It defaults to True. On output, if doublequote is False and no escapechar is set, Error is raised if a quotechar is found in a field.     Dialect.escapechar\u00b6 A one-character string used by the writer to escape the delimiter if quoting is set to QUOTE_NONE and the quotechar if doublequote is False. On reading, the escapechar removes any special meaning from the following character. It defaults to None, which disables escaping.    Dialect.lineterminator\u00b6 The string used to terminate lines produced by the writer. It defaults to '\\r\\n'.  Note The reader is hard-coded to recognise either '\\r' or '\\n' as end-of-line, and ignores lineterminator. This behavior may change in the future.      Dialect.quotechar\u00b6 A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.  It defaults to '\"'.    Dialect.quoting\u00b6 Controls when quotes should be generated by the writer and recognised by the reader.  It can take on any of the QUOTE_* constants (see section Module Contents) and defaults to QUOTE_MINIMAL.    Dialect.skipinitialspace\u00b6 When True, whitespace immediately following the delimiter is ignored. The default is False.    13.1.3. Reader Objects\u00b6 Reader objects (DictReader instances and objects returned by the reader() function) have the following public methods:   csvreader.next()\u00b6 Return the next row of the reader&#8217;s iterable object as a list, parsed according to the current dialect.  Reader objects have the following public attributes:   csvreader.dialect\u00b6 A read-only description of the dialect in use by the parser.    csvreader.line_num\u00b6 The number of lines read from the source iterator. This is not the same as the number of records returned, as records can span multiple lines.  New in version 2.5.   DictReader objects have the following public attribute:   csvreader.fieldnames\u00b6 If not passed as a parameter when creating the object, this attribute is initialized upon first access or when the first record is read from the file.  Changed in version 2.6.     13.1.4. Writer Objects\u00b6 Writer objects (DictWriter instances and objects returned by the writer() function) have the following public methods.  A row must be a sequence of strings or numbers for Writer objects and a dictionary mapping fieldnames to strings or numbers (by passing them through str() first) for DictWriter objects.  Note that complex numbers are written out surrounded by parens. This may cause some problems for other programs which read CSV files (assuming they support complex numbers at all).   csvwriter.writerow(row)\u00b6 Write the row parameter to the writer&#8217;s file object, formatted according to the current dialect.    csvwriter.writerows(rows)\u00b6 Write all the rows parameters (a list of row objects as described above) to the writer&#8217;s file object, formatted according to the current dialect.  Writer objects have the following public attribute:   csvwriter.dialect\u00b6 A read-only description of the dialect in use by the writer.  DictWriter objects have the following public method:   DictWriter.writeheader()\u00b6 Write a row with the field names (as specified in the constructor).  New in version 2.7.     13.1.5. Examples\u00b6 The simplest example of reading a CSV file: import csv with open(&#39;some.csv&#39;, &#39;rb&#39;) as f:     reader = csv.reader(f)     for row in reader:         print row   Reading a file with an alternate format: import csv with open(&#39;passwd&#39;, &#39;rb&#39;) as f:     reader = csv.reader(f, delimiter=&#39;:&#39;, quoting=csv.QUOTE_NONE)     for row in reader:         print row   The corresponding simplest possible writing example is: import csv with open(&#39;some.csv&#39;, &#39;wb&#39;) as f:     writer = csv.writer(f)     writer.writerows(someiterable)   Registering a new dialect: import csv csv.register_dialect(&#39;unixpwd&#39;, delimiter=&#39;:&#39;, quoting=csv.QUOTE_NONE) with open(&#39;passwd&#39;, &#39;rb&#39;) as f:     reader = csv.reader(f, &#39;unixpwd&#39;)   A slightly more advanced use of the reader &#8212; catching and reporting errors: import csv, sys filename = &#39;some.csv&#39; with open(filename, &#39;rb&#39;) as f:     reader = csv.reader(f)     try:         for row in reader:             print row     except csv.Error, e:         sys.exit(&#39;file %s, line %d: %s&#39;  (filename, reader.line_num, e))   And while the module doesn&#8217;t directly support parsing strings, it can easily be done: import csv for row in csv.reader([&#39;one,two,three&#39;]):     print row   The csv module doesn&#8217;t directly support reading and writing Unicode, but it is 8-bit-clean save for some problems with ASCII NUL characters.  So you can write functions or classes that handle the encoding and decoding for you as long as you avoid encodings like UTF-16 that use NULs.  UTF-8 is recommended. unicode_csv_reader() below is a generator that wraps csv.reader to handle Unicode CSV data (a list of Unicode strings).  utf_8_encoder() is a generator that encodes the Unicode strings as UTF-8, one string (or row) at a time.  The encoded strings are parsed by the CSV reader, and unicode_csv_reader() decodes the UTF-8-encoded cells back into Unicode: import csv  def unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs):     # csv.py doesn&#39;t do Unicode; encode temporarily as UTF-8:     csv_reader = csv.reader(utf_8_encoder(unicode_csv_data),                             dialect=dialect, **kwargs)     for row in csv_reader:         # decode UTF-8 back to Unicode, cell by cell:         yield [unicode(cell, &#39;utf-8&#39;) for cell in row]  def utf_8_encoder(unicode_csv_data):     for line in unicode_csv_data:         yield line.encode(&#39;utf-8&#39;)   For all other encodings the following UnicodeReader and UnicodeWriter classes can be used. They take an additional encoding parameter in their constructor and make sure that the data passes the real reader or writer encoded as UTF-8: import csv, codecs, cStringIO  class UTF8Recoder:     \"\"\"     Iterator that reads an encoded stream and reencodes the input to UTF-8     \"\"\"     def __init__(self, f, encoding):         self.reader = codecs.getreader(encoding)(f)      def __iter__(self):         return self      def next(self):         return self.reader.next().encode(\"utf-8\")  class UnicodeReader:     \"\"\"     A CSV reader which will iterate over lines in the CSV file \"f\",     which is encoded in the given encoding.     \"\"\"      def __init__(self, f, dialect=csv.excel, encoding=\"utf-8\", **kwds):         f = UTF8Recoder(f, encoding)         self.reader = csv.reader(f, dialect=dialect, **kwds)      def next(self):         row = self.reader.next()         return [unicode(s, \"utf-8\") for s in row]      def __iter__(self):         return self  class UnicodeWriter:     \"\"\"     A CSV writer which will write rows to CSV file \"f\",     which is encoded in the given encoding.     \"\"\"      def __init__(self, f, dialect=csv.excel, encoding=\"utf-8\", **kwds):         # Redirect output to a queue         self.queue = cStringIO.StringIO()         self.writer = csv.writer(self.queue, dialect=dialect, **kwds)         self.stream = f         self.encoder = codecs.getincrementalencoder(encoding)()      def writerow(self, row):         self.writer.writerow([s.encode(\"utf-8\") for s in row])         # Fetch UTF-8 output from the queue ...         data = self.queue.getvalue()         data = data.decode(\"utf-8\")         # ... and reencode it into the target encoding         data = self.encoder.encode(data)         # write to the target stream         self.stream.write(data)         # empty queue         self.queue.truncate(0)      def writerows(self, rows):         for row in rows:             self.writerow(row)"},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.csvreader.next","title":"csv.csvreader.next","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.csvwriter.writerow","title":"csv.csvwriter.writerow","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.csvwriter.writerows","title":"csv.csvwriter.writerows","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.Dialect","title":"csv.Dialect","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.DictReader","title":"csv.DictReader","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.DictWriter","title":"csv.DictWriter","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.DictWriter.writeheader","title":"csv.DictWriter.writeheader","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.excel","title":"csv.excel","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.excel_tab","title":"csv.excel_tab","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.field_size_limit","title":"csv.field_size_limit","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.get_dialect","title":"csv.get_dialect","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.list_dialects","title":"csv.list_dialects","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.reader","title":"csv.reader","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.register_dialect","title":"csv.register_dialect","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.Sniffer","title":"csv.Sniffer","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.Sniffer.has_header","title":"csv.Sniffer.has_header","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.Sniffer.sniff","title":"csv.Sniffer.sniff","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.unregister_dialect","title":"csv.unregister_dialect","description":""},{"url":"http:\/\/docs.python.org\/library\/csv.html#csv.writer","title":"csv.writer","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html","title":"sqlite3","description":"11.13. sqlite3 &#8212; DB-API 2.0 interface for SQLite databases\u00b6  New in version 2.5. SQLite is a C library that provides a lightweight disk-based database that doesn&#8217;t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage.  It&#8217;s also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle. sqlite3 was written by Gerhard H\u00e4ring and provides a SQL interface compliant with the DB-API 2.0 specification described by PEP 249. To use the module, you must first create a Connection object that represents the database.  Here the data will be stored in the \/tmp\/example file: conn = sqlite3.connect(&#39;\/tmp\/example&#39;)   You can also supply the special name :memory: to create a database in RAM. Once you have a Connection, you can create a Cursor  object and call its execute() method to perform SQL commands: c = conn.cursor()  # Create table c.execute(&#39;&#39;&#39;create table stocks (date text, trans text, symbol text,  qty real, price real)&#39;&#39;&#39;)  # Insert a row of data c.execute(\"\"\"insert into stocks           values (&#39;2006-01-05&#39;,&#39;BUY&#39;,&#39;RHAT&#39;,100,35.14)\"\"\")  # Save (commit) the changes conn.commit()  # We can also close the cursor if we are done with it c.close()   Usually your SQL operations will need to use values from Python variables.  You shouldn&#8217;t assemble your query using Python&#8217;s string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack. Instead, use the DB-API&#8217;s parameter substitution.  Put ? as a placeholder wherever you want to use a value, and then provide a tuple of values as the second argument to the cursor&#8217;s execute() method.  (Other database modules may use a different placeholder, such as %s or :1.) For example: # Never do this -- insecure! symbol = &#39;IBM&#39; c.execute(\"... where symbol = &#39;%s&#39;\"  symbol)  # Do this instead t = (symbol,) c.execute(&#39;select * from stocks where symbol=?&#39;, t)  # Larger example for t in [(&#39;2006-03-28&#39;, &#39;BUY&#39;, &#39;IBM&#39;, 1000, 45.00),           (&#39;2006-04-05&#39;, &#39;BUY&#39;, &#39;MSFT&#39;, 1000, 72.00),           (&#39;2006-04-06&#39;, &#39;SELL&#39;, &#39;IBM&#39;, 500, 53.00),          ]:     c.execute(&#39;insert into stocks values (?,?,?,?,?)&#39;, t)   To retrieve data after executing a SELECT statement, you can either treat the cursor as an iterator, call the cursor&#8217;s fetchone() method to retrieve a single matching row, or call fetchall() to get a list of the matching rows. This example uses the iterator form: >>> c = conn.cursor() >>> c.execute(&#39;select * from stocks order by price&#39;) >>> for row in c: ...    print row ... (u&#39;2006-01-05&#39;, u&#39;BUY&#39;, u&#39;RHAT&#39;, 100, 35.14) (u&#39;2006-03-28&#39;, u&#39;BUY&#39;, u&#39;IBM&#39;, 1000, 45.0) (u&#39;2006-04-06&#39;, u&#39;SELL&#39;, u&#39;IBM&#39;, 500, 53.0) (u&#39;2006-04-05&#39;, u&#39;BUY&#39;, u&#39;MSFT&#39;, 1000, 72.0) >>>    See also  http:\/\/code.google.com\/p\/pysqlite\/ The pysqlite web page &#8211; sqlite3 is developed externally under the name &#8220;pysqlite&#8221;. http:\/\/www.sqlite.org The SQLite web page; the documentation describes the syntax and the available data types for the supported SQL dialect. PEP 249 - Database API Specification 2.0 PEP written by Marc-Andr\u00e9 Lemburg.    11.13.1. Module functions and constants\u00b6   sqlite3.PARSE_DECLTYPES\u00b6 This constant is meant to be used with the detect_types parameter of the connect() function. Setting it makes the sqlite3 module parse the declared type for each column it returns.  It will parse out the first word of the declared type, i. e.  for &#8220;integer primary key&#8221;, it will parse out &#8220;integer&#8221;, or for &#8220;number(10)&#8221; it will parse out &#8220;number&#8221;. Then for that column, it will look into the converters dictionary and use the converter function registered for that type there.     sqlite3.PARSE_COLNAMES\u00b6 This constant is meant to be used with the detect_types parameter of the connect() function. Setting this makes the SQLite interface parse the column name for each column it returns.  It will look for a string formed [mytype] in there, and then decide that &#8216;mytype&#8217; is the type of the column. It will try to find an entry of &#8216;mytype&#8217; in the converters dictionary and then use the converter function found there to return the value. The column name found in Cursor.description is only the first word of the column name, i.  e. if you use something like 'as \"x [datetime]\"' in your SQL, then we will parse out everything until the first blank for the column name: the column name would simply be &#8220;x&#8221;.     sqlite3.connect(database[, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements])\u00b6 Opens a connection to the SQLite database file database. You can use \":memory:\" to open a database connection to a database that resides in RAM instead of on disk. When a database is accessed by multiple connections, and one of the processes modifies the database, the SQLite database is locked until that transaction is committed. The timeout parameter specifies how long the connection should wait for the lock to go away until raising an exception. The default for the timeout parameter is 5.0 (five seconds). For the isolation_level parameter, please see the Connection.isolation_level property of Connection objects. SQLite natively supports only the types TEXT, INTEGER, FLOAT, BLOB and NULL. If you want to use other types you must add support for them yourself. The detect_types parameter and the using custom converters registered with the module-level register_converter() function allow you to easily do that. detect_types defaults to 0 (i. e. off, no type detection), you can set it to any combination of PARSE_DECLTYPES and PARSE_COLNAMES to turn type detection on. By default, the sqlite3 module uses its Connection class for the connect call.  You can, however, subclass the Connection class and make connect() use your class instead by providing your class for the factory parameter. Consult the section SQLite and Python types of this manual for details. The sqlite3 module internally uses a statement cache to avoid SQL parsing overhead. If you want to explicitly set the number of statements that are cached for the connection, you can set the cached_statements parameter. The currently implemented default is to cache 100 statements.     sqlite3.register_converter(typename, callable)\u00b6 Registers a callable to convert a bytestring from the database into a custom Python type. The callable will be invoked for all database values that are of the type typename. Confer the parameter detect_types of the connect() function for how the type detection works. Note that the case of typename and the name of the type in your query must match!    sqlite3.register_adapter(type, callable)\u00b6 Registers a callable to convert the custom Python type type into one of SQLite&#8217;s supported types. The callable callable accepts as single parameter the Python value, and must return a value of the following types: int, long, float, str (UTF-8 encoded), unicode or buffer.    sqlite3.complete_statement(sql)\u00b6 Returns True if the string sql contains one or more complete SQL statements terminated by semicolons. It does not verify that the SQL is syntactically correct, only that there are no unclosed string literals and the statement is terminated by a semicolon. This can be used to build a shell for SQLite, as in the following example: # A minimal SQLite shell for experiments  import sqlite3  con = sqlite3.connect(\":memory:\") con.isolation_level = None cur = con.cursor()  buffer = \"\"  print \"Enter your SQL commands to execute in sqlite3.\" print \"Enter a blank line to exit.\"  while True:     line = raw_input()     if line == \"\":         break     buffer += line     if sqlite3.complete_statement(buffer):         try:             buffer = buffer.strip()             cur.execute(buffer)              if buffer.lstrip().upper().startswith(\"SELECT\"):                 print cur.fetchall()         except sqlite3.Error, e:             print \"An error occurred:\", e.args[0]         buffer = \"\"  con.close()       sqlite3.enable_callback_tracebacks(flag)\u00b6 By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc. If you want to debug them, you can call this function with flag as True. Afterwards, you will get tracebacks from callbacks on sys.stderr. Use False to disable the feature again.    11.13.2. Connection Objects\u00b6   class sqlite3.Connection\u00b6 A SQLite database connection has the following attributes and methods:    Connection.isolation_level\u00b6 Get or set the current isolation level. None for autocommit mode or one of &#8220;DEFERRED&#8221;, &#8220;IMMEDIATE&#8221; or &#8220;EXCLUSIVE&#8221;. See section Controlling Transactions for a more detailed explanation.    Connection.cursor([cursorClass])\u00b6 The cursor method accepts a single optional parameter cursorClass. If supplied, this must be a custom cursor class that extends sqlite3.Cursor.    Connection.commit()\u00b6 This method commits the current transaction. If you don&#8217;t call this method, anything you did since the last call to commit() is not visible from other database connections. If you wonder why you don&#8217;t see the data you&#8217;ve written to the database, please check you didn&#8217;t forget to call this method.    Connection.rollback()\u00b6 This method rolls back any changes to the database since the last call to commit().    Connection.close()\u00b6 This closes the database connection. Note that this does not automatically call commit(). If you just close your database connection without calling commit() first, your changes will be lost!    Connection.execute(sql[, parameters])\u00b6 This is a nonstandard shortcut that creates an intermediate cursor object by calling the cursor method, then calls the cursor&#8217;s execute method with the parameters given.    Connection.executemany(sql[, parameters])\u00b6 This is a nonstandard shortcut that creates an intermediate cursor object by calling the cursor method, then calls the cursor&#8217;s executemany method with the parameters given.    Connection.executescript(sql_script)\u00b6 This is a nonstandard shortcut that creates an intermediate cursor object by calling the cursor method, then calls the cursor&#8217;s executescript method with the parameters given.    Connection.create_function(name, num_params, func)\u00b6 Creates a user-defined function that you can later use from within SQL statements under the function name name. num_params is the number of parameters the function accepts, and func is a Python callable that is called as the SQL function. The function can return any of the types supported by SQLite: unicode, str, int, long, float, buffer and None. Example: import sqlite3 import md5  def md5sum(t):     return md5.md5(t).hexdigest()  con = sqlite3.connect(\":memory:\") con.create_function(\"md5\", 1, md5sum) cur = con.cursor() cur.execute(\"select md5(?)\", (\"foo\",)) print cur.fetchone()[0]       Connection.create_aggregate(name, num_params, aggregate_class)\u00b6 Creates a user-defined aggregate function. The aggregate class must implement a step method, which accepts the number of parameters num_params, and a finalize method which will return the final result of the aggregate. The finalize method can return any of the types supported by SQLite: unicode, str, int, long, float, buffer and None. Example: import sqlite3  class MySum:     def __init__(self):         self.count = 0      def step(self, value):         self.count += value      def finalize(self):         return self.count  con = sqlite3.connect(\":memory:\") con.create_aggregate(\"mysum\", 1, MySum) cur = con.cursor() cur.execute(\"create table test(i)\") cur.execute(\"insert into test(i) values (1)\") cur.execute(\"insert into test(i) values (2)\") cur.execute(\"select mysum(i) from test\") print cur.fetchone()[0]       Connection.create_collation(name, callable)\u00b6 Creates a collation with the specified name and callable. The callable will be passed two string arguments. It should return -1 if the first is ordered lower than the second, 0 if they are ordered equal and 1 if the first is ordered higher than the second.  Note that this controls sorting (ORDER BY in SQL) so your comparisons don&#8217;t affect other SQL operations. Note that the callable will get its parameters as Python bytestrings, which will normally be encoded in UTF-8. The following example shows a custom collation that sorts &#8220;the wrong way&#8221;: import sqlite3  def collate_reverse(string1, string2):     return -cmp(string1, string2)  con = sqlite3.connect(\":memory:\") con.create_collation(\"reverse\", collate_reverse)  cur = con.cursor() cur.execute(\"create table test(x)\") cur.executemany(\"insert into test(x) values (?)\", [(\"a\",), (\"b\",)]) cur.execute(\"select x from test order by x collate reverse\") for row in cur:     print row con.close()   To remove a collation, call create_collation with None as callable: con.create_collation(\"reverse\", None)       Connection.interrupt()\u00b6 You can call this method from a different thread to abort any queries that might be executing on the connection. The query will then abort and the caller will get an exception.    Connection.set_authorizer(authorizer_callback)\u00b6 This routine registers a callback. The callback is invoked for each attempt to access a column of a table in the database. The callback should return SQLITE_OK if access is allowed, SQLITE_DENY if the entire SQL statement should be aborted with an error and SQLITE_IGNORE if the column should be treated as a NULL value. These constants are available in the sqlite3 module. The first argument to the callback signifies what kind of operation is to be authorized. The second and third argument will be arguments or None depending on the first argument. The 4th argument is the name of the database (&#8220;main&#8221;, &#8220;temp&#8221;, etc.) if applicable. The 5th argument is the name of the inner-most trigger or view that is responsible for the access attempt or None if this access attempt is directly from input SQL code. Please consult the SQLite documentation about the possible values for the first argument and the meaning of the second and third argument depending on the first one. All necessary constants are available in the sqlite3 module.     Connection.set_progress_handler(handler, n)\u00b6  New in version 2.6. This routine registers a callback. The callback is invoked for every n instructions of the SQLite virtual machine. This is useful if you want to get called from SQLite during long-running operations, for example to update a GUI. If you want to clear any previously installed progress handler, call the method with None for handler.     Connection.enable_load_extension(enabled)\u00b6  New in version 2.7. This routine allows\/disallows the SQLite engine to load SQLite extensions from shared libraries.  SQLite extensions can define new functions, aggregates or whole new virtual table implementations.  One well-known extension is the fulltext-search extension distributed with SQLite. import sqlite3  con = sqlite3.connect(\":memory:\")  # enable extension loading con.enable_load_extension(True)  # Load the fulltext search extension con.execute(\"select load_extension(&#39;.\/fts3.so&#39;)\")  # alternatively you can load the extension using an API call: # con.load_extension(\".\/fts3.so\")  # disable extension laoding again con.enable_load_extension(False)  # example from SQLite wiki con.execute(\"create virtual table recipe using fts3(name, ingredients)\") con.executescript(\"\"\"     insert into recipe (name, ingredients) values (&#39;broccoli stew&#39;, &#39;broccoli peppers cheese tomatoes&#39;);     insert into recipe (name, ingredients) values (&#39;pumpkin stew&#39;, &#39;pumpkin onions garlic celery&#39;);     insert into recipe (name, ingredients) values (&#39;broccoli pie&#39;, &#39;broccoli cheese onions flour&#39;);     insert into recipe (name, ingredients) values (&#39;pumpkin pie&#39;, &#39;pumpkin sugar flour butter&#39;);     \"\"\") for row in con.execute(\"select rowid, name, ingredients from recipe where name match &#39;pie&#39;\"):     print row   Loadable extensions are disabled by default. See [1]     Connection.load_extension(path)\u00b6  New in version 2.7. This routine loads a SQLite extension from a shared library.  You have to enable extension loading with enable_load_extension() before you can use this routine. Loadable extensions are disabled by default. See [1]     Connection.row_factory\u00b6 You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.  This way, you can implement more advanced ways of returning results, such  as returning an object that can also access columns by name. Example: import sqlite3  def dict_factory(cursor, row):     d = {}     for idx, col in enumerate(cursor.description):         d[col[0]] = row[idx]     return d  con = sqlite3.connect(\":memory:\") con.row_factory = dict_factory cur = con.cursor() cur.execute(\"select 1 as a\") print cur.fetchone()[\"a\"]   If returning a tuple doesn&#8217;t suffice and you want name-based access to columns, you should consider setting row_factory to the highly-optimized sqlite3.Row type. Row provides both index-based and case-insensitive name-based access to columns with almost no memory overhead. It will probably be better than your own custom dictionary-based approach or even a db_row based solution.     Connection.text_factory\u00b6 Using this attribute you can control what objects are returned for the TEXT data type. By default, this attribute is set to unicode and the sqlite3 module will return Unicode objects for TEXT. If you want to return bytestrings instead, you can set it to str. For efficiency reasons, there&#8217;s also a way to return Unicode objects only for non-ASCII data, and bytestrings otherwise. To activate it, set this attribute to sqlite3.OptimizedUnicode. You can also set it to any other callable that accepts a single bytestring parameter and returns the resulting object. See the following example code for illustration: import sqlite3  con = sqlite3.connect(\":memory:\") cur = con.cursor()  # Create the table con.execute(\"create table person(lastname, firstname)\")  AUSTRIA = u\"\\xd6sterreich\"  # by default, rows are returned as Unicode cur.execute(\"select ?\", (AUSTRIA,)) row = cur.fetchone() assert row[0] == AUSTRIA  # but we can make sqlite3 always return bytestrings ... con.text_factory = str cur.execute(\"select ?\", (AUSTRIA,)) row = cur.fetchone() assert type(row[0]) == str # the bytestrings will be encoded in UTF-8, unless you stored garbage in the # database ... assert row[0] == AUSTRIA.encode(\"utf-8\")  # we can also implement a custom text_factory ... # here we implement one that will ignore Unicode characters that cannot be # decoded from UTF-8 con.text_factory = lambda x: unicode(x, \"utf-8\", \"ignore\") cur.execute(\"select ?\", (\"this is latin1 and would normally create errors\" +                          u\"\\xe4\\xf6\\xfc\".encode(\"latin1\"),)) row = cur.fetchone() assert type(row[0]) == unicode  # sqlite3 offers a built-in optimized text_factory that will return bytestring # objects, if the data is in ASCII only, and otherwise return unicode objects con.text_factory = sqlite3.OptimizedUnicode cur.execute(\"select ?\", (AUSTRIA,)) row = cur.fetchone() assert type(row[0]) == unicode  cur.execute(\"select ?\", (\"Germany\",)) row = cur.fetchone() assert type(row[0]) == str       Connection.total_changes\u00b6 Returns the total number of database rows that have been modified, inserted, or deleted since the database connection was opened.    Connection.iterdump\u00b6 Returns an iterator to dump the database in an SQL text format.  Useful when saving an in-memory database for later restoration.  This function provides the same capabilities as the .dump command in the sqlite3 shell.  New in version 2.6. Example: # Convert file existing_db.db to SQL dump file dump.sql import sqlite3, os  con = sqlite3.connect(&#39;existing_db.db&#39;) with open(&#39;dump.sql&#39;, &#39;w&#39;) as f:     for line in con.iterdump():         f.write(&#39;%s\\n&#39;  line)       11.13.3. Cursor Objects\u00b6   class sqlite3.Cursor\u00b6 A Cursor instance has the following attributes and methods.    Cursor.execute(sql[, parameters])\u00b6 Executes an SQL statement. The SQL statement may be parametrized (i. e. placeholders instead of SQL literals). The sqlite3 module supports two kinds of placeholders: question marks (qmark style) and named placeholders (named style). This example shows how to use parameters with qmark style: import sqlite3  con = sqlite3.connect(\"mydb\")  cur = con.cursor()  who = \"Yeltsin\" age = 72  cur.execute(\"select name_last, age from people where name_last=? and age=?\", (who, age)) print cur.fetchone()   This example shows how to use the named style: import sqlite3  con = sqlite3.connect(\"mydb\")  cur = con.cursor()  who = \"Yeltsin\" age = 72  cur.execute(\"select name_last, age from people where name_last=:who and age=:age\",     {\"who\": who, \"age\": age}) print cur.fetchone()   execute() will only execute a single SQL statement. If you try to execute more than one statement with it, it will raise a Warning. Use executescript() if you want to execute multiple SQL statements with one call.     Cursor.executemany(sql, seq_of_parameters)\u00b6 Executes an SQL command against all parameter sequences or mappings found in the sequence sql.  The sqlite3 module also allows using an iterator yielding parameters instead of a sequence. import sqlite3  class IterChars:     def __init__(self):         self.count = ord(&#39;a&#39;)      def __iter__(self):         return self      def next(self):         if self.count > ord(&#39;z&#39;):             raise StopIteration         self.count += 1         return (chr(self.count - 1),) # this is a 1-tuple  con = sqlite3.connect(\":memory:\") cur = con.cursor() cur.execute(\"create table characters(c)\")  theIter = IterChars() cur.executemany(\"insert into characters(c) values (?)\", theIter)  cur.execute(\"select c from characters\") print cur.fetchall()   Here&#8217;s a shorter example using a generator: import sqlite3  def char_generator():     import string     for c in string.letters[:26]:         yield (c,)  con = sqlite3.connect(\":memory:\") cur = con.cursor() cur.execute(\"create table characters(c)\")  cur.executemany(\"insert into characters(c) values (?)\", char_generator())  cur.execute(\"select c from characters\") print cur.fetchall()       Cursor.executescript(sql_script)\u00b6 This is a nonstandard convenience method for executing multiple SQL statements at once. It issues a COMMIT statement first, then executes the SQL script it gets as a parameter. sql_script can be a bytestring or a Unicode string. Example: import sqlite3  con = sqlite3.connect(\":memory:\") cur = con.cursor() cur.executescript(\"\"\"     create table person(         firstname,         lastname,         age     );      create table book(         title,         author,         published     );      insert into book(title, author, published)     values (         &#39;Dirk Gently&#39;&#39;s Holistic Detective Agency&#39;,         &#39;Douglas Adams&#39;,         1987     );     \"\"\")       Cursor.fetchone()\u00b6 Fetches the next row of a query result set, returning a single sequence, or None when no more data is available.    Cursor.fetchmany([size=cursor.arraysize])\u00b6 Fetches the next set of rows of a query result, returning a list.  An empty list is returned when no more rows are available. The number of rows to fetch per call is specified by the size parameter. If it is not given, the cursor&#8217;s arraysize determines the number of rows to be fetched. The method should try to fetch as many rows as indicated by the size parameter. If this is not possible due to the specified number of rows not being available, fewer rows may be returned. Note there are performance considerations involved with the size parameter. For optimal performance, it is usually best to use the arraysize attribute. If the size parameter is used, then it is best for it to retain the same value from one fetchmany() call to the next.     Cursor.fetchall()\u00b6 Fetches all (remaining) rows of a query result, returning a list.  Note that the cursor&#8217;s arraysize attribute can affect the performance of this operation. An empty list is returned when no rows are available.    Cursor.rowcount\u00b6 Although the Cursor class of the sqlite3 module implements this attribute, the database engine&#8217;s own support for the determination of &#8220;rows affected&#8221;\/&#8221;rows selected&#8221; is quirky. For DELETE statements, SQLite reports rowcount as 0 if you make a DELETE FROM table without any condition. For executemany() statements, the number of modifications are summed up into rowcount. As required by the Python DB API Spec, the rowcount attribute &#8220;is -1 in case no executeXX() has been performed on the cursor or the rowcount of the last operation is not determinable by the interface&#8221;. This includes SELECT statements because we cannot determine the number of rows a query produced until all rows were fetched.     Cursor.lastrowid\u00b6 This read-only attribute provides the rowid of the last modified row. It is only set if you issued a INSERT statement using the execute() method. For operations other than INSERT or when executemany() is called, lastrowid is set to None.    Cursor.description\u00b6 This read-only attribute provides the column names of the last query. To remain compatible with the Python DB API, it returns a 7-tuple for each column where the last six items of each tuple are None. It is set for SELECT statements without any matching rows as well.     11.13.4. Row Objects\u00b6   class sqlite3.Row\u00b6 A Row instance serves as a highly optimized row_factory for Connection objects. It tries to mimic a tuple in most of its features. It supports mapping access by column name and index, iteration, representation, equality testing and len(). If two Row objects have exactly the same columns and their members are equal, they compare equal.  Changed in version 2.6: Added iteration and equality (hashability).   keys()\u00b6 This method returns a tuple of column names. Immediately after a query, it is the first member of each tuple in Cursor.description.  New in version 2.6.     Let&#8217;s assume we initialize a table as in the example given above: conn = sqlite3.connect(\":memory:\") c = conn.cursor() c.execute(&#39;&#39;&#39;create table stocks (date text, trans text, symbol text,  qty real, price real)&#39;&#39;&#39;) c.execute(\"\"\"insert into stocks           values (&#39;2006-01-05&#39;,&#39;BUY&#39;,&#39;RHAT&#39;,100,35.14)\"\"\") conn.commit() c.close()   Now we plug Row in: >>> conn.row_factory = sqlite3.Row >>> c = conn.cursor() >>> c.execute(&#39;select * from stocks&#39;) <sqlite3.Cursor object at 0x7f4e7dd8fa80> >>> r = c.fetchone() >>> type(r) <type &#39;sqlite3.Row&#39;> >>> r (u&#39;2006-01-05&#39;, u&#39;BUY&#39;, u&#39;RHAT&#39;, 100.0, 35.14) >>> len(r) 5 >>> r[2] u&#39;RHAT&#39; >>> r.keys() [&#39;date&#39;, &#39;trans&#39;, &#39;symbol&#39;, &#39;qty&#39;, &#39;price&#39;] >>> r[&#39;qty&#39;] 100.0 >>> for member in r: print member ... 2006-01-05 BUY RHAT 100.0 35.14     11.13.5. SQLite and Python types\u00b6  11.13.5.1. Introduction\u00b6 SQLite natively supports the following types: NULL, INTEGER, REAL, TEXT, BLOB. The following Python types can thus be sent to SQLite without any problem:       Python type SQLite type    None NULL  int INTEGER  long INTEGER  float REAL  str (UTF8-encoded) TEXT  unicode TEXT  buffer BLOB    This is how SQLite types are converted to Python types by default:       SQLite type Python type    NULL None  INTEGER int or long, depending on size  REAL float  TEXT depends on text_factory, unicode by default  BLOB buffer    The type system of the sqlite3 module is extensible in two ways: you can store additional Python types in a SQLite database via object adaptation, and you can let the sqlite3 module convert SQLite types to different Python types via converters.   11.13.5.2. Using adapters to store additional Python types in SQLite databases\u00b6 As described before, SQLite supports only a limited set of types natively. To use other Python types with SQLite, you must adapt them to one of the sqlite3 module&#8217;s supported types for SQLite: one of NoneType, int, long, float, str, unicode, buffer. The sqlite3 module uses Python object adaptation, as described in PEP 246 for this.  The protocol to use is PrepareProtocol. There are two ways to enable the sqlite3 module to adapt a custom Python type to one of the supported ones.  11.13.5.2.1. Letting your object adapt itself\u00b6 This is a good approach if you write the class yourself. Let&#8217;s suppose you have a class like this: class Point(object):     def __init__(self, x, y):         self.x, self.y = x, y   Now you want to store the point in a single SQLite column.  First you&#8217;ll have to choose one of the supported types first to be used for representing the point. Let&#8217;s just use str and separate the coordinates using a semicolon. Then you need to give your class a method __conform__(self, protocol) which must return the converted value. The parameter protocol will be PrepareProtocol. import sqlite3  class Point(object):     def __init__(self, x, y):         self.x, self.y = x, y      def __conform__(self, protocol):         if protocol is sqlite3.PrepareProtocol:             return \"%f;%f\"  (self.x, self.y)  con = sqlite3.connect(\":memory:\") cur = con.cursor()  p = Point(4.0, -3.2) cur.execute(\"select ?\", (p,)) print cur.fetchone()[0]     11.13.5.2.2. Registering an adapter callable\u00b6 The other possibility is to create a function that converts the type to the string representation and register the function with register_adapter().  Note The type\/class to adapt must be a new-style class, i. e. it must have object as one of its bases.  import sqlite3  class Point(object):     def __init__(self, x, y):         self.x, self.y = x, y  def adapt_point(point):     return \"%f;%f\"  (point.x, point.y)  sqlite3.register_adapter(Point, adapt_point)  con = sqlite3.connect(\":memory:\") cur = con.cursor()  p = Point(4.0, -3.2) cur.execute(\"select ?\", (p,)) print cur.fetchone()[0]   The sqlite3 module has two default adapters for Python&#8217;s built-in datetime.date and datetime.datetime types.  Now let&#8217;s suppose we want to store datetime.datetime objects not in ISO representation, but as a Unix timestamp. import sqlite3 import datetime, time  def adapt_datetime(ts):     return time.mktime(ts.timetuple())  sqlite3.register_adapter(datetime.datetime, adapt_datetime)  con = sqlite3.connect(\":memory:\") cur = con.cursor()  now = datetime.datetime.now() cur.execute(\"select ?\", (now,)) print cur.fetchone()[0]      11.13.5.3. Converting SQLite values to custom Python types\u00b6 Writing an adapter lets you send custom Python types to SQLite. But to make it really useful we need to make the Python to SQLite to Python roundtrip work. Enter converters. Let&#8217;s go back to the Point class. We stored the x and y coordinates separated via semicolons as strings in SQLite. First, we&#8217;ll define a converter function that accepts the string as a parameter and constructs a Point object from it.  Note Converter functions always get called with a string, no matter under which data type you sent the value to SQLite.  def convert_point(s):     x, y = map(float, s.split(\";\"))     return Point(x, y)   Now you need to make the sqlite3 module know that what you select from the database is actually a point. There are two ways of doing this:  Implicitly via the declared type Explicitly via the column name  Both ways are described in section Module functions and constants, in the entries for the constants PARSE_DECLTYPES and PARSE_COLNAMES. The following example illustrates both approaches. import sqlite3  class Point(object):     def __init__(self, x, y):         self.x, self.y = x, y      def __repr__(self):         return \"(%f;%f)\"  (self.x, self.y)  def adapt_point(point):     return \"%f;%f\"  (point.x, point.y)  def convert_point(s):     x, y = map(float, s.split(\";\"))     return Point(x, y)  # Register the adapter sqlite3.register_adapter(Point, adapt_point)  # Register the converter sqlite3.register_converter(\"point\", convert_point)  p = Point(4.0, -3.2)  ######################### # 1) Using declared types con = sqlite3.connect(\":memory:\", detect_types=sqlite3.PARSE_DECLTYPES) cur = con.cursor() cur.execute(\"create table test(p point)\")  cur.execute(\"insert into test(p) values (?)\", (p,)) cur.execute(\"select p from test\") print \"with declared types:\", cur.fetchone()[0] cur.close() con.close()  ####################### # 1) Using column names con = sqlite3.connect(\":memory:\", detect_types=sqlite3.PARSE_COLNAMES) cur = con.cursor() cur.execute(\"create table test(p)\")  cur.execute(\"insert into test(p) values (?)\", (p,)) cur.execute(&#39;select p as \"p [point]\" from test&#39;) print \"with column names:\", cur.fetchone()[0] cur.close() con.close()     11.13.5.4. Default adapters and converters\u00b6 There are default adapters for the date and datetime types in the datetime module. They will be sent as ISO dates\/ISO timestamps to SQLite. The default converters are registered under the name &#8220;date&#8221; for datetime.date and under the name &#8220;timestamp&#8221; for datetime.datetime. This way, you can use date\/timestamps from Python without any additional fiddling in most cases. The format of the adapters is also compatible with the experimental SQLite date\/time functions. The following example demonstrates this. import sqlite3 import datetime  con = sqlite3.connect(\":memory:\", detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES) cur = con.cursor() cur.execute(\"create table test(d date, ts timestamp)\")  today = datetime.date.today() now = datetime.datetime.now()  cur.execute(\"insert into test(d, ts) values (?, ?)\", (today, now)) cur.execute(\"select d, ts from test\") row = cur.fetchone() print today, \"=>\", row[0], type(row[0]) print now, \"=>\", row[1], type(row[1])  cur.execute(&#39;select current_date as \"d [date]\", current_timestamp as \"ts [timestamp]\"&#39;) row = cur.fetchone() print \"current_date\", row[0], type(row[0]) print \"current_timestamp\", row[1], type(row[1])      11.13.6. Controlling Transactions\u00b6 By default, the sqlite3 module opens transactions implicitly before a Data Modification Language (DML)  statement (i.e. INSERT\/UPDATE\/DELETE\/REPLACE), and commits transactions implicitly before a non-DML, non-query statement (i. e. anything other than SELECT or the aforementioned). So if you are within a transaction and issue a command like CREATE TABLE ..., VACUUM, PRAGMA, the sqlite3 module will commit implicitly before executing that command. There are two reasons for doing that. The first is that some of these commands don&#8217;t work within transactions. The other reason is that sqlite3 needs to keep track of the transaction state (if a transaction is active or not). You can control which kind of BEGIN statements sqlite3 implicitly executes (or none at all) via the isolation_level parameter to the connect() call, or via the isolation_level property of connections. If you want autocommit mode, then set isolation_level to None. Otherwise leave it at its default, which will result in a plain &#8220;BEGIN&#8221; statement, or set it to one of SQLite&#8217;s supported isolation levels: &#8220;DEFERRED&#8221;, &#8220;IMMEDIATE&#8221; or &#8220;EXCLUSIVE&#8221;.   11.13.7. Using sqlite3 efficiently\u00b6  11.13.7.1. Using shortcut methods\u00b6 Using the nonstandard execute(), executemany() and executescript() methods of the Connection object, your code can be written more concisely because you don&#8217;t have to create the (often superfluous) Cursor objects explicitly. Instead, the Cursor objects are created implicitly and these shortcut methods return the cursor objects. This way, you can execute a SELECT statement and iterate over it directly using only a single call on the Connection object. import sqlite3  persons = [     (\"Hugo\", \"Boss\"),     (\"Calvin\", \"Klein\")     ]  con = sqlite3.connect(\":memory:\")  # Create the table con.execute(\"create table person(firstname, lastname)\")  # Fill the table con.executemany(\"insert into person(firstname, lastname) values (?, ?)\", persons)  # Print the table contents for row in con.execute(\"select firstname, lastname from person\"):     print row  # Using a dummy WHERE clause to not let SQLite take the shortcut table deletes. print \"I just deleted\", con.execute(\"delete from person where 1=1\").rowcount, \"rows\"     11.13.7.2. Accessing columns by name instead of by index\u00b6 One useful feature of the sqlite3 module is the built-in sqlite3.Row class designed to be used as a row factory. Rows wrapped with this class can be accessed both by index (like tuples) and case-insensitively by name: import sqlite3  con = sqlite3.connect(\"mydb\") con.row_factory = sqlite3.Row  cur = con.cursor() cur.execute(\"select name_last, age from people\") for row in cur:     assert row[0] == row[\"name_last\"]     assert row[\"name_last\"] == row[\"nAmE_lAsT\"]     assert row[1] == row[\"age\"]     assert row[1] == row[\"AgE\"]     11.13.7.3. Using the connection as a context manager\u00b6  New in version 2.6. Connection objects can be used as context managers that automatically commit or rollback transactions.  In the event of an exception, the transaction is rolled back; otherwise, the transaction is committed: import sqlite3  con = sqlite3.connect(\":memory:\") con.execute(\"create table person (id integer primary key, firstname varchar unique)\")  # Successful, con.commit() is called automatically afterwards with con:     con.execute(\"insert into person(firstname) values (?)\", (\"Joe\",))  # con.rollback() is called after the with block finishes with an exception, the # exception is still raised and must be caught try:     with con:         con.execute(\"insert into person(firstname) values (?)\", (\"Joe\",)) except sqlite3.IntegrityError:     print \"couldn&#39;t add Joe twice\"      11.13.8. Common issues\u00b6  11.13.8.1. Multithreading\u00b6 Older SQLite versions had issues with sharing connections between threads. That&#8217;s why the Python module disallows sharing connections and cursors between threads. If you still try to do so, you will get an exception at runtime. The only exception is calling the interrupt() method, which only makes sense to call from a different thread. Footnotes    [1](1, 2) The sqlite3 module is not built with loadable extension support by default, because some platforms (notably Mac OS X) have SQLite libraries which are compiled without this feature. To get loadable extension support, you must modify setup.py and remove the line that sets SQLITE_OMIT_LOAD_EXTENSION."},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.complete_statement","title":"sqlite3.complete_statement","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.connect","title":"sqlite3.connect","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection","title":"sqlite3.Connection","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.close","title":"sqlite3.Connection.close","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.commit","title":"sqlite3.Connection.commit","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.create_aggregate","title":"sqlite3.Connection.create_aggregate","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.create_collation","title":"sqlite3.Connection.create_collation","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.create_function","title":"sqlite3.Connection.create_function","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.cursor","title":"sqlite3.Connection.cursor","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.enable_load_extension","title":"sqlite3.Connection.enable_load_extension","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.execute","title":"sqlite3.Connection.execute","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.executemany","title":"sqlite3.Connection.executemany","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.executescript","title":"sqlite3.Connection.executescript","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.interrupt","title":"sqlite3.Connection.interrupt","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.load_extension","title":"sqlite3.Connection.load_extension","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.rollback","title":"sqlite3.Connection.rollback","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.set_authorizer","title":"sqlite3.Connection.set_authorizer","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Connection.set_progress_handler","title":"sqlite3.Connection.set_progress_handler","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Cursor","title":"sqlite3.Cursor","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Cursor.execute","title":"sqlite3.Cursor.execute","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Cursor.executemany","title":"sqlite3.Cursor.executemany","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Cursor.executescript","title":"sqlite3.Cursor.executescript","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Cursor.fetchall","title":"sqlite3.Cursor.fetchall","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Cursor.fetchmany","title":"sqlite3.Cursor.fetchmany","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Cursor.fetchone","title":"sqlite3.Cursor.fetchone","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.enable_callback_tracebacks","title":"sqlite3.enable_callback_tracebacks","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.register_adapter","title":"sqlite3.register_adapter","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.register_converter","title":"sqlite3.register_converter","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Row","title":"sqlite3.Row","description":""},{"url":"http:\/\/docs.python.org\/library\/sqlite3.html#sqlite3.Row.keys","title":"sqlite3.Row.keys","description":""},{"url":"http:\/\/docs.python.org\/library\/netrc.html","title":"netrc","description":"13.4. netrc &#8212; netrc file processing\u00b6  New in version 1.5.2. Source code: Lib\/netrc.py  The netrc class parses and encapsulates the netrc file format used by the Unix ftp program and other FTP clients.   class netrc.netrc([file])\u00b6 A netrc instance or subclass instance encapsulates data from  a netrc file.  The initialization argument, if present, specifies the file to parse.  If no argument is given, the file .netrc in the user&#8217;s home directory will be read.  Parse errors will raise NetrcParseError with diagnostic information including the file name, line number, and terminating token.    exception netrc.NetrcParseError\u00b6 Exception raised by the netrc class when syntactical errors are encountered in source text.  Instances of this exception provide three interesting attributes:  msg is a textual explanation of the error, filename is the name of the source file, and lineno gives the line number on which the error was found.   13.4.1. netrc Objects\u00b6 A netrc instance has the following methods:   netrc.authenticators(host)\u00b6 Return a 3-tuple (login, account, password) of authenticators for host. If the netrc file did not contain an entry for the given host, return the tuple associated with the &#8216;default&#8217; entry.  If neither matching host nor default entry is available, return None.    netrc.__repr__()\u00b6 Dump the class data as a string in the format of a netrc file. (This discards comments and may reorder the entries.)  Instances of netrc have public instance variables:   netrc.hosts\u00b6 Dictionary mapping host names to (login, account, password) tuples.  The &#8216;default&#8217; entry, if any, is represented as a pseudo-host by that name.    netrc.macros\u00b6 Dictionary mapping macro names to string lists.   Note Passwords are limited to a subset of the ASCII character set. Versions of this module prior to 2.3 were extremely limited.  Starting with 2.3, all ASCII punctuation is allowed in passwords.  However, note that whitespace and non-printable characters are not allowed in passwords.  This is a limitation of the way the .netrc file is parsed and may be removed in the future."},{"url":"http:\/\/docs.python.org\/library\/netrc.html#netrc.netrc","title":"netrc.netrc","description":""},{"url":"http:\/\/docs.python.org\/library\/netrc.html#netrc.netrc.__repr__","title":"netrc.netrc.__repr__","description":""},{"url":"http:\/\/docs.python.org\/library\/netrc.html#netrc.netrc.authenticators","title":"netrc.netrc.authenticators","description":""},{"url":"http:\/\/docs.python.org\/library\/hashlib.html","title":"hashlib","description":"14.1. hashlib &#8212; Secure hashes and message digests\u00b6  New in version 2.5. Source code: Lib\/hashlib.py  This module implements a common interface to many different secure hash and message digest algorithms.  Included are the FIPS secure hash algorithms SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as RSA&#8217;s MD5 algorithm (defined in Internet RFC 1321). The terms secure hash and message digest are interchangeable.  Older algorithms were called message digests.  The modern term is secure hash.  Note If you want the adler32 or crc32 hash functions they are available in the zlib module.   Warning Some algorithms have known hash collision weaknesses, see the FAQ at the end.  There is one constructor method named for each type of hash.  All return a hash object with the same simple interface. For example: use sha1() to create a SHA1 hash object. You can now feed this object with arbitrary strings using the update() method.  At any point you can ask it for the digest of the concatenation of the strings fed to it so far using the digest() or hexdigest() methods. Constructors for hash algorithms that are always present in this module are md5(), sha1(), sha224(), sha256(), sha384(), and sha512().  Additional algorithms may also be available depending upon the OpenSSL library that Python uses on your platform. For example, to obtain the digest of the string 'Nobody inspects the spammish repetition': >>> import hashlib >>> m = hashlib.md5() >>> m.update(\"Nobody inspects\") >>> m.update(\" the spammish repetition\") >>> m.digest() &#39;\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9&#39; >>> m.digest_size 16 >>> m.block_size 64   More condensed: >>> hashlib.sha224(\"Nobody inspects the spammish repetition\").hexdigest() &#39;a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2&#39;   A generic new() constructor that takes the string name of the desired algorithm as its first parameter also exists to allow access to the above listed hashes as well as any other algorithms that your OpenSSL library may offer.  The named constructors are much faster than new() and should be preferred. Using new() with an algorithm provided by OpenSSL: >>> h = hashlib.new(&#39;ripemd160&#39;) >>> h.update(\"Nobody inspects the spammish repetition\") >>> h.hexdigest() &#39;cc4a5ce1b3df48aec5d22d1f16b894a0b894eccc&#39;   This module provides the following constant attribute:   hashlib.algorithms\u00b6 A tuple providing the names of the hash algorithms guaranteed to be supported by this module.  New in version 2.7.   The following values are provided as constant attributes of the hash objects returned by the constructors:   hash.digest_size\u00b6 The size of the resulting hash in bytes.    hash.block_size\u00b6 The internal block size of the hash algorithm in bytes.  A hash object has the following methods:   hash.update(arg)\u00b6 Update the hash object with the string arg.  Repeated calls are equivalent to a single call with the concatenation of all the arguments: m.update(a); m.update(b) is equivalent to m.update(a+b).  Changed in version 2.7.     hash.digest()\u00b6 Return the digest of the strings passed to the update() method so far. This is a string of digest_size bytes which may contain non-ASCII characters, including null bytes.    hash.hexdigest()\u00b6 Like digest() except the digest is returned as a string of double length, containing only hexadecimal digits.  This may  be used to exchange the value safely in email or other non-binary environments.    hash.copy()\u00b6 Return a copy (&#8220;clone&#8221;) of the hash object.  This can be used to efficiently compute the digests of strings that share a common initial substring.   See also  Module hmac A module to generate message authentication codes using hashes. Module base64 Another way to encode binary hashes for non-binary environments. http:\/\/csrc.nist.gov\/publications\/fips\/fips180-2\/fips180-2.pdf The FIPS 180-2 publication on Secure Hash Algorithms. http:\/\/en.wikipedia.org\/wiki\/Cryptographic_hash_function#Cryptographic_hash_algorithms Wikipedia article with information on which algorithms have known issues and what that means regarding their use."},{"url":"http:\/\/docs.python.org\/library\/hashlib.html#hashlib.hash.copy","title":"hashlib.hash.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/hashlib.html#hashlib.hash.digest","title":"hashlib.hash.digest","description":""},{"url":"http:\/\/docs.python.org\/library\/hashlib.html#hashlib.hash.hexdigest","title":"hashlib.hash.hexdigest","description":""},{"url":"http:\/\/docs.python.org\/library\/hashlib.html#hashlib.hash.update","title":"hashlib.hash.update","description":""},{"url":"http:\/\/docs.python.org\/library\/hmac.html","title":"hmac","description":"14.2. hmac &#8212; Keyed-Hashing for Message Authentication\u00b6  New in version 2.2. Source code: Lib\/hmac.py  This module implements the HMAC algorithm as described by RFC 2104.   hmac.new(key[, msg[, digestmod]])\u00b6 Return a new hmac object.  If msg is present, the method call update(msg) is made. digestmod is the digest constructor or module for the HMAC object to use. It defaults to  the hashlib.md5() constructor.  An HMAC object has the following methods:   hmac.update(msg)\u00b6 Update the hmac object with the string msg.  Repeated calls are equivalent to a single call with the concatenation of all the arguments: m.update(a); m.update(b) is equivalent to m.update(a + b).    hmac.digest()\u00b6 Return the digest of the strings passed to the update() method so far. This string will be the same length as the digest_size of the digest given to the constructor.  It may contain non-ASCII characters, including NUL bytes.    hmac.hexdigest()\u00b6 Like digest() except the digest is returned as a string twice the length containing only hexadecimal digits.  This may be used to exchange the value safely in email or other non-binary environments.    hmac.copy()\u00b6 Return a copy (&#8220;clone&#8221;) of the hmac object.  This can be used to efficiently compute the digests of strings that share a common initial substring.   See also  Module hashlib The Python module providing secure hash functions."},{"url":"http:\/\/docs.python.org\/library\/hmac.html#hmac.hmac.copy","title":"hmac.hmac.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/hmac.html#hmac.hmac.digest","title":"hmac.hmac.digest","description":""},{"url":"http:\/\/docs.python.org\/library\/hmac.html#hmac.hmac.hexdigest","title":"hmac.hmac.hexdigest","description":""},{"url":"http:\/\/docs.python.org\/library\/hmac.html#hmac.hmac.update","title":"hmac.hmac.update","description":""},{"url":"http:\/\/docs.python.org\/library\/hmac.html#hmac.new","title":"hmac.new","description":""},{"url":"http:\/\/docs.python.org\/library\/plistlib.html","title":"plistlib","description":"13.6. plistlib &#8212; Generate and parse Mac OS X .plist files\u00b6  Changed in version 2.6: This module was previously only available in the Mac-specific library, it is now available for all platforms. Source code: Lib\/plistlib.py  This module provides an interface for reading and writing the &#8220;property list&#8221; XML files used mainly by Mac OS X. The property list (.plist) file format is a simple XML pickle supporting basic object types, like dictionaries, lists, numbers and strings.  Usually the top level object is a dictionary. Values can be strings, integers, floats, booleans, tuples, lists, dictionaries (but only with string keys), Data or datetime.datetime objects.  String values (including dictionary keys) may be unicode strings &#8211; they will be written out as UTF-8. The <data> plist type is supported through the Data class.  This is a thin wrapper around a Python string.  Use Data if your strings contain control characters.  See also  PList manual page Apple&#8217;s documentation of the file format.   This module defines the following functions:   plistlib.readPlist(pathOrFile)\u00b6 Read a plist file. pathOrFile may either be a file name or a (readable) file object.  Return the unpacked root object (which usually is a dictionary). The XML data is parsed using the Expat parser from xml.parsers.expat &#8211; see its documentation for possible exceptions on ill-formed XML. Unknown elements will simply be ignored by the plist parser.     plistlib.writePlist(rootObject, pathOrFile)\u00b6 Write rootObject to a plist file. pathOrFile may either be a file name or a (writable) file object. A TypeError will be raised if the object is of an unsupported type or a container that contains objects of unsupported types.     plistlib.readPlistFromString(data)\u00b6 Read a plist from a string.  Return the root object.    plistlib.writePlistToString(rootObject)\u00b6 Return rootObject as a plist-formatted string.    plistlib.readPlistFromResource(path[, restype='plst'[, resid=0]])\u00b6 Read a plist from the resource with type restype from the resource fork of path.  Availability: Mac OS X.  Note In Python 3.x, this function has been removed.      plistlib.writePlistToResource(rootObject, path[, restype='plst'[, resid=0]])\u00b6 Write rootObject as a resource with type restype to the resource fork of path.  Availability: Mac OS X.  Note In Python 3.x, this function has been removed.    The following class is available:   class plistlib.Data(data)\u00b6 Return a &#8220;data&#8221; wrapper object around the string data.  This is used in functions converting from\/to plists to represent the <data> type available in plists. It has one attribute, data, that can be used to retrieve the Python string stored in it.    13.6.1. Examples\u00b6 Generating a plist: pl = dict(     aString=\"Doodah\",     aList=[\"A\", \"B\", 12, 32.1, [1, 2, 3]],     aFloat = 0.1,     anInt = 728,     aDict=dict(         anotherString=\"<hello & hi there!>\",         aUnicodeValue=u&#39;M\\xe4ssig, Ma\\xdf&#39;,         aTrueValue=True,         aFalseValue=False,     ),     someData = Data(\"<binary gunk>\"),     someMoreData = Data(\"<lots of binary gunk>\" * 10),     aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime())), ) # unicode keys are possible, but a little awkward to use: pl[u&#39;\\xc5benraa&#39;] = \"That was a unicode key.\" writePlist(pl, fileName)   Parsing a plist: pl = readPlist(pathOrFile) print pl[\"aKey\"]"},{"url":"http:\/\/docs.python.org\/library\/plistlib.html#plistlib.Data","title":"plistlib.Data","description":""},{"url":"http:\/\/docs.python.org\/library\/plistlib.html#plistlib.readPlist","title":"plistlib.readPlist","description":""},{"url":"http:\/\/docs.python.org\/library\/plistlib.html#plistlib.readPlistFromResource","title":"plistlib.readPlistFromResource","description":""},{"url":"http:\/\/docs.python.org\/library\/plistlib.html#plistlib.readPlistFromString","title":"plistlib.readPlistFromString","description":""},{"url":"http:\/\/docs.python.org\/library\/plistlib.html#plistlib.writePlist","title":"plistlib.writePlist","description":""},{"url":"http:\/\/docs.python.org\/library\/plistlib.html#plistlib.writePlistToResource","title":"plistlib.writePlistToResource","description":""},{"url":"http:\/\/docs.python.org\/library\/plistlib.html#plistlib.writePlistToString","title":"plistlib.writePlistToString","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html","title":"xdrlib","description":"13.5. xdrlib &#8212; Encode and decode XDR data\u00b6 Source code: Lib\/xdrlib.py  The xdrlib module supports the External Data Representation Standard as described in RFC 1014, written by Sun Microsystems, Inc. June 1987.  It supports most of the data types described in the RFC. The xdrlib module defines two classes, one for packing variables into XDR representation, and another for unpacking from XDR representation.  There are also two exception classes.   class xdrlib.Packer\u00b6 Packer is the class for packing data into XDR representation. The Packer class is instantiated with no arguments.    class xdrlib.Unpacker(data)\u00b6 Unpacker is the complementary class which unpacks XDR data values from a string buffer.  The input buffer is given as data.   See also  RFC 1014 - XDR: External Data Representation Standard This RFC defined the encoding of data which was XDR at the time this module was originally written.  It has apparently been obsoleted by RFC 1832. RFC 1832 - XDR: External Data Representation Standard Newer RFC that provides a revised definition of XDR.    13.5.1. Packer Objects\u00b6 Packer instances have the following methods:   Packer.get_buffer()\u00b6 Returns the current pack buffer as a string.    Packer.reset()\u00b6 Resets the pack buffer to the empty string.  In general, you can pack any of the most common XDR data types by calling the appropriate pack_type() method.  Each method takes a single argument, the value to pack.  The following simple data type packing methods are supported: pack_uint(), pack_int(), pack_enum(), pack_bool(), pack_uhyper(), and pack_hyper().   Packer.pack_float(value)\u00b6 Packs the single-precision floating point number value.    Packer.pack_double(value)\u00b6 Packs the double-precision floating point number value.  The following methods support packing strings, bytes, and opaque data:   Packer.pack_fstring(n, s)\u00b6 Packs a fixed length string, s.  n is the length of the string but it is not packed into the data buffer.  The string is padded with null bytes if necessary to guaranteed 4 byte alignment.    Packer.pack_fopaque(n, data)\u00b6 Packs a fixed length opaque data stream, similarly to pack_fstring().    Packer.pack_string(s)\u00b6 Packs a variable length string, s.  The length of the string is first packed as an unsigned integer, then the string data is packed with pack_fstring().    Packer.pack_opaque(data)\u00b6 Packs a variable length opaque data string, similarly to pack_string().    Packer.pack_bytes(bytes)\u00b6 Packs a variable length byte stream, similarly to pack_string().  The following methods support packing arrays and lists:   Packer.pack_list(list, pack_item)\u00b6 Packs a list of homogeneous items.  This method is useful for lists with an indeterminate size; i.e. the size is not available until the entire list has been walked.  For each item in the list, an unsigned integer 1 is packed first, followed by the data value from the list.  pack_item is the function that is called to pack the individual item.  At the end of the list, an unsigned integer 0 is packed. For example, to pack a list of integers, the code might appear like this: import xdrlib p = xdrlib.Packer() p.pack_list([1, 2, 3], p.pack_int)       Packer.pack_farray(n, array, pack_item)\u00b6 Packs a fixed length list (array) of homogeneous items.  n is the length of the list; it is not packed into the buffer, but a ValueError exception is raised if len(array) is not equal to n.  As above, pack_item is the function used to pack each element.    Packer.pack_array(list, pack_item)\u00b6 Packs a variable length list of homogeneous items.  First, the length of the list is packed as an unsigned integer, then each element is packed as in pack_farray() above.    13.5.2. Unpacker Objects\u00b6 The Unpacker class offers the following methods:   Unpacker.reset(data)\u00b6 Resets the string buffer with the given data.    Unpacker.get_position()\u00b6 Returns the current unpack position in the data buffer.    Unpacker.set_position(position)\u00b6 Sets the data buffer unpack position to position.  You should be careful about using get_position() and set_position().    Unpacker.get_buffer()\u00b6 Returns the current unpack data buffer as a string.    Unpacker.done()\u00b6 Indicates unpack completion.  Raises an Error exception if all of the data has not been unpacked.  In addition, every data type that can be packed with a Packer, can be unpacked with an Unpacker.  Unpacking methods are of the form unpack_type(), and take no arguments.  They return the unpacked object.   Unpacker.unpack_float()\u00b6 Unpacks a single-precision floating point number.    Unpacker.unpack_double()\u00b6 Unpacks a double-precision floating point number, similarly to unpack_float().  In addition, the following methods unpack strings, bytes, and opaque data:   Unpacker.unpack_fstring(n)\u00b6 Unpacks and returns a fixed length string.  n is the number of characters expected.  Padding with null bytes to guaranteed 4 byte alignment is assumed.    Unpacker.unpack_fopaque(n)\u00b6 Unpacks and returns a fixed length opaque data stream, similarly to unpack_fstring().    Unpacker.unpack_string()\u00b6 Unpacks and returns a variable length string.  The length of the string is first unpacked as an unsigned integer, then the string data is unpacked with unpack_fstring().    Unpacker.unpack_opaque()\u00b6 Unpacks and returns a variable length opaque data string, similarly to unpack_string().    Unpacker.unpack_bytes()\u00b6 Unpacks and returns a variable length byte stream, similarly to unpack_string().  The following methods support unpacking arrays and lists:   Unpacker.unpack_list(unpack_item)\u00b6 Unpacks and returns a list of homogeneous items.  The list is unpacked one element at a time by first unpacking an unsigned integer flag.  If the flag is 1, then the item is unpacked and appended to the list.  A flag of 0 indicates the end of the list.  unpack_item is the function that is called to unpack the items.    Unpacker.unpack_farray(n, unpack_item)\u00b6 Unpacks and returns (as a list) a fixed length array of homogeneous items.  n is number of list elements to expect in the buffer. As above, unpack_item is the function used to unpack each element.    Unpacker.unpack_array(unpack_item)\u00b6 Unpacks and returns a variable length list of homogeneous items. First, the length of the list is unpacked as an unsigned integer, then each element is unpacked as in unpack_farray() above.    13.5.3. Exceptions\u00b6 Exceptions in this module are coded as class instances:   exception xdrlib.Error\u00b6 The base exception class.  Error has a single public attribute msg containing the description of the error.    exception xdrlib.ConversionError\u00b6 Class derived from Error.  Contains no additional instance variables.  Here is an example of how you would catch one of these exceptions: import xdrlib p = xdrlib.Packer() try:     p.pack_double(8.01) except xdrlib.ConversionError, instance:     print &#39;packing the double failed:&#39;, instance.msg"},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer","title":"xdrlib.Packer","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.get_buffer","title":"xdrlib.Packer.get_buffer","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_array","title":"xdrlib.Packer.pack_array","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_bytes","title":"xdrlib.Packer.pack_bytes","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_double","title":"xdrlib.Packer.pack_double","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_farray","title":"xdrlib.Packer.pack_farray","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_float","title":"xdrlib.Packer.pack_float","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_fopaque","title":"xdrlib.Packer.pack_fopaque","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_fstring","title":"xdrlib.Packer.pack_fstring","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_list","title":"xdrlib.Packer.pack_list","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_opaque","title":"xdrlib.Packer.pack_opaque","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.pack_string","title":"xdrlib.Packer.pack_string","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Packer.reset","title":"xdrlib.Packer.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker","title":"xdrlib.Unpacker","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.done","title":"xdrlib.Unpacker.done","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.get_buffer","title":"xdrlib.Unpacker.get_buffer","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.get_position","title":"xdrlib.Unpacker.get_position","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.reset","title":"xdrlib.Unpacker.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.set_position","title":"xdrlib.Unpacker.set_position","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_array","title":"xdrlib.Unpacker.unpack_array","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_bytes","title":"xdrlib.Unpacker.unpack_bytes","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_double","title":"xdrlib.Unpacker.unpack_double","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_farray","title":"xdrlib.Unpacker.unpack_farray","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_float","title":"xdrlib.Unpacker.unpack_float","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_fopaque","title":"xdrlib.Unpacker.unpack_fopaque","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_fstring","title":"xdrlib.Unpacker.unpack_fstring","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_list","title":"xdrlib.Unpacker.unpack_list","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_opaque","title":"xdrlib.Unpacker.unpack_opaque","description":""},{"url":"http:\/\/docs.python.org\/library\/xdrlib.html#xdrlib.Unpacker.unpack_string","title":"xdrlib.Unpacker.unpack_string","description":""},{"url":"http:\/\/docs.python.org\/library\/md5.html","title":"md5","description":"14.3. md5 &#8212; MD5 message digest algorithm\u00b6  Deprecated since version 2.5: Use the hashlib module instead. This module implements the interface to RSA&#8217;s MD5 message digest  algorithm (see also Internet RFC 1321).  Its use is quite straightforward: use new() to create an md5 object. You can now feed this object with arbitrary strings using the update() method, and at any point you can ask it for the digest (a strong kind of 128-bit checksum, a.k.a. &#8220;fingerprint&#8221;) of the concatenation of the strings fed to it so far using the digest() method. For example, to obtain the digest of the string 'Nobody inspects the spammish repetition': >>> import md5 >>> m = md5.new() >>> m.update(\"Nobody inspects\") >>> m.update(\" the spammish repetition\") >>> m.digest() &#39;\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9&#39;   More condensed: >>> md5.new(\"Nobody inspects the spammish repetition\").digest() &#39;\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9&#39;   The following values are provided as constants in the module and as attributes of the md5 objects returned by new():   md5.digest_size\u00b6 The size of the resulting digest in bytes.  This is always 16.  The md5 module provides the following functions:   md5.new([arg])\u00b6 Return a new md5 object.  If arg is present, the method call update(arg) is made.    md5.md5([arg])\u00b6 For backward compatibility reasons, this is an alternative name for the new() function.  An md5 object has the following methods:   md5.update(arg)\u00b6 Update the md5 object with the string arg.  Repeated calls are equivalent to a single call with the concatenation of all the arguments: m.update(a); m.update(b) is equivalent to m.update(a+b).    md5.digest()\u00b6 Return the digest of the strings passed to the update() method so far. This is a 16-byte string which may contain non-ASCII characters, including null bytes.    md5.hexdigest()\u00b6 Like digest() except the digest is returned as a string of length 32, containing only hexadecimal digits.  This may  be used to exchange the value safely in email or other non-binary environments.    md5.copy()\u00b6 Return a copy (&#8220;clone&#8221;) of the md5 object.  This can be used to efficiently compute the digests of strings that share a common initial substring.   See also  Module sha Similar module implementing the Secure Hash Algorithm (SHA).  The SHA algorithm is considered a more secure hash."},{"url":"http:\/\/docs.python.org\/library\/md5.html#md5.md5","title":"md5.md5","description":""},{"url":"http:\/\/docs.python.org\/library\/md5.html#md5.md5.copy","title":"md5.md5.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/md5.html#md5.md5.digest","title":"md5.md5.digest","description":""},{"url":"http:\/\/docs.python.org\/library\/md5.html#md5.md5.hexdigest","title":"md5.md5.hexdigest","description":""},{"url":"http:\/\/docs.python.org\/library\/md5.html#md5.md5.update","title":"md5.md5.update","description":""},{"url":"http:\/\/docs.python.org\/library\/md5.html#md5.new","title":"md5.new","description":""},{"url":"http:\/\/docs.python.org\/library\/sha.html","title":"sha","description":"14.4. sha &#8212; SHA-1 message digest algorithm\u00b6  Deprecated since version 2.5: Use the hashlib module instead. This module implements the interface to NIST&#8217;s secure hash  algorithm, known as SHA-1.  SHA-1 is an improved version of the original SHA hash algorithm.  It is used in the same way as the md5 module: use new() to create an sha object, then feed this object with arbitrary strings using the update() method, and at any point you can ask it for the digest of the concatenation of the strings fed to it so far.  SHA-1 digests are 160 bits instead of MD5&#8217;s 128 bits.   sha.new([string])\u00b6 Return a new sha object.  If string is present, the method call update(string) is made.  The following values are provided as constants in the module and as attributes of the sha objects returned by new():   sha.blocksize\u00b6 Size of the blocks fed into the hash function; this is always 1.  This size is used to allow an arbitrary string to be hashed.    sha.digest_size\u00b6 The size of the resulting digest in bytes.  This is always 20.  An sha object has the same methods as md5 objects:   sha.update(arg)\u00b6 Update the sha object with the string arg.  Repeated calls are equivalent to a single call with the concatenation of all the arguments: m.update(a); m.update(b) is equivalent to m.update(a+b).    sha.digest()\u00b6 Return the digest of the strings passed to the update() method so far. This is a 20-byte string which may contain non-ASCII characters, including null bytes.    sha.hexdigest()\u00b6 Like digest() except the digest is returned as a string of length 40, containing only hexadecimal digits.  This may  be used to exchange the value safely in email or other non-binary environments.    sha.copy()\u00b6 Return a copy (&#8220;clone&#8221;) of the sha object.  This can be used to efficiently compute the digests of strings that share a common initial substring.   See also  Secure Hash Standard The Secure Hash Algorithm is defined by NIST document FIPS PUB 180-2: Secure Hash Standard, published in August 2002. Cryptographic Toolkit (Secure Hashing) Links from NIST to various information on secure hashing."},{"url":"http:\/\/docs.python.org\/library\/sha.html#sha.new","title":"sha.new","description":""},{"url":"http:\/\/docs.python.org\/library\/sha.html#sha.sha.copy","title":"sha.sha.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/sha.html#sha.sha.digest","title":"sha.sha.digest","description":""},{"url":"http:\/\/docs.python.org\/library\/sha.html#sha.sha.hexdigest","title":"sha.sha.hexdigest","description":""},{"url":"http:\/\/docs.python.org\/library\/sha.html#sha.sha.update","title":"sha.sha.update","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html","title":"time","description":null},{"url":"http:\/\/docs.python.org\/library\/time.html#time.asctime","title":"time.asctime","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.clock","title":"time.clock","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.ctime","title":"time.ctime","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.gmtime","title":"time.gmtime","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.localtime","title":"time.localtime","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.mktime","title":"time.mktime","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.sleep","title":"time.sleep","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.strftime","title":"time.strftime","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.strptime","title":"time.strptime","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.struct_time","title":"time.struct_time","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.time","title":"time.time","description":""},{"url":"http:\/\/docs.python.org\/library\/time.html#time.tzset","title":"time.tzset","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html","title":"io","description":"15.2. io &#8212; Core tools for working with streams\u00b6  New in version 2.6. The io module provides the Python interfaces to stream handling. Under Python 2.x, this is proposed as an alternative to the built-in file object, but in Python 3.x it is the default interface to access files and streams.  Note Since this module has been designed primarily for Python 3.x, you have to be aware that all uses of &#8220;bytes&#8221; in this document refer to the str type (of which bytes is an alias), and all uses of &#8220;text&#8221; refer to the unicode type.  Furthermore, those two types are not interchangeable in the io APIs.  At the top of the I\/O hierarchy is the abstract base class IOBase.  It defines the basic interface to a stream.  Note, however, that there is no separation between reading and writing to streams; implementations are allowed to raise an IOError if they do not support a given operation. Extending IOBase is RawIOBase which deals simply with the reading and writing of raw bytes to a stream.  FileIO subclasses RawIOBase to provide an interface to files in the machine&#8217;s file system. BufferedIOBase deals with buffering on a raw byte stream (RawIOBase).  Its subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer streams that are readable, writable, and both readable and writable. BufferedRandom provides a buffered interface to random access streams.  BytesIO is a simple stream of in-memory bytes. Another IOBase subclass, TextIOBase, deals with streams whose bytes represent text, and handles encoding and decoding from and to unicode strings.  TextIOWrapper, which extends it, is a buffered text interface to a buffered raw stream (BufferedIOBase). Finally, StringIO is an in-memory stream for unicode text. Argument names are not part of the specification, and only the arguments of open() are intended to be used as keyword arguments.  15.2.1. Module Interface\u00b6   io.DEFAULT_BUFFER_SIZE\u00b6 An int containing the default buffer size used by the module&#8217;s buffered I\/O classes.  open() uses the file&#8217;s blksize (as obtained by os.stat()) if possible.    io.open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True)\u00b6 Open file and return a corresponding stream.  If the file cannot be opened, an IOError is raised. file is either a string giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped.  (If a file descriptor is given, it is closed when the returned I\/O object is closed, unless closefd is set to False.) mode is an optional string that specifies the mode in which the file is opened.  It defaults to 'r' which means open for reading in text mode. Other common values are 'w' for writing (truncating the file if it already exists), and 'a' for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position).  In text mode, if encoding is not specified the encoding used is platform dependent. (For reading and writing raw bytes use binary mode and leave encoding unspecified.)  The available modes are:       Character Meaning  'r' open for reading (default)  'w' open for writing, truncating the file first  'a' open for writing, appending to the end of the file if it exists  'b' binary mode  't' text mode (default)  '+' open a disk file for updating (reading and writing)  'U' universal newline mode (for backwards compatibility; should not be used in new code)    The default mode is 'rt' (open for reading text).  For binary random access, the mode 'w+b' opens and truncates the file to 0 bytes, while 'r+b' opens the file without truncation. Python distinguishes between files opened in binary and text modes, even when the underlying operating system doesn&#8217;t.  Files opened in binary mode (including 'b' in the mode argument) return contents as bytes objects without any decoding.  In text mode (the default, or when 't' is included in the mode argument), the contents of the file are returned as unicode strings, the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given. buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer > 1 to indicate the size of a fixed-size chunk buffer.  When no buffering argument is given, the default buffering policy works as follows:  Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device&#8217;s &#8220;block size&#8221; and falling back on DEFAULT_BUFFER_SIZE. On many systems, the buffer will typically be 4096 or 8192 bytes long. &#8220;Interactive&#8221; text files (files for which isatty() returns True) use line buffering.  Other text files use the policy described above for binary files.  encoding is the name of the encoding used to decode or encode the file. This should only be used in text mode.  The default encoding is platform dependent (whatever locale.getpreferredencoding() returns), but any encoding supported by Python can be used.  See the codecs module for the list of supported encodings. errors is an optional string that specifies how encoding and decoding errors are to be handled&#8211;this cannot be used in binary mode.  Pass 'strict' to raise a ValueError exception if there is an encoding error (the default of None has the same effect), or pass 'ignore' to ignore errors.  (Note that ignoring encoding errors can lead to data loss.) 'replace' causes a replacement marker (such as '?') to be inserted where there is malformed data.  When writing, 'xmlcharrefreplace' (replace with the appropriate XML character reference) or 'backslashreplace' (replace with backslashed escape sequences) can be used.  Any other error handling name that has been registered with codecs.register_error() is also valid. newline controls how universal newlines works (it only applies to text mode).  It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as follows:  On input, if newline is None, universal newlines mode is enabled. Lines in the input can end in '\\n', '\\r', or '\\r\\n', and these are translated into '\\n' before being returned to the caller.  If it is '', universal newline mode is enabled, but line endings are returned to the caller untranslated.  If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated. On output, if newline is None, any '\\n' characters written are translated to the system default line separator, os.linesep.  If newline is '', no translation takes place.  If newline is any of the other legal values, any '\\n' characters written are translated to the given string.  If closefd is False and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed.  If a filename is given closefd has no effect and must be True (the default). The type of file object returned by the open() function depends on the mode.  When open() is used to open a file in a text mode ('w', 'r', 'wt', 'rt', etc.), it returns a subclass of TextIOBase (specifically TextIOWrapper).  When used to open a file in a binary mode with buffering, the returned class is a subclass of BufferedIOBase.  The exact class varies: in read binary mode, it returns a BufferedReader; in write binary and append binary modes, it returns a BufferedWriter, and in read\/write mode, it returns a BufferedRandom.  When buffering is disabled, the raw stream, a subclass of RawIOBase, FileIO, is returned. It is also possible to use an unicode or bytes string as a file for both reading and writing.  For unicode strings StringIO can be used like a file opened in text mode, and for bytes a BytesIO can be used like a file opened in a binary mode.     exception io.BlockingIOError\u00b6 Error raised when blocking would occur on a non-blocking stream.  It inherits IOError. In addition to those of IOError, BlockingIOError has one attribute:   characters_written\u00b6 An integer containing the number of characters written to the stream before it blocked.      exception io.UnsupportedOperation\u00b6 An exception inheriting IOError and ValueError that is raised when an unsupported operation is called on a stream.    15.2.2. I\/O Base Classes\u00b6   class io.IOBase\u00b6 The abstract base class for all I\/O classes, acting on streams of bytes. There is no public constructor. This class provides empty abstract implementations for many methods that derived classes can override selectively; the default implementations represent a file that cannot be read, written or seeked. Even though IOBase does not declare read(), readinto(), or write() because their signatures will vary, implementations and clients should consider those methods part of the interface.  Also, implementations may raise a IOError when operations they do not support are called. The basic type used for binary data read from or written to a file is bytes (also known as str).  bytearrays are accepted too, and in some cases (such as readinto) required. Text I\/O classes work with unicode data. Note that calling any method (even inquiries) on a closed stream is undefined.  Implementations may raise IOError in this case. IOBase (and its subclasses) support the iterator protocol, meaning that an IOBase object can be iterated over yielding the lines in a stream. Lines are defined slightly differently depending on whether the stream is a binary stream (yielding bytes), or a text stream (yielding unicode strings).  See readline() below. IOBase is also a context manager and therefore supports the with statement.  In this example, file is closed after the with statement&#8217;s suite is finished&#8212;even if an exception occurs: with io.open(&#39;spam.txt&#39;, &#39;w&#39;) as file:     file.write(u&#39;Spam and eggs!&#39;)   IOBase provides these data attributes and methods:   close()\u00b6 Flush and close this stream. This method has no effect if the file is already closed. Once the file is closed, any operation on the file (e.g. reading or writing) will raise a ValueError. As a convenience, it is allowed to call this method more than once; only the first call, however, will have an effect.     closed\u00b6 True if the stream is closed.    fileno()\u00b6 Return the underlying file descriptor (an integer) of the stream if it exists.  An IOError is raised if the IO object does not use a file descriptor.    flush()\u00b6 Flush the write buffers of the stream if applicable.  This does nothing for read-only and non-blocking streams.    isatty()\u00b6 Return True if the stream is interactive (i.e., connected to a terminal\/tty device).    readable()\u00b6 Return True if the stream can be read from.  If False, read() will raise IOError.    readline(limit=-1)\u00b6 Read and return one line from the stream.  If limit is specified, at most limit bytes will be read. The line terminator is always b'\\n' for binary files; for text files, the newlines argument to open() can be used to select the line terminator(s) recognized.     readlines(hint=-1)\u00b6 Read and return a list of lines from the stream.  hint can be specified to control the number of lines read: no more lines will be read if the total size (in bytes\/characters) of all lines so far exceeds hint.    seek(offset, whence=SEEK_SET)\u00b6 Change the stream position to the given byte offset.  offset is interpreted relative to the position indicated by whence.  Values for whence are:  SEEK_SET or 0 &#8211; start of the stream (the default); offset should be zero or positive SEEK_CUR or 1 &#8211; current stream position; offset may be negative SEEK_END or 2 &#8211; end of the stream; offset is usually negative  Return the new absolute position.  New in version 2.7: The SEEK_* constants     seekable()\u00b6 Return True if the stream supports random access.  If False, seek(), tell() and truncate() will raise IOError.    tell()\u00b6 Return the current stream position.    truncate(size=None)\u00b6 Resize the stream to the given size in bytes (or the current position if size is not specified).  The current stream position isn&#8217;t changed. This resizing can extend or reduce the current file size.  In case of extension, the contents of the new file area depend on the platform (on most systems, additional bytes are zero-filled, on Windows they&#8217;re undetermined).  The new file size is returned.    writable()\u00b6 Return True if the stream supports writing.  If False, write() and truncate() will raise IOError.    writelines(lines)\u00b6 Write a list of lines to the stream.  Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end.      class io.RawIOBase\u00b6 Base class for raw binary I\/O.  It inherits IOBase.  There is no public constructor. Raw binary I\/O typically provides low-level access to an underlying OS device or API, and does not try to encapsulate it in high-level primitives (this is left to Buffered I\/O and Text I\/O, described later in this page). In addition to the attributes and methods from IOBase, RawIOBase provides the following methods:   read(n=-1)\u00b6 Read up to n bytes from the object and return them.  As a convenience, if n is unspecified or -1, readall() is called.  Otherwise, only one system call is ever made.  Fewer than n bytes may be returned if the operating system call returns fewer than n bytes. If 0 bytes are returned, and n was not 0, this indicates end of file. If the object is in non-blocking mode and no bytes are available, None is returned.     readall()\u00b6 Read and return all the bytes from the stream until EOF, using multiple calls to the stream if necessary.    readinto(b)\u00b6 Read up to len(b) bytes into bytearray b and return the number of bytes read.  If the object is in non-blocking mode and no bytes are available, None is returned.    write(b)\u00b6 Write the given bytes or bytearray object, b, to the underlying raw stream and return the number of bytes written.  This can be less than len(b), depending on specifics of the underlying raw stream, and especially if it is in non-blocking mode.  None is returned if the raw stream is set not to block and no single byte could be readily written to it.      class io.BufferedIOBase\u00b6 Base class for binary streams that support some kind of buffering. It inherits IOBase. There is no public constructor. The main difference with RawIOBase is that methods read(), readinto() and write() will try (respectively) to read as much input as requested or to consume all given output, at the expense of making perhaps more than one system call. In addition, those methods can raise BlockingIOError if the underlying raw stream is in non-blocking mode and cannot take or give enough data; unlike their RawIOBase counterparts, they will never return None. Besides, the read() method does not have a default implementation that defers to readinto(). A typical BufferedIOBase implementation should not inherit from a RawIOBase implementation, but wrap one, like BufferedWriter and BufferedReader do. BufferedIOBase provides or overrides these methods and attribute in addition to those from IOBase:   raw\u00b6 The underlying raw stream (a RawIOBase instance) that BufferedIOBase deals with.  This is not part of the BufferedIOBase API and may not exist on some implementations.    detach()\u00b6 Separate the underlying raw stream from the buffer and return it. After the raw stream has been detached, the buffer is in an unusable state. Some buffers, like BytesIO, do not have the concept of a single raw stream to return from this method.  They raise UnsupportedOperation.  New in version 2.7.     read(n=-1)\u00b6 Read and return up to n bytes.  If the argument is omitted, None, or negative, data is read and returned until EOF is reached.  An empty bytes object is returned if the stream is already at EOF. If the argument is positive, and the underlying raw stream is not interactive, multiple raw reads may be issued to satisfy the byte count (unless EOF is reached first).  But for interactive raw streams, at most one raw read will be issued, and a short result does not imply that EOF is imminent. A BlockingIOError is raised if the underlying raw stream is in non blocking-mode, and has no data available at the moment.     read1(n=-1)\u00b6 Read and return up to n bytes, with at most one call to the underlying raw stream&#8217;s read() method.  This can be useful if you are implementing your own buffering on top of a BufferedIOBase object.    readinto(b)\u00b6 Read up to len(b) bytes into bytearray b and return the number of bytes read. Like read(), multiple reads may be issued to the underlying raw stream, unless the latter is &#8216;interactive&#8217;. A BlockingIOError is raised if the underlying raw stream is in non blocking-mode, and has no data available at the moment.     write(b)\u00b6 Write the given bytes or bytearray object, b and return the number of bytes written (never less than len(b), since if the write fails an IOError will be raised).  Depending on the actual implementation, these bytes may be readily written to the underlying stream, or held in a buffer for performance and latency reasons. When in non-blocking mode, a BlockingIOError is raised if the data needed to be written to the raw stream but it couldn&#8217;t accept all the data without blocking.       15.2.3. Raw File I\/O\u00b6   class io.FileIO(name, mode='r', closefd=True)\u00b6 FileIO represents an OS-level file containing bytes data. It implements the RawIOBase interface (and therefore the IOBase interface, too). The name can be one of two things:  a string representing the path to the file which will be opened; an integer representing the number of an existing OS-level file descriptor to which the resulting FileIO object will give access.  The mode can be 'r', 'w' or 'a' for reading (default), writing, or appending.  The file will be created if it doesn&#8217;t exist when opened for writing or appending; it will be truncated when opened for writing.  Add a '+' to the mode to allow simultaneous reading and writing. The read() (when called with a positive argument), readinto() and write() methods on this class will only make one system call. In addition to the attributes and methods from IOBase and RawIOBase, FileIO provides the following data attributes and methods:   mode\u00b6 The mode as given in the constructor.    name\u00b6 The file name.  This is the file descriptor of the file when no name is given in the constructor.      15.2.4. Buffered Streams\u00b6 Buffered I\/O streams provide a higher-level interface to an I\/O device than raw I\/O does.   class io.BytesIO([initial_bytes])\u00b6 A stream implementation using an in-memory bytes buffer.  It inherits BufferedIOBase. The argument initial_bytes is an optional initial bytes. BytesIO provides or overrides these methods in addition to those from BufferedIOBase and IOBase:   getvalue()\u00b6 Return bytes containing the entire contents of the buffer.    read1()\u00b6 In BytesIO, this is the same as read().      class io.BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)\u00b6 A buffer providing higher-level access to a readable, sequential RawIOBase object.  It inherits BufferedIOBase. When reading data from this object, a larger amount of data may be requested from the underlying raw stream, and kept in an internal buffer. The buffered data can then be returned directly on subsequent reads. The constructor creates a BufferedReader for the given readable raw stream and buffer_size.  If buffer_size is omitted, DEFAULT_BUFFER_SIZE is used. BufferedReader provides or overrides these methods in addition to those from BufferedIOBase and IOBase:   peek([n])\u00b6 Return bytes from the stream without advancing the position.  At most one single read on the raw stream is done to satisfy the call. The number of bytes returned may be less or more than requested.    read([n])\u00b6 Read and return n bytes, or if n is not given or negative, until EOF or if the read call would block in non-blocking mode.    read1(n)\u00b6 Read and return up to n bytes with only one call on the raw stream.  If at least one byte is buffered, only buffered bytes are returned. Otherwise, one raw stream read call is made.      class io.BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)\u00b6 A buffer providing higher-level access to a writeable, sequential RawIOBase object.  It inherits BufferedIOBase. When writing to this object, data is normally held into an internal buffer.  The buffer will be written out to the underlying RawIOBase object under various conditions, including:  when the buffer gets too small for all pending data; when flush() is called; when a seek() is requested (for BufferedRandom objects); when the BufferedWriter object is closed or destroyed.  The constructor creates a BufferedWriter for the given writeable raw stream.  If the buffer_size is not given, it defaults to DEFAULT_BUFFER_SIZE. A third argument, max_buffer_size, is supported, but unused and deprecated. BufferedWriter provides or overrides these methods in addition to those from BufferedIOBase and IOBase:   flush()\u00b6 Force bytes held in the buffer into the raw stream.  A BlockingIOError should be raised if the raw stream blocks.    write(b)\u00b6 Write the bytes or bytearray object, b and return the number of bytes written.  When in non-blocking mode, a BlockingIOError is raised if the buffer needs to be written out but the raw stream blocks.      class io.BufferedRandom(raw, buffer_size=DEFAULT_BUFFER_SIZE)\u00b6 A buffered interface to random access streams.  It inherits BufferedReader and BufferedWriter, and further supports seek() and tell() functionality. The constructor creates a reader and writer for a seekable raw stream, given in the first argument.  If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE. A third argument, max_buffer_size, is supported, but unused and deprecated. BufferedRandom is capable of anything BufferedReader or BufferedWriter can do.     class io.BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE)\u00b6 A buffered I\/O object combining two unidirectional RawIOBase objects &#8211; one readable, the other writeable &#8211; into a single bidirectional endpoint.  It inherits BufferedIOBase. reader and writer are RawIOBase objects that are readable and writeable respectively.  If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE. A fourth argument, max_buffer_size, is supported, but unused and deprecated. BufferedRWPair implements all of BufferedIOBase&#8216;s methods except for detach(), which raises UnsupportedOperation.  Warning BufferedRWPair does not attempt to synchronize accesses to its underlying raw streams.  You should not pass it the same object as reader and writer; use BufferedRandom instead.      15.2.5. Text I\/O\u00b6   class io.TextIOBase\u00b6 Base class for text streams.  This class provides an unicode character and line based interface to stream I\/O.  There is no readinto() method because Python&#8217;s unicode strings are immutable. It inherits IOBase.  There is no public constructor. TextIOBase provides or overrides these data attributes and methods in addition to those from IOBase:   encoding\u00b6 The name of the encoding used to decode the stream&#8217;s bytes into strings, and to encode strings into bytes.    errors\u00b6 The error setting of the decoder or encoder.    newlines\u00b6 A string, a tuple of strings, or None, indicating the newlines translated so far.  Depending on the implementation and the initial constructor flags, this may not be available.    buffer\u00b6 The underlying binary buffer (a BufferedIOBase instance) that TextIOBase deals with.  This is not part of the TextIOBase API and may not exist on some implementations.    detach()\u00b6 Separate the underlying binary buffer from the TextIOBase and return it. After the underlying buffer has been detached, the TextIOBase is in an unusable state. Some TextIOBase implementations, like StringIO, may not have the concept of an underlying buffer and calling this method will raise UnsupportedOperation.  New in version 2.7.     read(n)\u00b6 Read and return at most n characters from the stream as a single unicode.  If n is negative or None, reads until EOF.    readline()\u00b6 Read until newline or EOF and return a single unicode.  If the stream is already at EOF, an empty string is returned.    write(s)\u00b6 Write the unicode string s to the stream and return the number of characters written.      class io.TextIOWrapper(buffer, encoding=None, errors=None, newline=None, line_buffering=False)\u00b6 A buffered text stream over a BufferedIOBase binary stream. It inherits TextIOBase. encoding gives the name of the encoding that the stream will be decoded or encoded with.  It defaults to locale.getpreferredencoding(). errors is an optional string that specifies how encoding and decoding errors are to be handled.  Pass 'strict' to raise a ValueError exception if there is an encoding error (the default of None has the same effect), or pass 'ignore' to ignore errors.  (Note that ignoring encoding errors can lead to data loss.)  'replace' causes a replacement marker (such as '?') to be inserted where there is malformed data.  When writing, 'xmlcharrefreplace' (replace with the appropriate XML character reference) or 'backslashreplace' (replace with backslashed escape sequences) can be used.  Any other error handling name that has been registered with codecs.register_error() is also valid. newline can be None, '', '\\n', '\\r', or '\\r\\n'.  It controls the handling of line endings.  If it is None, universal newlines is enabled.  With this enabled, on input, the lines endings '\\n', '\\r', or '\\r\\n' are translated to '\\n' before being returned to the caller.  Conversely, on output, '\\n' is translated to the system default line separator, os.linesep.  If newline is any other of its legal values, that newline becomes the newline when the file is read and it is returned untranslated.  On output, '\\n' is converted to the newline. If line_buffering is True, flush() is implied when a call to write contains a newline character. TextIOWrapper provides one attribute in addition to those of TextIOBase and its parents:   line_buffering\u00b6 Whether line buffering is enabled.      class io.StringIO(initial_value=u'', newline=None)\u00b6 An in-memory stream for unicode text.  It inherits TextIOWrapper. The initial value of the buffer (an empty unicode string by default) can be set by providing initial_value.  The newline argument works like that of TextIOWrapper.  The default is to do no newline translation. StringIO provides this method in addition to those from TextIOWrapper and its parents:   getvalue()\u00b6 Return a unicode containing the entire contents of the buffer at any time before the StringIO object&#8217;s close() method is called.  Example usage: import io  output = io.StringIO() output.write(u&#39;First line.\\n&#39;) output.write(u&#39;Second line.\\n&#39;)  # Retrieve file contents -- this will be # u&#39;First line.\\nSecond line.\\n&#39; contents = output.getvalue()  # Close object and discard memory buffer -- # .getvalue() will now raise an exception. output.close()       class io.IncrementalNewlineDecoder\u00b6 A helper codec that decodes newlines for universal newlines mode.  It inherits codecs.IncrementalDecoder.    15.2.6. Advanced topics\u00b6 Here we will discuss several advanced topics pertaining to the concrete I\/O implementations described above.  15.2.6.1. Performance\u00b6  15.2.6.1.1. Binary I\/O\u00b6 By reading and writing only large chunks of data even when the user asks for a single byte, buffered I\/O is designed to hide any inefficiency in calling and executing the operating system&#8217;s unbuffered I\/O routines.  The gain will vary very much depending on the OS and the kind of I\/O which is performed (for example, on some contemporary OSes such as Linux, unbuffered disk I\/O can be as fast as buffered I\/O).  The bottom line, however, is that buffered I\/O will offer you predictable performance regardless of the platform and the backing device.  Therefore, it is most always preferable to use buffered I\/O rather than unbuffered I\/O.   15.2.6.1.2. Text I\/O\u00b6 Text I\/O over a binary storage (such as a file) is significantly slower than binary I\/O over the same storage, because it implies conversions from unicode to binary data using a character codec.  This can become noticeable if you handle huge amounts of text data (for example very large log files). Also, TextIOWrapper.tell() and TextIOWrapper.seek() are both quite slow due to the reconstruction algorithm used. StringIO, however, is a native in-memory unicode container and will exhibit similar speed to BytesIO.    15.2.6.2. Multi-threading\u00b6 FileIO objects are thread-safe to the extent that the operating system calls (such as read(2) under Unix) they are wrapping are thread-safe too. Binary buffered objects (instances of BufferedReader, BufferedWriter, BufferedRandom and BufferedRWPair) protect their internal structures using a lock; it is therefore safe to call them from multiple threads at once. TextIOWrapper objects are not thread-safe.   15.2.6.3. Reentrancy\u00b6 Binary buffered objects (instances of BufferedReader, BufferedWriter, BufferedRandom and BufferedRWPair) are not reentrant.  While reentrant calls will not happen in normal situations, they can arise if you are doing I\/O in a signal handler.  If it is attempted to enter a buffered object again while already being accessed from the same thread, then a RuntimeError is raised. The above implicitly extends to text files, since the open() function will wrap a buffered object inside a TextIOWrapper.  This includes standard streams and therefore affects the built-in function print() as well."},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedIOBase","title":"io.BufferedIOBase","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedIOBase.detach","title":"io.BufferedIOBase.detach","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedIOBase.read","title":"io.BufferedIOBase.read","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedIOBase.read1","title":"io.BufferedIOBase.read1","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedIOBase.readinto","title":"io.BufferedIOBase.readinto","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedIOBase.write","title":"io.BufferedIOBase.write","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedRandom","title":"io.BufferedRandom","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedReader","title":"io.BufferedReader","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedReader.peek","title":"io.BufferedReader.peek","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedReader.read","title":"io.BufferedReader.read","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedReader.read1","title":"io.BufferedReader.read1","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedRWPair","title":"io.BufferedRWPair","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedWriter","title":"io.BufferedWriter","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedWriter.flush","title":"io.BufferedWriter.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BufferedWriter.write","title":"io.BufferedWriter.write","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BytesIO","title":"io.BytesIO","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BytesIO.getvalue","title":"io.BytesIO.getvalue","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.BytesIO.read1","title":"io.BytesIO.read1","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.FileIO","title":"io.FileIO","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IncrementalNewlineDecoder","title":"io.IncrementalNewlineDecoder","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase","title":"io.IOBase","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.close","title":"io.IOBase.close","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.fileno","title":"io.IOBase.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.flush","title":"io.IOBase.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.isatty","title":"io.IOBase.isatty","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.readable","title":"io.IOBase.readable","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.readline","title":"io.IOBase.readline","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.readlines","title":"io.IOBase.readlines","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.seek","title":"io.IOBase.seek","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.seekable","title":"io.IOBase.seekable","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.tell","title":"io.IOBase.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.truncate","title":"io.IOBase.truncate","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.writable","title":"io.IOBase.writable","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.IOBase.writelines","title":"io.IOBase.writelines","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.open","title":"io.open","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.RawIOBase","title":"io.RawIOBase","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.RawIOBase.read","title":"io.RawIOBase.read","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.RawIOBase.readall","title":"io.RawIOBase.readall","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.RawIOBase.readinto","title":"io.RawIOBase.readinto","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.RawIOBase.write","title":"io.RawIOBase.write","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.StringIO","title":"io.StringIO","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.StringIO.getvalue","title":"io.StringIO.getvalue","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.TextIOBase","title":"io.TextIOBase","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.TextIOBase.detach","title":"io.TextIOBase.detach","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.TextIOBase.read","title":"io.TextIOBase.read","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.TextIOBase.readline","title":"io.TextIOBase.readline","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.TextIOBase.write","title":"io.TextIOBase.write","description":""},{"url":"http:\/\/docs.python.org\/library\/io.html#io.TextIOWrapper","title":"io.TextIOWrapper","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html","title":"os","description":"15.1. os &#8212; Miscellaneous operating system interfaces\u00b6 This module provides a portable way of using operating system dependent functionality.  If you just want to read or write a file see open(), if you want to manipulate paths, see the os.path module, and if you want to read all the lines in all the files on the command line see the fileinput module.  For creating temporary files and directories see the tempfile module, and for high-level file and directory handling see the shutil module. Notes on the availability of these functions:  The design of all built-in operating system dependent modules of Python is such that as long as the same functionality is available, it uses the same interface; for example, the function os.stat(path) returns stat information about path in the same format (which happens to have originated with the POSIX interface). Extensions peculiar to a particular operating system are also available through the os module, but using them is of course a threat to portability. An &#8220;Availability: Unix&#8221; note means that this function is commonly found on Unix systems.  It does not make any claims about its existence on a specific operating system. If not separately noted, all functions that claim &#8220;Availability: Unix&#8221; are supported on Mac OS X, which builds on a Unix core.   Note All functions in this module raise OSError in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system.    exception os.error\u00b6 An alias for the built-in OSError exception.    os.name\u00b6 The name of the operating system dependent module imported.  The following names have currently been registered: 'posix', 'nt', 'os2', 'ce', 'java', 'riscos'.  See also sys.platform has a finer granularity.  os.uname() gives system-dependent version information. The platform module provides detailed checks for the system&#8217;s identity.     15.1.1. Process Parameters\u00b6 These functions and data items provide information and operate on the current process and user.   os.environ\u00b6 A mapping object representing the string environment. For example, environ['HOME'] is the pathname of your home directory (on some platforms), and is equivalent to getenv(\"HOME\") in C. This mapping is captured the first time the os module is imported, typically during Python startup as part of processing site.py.  Changes to the environment made after this time are not reflected in os.environ, except for changes made by modifying os.environ directly. If the platform supports the putenv() function, this mapping may be used to modify the environment as well as query the environment.  putenv() will be called automatically when the mapping is modified.  Note Calling putenv() directly does not change os.environ, so it&#8217;s better to modify os.environ.   Note On some platforms, including FreeBSD and Mac OS X, setting environ may cause memory leaks.  Refer to the system documentation for putenv().  If putenv() is not provided, a modified copy of this mapping  may be passed to the appropriate process-creation functions to cause  child processes to use a modified environment. If the platform supports the unsetenv() function, you can delete items in this mapping to unset environment variables. unsetenv() will be called automatically when an item is deleted from os.environ, and when one of the pop() or clear() methods is called.  Changed in version 2.6: Also unset environment variables when calling os.environ.clear() and os.environ.pop().     os.chdir(path)  os.fchdir(fd)  os.getcwd() These functions are described in Files and Directories.    os.ctermid()\u00b6 Return the filename corresponding to the controlling terminal of the process. Availability: Unix.     os.getegid()\u00b6 Return the effective group id of the current process.  This corresponds to the &#8220;set id&#8221; bit on the file being executed in the current process. Availability: Unix.     os.geteuid()\u00b6 Return the current process&#8217;s effective user id. Availability: Unix.     os.getgid()\u00b6 Return the real group id of the current process. Availability: Unix.     os.getgroups()\u00b6 Return list of supplemental group ids associated with the current process. Availability: Unix.     os.initgroups(username, gid)\u00b6 Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id. Availability: Unix.  New in version 2.7.     os.getlogin()\u00b6 Return the name of the user logged in on the controlling terminal of the process.  For most purposes, it is more useful to use the environment variable LOGNAME to find out who the user is, or pwd.getpwuid(os.getuid())[0] to get the login name of the currently effective user id. Availability: Unix.     os.getpgid(pid)\u00b6 Return the process group id of the process with process id pid. If pid is 0, the process group id of the current process is returned. Availability: Unix.  New in version 2.3.     os.getpgrp()\u00b6 Return the id of the current process group. Availability: Unix.     os.getpid()\u00b6 Return the current process id. Availability: Unix, Windows.     os.getppid()\u00b6 Return the parent&#8217;s process id. Availability: Unix.     os.getresuid()\u00b6 Return a tuple (ruid, euid, suid) denoting the current process&#8217;s real, effective, and saved user ids. Availability: Unix.  New in version 2.7.     os.getresgid()\u00b6 Return a tuple (rgid, egid, sgid) denoting the current process&#8217;s real, effective, and saved group ids. Availability: Unix.  New in version 2.7.     os.getuid()\u00b6 Return the current process&#8217;s user id. Availability: Unix.     os.getenv(varname[, value])\u00b6 Return the value of the environment variable varname if it exists, or value if it doesn&#8217;t.  value defaults to None. Availability: most flavors of Unix, Windows.     os.putenv(varname, value)\u00b6 Set the environment variable named varname to the string value.  Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv(). Availability: most flavors of Unix, Windows.  Note On some platforms, including FreeBSD and Mac OS X, setting environ may cause memory leaks. Refer to the system documentation for putenv.  When putenv() is supported, assignments to items in os.environ are automatically translated into corresponding calls to putenv(); however, calls to putenv() don&#8217;t update os.environ, so it is actually preferable to assign to items of os.environ.     os.setegid(egid)\u00b6 Set the current process&#8217;s effective group id. Availability: Unix.     os.seteuid(euid)\u00b6 Set the current process&#8217;s effective user id. Availability: Unix.     os.setgid(gid)\u00b6 Set the current process&#8217; group id. Availability: Unix.     os.setgroups(groups)\u00b6 Set the list of supplemental group ids associated with the current process to groups. groups must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser. Availability: Unix.  New in version 2.2.     os.setpgrp()\u00b6 Call the system call setpgrp() or setpgrp(0, 0)() depending on which version is implemented (if any).  See the Unix manual for the semantics. Availability: Unix.     os.setpgid(pid, pgrp)\u00b6 Call the system call setpgid() to set the process group id of the process with id pid to the process group with id pgrp.  See the Unix manual for the semantics. Availability: Unix.     os.setregid(rgid, egid)\u00b6 Set the current process&#8217;s real and effective group ids. Availability: Unix.     os.setresgid(rgid, egid, sgid)\u00b6 Set the current process&#8217;s real, effective, and saved group ids. Availability: Unix.  New in version 2.7.     os.setresuid(ruid, euid, suid)\u00b6 Set the current process&#8217;s real, effective, and saved user ids. Availability: Unix.  New in version 2.7.     os.setreuid(ruid, euid)\u00b6 Set the current process&#8217;s real and effective user ids. Availability: Unix.     os.getsid(pid)\u00b6 Call the system call getsid().  See the Unix manual for the semantics. Availability: Unix.  New in version 2.4.     os.setsid()\u00b6 Call the system call setsid().  See the Unix manual for the semantics. Availability: Unix.     os.setuid(uid)\u00b6 Set the current process&#8217;s user id. Availability: Unix.     os.strerror(code)\u00b6 Return the error message corresponding to the error code in code. On platforms where strerror() returns NULL when given an unknown error number, ValueError is raised. Availability: Unix, Windows.     os.umask(mask)\u00b6 Set the current numeric umask and return the previous umask. Availability: Unix, Windows.     os.uname()\u00b6 Return a 5-tuple containing information identifying the current operating system.  The tuple contains 5 strings: (sysname, nodename, release, version, machine).  Some systems truncate the nodename to 8 characters or to the leading component; a better way to get the hostname is socket.gethostname()  or even socket.gethostbyaddr(socket.gethostname()). Availability: recent flavors of Unix.     os.unsetenv(varname)\u00b6 Unset (delete) the environment variable named varname. Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv(). When unsetenv() is supported, deletion of items in os.environ is automatically translated into a corresponding call to unsetenv(); however, calls to unsetenv() don&#8217;t update os.environ, so it is actually preferable to delete items of os.environ. Availability: most flavors of Unix, Windows.     15.1.2. File Object Creation\u00b6 These functions create new file objects. (See also open().)   os.fdopen(fd[, mode[, bufsize]])\u00b6 Return an open file object connected to the file descriptor fd.  The mode and bufsize arguments have the same meaning as the corresponding arguments to the built-in open() function. Availability: Unix, Windows.  Changed in version 2.3: When specified, the mode argument must now start with one of the letters 'r', 'w', or 'a', otherwise a ValueError is raised.  Changed in version 2.5: On Unix, when the mode argument starts with 'a', the O_APPEND flag is set on the file descriptor (which the fdopen() implementation already does on most platforms).     os.popen(command[, mode[, bufsize]])\u00b6 Open a pipe to or from command.  The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is 'r' (default) or 'w'. The bufsize argument has the same meaning as the corresponding argument to the built-in open() function.  The exit status of the command (encoded in the format specified for wait()) is available as the return value of the close() method of the file object, except that when the exit status is zero (termination without errors), None is returned. Availability: Unix, Windows.  Deprecated since version 2.6: This function is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section.  Changed in version 2.0: This function worked unreliably under Windows in earlier versions of Python. This was due to the use of the _popen() function from the libraries provided with Windows.  Newer versions of Python do not use the broken implementation from the Windows libraries.     os.tmpfile()\u00b6 Return a new file object opened in update mode (w+b).  The file has no directory entries associated with it and will be automatically deleted once there are no file descriptors for the file. Availability: Unix, Windows.   There are a number of different popen*() functions that provide slightly different ways to create subprocesses.  Deprecated since version 2.6: All of the popen*() functions are obsolete. Use the subprocess module. For each of the popen*() variants, if bufsize is specified, it specifies the buffer size for the I\/O pipes. mode, if provided, should be the string 'b' or 't'; on Windows this is needed to determine whether the file objects should be opened in binary or text mode.  The default value for mode is 't'. Also, for each of these variants, on Unix, cmd may be a sequence, in which case arguments will be passed directly to the program without shell intervention (as with os.spawnv()). If cmd is a string it will be passed to the shell (as with os.system()). These methods do not make it possible to retrieve the exit status from the child processes.  The only way to control the input and output streams and also retrieve the return codes is to use the subprocess module; these are only available on Unix. For a discussion of possible deadlock conditions related to the use of these functions, see Flow Control Issues.   os.popen2(cmd[, mode[, bufsize]])\u00b6 Execute cmd as a sub-process and return the file objects (child_stdin, child_stdout).  Deprecated since version 2.6: This function is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section. Availability: Unix, Windows.  New in version 2.0.     os.popen3(cmd[, mode[, bufsize]])\u00b6 Execute cmd as a sub-process and return the file objects (child_stdin, child_stdout, child_stderr).  Deprecated since version 2.6: This function is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section. Availability: Unix, Windows.  New in version 2.0.     os.popen4(cmd[, mode[, bufsize]])\u00b6 Execute cmd as a sub-process and return the file objects (child_stdin, child_stdout_and_stderr).  Deprecated since version 2.6: This function is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section. Availability: Unix, Windows.  New in version 2.0.   (Note that child_stdin, child_stdout, and child_stderr are named from the point of view of the child process, so child_stdin is the child&#8217;s standard input.) This functionality is also available in the popen2 module using functions of the same names, but the return values of those functions have a different order.   15.1.3. File Descriptor Operations\u00b6 These functions operate on I\/O streams referenced using file descriptors. File descriptors are small integers corresponding to a file that has been opened by the current process.  For example, standard input is usually file descriptor 0, standard output is 1, and standard error is 2.  Further files opened by a process will then be assigned 3, 4, 5, and so forth.  The name &#8220;file descriptor&#8221; is slightly deceptive; on Unix platforms, sockets and pipes are also referenced by file descriptors. The fileno() method can be used to obtain the file descriptor associated with a file object when required.  Note that using the file descriptor directly will bypass the file object methods, ignoring aspects such as internal buffering of data.   os.close(fd)\u00b6 Close file descriptor fd. Availability: Unix, Windows.  Note This function is intended for low-level I\/O and must be applied to a file descriptor as returned by os.open() or pipe().  To close a &#8220;file object&#8221; returned by the built-in function open() or by popen() or fdopen(), use its close() method.      os.closerange(fd_low, fd_high)\u00b6 Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors. Equivalent to: for fd in xrange(fd_low, fd_high):     try:         os.close(fd)     except OSError:         pass   Availability: Unix, Windows.  New in version 2.6.     os.dup(fd)\u00b6 Return a duplicate of file descriptor fd. Availability: Unix, Windows.     os.dup2(fd, fd2)\u00b6 Duplicate file descriptor fd to fd2, closing the latter first if necessary. Availability: Unix, Windows.     os.fchmod(fd, mode)\u00b6 Change the mode of the file given by fd to the numeric mode.  See the docs for chmod() for possible values of mode. Availability: Unix.  New in version 2.6.     os.fchown(fd, uid, gid)\u00b6 Change the owner and group id of the file given by fd to the numeric uid and gid.  To leave one of the ids unchanged, set it to -1. Availability: Unix.  New in version 2.6.     os.fdatasync(fd)\u00b6 Force write of file with filedescriptor fd to disk. Does not force update of metadata. Availability: Unix.  Note This function is not available on MacOS.      os.fpathconf(fd, name)\u00b6 Return system configuration information relevant to an open file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define additional names as well.  The names known to the host operating system are given in the pathconf_names dictionary.  For configuration variables not included in that mapping, passing an integer for name is also accepted. If name is a string and is not known, ValueError is raised.  If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno.EINVAL for the error number. Availability: Unix.     os.fstat(fd)\u00b6 Return status for file descriptor fd, like stat(). Availability: Unix, Windows.     os.fstatvfs(fd)\u00b6 Return information about the filesystem containing the file associated with file descriptor fd, like statvfs(). Availability: Unix.     os.fsync(fd)\u00b6 Force write of file with filedescriptor fd to disk.  On Unix, this calls the native fsync() function; on Windows, the MS _commit() function. If you&#8217;re starting with a Python file object f, first do f.flush(), and then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk. Availability: Unix, and Windows starting in 2.2.3.     os.ftruncate(fd, length)\u00b6 Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size. Availability: Unix.     os.isatty(fd)\u00b6 Return True if the file descriptor fd is open and connected to a tty(-like) device, else False. Availability: Unix.     os.lseek(fd, pos, how)\u00b6 Set the current position of file descriptor fd to position pos, modified by how: SEEK_SET or 0 to set the position relative to the beginning of the file; SEEK_CUR or 1 to set it relative to the current position; os.SEEK_END or 2 to set it relative to the end of the file. Availability: Unix, Windows.     os.SEEK_SET\u00b6  os.SEEK_CUR\u00b6  os.SEEK_END\u00b6 Parameters to the lseek() function. Their values are 0, 1, and 2, respectively. Availability: Windows, Unix.  New in version 2.5.     os.open(file, flags[, mode])\u00b6 Open the file file and set various flags according to flags and possibly its mode according to mode. The default mode is 0777 (octal), and the current umask value is first masked out.  Return the file descriptor for the newly opened file. For a description of the flag and mode values, see the C run-time documentation; flag constants (like O_RDONLY and O_WRONLY) are defined in this module too (see open() flag constants).  In particular, on Windows adding O_BINARY is needed to open files in binary mode. Availability: Unix, Windows.  Note This function is intended for low-level I\/O.  For normal usage, use the built-in function open(), which returns a &#8220;file object&#8221; with read() and write() methods (and many more).  To wrap a file descriptor in a &#8220;file object&#8221;, use fdopen().      os.openpty()\u00b6 Open a new pseudo-terminal pair. Return a pair of file descriptors (master, slave) for the pty and the tty, respectively. For a (slightly) more portable approach, use the pty module. Availability: some flavors of Unix.     os.pipe()\u00b6 Create a pipe.  Return a pair of file descriptors (r, w) usable for reading and writing, respectively. Availability: Unix, Windows.     os.read(fd, n)\u00b6 Read at most n bytes from file descriptor fd. Return a string containing the bytes read.  If the end of the file referred to by fd has been reached, an empty string is returned. Availability: Unix, Windows.  Note This function is intended for low-level I\/O and must be applied to a file descriptor as returned by os.open() or pipe().  To read a &#8220;file object&#8221; returned by the built-in function open() or by popen() or fdopen(), or sys.stdin, use its read() or readline() methods.      os.tcgetpgrp(fd)\u00b6 Return the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()). Availability: Unix.     os.tcsetpgrp(fd, pg)\u00b6 Set the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()) to pg. Availability: Unix.     os.ttyname(fd)\u00b6 Return a string which specifies the terminal device associated with file descriptor fd.  If fd is not associated with a terminal device, an exception is raised. Availability: Unix.     os.write(fd, str)\u00b6 Write the string str to file descriptor fd. Return the number of bytes actually written. Availability: Unix, Windows.  Note This function is intended for low-level I\/O and must be applied to a file descriptor as returned by os.open() or pipe().  To write a &#8220;file object&#8221; returned by the built-in function open() or by popen() or fdopen(), or sys.stdout or sys.stderr, use its write() method.     15.1.3.1. open() flag constants\u00b6 The following constants are options for the flags parameter to the open() function.  They can be combined using the bitwise OR operator |.  Some of them are not available on all platforms.  For descriptions of their availability and use, consult the open(2) manual page on Unix or the MSDN on Windows.   os.O_RDONLY\u00b6  os.O_WRONLY\u00b6  os.O_RDWR\u00b6  os.O_APPEND\u00b6  os.O_CREAT\u00b6  os.O_EXCL\u00b6  os.O_TRUNC\u00b6 These constants are available on Unix and Windows.    os.O_DSYNC\u00b6  os.O_RSYNC\u00b6  os.O_SYNC\u00b6  os.O_NDELAY\u00b6  os.O_NONBLOCK\u00b6  os.O_NOCTTY\u00b6  os.O_SHLOCK\u00b6  os.O_EXLOCK\u00b6 These constants are only available on Unix.    os.O_BINARY\u00b6  os.O_NOINHERIT\u00b6  os.O_SHORT_LIVED\u00b6  os.O_TEMPORARY\u00b6  os.O_RANDOM\u00b6  os.O_SEQUENTIAL\u00b6  os.O_TEXT\u00b6 These constants are only available on Windows.    os.O_ASYNC\u00b6  os.O_DIRECT\u00b6  os.O_DIRECTORY\u00b6  os.O_NOFOLLOW\u00b6  os.O_NOATIME\u00b6 These constants are GNU extensions and not present if they are not defined by the C library.     15.1.4. Files and Directories\u00b6   os.access(path, mode)\u00b6 Use the real uid\/gid to test for access to path.  Note that most operations will use the effective uid\/gid, therefore this routine can be used in a suid\/sgid environment to test if the invoking user has the specified access to path.  mode should be F_OK to test the existence of path, or it can be the inclusive OR of one or more of R_OK, W_OK, and X_OK to test permissions.  Return True if access is allowed, False if not. See the Unix man page access(2) for more information. Availability: Unix, Windows.  Note Using access() to check if a user is authorized to e.g. open a file before actually doing so using open() creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It&#8217;s preferable to use EAFP techniques. For example: if os.access(\"myfile\", os.R_OK):     with open(\"myfile\") as fp:         return fp.read() return \"some default data\"   is better written as: try:     fp = open(\"myfile\") except IOError as e:     if e.errno == errno.EACCES:         return \"some default data\"     # Not a permission error.     raise else:     with fp:         return fp.read()     Note I\/O operations may fail even when access() indicates that they would succeed, particularly for operations on network filesystems which may have permissions semantics beyond the usual POSIX permission-bit model.      os.F_OK\u00b6 Value to pass as the mode parameter of access() to test the existence of path.    os.R_OK\u00b6 Value to include in the mode parameter of access() to test the readability of path.    os.W_OK\u00b6 Value to include in the mode parameter of access() to test the writability of path.    os.X_OK\u00b6 Value to include in the mode parameter of access() to determine if path can be executed.    os.chdir(path)\u00b6 Change the current working directory to path. Availability: Unix, Windows.     os.fchdir(fd)\u00b6 Change the current working directory to the directory represented by the file descriptor fd.  The descriptor must refer to an opened directory, not an open file. Availability: Unix.  New in version 2.3.     os.getcwd()\u00b6 Return a string representing the current working directory. Availability: Unix, Windows.     os.getcwdu()\u00b6 Return a Unicode object representing the current working directory. Availability: Unix, Windows.  New in version 2.3.     os.chflags(path, flags)\u00b6 Set the flags of path to the numeric flags. flags may take a combination (bitwise OR) of the following values (as defined in the stat module):  stat.UF_NODUMP stat.UF_IMMUTABLE stat.UF_APPEND stat.UF_OPAQUE stat.UF_NOUNLINK stat.UF_COMPRESSED stat.UF_HIDDEN stat.SF_ARCHIVED stat.SF_IMMUTABLE stat.SF_APPEND stat.SF_NOUNLINK stat.SF_SNAPSHOT  Availability: Unix.  New in version 2.6.     os.chroot(path)\u00b6 Change the root directory of the current process to path. Availability: Unix.  New in version 2.2.     os.chmod(path, mode)\u00b6 Change the mode of path to the numeric mode. mode may take one of the following values (as defined in the stat module) or bitwise ORed combinations of them:  stat.S_ISUID stat.S_ISGID stat.S_ENFMT stat.S_ISVTX stat.S_IREAD stat.S_IWRITE stat.S_IEXEC stat.S_IRWXU stat.S_IRUSR stat.S_IWUSR stat.S_IXUSR stat.S_IRWXG stat.S_IRGRP stat.S_IWGRP stat.S_IXGRP stat.S_IRWXO stat.S_IROTH stat.S_IWOTH stat.S_IXOTH  Availability: Unix, Windows.  Note Although Windows supports chmod(), you can only  set the file&#8217;s read-only flag with it (via the stat.S_IWRITE  and stat.S_IREAD constants or a corresponding integer value).  All other bits are ignored.      os.chown(path, uid, gid)\u00b6 Change the owner and group id of path to the numeric uid and gid. To leave one of the ids unchanged, set it to -1. Availability: Unix.     os.lchflags(path, flags)\u00b6 Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links. Availability: Unix.  New in version 2.6.     os.lchmod(path, mode)\u00b6 Change the mode of path to the numeric mode. If path is a symlink, this affects the symlink rather than the target. See the docs for chmod() for possible values of mode. Availability: Unix.  New in version 2.6.     os.lchown(path, uid, gid)\u00b6 Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links. Availability: Unix.  New in version 2.3.     os.link(source, link_name)\u00b6 Create a hard link pointing to source named link_name. Availability: Unix.     os.listdir(path)\u00b6 Return a list containing the names of the entries in the directory given by path.  The list is in arbitrary order.  It does not include the special entries '.' and '..' even if they are present in the directory. Availability: Unix, Windows.  Changed in version 2.3: On Windows NT\/2k\/XP and Unix, if path is a Unicode object, the result will be a list of Unicode objects. Undecodable filenames will still be returned as string objects.     os.lstat(path)\u00b6 Perform the equivalent of an lstat() system call on the given path. Similar to stat(), but does not follow symbolic links.  On platforms that do not support symbolic links, this is an alias for stat().    os.mkfifo(path[, mode])\u00b6 Create a FIFO (a named pipe) named path with numeric mode mode.  The default mode is 0666 (octal).  The current umask value is first masked out from the mode. Availability: Unix. FIFOs are pipes that can be accessed like regular files.  FIFOs exist until they are deleted (for example with os.unlink()). Generally, FIFOs are used as rendezvous between &#8220;client&#8221; and &#8220;server&#8221; type processes: the server opens the FIFO for reading, and the client opens it for writing.  Note that mkfifo() doesn&#8217;t open the FIFO &#8212; it just creates the rendezvous point.     os.mknod(filename[, mode=0600, device])\u00b6 Create a filesystem node (file, device special file or named pipe) named filename. mode specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of stat.S_IFREG, stat.S_IFCHR, stat.S_IFBLK, and stat.S_IFIFO (those constants are available in stat). For stat.S_IFCHR and stat.S_IFBLK, device defines the newly created device special file (probably using os.makedev()), otherwise it is ignored.  New in version 2.3.     os.major(device)\u00b6 Extract the device major number from a raw device number (usually the st_dev or st_rdev field from stat).  New in version 2.3.     os.minor(device)\u00b6 Extract the device minor number from a raw device number (usually the st_dev or st_rdev field from stat).  New in version 2.3.     os.makedev(major, minor)\u00b6 Compose a raw device number from the major and minor device numbers.  New in version 2.3.     os.mkdir(path[, mode])\u00b6 Create a directory named path with numeric mode mode. The default mode is 0777 (octal).  On some systems, mode is ignored.  Where it is used, the current umask value is first masked out.  If the directory already exists, OSError is raised. It is also possible to create temporary directories; see the tempfile module&#8217;s tempfile.mkdtemp() function. Availability: Unix, Windows.     os.makedirs(path[, mode])\u00b6 Recursive directory creation function.  Like mkdir(), but makes all intermediate-level directories needed to contain the leaf directory.  Raises an error exception if the leaf directory already exists or cannot be created.  The default mode is 0777 (octal).  On some systems, mode is ignored. Where it is used, the current umask value is first masked out.  Note makedirs() will become confused if the path elements to create include os.pardir.   New in version 1.5.2.  Changed in version 2.3: This function now handles UNC paths correctly.     os.pathconf(path, name)\u00b6 Return system configuration information relevant to a named file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define additional names as well.  The names known to the host operating system are given in the pathconf_names dictionary.  For configuration variables not included in that mapping, passing an integer for name is also accepted. If name is a string and is not known, ValueError is raised.  If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno.EINVAL for the error number. Availability: Unix.     os.pathconf_names\u00b6 Dictionary mapping names accepted by pathconf() and fpathconf() to the integer values defined for those names by the host operating system.  This can be used to determine the set of names known to the system. Availability: Unix.    os.readlink(path)\u00b6 Return a string representing the path to which the symbolic link points.  The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using os.path.join(os.path.dirname(path), result).  Changed in version 2.6: If the path is a Unicode object the result will also be a Unicode object. Availability: Unix.     os.remove(path)\u00b6 Remove (delete) the file path.  If path is a directory, OSError is raised; see rmdir() below to remove a directory.  This is identical to the unlink() function documented below.  On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use. Availability: Unix, Windows.     os.removedirs(path)\u00b6 Remove directories recursively.  Works like rmdir() except that, if the leaf directory is successfully removed, removedirs()  tries to successively remove every parent directory mentioned in  path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, os.removedirs('foo\/bar\/baz') will first remove the directory 'foo\/bar\/baz', and then remove 'foo\/bar' and 'foo' if they are empty. Raises OSError if the leaf directory could not be successfully removed.  New in version 1.5.2.     os.rename(src, dst)\u00b6 Rename the file or directory src to dst.  If dst is a directory, OSError will be raised.  On Unix, if dst exists and is a file, it will be replaced silently if the user has permission.  The operation may fail on some Unix flavors if src and dst are on different filesystems.  If successful, the renaming will be an atomic operation (this is a POSIX requirement).  On Windows, if dst already exists, OSError will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file. Availability: Unix, Windows.     os.renames(old, new)\u00b6 Recursive directory or file renaming function. Works like rename(), except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using removedirs().  New in version 1.5.2.  Note This function can fail with the new directory structure made if you lack permissions needed to remove the leaf directory or file.      os.rmdir(path)\u00b6 Remove (delete) the directory path.  Only works when the directory is empty, otherwise, OSError is raised.  In order to remove whole directory trees, shutil.rmtree() can be used. Availability: Unix, Windows.     os.stat(path)\u00b6 Perform the equivalent of a stat() system call on the given path. (This function follows symlinks; to stat a symlink use lstat().) The return value is an object whose attributes correspond to the members of the stat structure, namely:  st_mode - protection bits, st_ino - inode number, st_dev - device, st_nlink - number of hard links, st_uid - user id of owner, st_gid - group id of owner, st_size - size of file, in bytes, st_atime - time of most recent access, st_mtime - time of most recent content modification, st_ctime - platform dependent; time of most recent metadata change on Unix, or the time of creation on Windows)   Changed in version 2.3: If stat_float_times() returns True, the time values are floats, measuring seconds. Fractions of a second may be reported if the system supports that. On Mac OS, the times are always floats. See stat_float_times() for further discussion. On some Unix systems (such as Linux), the following attributes may also be available:  st_blocks - number of blocks allocated for file st_blksize - filesystem blocksize st_rdev - type of device if an inode device st_flags - user defined flags for file  On other Unix systems (such as FreeBSD), the following attributes may be available (but may be only filled out if root tries to use them):  st_gen - file generation number st_birthtime - time of file creation  On Mac OS systems, the following attributes may also be available:  st_rsize st_creator st_type  On RISCOS systems, the following attributes are also available:  st_ftype (file type) st_attrs (attributes) st_obtype (object type).   Note The exact meaning and resolution of the st_atime, st_mtime, and st_ctime attributes depend on the operating system and the file system. For example, on Windows systems using the FAT or FAT32 file systems, st_mtime has 2-second resolution, and st_atime has only 1-day resolution.  See your operating system documentation for details.  For backward compatibility, the return value of stat() is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the stat structure, in the order st_mode, st_ino, st_dev, st_nlink, st_uid, st_gid, st_size, st_atime, st_mtime, st_ctime. More items may be added at the end by some implementations. The standard module stat defines functions and constants that are useful for extracting information from a stat structure. (On Windows, some items are filled with dummy values.) Example: >>> import os >>> statinfo = os.stat(&#39;somefile.txt&#39;) >>> statinfo (33188, 422511, 769, 1, 1032, 100, 926, 1105022698,1105022732, 1105022732) >>> statinfo.st_size 926   Availability: Unix, Windows.  Changed in version 2.2: Added access to values as attributes of the returned object.  Changed in version 2.5: Added st_gen and st_birthtime.     os.stat_float_times([newvalue])\u00b6 Determine whether stat_result represents time stamps as float objects. If newvalue is True, future calls to stat() return floats, if it is False, future calls return ints. If newvalue is omitted, return the current setting. For compatibility with older Python versions, accessing stat_result as a tuple always returns integers.  Changed in version 2.5: Python now returns float values by default. Applications which do not work correctly with floating point time stamps can use this function to restore the old behaviour. The resolution of the timestamps (that is the smallest possible fraction) depends on the system. Some systems only support second resolution; on these systems, the fraction will always be zero. It is recommended that this setting is only changed at program startup time in the __main__ module; libraries should never change this setting. If an application uses a library that works incorrectly if floating point time stamps are processed, this application should turn the feature off until the library has been corrected.     os.statvfs(path)\u00b6 Perform a statvfs() system call on the given path.  The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the statvfs structure, namely: f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax. For backward compatibility, the return value is also accessible as a tuple whose values correspond to the attributes, in the order given above. The standard module statvfs defines constants that are useful for extracting information from a statvfs structure when accessing it as a sequence; this remains useful when writing code that needs to work with versions of Python that don&#8217;t support accessing the fields as attributes. Availability: Unix.  Changed in version 2.2: Added access to values as attributes of the returned object.     os.symlink(source, link_name)\u00b6 Create a symbolic link pointing to source named link_name. Availability: Unix.     os.tempnam([dir[, prefix]])\u00b6 Return a unique path name that is reasonable for creating a temporary file. This will be an absolute path that names a potential directory entry in the directory dir or a common location for temporary files if dir is omitted or None.  If given and not None, prefix is used to provide a short prefix to the filename.  Applications are responsible for properly creating and managing files created using paths returned by tempnam(); no automatic cleanup is provided. On Unix, the environment variable TMPDIR overrides dir, while on Windows TMP is used.  The specific behavior of this function depends on the C library implementation; some aspects are underspecified in system documentation.  Warning Use of tempnam() is vulnerable to symlink attacks; consider using tmpfile() (section File Object Creation) instead.  Availability: Unix, Windows.     os.tmpnam()\u00b6 Return a unique path name that is reasonable for creating a temporary file. This will be an absolute path that names a potential directory entry in a common location for temporary files.  Applications are responsible for properly creating and managing files created using paths returned by tmpnam(); no automatic cleanup is provided.  Warning Use of tmpnam() is vulnerable to symlink attacks; consider using tmpfile() (section File Object Creation) instead.  Availability: Unix, Windows.  This function probably shouldn&#8217;t be used on Windows, though: Microsoft&#8217;s implementation of tmpnam() always creates a name in the root directory of the current drive, and that&#8217;s generally a poor location for a temp file (depending on privileges, you may not even be able to open a file using this name).     os.TMP_MAX\u00b6 The maximum number of unique names that tmpnam() will generate before reusing names.    os.unlink(path)\u00b6 Remove (delete) the file path.  This is the same function as remove(); the unlink() name is its traditional Unix name. Availability: Unix, Windows.     os.utime(path, times)\u00b6 Set the access and modified times of the file specified by path. If times is None, then the file&#8217;s access and modified times are set to the current time. (The effect is similar to running the Unix program touch on the path.)  Otherwise, times must be a 2-tuple of numbers, of the form (atime, mtime) which is used to set the access and modified times, respectively. Whether a directory can be given for path depends on whether the operating system implements directories as files (for example, Windows does not).  Note that the exact times you set here may not be returned by a subsequent stat() call, depending on the resolution with which your operating system records access and modification times; see stat().  Changed in version 2.0: Added support for None for times. Availability: Unix, Windows.     os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])\u00b6 Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames). dirpath is a string, the path to the directory.  dirnames is a list of the names of the subdirectories in dirpath (excluding '.' and '..'). filenames is a list of the names of the non-directory files in dirpath. Note that the names in the lists contain no path components.  To get a full path (which begins with top) to a file or directory in dirpath, do os.path.join(dirpath, name). If optional argument topdown is True or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down).  If topdown is False, the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up). When topdown is True, the caller can modify the dirnames list in-place (perhaps using del or slice assignment), and walk() will only recurse into the subdirectories whose names remain in dirnames; this can be used to prune the search, impose a specific order of visiting, or even to inform walk() about directories the caller creates or renames before it resumes walk() again.  Modifying dirnames when topdown is False is ineffective, because in bottom-up mode the directories in dirnames are generated before dirpath itself is generated. By default, errors from the listdir() call are ignored.  If optional argument onerror is specified, it should be a function; it will be called with one argument, an OSError instance.  It can report the error to continue with the walk, or raise the exception to abort the walk.  Note that the filename is available as the filename attribute of the exception object. By default, walk() will not walk down into symbolic links that resolve to directories. Set followlinks to True to visit directories pointed to by symlinks, on systems that support them.  New in version 2.6: The followlinks parameter.  Note Be aware that setting followlinks to True can lead to infinite recursion if a link points to a parent directory of itself. walk() does not keep track of the directories it visited already.   Note If you pass a relative pathname, don&#8217;t change the current working directory between resumptions of walk().  walk() never changes the current directory, and assumes that its caller doesn&#8217;t either.  This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn&#8217;t look under any CVS subdirectory: import os from os.path import join, getsize for root, dirs, files in os.walk(&#39;python\/Lib\/email&#39;):     print root, \"consumes\",     print sum(getsize(join(root, name)) for name in files),     print \"bytes in\", len(files), \"non-directory files\"     if &#39;CVS&#39; in dirs:         dirs.remove(&#39;CVS&#39;)  # don&#39;t visit CVS directories   In the next example, walking the tree bottom-up is essential: rmdir() doesn&#8217;t allow deleting a directory before the directory is empty: # Delete everything reachable from the directory named in \"top\", # assuming there are no symbolic links. # CAUTION:  This is dangerous!  For example, if top == &#39;\/&#39;, it # could delete all your disk files. import os for root, dirs, files in os.walk(top, topdown=False):     for name in files:         os.remove(os.path.join(root, name))     for name in dirs:         os.rmdir(os.path.join(root, name))    New in version 2.3.     15.1.5. Process Management\u00b6 These functions may be used to create and manage processes. The various exec*() functions take a list of arguments for the new program loaded into the process.  In each case, the first of these arguments is passed to the new program as its own name rather than as an argument a user may have typed on a command line.  For the C programmer, this is the argv[0] passed to a program&#8217;s main().  For example, os.execv('\/bin\/echo', ['foo', 'bar']) will only print bar on standard output; foo will seem to be ignored.   os.abort()\u00b6 Generate a SIGABRT signal to the current process.  On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of 3.  Be aware that calling this function will not call the Python signal handler registered for SIGABRT with signal.signal(). Availability: Unix, Windows.     os.execl(path, arg0, arg1, ...)\u00b6  os.execle(path, arg0, arg1, ..., env)\u00b6  os.execlp(file, arg0, arg1, ...)\u00b6  os.execlpe(file, arg0, arg1, ..., env)\u00b6  os.execv(path, args)\u00b6  os.execve(path, args, env)\u00b6  os.execvp(file, args)\u00b6  os.execvpe(file, args, env)\u00b6 These functions all execute a new program, replacing the current process; they do not return.  On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.  Errors will be reported as OSError exceptions. The current process is replaced immediately. Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec*() function. The &#8220;l&#8221; and &#8220;v&#8221; variants of the exec*() functions differ in how command-line arguments are passed.  The &#8220;l&#8221; variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.  The &#8220;v&#8221; variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.  In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced. The variants which include a &#8220;p&#8221; near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.  When the environment is being replaced (using one of the exec*e() variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable. The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path. For execle(), execlpe(), execve(), and execvpe() (note that these all end in &#8220;e&#8221;), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process&#8217; environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process. Availability: Unix, Windows.     os._exit(n)\u00b6 Exit the process with status n, without calling cleanup handlers, flushing stdio buffers, etc. Availability: Unix, Windows.  Note The standard way to exit is sys.exit(n).  _exit() should normally only be used in the child process after a fork().    The following exit codes are defined and can be used with _exit(), although they are not required.  These are typically used for system programs written in Python, such as a mail server&#8217;s external command delivery program.  Note Some of these may not be available on all Unix platforms, since there is some variation.  These constants are defined where they are defined by the underlying platform.    os.EX_OK\u00b6 Exit code that means no error occurred. Availability: Unix.  New in version 2.3.     os.EX_USAGE\u00b6 Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given. Availability: Unix.  New in version 2.3.     os.EX_DATAERR\u00b6 Exit code that means the input data was incorrect. Availability: Unix.  New in version 2.3.     os.EX_NOINPUT\u00b6 Exit code that means an input file did not exist or was not readable. Availability: Unix.  New in version 2.3.     os.EX_NOUSER\u00b6 Exit code that means a specified user did not exist. Availability: Unix.  New in version 2.3.     os.EX_NOHOST\u00b6 Exit code that means a specified host did not exist. Availability: Unix.  New in version 2.3.     os.EX_UNAVAILABLE\u00b6 Exit code that means that a required service is unavailable. Availability: Unix.  New in version 2.3.     os.EX_SOFTWARE\u00b6 Exit code that means an internal software error was detected. Availability: Unix.  New in version 2.3.     os.EX_OSERR\u00b6 Exit code that means an operating system error was detected, such as the inability to fork or create a pipe. Availability: Unix.  New in version 2.3.     os.EX_OSFILE\u00b6 Exit code that means some system file did not exist, could not be opened, or had some other kind of error. Availability: Unix.  New in version 2.3.     os.EX_CANTCREAT\u00b6 Exit code that means a user specified output file could not be created. Availability: Unix.  New in version 2.3.     os.EX_IOERR\u00b6 Exit code that means that an error occurred while doing I\/O on some file. Availability: Unix.  New in version 2.3.     os.EX_TEMPFAIL\u00b6 Exit code that means a temporary failure occurred.  This indicates something that may not really be an error, such as a network connection that couldn&#8217;t be made during a retryable operation. Availability: Unix.  New in version 2.3.     os.EX_PROTOCOL\u00b6 Exit code that means that a protocol exchange was illegal, invalid, or not understood. Availability: Unix.  New in version 2.3.     os.EX_NOPERM\u00b6 Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems). Availability: Unix.  New in version 2.3.     os.EX_CONFIG\u00b6 Exit code that means that some kind of configuration error occurred. Availability: Unix.  New in version 2.3.     os.EX_NOTFOUND\u00b6 Exit code that means something like &#8220;an entry was not found&#8221;. Availability: Unix.  New in version 2.3.     os.fork()\u00b6 Fork a child process.  Return 0 in the child and the child&#8217;s process id in the parent.  If an error occurs OSError is raised. Note that some platforms including FreeBSD <= 6.3, Cygwin and OS\/2 EMX have known issues when using fork() from a thread. Availability: Unix.     os.forkpty()\u00b6 Fork a child process, using a new pseudo-terminal as the child&#8217;s controlling terminal. Return a pair of (pid, fd), where pid is 0 in the child, the new child&#8217;s process id in the parent, and fd is the file descriptor of the master end of the pseudo-terminal.  For a more portable approach, use the pty module.  If an error occurs OSError is raised. Availability: some flavors of Unix.     os.kill(pid, sig)\u00b6 Send signal sig to the process pid.  Constants for the specific signals available on the host platform are defined in the signal module. Windows: The signal.CTRL_C_EVENT and signal.CTRL_BREAK_EVENT signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses. Any other value for sig will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to sig. The Windows version of kill() additionally takes process handles to be killed.  New in version 2.7: Windows support     os.killpg(pgid, sig)\u00b6 Send the signal sig to the process group pgid. Availability: Unix.  New in version 2.3.     os.nice(increment)\u00b6 Add increment to the process&#8217;s &#8220;niceness&#8221;.  Return the new niceness. Availability: Unix.     os.plock(op)\u00b6 Lock program segments into memory.  The value of op (defined in <sys\/lock.h>) determines which segments are locked. Availability: Unix.     os.popen(...)  os.popen2(...)  os.popen3(...)  os.popen4(...) Run child processes, returning opened pipes for communications.  These functions are described in section File Object Creation.    os.spawnl(mode, path, ...)\u00b6  os.spawnle(mode, path, ..., env)\u00b6  os.spawnlp(mode, file, ...)\u00b6  os.spawnlpe(mode, file, ..., env)\u00b6  os.spawnv(mode, path, args)\u00b6  os.spawnve(mode, path, args, env)\u00b6  os.spawnvp(mode, file, args)\u00b6  os.spawnvpe(mode, file, args, env)\u00b6 Execute the program path in a new process. (Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.  Check especially the Replacing Older Functions with the subprocess Module section.) If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process&#8217;s exit code if it exits normally, or -signal, where signal is the signal that killed the process.  On Windows, the process id will actually be the process handle, so can be used with the waitpid() function. The &#8220;l&#8221; and &#8220;v&#8221; variants of the spawn*() functions differ in how command-line arguments are passed.  The &#8220;l&#8221; variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.  The &#8220;v&#8221; variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.  In either case, the arguments to the child process must start with the name of the command being run. The variants which include a second &#8220;p&#8221; near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.  When the environment is being replaced (using one of the spawn*e() variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.  The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path. For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in &#8220;e&#8221;), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process&#8217; environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.  Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127. As an example, the following calls to spawnlp() and spawnvpe() are equivalent: import os os.spawnlp(os.P_WAIT, &#39;cp&#39;, &#39;cp&#39;, &#39;index.html&#39;, &#39;\/dev\/null&#39;)  L = [&#39;cp&#39;, &#39;index.html&#39;, &#39;\/dev\/null&#39;] os.spawnvpe(os.P_WAIT, &#39;cp&#39;, L, os.environ)   Availability: Unix, Windows.  spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.  spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead.  New in version 1.6.     os.P_NOWAIT\u00b6  os.P_NOWAITO\u00b6 Possible values for the mode parameter to the spawn*() family of functions.  If either of these values is given, the spawn*() functions will return as soon as the new process has been created, with the process id as the return value. Availability: Unix, Windows.  New in version 1.6.     os.P_WAIT\u00b6 Possible value for the mode parameter to the spawn*() family of functions.  If this is given as mode, the spawn*() functions will not return until the new process has run to completion and will return the exit code of the process the run is successful, or -signal if a signal kills the process. Availability: Unix, Windows.  New in version 1.6.     os.P_DETACH\u00b6  os.P_OVERLAY\u00b6 Possible values for the mode parameter to the spawn*() family of functions.  These are less portable than those listed above. P_DETACH is similar to P_NOWAIT, but the new process is detached from the console of the calling process. If P_OVERLAY is used, the current process will be replaced; the spawn*() function will not return. Availability: Windows.  New in version 1.6.     os.startfile(path[, operation])\u00b6 Start a file with its associated application. When operation is not specified or 'open', this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the start command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated. When another operation is given, it must be a &#8220;command verb&#8221; that specifies what should be done with the file. Common verbs documented by Microsoft are 'print' and  'edit' (to be used on files) as well as 'explore' and 'find' (to be used on directories). startfile() returns as soon as the associated application is launched. There is no option to wait for the application to close, and no way to retrieve the application&#8217;s exit status.  The path parameter is relative to the current directory.  If you want to use an absolute path, make sure the first character is not a slash ('\/'); the underlying Win32 ShellExecute() function doesn&#8217;t work if it is.  Use the os.path.normpath() function to ensure that the path is properly encoded for Win32. Availability: Windows.  New in version 2.0.  New in version 2.5: The operation parameter.     os.system(command)\u00b6 Execute the command (a string) in a subshell.  This is implemented by calling the Standard C function system(), and has the same limitations. Changes to sys.stdin, etc. are not reflected in the environment of the executed command. On Unix, the return value is the exit status of the process encoded in the format specified for wait().  Note that POSIX does not specify the meaning of the return value of the C system() function, so the return value of the Python function is system-dependent. On Windows, the return value is that returned by the system shell after running command, given by the Windows environment variable COMSPEC: on command.com systems (Windows 95, 98 and ME) this is always 0; on cmd.exe systems (Windows NT, 2000 and XP) this is the exit status of the command run; on systems using a non-native shell, consult your shell documentation. The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function.  See the Replacing Older Functions with the subprocess Module section in the subprocess documentation for some helpful recipes. Availability: Unix, Windows.     os.times()\u00b6 Return a 5-tuple of floating point numbers indicating accumulated (processor or other) times, in seconds.  The items are: user time, system time, children&#8217;s user time, children&#8217;s system time, and elapsed real time since a fixed point in the past, in that order.  See the Unix manual page times(2) or the corresponding Windows Platform API documentation. On Windows, only the first two items are filled, the others are zero. Availability: Unix, Windows     os.wait()\u00b6 Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced. Availability: Unix.     os.waitpid(pid, options)\u00b6 The details of this function differ on Unix and Windows. On Unix: Wait for completion of a child process given by process id pid, and return a tuple containing its process id and exit status indication (encoded as for wait()).  The semantics of the call are affected by the value of the integer options, which should be 0 for normal operation. If pid is greater than 0, waitpid() requests status information for that specific process.  If pid is 0, the request is for the status of any child in the process group of the current process.  If pid is -1, the request pertains to any child of the current process.  If pid is less than -1, status is requested for any process in the process group -pid (the absolute value of pid). An OSError is raised with the value of errno when the syscall returns -1. On Windows: Wait for completion of a process given by process handle pid, and return a tuple containing pid, and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier). A pid less than or equal to 0 has no special meaning on Windows, and raises an exception. The value of integer options has no effect. pid can refer to any process whose id is known, not necessarily a child process. The spawn() functions called with P_NOWAIT return suitable process handles.     os.wait3([options])\u00b6 Similar to waitpid(), except no process id argument is given and a 3-element tuple containing the child&#8217;s process id, exit status indication, and resource usage information is returned.  Refer to resource.getrusage() for details on resource usage information.  The option argument is the same as that provided to waitpid() and wait4(). Availability: Unix.  New in version 2.5.     os.wait4(pid, options)\u00b6 Similar to waitpid(), except a 3-element tuple, containing the child&#8217;s process id, exit status indication, and resource usage information is returned. Refer to resource.getrusage() for details on resource usage information.  The arguments to wait4() are the same as those provided to waitpid(). Availability: Unix.  New in version 2.5.     os.WNOHANG\u00b6 The option for waitpid() to return immediately if no child process status is available immediately. The function returns (0, 0) in this case. Availability: Unix.     os.WCONTINUED\u00b6 This option causes child processes to be reported if they have been continued from a job control stop since their status was last reported. Availability: Some Unix systems.  New in version 2.3.     os.WUNTRACED\u00b6 This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped. Availability: Unix.  New in version 2.3.   The following functions take a process status code as returned by system(), wait(), or waitpid() as a parameter.  They may be used to determine the disposition of a process.   os.WCOREDUMP(status)\u00b6 Return True if a core dump was generated for the process, otherwise return False. Availability: Unix.  New in version 2.3.     os.WIFCONTINUED(status)\u00b6 Return True if the process has been continued from a job control stop, otherwise return False. Availability: Unix.  New in version 2.3.     os.WIFSTOPPED(status)\u00b6 Return True if the process has been stopped, otherwise return False. Availability: Unix.     os.WIFSIGNALED(status)\u00b6 Return True if the process exited due to a signal, otherwise return False. Availability: Unix.     os.WIFEXITED(status)\u00b6 Return True if the process exited using the exit(2) system call, otherwise return False. Availability: Unix.     os.WEXITSTATUS(status)\u00b6 If WIFEXITED(status) is true, return the integer parameter to the exit(2) system call.  Otherwise, the return value is meaningless. Availability: Unix.     os.WSTOPSIG(status)\u00b6 Return the signal which caused the process to stop. Availability: Unix.     os.WTERMSIG(status)\u00b6 Return the signal which caused the process to exit. Availability: Unix.     15.1.6. Miscellaneous System Information\u00b6   os.confstr(name)\u00b6 Return string-valued system configuration values. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others).  Some platforms define additional names as well. The names known to the host operating system are given as the keys of the confstr_names dictionary.  For configuration variables not included in that mapping, passing an integer for name is also accepted. If the configuration value specified by name isn&#8217;t defined, None is returned. If name is a string and is not known, ValueError is raised.  If a specific value for name is not supported by the host system, even if it is included in confstr_names, an OSError is raised with errno.EINVAL for the error number. Availability: Unix     os.confstr_names\u00b6 Dictionary mapping names accepted by confstr() to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system. Availability: Unix.     os.getloadavg()\u00b6 Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises OSError if the load average was unobtainable. Availability: Unix.  New in version 2.3.     os.sysconf(name)\u00b6 Return integer-valued system configuration values. If the configuration value specified by name isn&#8217;t defined, -1 is returned.  The comments regarding the name parameter for confstr() apply here as well; the dictionary that provides information on the known names is given by sysconf_names. Availability: Unix.     os.sysconf_names\u00b6 Dictionary mapping names accepted by sysconf() to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system. Availability: Unix.   The following data values are used to support path manipulation operations.  These are defined for all platforms. Higher-level operations on pathnames are defined in the os.path module.   os.curdir\u00b6 The constant string used by the operating system to refer to the current directory. This is '.' for Windows and POSIX. Also available via os.path.    os.pardir\u00b6 The constant string used by the operating system to refer to the parent directory. This is '..' for Windows and POSIX. Also available via os.path.    os.sep\u00b6 The character used by the operating system to separate pathname components. This is '\/' for POSIX and '\\\\' for Windows.  Note that knowing this is not sufficient to be able to parse or concatenate pathnames &#8212; use os.path.split() and os.path.join() &#8212; but it is occasionally useful. Also available via os.path.    os.altsep\u00b6 An alternative character used by the operating system to separate pathname components, or None if only one separator character exists.  This is set to '\/' on Windows systems where sep is a backslash. Also available via os.path.    os.extsep\u00b6 The character which separates the base filename from the extension; for example, the '.' in os.py. Also available via os.path.  New in version 2.2.     os.pathsep\u00b6 The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows. Also available via os.path.    os.defpath\u00b6 The default search path used by exec*p*() and spawn*p*() if the environment doesn&#8217;t have a 'PATH' key. Also available via os.path.    os.linesep\u00b6 The string used to separate (or, rather, terminate) lines on the current platform.  This may be a single character, such as '\\n' for POSIX, or multiple characters, for example, '\\r\\n' for Windows. Do not use os.linesep as a line terminator when writing files opened in text mode (the default); use a single '\\n' instead, on all platforms.    os.devnull\u00b6 The file path of the null device. For example: '\/dev\/null' for POSIX, 'nul' for Windows.  Also available via os.path.  New in version 2.4.     15.1.7. Miscellaneous Functions\u00b6   os.urandom(n)\u00b6 Return a string of n random bytes suitable for cryptographic use. This function returns random bytes from an OS-specific randomness source.  The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation.  On a UNIX-like system this will query \/dev\/urandom, and on Windows it will use CryptGenRandom. If a randomness source is not found, NotImplementedError will be raised.  New in version 2.4."},{"url":"http:\/\/docs.python.org\/library\/os.html#os._exit","title":"os._exit","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.abort","title":"os.abort","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.access","title":"os.access","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.chdir","title":"os.chdir","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.chflags","title":"os.chflags","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.chmod","title":"os.chmod","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.chown","title":"os.chown","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.chroot","title":"os.chroot","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.close","title":"os.close","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.closerange","title":"os.closerange","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.confstr","title":"os.confstr","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.ctermid","title":"os.ctermid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.dup","title":"os.dup","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.dup2","title":"os.dup2","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.execl","title":"os.execl","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fchdir","title":"os.fchdir","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fchmod","title":"os.fchmod","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fchown","title":"os.fchown","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fdatasync","title":"os.fdatasync","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fdopen","title":"os.fdopen","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fork","title":"os.fork","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.forkpty","title":"os.forkpty","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fpathconf","title":"os.fpathconf","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fstat","title":"os.fstat","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fstatvfs","title":"os.fstatvfs","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.fsync","title":"os.fsync","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.ftruncate","title":"os.ftruncate","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getcwd","title":"os.getcwd","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getcwdu","title":"os.getcwdu","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getegid","title":"os.getegid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getenv","title":"os.getenv","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.geteuid","title":"os.geteuid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getgid","title":"os.getgid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getgroups","title":"os.getgroups","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getloadavg","title":"os.getloadavg","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getlogin","title":"os.getlogin","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getpgid","title":"os.getpgid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getpgrp","title":"os.getpgrp","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getpid","title":"os.getpid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getppid","title":"os.getppid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getresgid","title":"os.getresgid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getresuid","title":"os.getresuid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getsid","title":"os.getsid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.getuid","title":"os.getuid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.initgroups","title":"os.initgroups","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.isatty","title":"os.isatty","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.kill","title":"os.kill","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.killpg","title":"os.killpg","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.lchflags","title":"os.lchflags","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.lchmod","title":"os.lchmod","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.lchown","title":"os.lchown","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.link","title":"os.link","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.listdir","title":"os.listdir","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.lseek","title":"os.lseek","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.lstat","title":"os.lstat","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.major","title":"os.major","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.makedev","title":"os.makedev","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.makedirs","title":"os.makedirs","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.minor","title":"os.minor","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.mkdir","title":"os.mkdir","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.mkfifo","title":"os.mkfifo","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.mknod","title":"os.mknod","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.nice","title":"os.nice","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.open","title":"os.open","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.openpty","title":"os.openpty","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.pathconf","title":"os.pathconf","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.pipe","title":"os.pipe","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.plock","title":"os.plock","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.popen","title":"os.popen","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.popen2","title":"os.popen2","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.popen3","title":"os.popen3","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.popen4","title":"os.popen4","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.putenv","title":"os.putenv","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.read","title":"os.read","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.readlink","title":"os.readlink","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.remove","title":"os.remove","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.removedirs","title":"os.removedirs","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.rename","title":"os.rename","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.renames","title":"os.renames","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.rmdir","title":"os.rmdir","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setegid","title":"os.setegid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.seteuid","title":"os.seteuid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setgid","title":"os.setgid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setgroups","title":"os.setgroups","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setpgid","title":"os.setpgid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setpgrp","title":"os.setpgrp","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setregid","title":"os.setregid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setresgid","title":"os.setresgid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setresuid","title":"os.setresuid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setreuid","title":"os.setreuid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setsid","title":"os.setsid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.setuid","title":"os.setuid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.spawnl","title":"os.spawnl","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.startfile","title":"os.startfile","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.stat","title":"os.stat","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.stat_float_times","title":"os.stat_float_times","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.statvfs","title":"os.statvfs","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.strerror","title":"os.strerror","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.symlink","title":"os.symlink","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.sysconf","title":"os.sysconf","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.system","title":"os.system","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.tcgetpgrp","title":"os.tcgetpgrp","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.tcsetpgrp","title":"os.tcsetpgrp","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.tempnam","title":"os.tempnam","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.times","title":"os.times","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.tmpfile","title":"os.tmpfile","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.tmpnam","title":"os.tmpnam","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.ttyname","title":"os.ttyname","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.umask","title":"os.umask","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.uname","title":"os.uname","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.unlink","title":"os.unlink","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.unsetenv","title":"os.unsetenv","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.urandom","title":"os.urandom","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.utime","title":"os.utime","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.wait","title":"os.wait","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.wait3","title":"os.wait3","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.wait4","title":"os.wait4","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.waitpid","title":"os.waitpid","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.walk","title":"os.walk","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.WCOREDUMP","title":"os.WCOREDUMP","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.WEXITSTATUS","title":"os.WEXITSTATUS","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.WIFCONTINUED","title":"os.WIFCONTINUED","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.WIFEXITED","title":"os.WIFEXITED","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.WIFSIGNALED","title":"os.WIFSIGNALED","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.WIFSTOPPED","title":"os.WIFSTOPPED","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.write","title":"os.write","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.WSTOPSIG","title":"os.WSTOPSIG","description":""},{"url":"http:\/\/docs.python.org\/library\/os.html#os.WTERMSIG","title":"os.WTERMSIG","description":""},{"url":"http:\/\/docs.python.org\/library\/getopt.html","title":"getopt","description":"15.6. getopt &#8212; C-style parser for command line options\u00b6 Source code: Lib\/getopt.py   Note The getopt module is a parser for command line options whose API is designed to be familiar to users of the C getopt() function. Users who are unfamiliar with the C getopt() function or who would like to write less code and get better help and error messages should consider using the argparse module instead.  This module helps scripts to parse the command line arguments in sys.argv. It supports the same conventions as the Unix getopt() function (including the special meanings of arguments of the form &#8216;-&#8216; and &#8216;--&#8216;).  Long options similar to those supported by GNU software may be used as well via an optional third argument. This module provides two functions and an exception:   getopt.getopt(args, options[, long_options])\u00b6 Parses command line options and parameter list.  args is the argument list to be parsed, without the leading reference to the running program. Typically, this means sys.argv[1:]. options is the string of option letters that the script wants to recognize, with options that require an argument followed by a colon (':'; i.e., the same format that Unix getopt() uses).  Note Unlike GNU getopt(), after a non-option argument, all further arguments are considered also non-options. This is similar to the way non-GNU Unix systems work.  long_options, if specified, must be a list of strings with the names of the long options which should be supported.  The leading '--' characters should not be included in the option name.  Long options which require an argument should be followed by an equal sign ('=').  Optional arguments are not supported.  To accept only long options, options should be an empty string.  Long options on the command line can be recognized so long as they provide a prefix of the option name that matches exactly one of the accepted options.  For example, if long_options is ['foo', 'frob'], the option --fo will match as --foo, but --f will not match uniquely, so GetoptError will be raised. The return value consists of two elements: the first is a list of (option, value) pairs; the second is the list of program arguments left after the option list was stripped (this is a trailing slice of args).  Each option-and-value pair returned has the option as its first element, prefixed with a hyphen for short options (e.g., '-x') or two hyphens for long options (e.g., '--long-option'), and the option argument as its second element, or an empty string if the option has no argument.  The options occur in the list in the same order in which they were found, thus allowing multiple occurrences.  Long and short options may be mixed.     getopt.gnu_getopt(args, options[, long_options])\u00b6 This function works like getopt(), except that GNU style scanning mode is used by default. This means that option and non-option arguments may be intermixed. The getopt() function stops processing options as soon as a non-option argument is encountered. If the first character of the option string is '+', or if the environment variable POSIXLY_CORRECT is set, then option processing stops as soon as a non-option argument is encountered.  New in version 2.3.     exception getopt.GetoptError\u00b6 This is raised when an unrecognized option is found in the argument list or when an option requiring an argument is given none. The argument to the exception is a string indicating the cause of the error.  For long options, an argument given to an option which does not require one will also cause this exception to be raised.  The attributes msg and opt give the error message and related option; if there is no specific option to which the exception relates, opt is an empty string.  Changed in version 1.6: Introduced GetoptError as a synonym for error.     exception getopt.error\u00b6 Alias for GetoptError; for backward compatibility.  An example using only Unix style options: >>> import getopt >>> args = &#39;-a -b -cfoo -d bar a1 a2&#39;.split() >>> args [&#39;-a&#39;, &#39;-b&#39;, &#39;-cfoo&#39;, &#39;-d&#39;, &#39;bar&#39;, &#39;a1&#39;, &#39;a2&#39;] >>> optlist, args = getopt.getopt(args, &#39;abc:d:&#39;) >>> optlist [(&#39;-a&#39;, &#39;&#39;), (&#39;-b&#39;, &#39;&#39;), (&#39;-c&#39;, &#39;foo&#39;), (&#39;-d&#39;, &#39;bar&#39;)] >>> args [&#39;a1&#39;, &#39;a2&#39;]   Using long option names is equally easy: >>> s = &#39;--condition=foo --testing --output-file abc.def -x a1 a2&#39; >>> args = s.split() >>> args [&#39;--condition=foo&#39;, &#39;--testing&#39;, &#39;--output-file&#39;, &#39;abc.def&#39;, &#39;-x&#39;, &#39;a1&#39;, &#39;a2&#39;] >>> optlist, args = getopt.getopt(args, &#39;x&#39;, [ ...     &#39;condition=&#39;, &#39;output-file=&#39;, &#39;testing&#39;]) >>> optlist [(&#39;--condition&#39;, &#39;foo&#39;), (&#39;--testing&#39;, &#39;&#39;), (&#39;--output-file&#39;, &#39;abc.def&#39;), (&#39;-x&#39;, &#39;&#39;)] >>> args [&#39;a1&#39;, &#39;a2&#39;]   In a script, typical usage is something like this: import getopt, sys  def main():     try:         opts, args = getopt.getopt(sys.argv[1:], \"ho:v\", [\"help\", \"output=\"])     except getopt.GetoptError, err:         # print help information and exit:         print str(err) # will print something like \"option -a not recognized\"         usage()         sys.exit(2)     output = None     verbose = False     for o, a in opts:         if o == \"-v\":             verbose = True         elif o in (\"-h\", \"--help\"):             usage()             sys.exit()         elif o in (\"-o\", \"--output\"):             output = a         else:             assert False, \"unhandled option\"     # ...  if __name__ == \"__main__\":     main()   Note that an equivalent command line interface could be produced with less code and more informative help and error messages by using the argparse module: import argparse  if __name__ == &#39;__main__&#39;:     parser = argparse.ArgumentParser()     parser.add_argument(&#39;-o&#39;, &#39;--output&#39;)     parser.add_argument(&#39;-v&#39;, dest=&#39;verbose&#39;, action=&#39;store_true&#39;)     args = parser.parse_args()     # ... do something with args.output ...     # ... do something with args.verbose ..    See also  Module argparse Alternative command line option and argument parsing library."},{"url":"http:\/\/docs.python.org\/library\/getopt.html#getopt.getopt","title":"getopt.getopt","description":""},{"url":"http:\/\/docs.python.org\/library\/getopt.html#getopt.gnu_getopt","title":"getopt.gnu_getopt","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html","title":"optparse","description":"15.5. optparse &#8212; Parser for command line options\u00b6  New in version 2.3.  Deprecated since version 2.7: The optparse module is deprecated and will not be developed further; development will continue with the argparse module. Source code: Lib\/optparse.py  optparse is a more convenient, flexible, and powerful library for parsing command-line options than the old getopt module.  optparse uses a more declarative style of command-line parsing: you create an instance of OptionParser, populate it with options, and parse the command line. optparse allows users to specify options in the conventional GNU\/POSIX syntax, and additionally generates usage and help messages for you. Here&#8217;s an example of using optparse in a simple script: from optparse import OptionParser [...] parser = OptionParser() parser.add_option(\"-f\", \"--file\", dest=\"filename\",                   help=\"write report to FILE\", metavar=\"FILE\") parser.add_option(\"-q\", \"--quiet\",                   action=\"store_false\", dest=\"verbose\", default=True,                   help=\"don&#39;t print status messages to stdout\")  (options, args) = parser.parse_args()   With these few lines of code, users of your script can now do the &#8220;usual thing&#8221; on the command-line, for example: <yourscript> --file=outfile -q  As it parses the command line, optparse sets attributes of the options object returned by parse_args() based on user-supplied command-line values.  When parse_args() returns from parsing this command line, options.filename will be \"outfile\" and options.verbose will be False.  optparse supports both long and short options, allows short options to be merged together, and allows options to be associated with their arguments in a variety of ways.  Thus, the following command lines are all equivalent to the above example: <yourscript> -f outfile --quiet <yourscript> --quiet --file outfile <yourscript> -q -foutfile <yourscript> -qfoutfile  Additionally, users can run one of <yourscript> -h <yourscript> --help  and optparse will print out a brief summary of your script&#8217;s options: Usage: <yourscript> [options]  Options:   -h, --help            show this help message and exit   -f FILE, --file=FILE  write report to FILE   -q, --quiet           don&#39;t print status messages to stdout   where the value of yourscript is determined at runtime (normally from sys.argv[0]).  15.5.1. Background\u00b6 optparse was explicitly designed to encourage the creation of programs with straightforward, conventional command-line interfaces.  To that end, it supports only the most common command-line syntax and semantics conventionally used under Unix.  If you are unfamiliar with these conventions, read this section to acquaint yourself with them.  15.5.1.1. Terminology\u00b6  argument a string entered on the command-line, and passed by the shell to execl() or execv().  In Python, arguments are elements of sys.argv[1:] (sys.argv[0] is the name of the program being executed).  Unix shells also use the term &#8220;word&#8221;. It is occasionally desirable to substitute an argument list other than sys.argv[1:], so you should read &#8220;argument&#8221; as &#8220;an element of sys.argv[1:], or of some other list provided as a substitute for sys.argv[1:]&#8220;.  option an argument used to supply extra information to guide or customize the execution of a program.  There are many different syntaxes for options; the traditional Unix syntax is a hyphen (&#8220;-&#8220;) followed by a single letter, e.g. -x or -F.  Also, traditional Unix syntax allows multiple options to be merged into a single argument, e.g. -x -F is equivalent to -xF.  The GNU project introduced -- followed by a series of hyphen-separated words, e.g. --file or --dry-run.  These are the only two option syntaxes provided by optparse. Some other option syntaxes that the world has seen include:  a hyphen followed by a few letters, e.g. -pf (this is not the same as multiple options merged into a single argument) a hyphen followed by a whole word, e.g. -file (this is technically equivalent to the previous syntax, but they aren&#8217;t usually seen in the same program) a plus sign followed by a single letter, or a few letters, or a word, e.g. +f, +rgb a slash followed by a letter, or a few letters, or a word, e.g. \/f, \/file  These option syntaxes are not supported by optparse, and they never will be.  This is deliberate: the first three are non-standard on any environment, and the last only makes sense if you&#8217;re exclusively targeting VMS, MS-DOS, and\/or Windows.  option argument an argument that follows an option, is closely associated with that option, and is consumed from the argument list when that option is. With optparse, option arguments may either be in a separate argument from their option: -f foo --file foo   or included in the same argument: -ffoo --file=foo   Typically, a given option either takes an argument or it doesn&#8217;t. Lots of people want an &#8220;optional option arguments&#8221; feature, meaning that some options will take an argument if they see it, and won&#8217;t if they don&#8217;t.  This is somewhat controversial, because it makes parsing ambiguous: if -a takes an optional argument and -b is another option entirely, how do we interpret -ab?  Because of this ambiguity, optparse does not support this feature.  positional argument something leftover in the argument list after options have been parsed, i.e. after options and their arguments have been parsed and removed from the argument list. required option an option that must be supplied on the command-line; note that the phrase &#8220;required option&#8221; is self-contradictory in English.  optparse doesn&#8217;t prevent you from implementing required options, but doesn&#8217;t give you much help at it either.  For example, consider this hypothetical command-line: prog -v --report \/tmp\/report.txt foo bar  -v and --report are both options.  Assuming that --report takes one argument, \/tmp\/report.txt is an option argument.  foo and bar are positional arguments.   15.5.1.2. What are options for?\u00b6 Options are used to provide extra information to tune or customize the execution of a program.  In case it wasn&#8217;t clear, options are usually optional.  A program should be able to run just fine with no options whatsoever.  (Pick a random program from the Unix or GNU toolsets.  Can it run without any options at all and still make sense?  The main exceptions are find, tar, and dd&#8212;all of which are mutant oddballs that have been rightly criticized for their non-standard syntax and confusing interfaces.) Lots of people want their programs to have &#8220;required options&#8221;.  Think about it. If it&#8217;s required, then it&#8217;s not optional!  If there is a piece of information that your program absolutely requires in order to run successfully, that&#8217;s what positional arguments are for. As an example of good command-line interface design, consider the humble cp utility, for copying files.  It doesn&#8217;t make much sense to try to copy files without supplying a destination and at least one source. Hence, cp fails if you run it with no arguments.  However, it has a flexible, useful syntax that does not require any options at all: cp SOURCE DEST cp SOURCE ... DEST-DIR  You can get pretty far with just that.  Most cp implementations provide a bunch of options to tweak exactly how the files are copied: you can preserve mode and modification time, avoid following symlinks, ask before clobbering existing files, etc.  But none of this distracts from the core mission of cp, which is to copy either one file to another, or several files to another directory.   15.5.1.3. What are positional arguments for?\u00b6 Positional arguments are for those pieces of information that your program absolutely, positively requires to run. A good user interface should have as few absolute requirements as possible.  If your program requires 17 distinct pieces of information in order to run successfully, it doesn&#8217;t much matter how you get that information from the user&#8212;most people will give up and walk away before they successfully run the program.  This applies whether the user interface is a command-line, a configuration file, or a GUI: if you make that many demands on your users, most of them will simply give up. In short, try to minimize the amount of information that users are absolutely required to supply&#8212;use sensible defaults whenever possible.  Of course, you also want to make your programs reasonably flexible.  That&#8217;s what options are for.  Again, it doesn&#8217;t matter if they are entries in a config file, widgets in the &#8220;Preferences&#8221; dialog of a GUI, or command-line options&#8212;the more options you implement, the more flexible your program is, and the more complicated its implementation becomes.  Too much flexibility has drawbacks as well, of course; too many options can overwhelm users and make your code much harder to maintain.    15.5.2. Tutorial\u00b6 While optparse is quite flexible and powerful, it&#8217;s also straightforward to use in most cases.  This section covers the code patterns that are common to any optparse-based program. First, you need to import the OptionParser class; then, early in the main program, create an OptionParser instance: from optparse import OptionParser [...] parser = OptionParser()   Then you can start defining options.  The basic syntax is: parser.add_option(opt_str, ...,                   attr=value, ...)   Each option has one or more option strings, such as -f or --file, and several option attributes that tell optparse what to expect and what to do when it encounters that option on the command line. Typically, each option will have one short option string and one long option string, e.g.: parser.add_option(\"-f\", \"--file\", ...)   You&#8217;re free to define as many short option strings and as many long option strings as you like (including zero), as long as there is at least one option string overall. The option strings passed to add_option() are effectively labels for the option defined by that call.  For brevity, we will frequently refer to encountering an option on the command line; in reality, optparse encounters option strings and looks up options from them. Once all of your options are defined, instruct optparse to parse your program&#8217;s command line: (options, args) = parser.parse_args()   (If you like, you can pass a custom argument list to parse_args(), but that&#8217;s rarely necessary: by default it uses sys.argv[1:].) parse_args() returns two values:  options, an object containing values for all of your options&#8212;e.g. if --file takes a single string argument, then options.file will be the filename supplied by the user, or None if the user did not supply that option args, the list of positional arguments leftover after parsing options  This tutorial section only covers the four most important option attributes: action, type, dest (destination), and help. Of these, action is the most fundamental.  15.5.2.1. Understanding option actions\u00b6 Actions tell optparse what to do when it encounters an option on the command line.  There is a fixed set of actions hard-coded into optparse; adding new actions is an advanced topic covered in section Extending optparse.  Most actions tell optparse to store a value in some variable&#8212;for example, take a string from the command line and store it in an attribute of options. If you don&#8217;t specify an option action, optparse defaults to store.   15.5.2.2. The store action\u00b6 The most common option action is store, which tells optparse to take the next argument (or the remainder of the current argument), ensure that it is of the correct type, and store it to your chosen destination. For example: parser.add_option(\"-f\", \"--file\",                   action=\"store\", type=\"string\", dest=\"filename\")   Now let&#8217;s make up a fake command line and ask optparse to parse it: args = [\"-f\", \"foo.txt\"] (options, args) = parser.parse_args(args)   When optparse sees the option string -f, it consumes the next argument, foo.txt, and stores it in options.filename.  So, after this call to parse_args(), options.filename is \"foo.txt\". Some other option types supported by optparse are int and float. Here&#8217;s an option that expects an integer argument: parser.add_option(\"-n\", type=\"int\", dest=\"num\")   Note that this option has no long option string, which is perfectly acceptable. Also, there&#8217;s no explicit action, since the default is store. Let&#8217;s parse another fake command-line.  This time, we&#8217;ll jam the option argument right up against the option: since -n42 (one argument) is equivalent to -n 42 (two arguments), the code (options, args) = parser.parse_args([\"-n42\"]) print options.num   will print 42. If you don&#8217;t specify a type, optparse assumes string.  Combined with the fact that the default action is store, that means our first example can be a lot shorter: parser.add_option(\"-f\", \"--file\", dest=\"filename\")   If you don&#8217;t supply a destination, optparse figures out a sensible default from the option strings: if the first long option string is --foo-bar, then the default destination is foo_bar.  If there are no long option strings, optparse looks at the first short option string: the default destination for -f is f. optparse also includes built-in long and complex types.  Adding types is covered in section Extending optparse.   15.5.2.3. Handling boolean (flag) options\u00b6 Flag options&#8212;set a variable to true or false when a particular option is seen &#8212;are quite common.  optparse supports them with two separate actions, store_true and store_false.  For example, you might have a verbose flag that is turned on with -v and off with -q: parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\") parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\")   Here we have two different options with the same destination, which is perfectly OK.  (It just means you have to be a bit careful when setting default values&#8212; see below.) When optparse encounters -v on the command line, it sets options.verbose to True; when it encounters -q, options.verbose is set to False.   15.5.2.4. Other actions\u00b6 Some other actions supported by optparse are:  \"store_const\" store a constant value \"append\" append this option&#8217;s argument to a list \"count\" increment a counter by one \"callback\" call a specified function  These are covered in section Reference Guide, Reference Guide and section Option Callbacks.   15.5.2.5. Default values\u00b6 All of the above examples involve setting some variable (the &#8220;destination&#8221;) when certain command-line options are seen.  What happens if those options are never seen?  Since we didn&#8217;t supply any defaults, they are all set to None.  This is usually fine, but sometimes you want more control.  optparse lets you supply a default value for each destination, which is assigned before the command line is parsed. First, consider the verbose\/quiet example.  If we want optparse to set verbose to True unless -q is seen, then we can do this: parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\", default=True) parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\")   Since default values apply to the destination rather than to any particular option, and these two options happen to have the same destination, this is exactly equivalent: parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\") parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\", default=True)   Consider this: parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\", default=False) parser.add_option(\"-q\", action=\"store_false\", dest=\"verbose\", default=True)   Again, the default value for verbose will be True: the last default value supplied for any particular destination is the one that counts. A clearer way to specify default values is the set_defaults() method of OptionParser, which you can call at any time before calling parse_args(): parser.set_defaults(verbose=True) parser.add_option(...) (options, args) = parser.parse_args()   As before, the last value specified for a given option destination is the one that counts.  For clarity, try to use one method or the other of setting default values, not both.   15.5.2.6. Generating help\u00b6 optparse&#8216;s ability to generate help and usage text automatically is useful for creating user-friendly command-line interfaces.  All you have to do is supply a help value for each option, and optionally a short usage message for your whole program.  Here&#8217;s an OptionParser populated with user-friendly (documented) options: usage = \"usage: %prog [options] arg1 arg2\" parser = OptionParser(usage=usage) parser.add_option(\"-v\", \"--verbose\",                   action=\"store_true\", dest=\"verbose\", default=True,                   help=\"make lots of noise [default]\") parser.add_option(\"-q\", \"--quiet\",                   action=\"store_false\", dest=\"verbose\",                   help=\"be vewwy quiet (I&#39;m hunting wabbits)\") parser.add_option(\"-f\", \"--filename\",                   metavar=\"FILE\", help=\"write output to FILE\") parser.add_option(\"-m\", \"--mode\",                   default=\"intermediate\",                   help=\"interaction mode: novice, intermediate, \"                        \"or expert [default: %default]\")   If optparse encounters either -h or --help on the command-line, or if you just call parser.print_help(), it prints the following to standard output: Usage: <yourscript> [options] arg1 arg2  Options:   -h, --help            show this help message and exit   -v, --verbose         make lots of noise [default]   -q, --quiet           be vewwy quiet (I&#39;m hunting wabbits)   -f FILE, --filename=FILE                         write output to FILE   -m MODE, --mode=MODE  interaction mode: novice, intermediate, or                         expert [default: intermediate]   (If the help output is triggered by a help option, optparse exits after printing the help text.) There&#8217;s a lot going on here to help optparse generate the best possible help message:  the script defines its own usage message: usage = \"usage: %prog [options] arg1 arg2\"   optparse expands %prog in the usage string to the name of the current program, i.e. os.path.basename(sys.argv[0]).  The expanded string is then printed before the detailed option help. If you don&#8217;t supply a usage string, optparse uses a bland but sensible default: \"Usage: %prog [options]\", which is fine if your script doesn&#8217;t take any positional arguments.  every option defines a help string, and doesn&#8217;t worry about line-wrapping&#8212; optparse takes care of wrapping lines and making the help output look good.  options that take a value indicate this fact in their automatically-generated help message, e.g. for the &#8220;mode&#8221; option: -m MODE, --mode=MODE  Here, &#8220;MODE&#8221; is called the meta-variable: it stands for the argument that the user is expected to supply to -m\/--mode.  By default, optparse converts the destination variable name to uppercase and uses that for the meta-variable.  Sometimes, that&#8217;s not what you want&#8212;for example, the --filename option explicitly sets metavar=\"FILE\", resulting in this automatically-generated option description: -f FILE, --filename=FILE  This is important for more than just saving space, though: the manually written help text uses the meta-variable FILE to clue the user in that there&#8217;s a connection between the semi-formal syntax -f FILE and the informal semantic description &#8220;write output to FILE&#8221;. This is a simple but effective way to make your help text a lot clearer and more useful for end users.    New in version 2.4: Options that have a default value can include %default in the help string&#8212;optparse will replace it with str() of the option&#8217;s default value.  If an option has no default value (or the default value is None), %default expands to none.  15.5.2.6.1. Grouping Options\u00b6 When dealing with many options, it is convenient to group these options for better help output.  An OptionParser can contain several option groups, each of which can contain several options. An option group is obtained using the class OptionGroup:   class optparse.OptionGroup(parser, title, description=None)\u00b6 where  parser is the OptionParser instance the group will be insterted in to title is the group title description, optional, is a long description of the group    OptionGroup inherits from OptionContainer (like OptionParser) and so the add_option() method can be used to add an option to the group. Once all the options are declared, using the OptionParser method add_option_group() the group is added to the previously defined parser. Continuing with the parser defined in the previous section, adding an OptionGroup to a parser is easy: group = OptionGroup(parser, \"Dangerous Options\",                     \"Caution: use these options at your own risk.  \"                     \"It is believed that some of them bite.\") group.add_option(\"-g\", action=\"store_true\", help=\"Group option.\") parser.add_option_group(group)   This would result in the following help output: Usage: <yourscript> [options] arg1 arg2  Options:   -h, --help            show this help message and exit   -v, --verbose         make lots of noise [default]   -q, --quiet           be vewwy quiet (I&#39;m hunting wabbits)   -f FILE, --filename=FILE                         write output to FILE   -m MODE, --mode=MODE  interaction mode: novice, intermediate, or                         expert [default: intermediate]    Dangerous Options:     Caution: use these options at your own risk.  It is believed that some     of them bite.      -g                  Group option.   A bit more complete example might involve using more than one group: still extending the previous example: group = OptionGroup(parser, \"Dangerous Options\",                     \"Caution: use these options at your own risk.  \"                     \"It is believed that some of them bite.\") group.add_option(\"-g\", action=\"store_true\", help=\"Group option.\") parser.add_option_group(group)  group = OptionGroup(parser, \"Debug Options\") group.add_option(\"-d\", \"--debug\", action=\"store_true\",                  help=\"Print debug information\") group.add_option(\"-s\", \"--sql\", action=\"store_true\",                  help=\"Print all SQL statements executed\") group.add_option(\"-e\", action=\"store_true\", help=\"Print every action done\") parser.add_option_group(group)   that results in the following output: Usage: <yourscript> [options] arg1 arg2  Options:   -h, --help            show this help message and exit   -v, --verbose         make lots of noise [default]   -q, --quiet           be vewwy quiet (I&#39;m hunting wabbits)   -f FILE, --filename=FILE                         write output to FILE   -m MODE, --mode=MODE  interaction mode: novice, intermediate, or expert                         [default: intermediate]    Dangerous Options:     Caution: use these options at your own risk.  It is believed that some     of them bite.      -g                  Group option.    Debug Options:     -d, --debug         Print debug information     -s, --sql           Print all SQL statements executed     -e                  Print every action done   Another interesting method, in particular when working programmatically with option groups is:   OptionParser.get_option_group(opt_str)\u00b6 Return the OptionGroup to which the short or long option string opt_str (e.g. '-o' or '--option') belongs. If there&#8217;s no such OptionGroup, return None.     15.5.2.7. Printing a version string\u00b6 Similar to the brief usage string, optparse can also print a version string for your program.  You have to supply the string as the version argument to OptionParser: parser = OptionParser(usage=\"%prog [-f] [-q]\", version=\"%prog 1.0\")   %prog is expanded just like it is in usage.  Apart from that, version can contain anything you like.  When you supply it, optparse automatically adds a --version option to your parser. If it encounters this option on the command line, it expands your version string (by replacing %prog), prints it to stdout, and exits. For example, if your script is called \/usr\/bin\/foo: $ \/usr\/bin\/foo --version foo 1.0  The following two methods can be used to print and get the version string:   OptionParser.print_version(file=None)\u00b6 Print the version message for the current program (self.version) to file (default stdout).  As with print_usage(), any occurrence of %prog in self.version is replaced with the name of the current program.  Does nothing if self.version is empty or undefined.    OptionParser.get_version()\u00b6 Same as print_version() but returns the version string instead of printing it.    15.5.2.8. How optparse handles errors\u00b6 There are two broad classes of errors that optparse has to worry about: programmer errors and user errors.  Programmer errors are usually erroneous calls to OptionParser.add_option(), e.g. invalid option strings, unknown option attributes, missing option attributes, etc.  These are dealt with in the usual way: raise an exception (either optparse.OptionError or TypeError) and let the program crash. Handling user errors is much more important, since they are guaranteed to happen no matter how stable your code is.  optparse can automatically detect some user errors, such as bad option arguments (passing -n 4x where -n takes an integer argument), missing arguments (-n at the end of the command line, where -n takes an argument of any type).  Also, you can call OptionParser.error() to signal an application-defined error condition: (options, args) = parser.parse_args() [...] if options.a and options.b:     parser.error(\"options -a and -b are mutually exclusive\")   In either case, optparse handles the error the same way: it prints the program&#8217;s usage message and an error message to standard error and exits with error status 2. Consider the first example above, where the user passes 4x to an option that takes an integer: $ \/usr\/bin\/foo -n 4x Usage: foo [options]  foo: error: option -n: invalid integer value: '4x'  Or, where the user fails to pass a value at all: $ \/usr\/bin\/foo -n Usage: foo [options]  foo: error: -n option requires an argument  optparse-generated error messages take care always to mention the option involved in the error; be sure to do the same when calling OptionParser.error() from your application code. If optparse&#8216;s default error-handling behaviour does not suit your needs, you&#8217;ll need to subclass OptionParser and override its exit() and\/or error() methods.   15.5.2.9. Putting it all together\u00b6 Here&#8217;s what optparse-based scripts usually look like: from optparse import OptionParser [...] def main():     usage = \"usage: %prog [options] arg\"     parser = OptionParser(usage)     parser.add_option(\"-f\", \"--file\", dest=\"filename\",                       help=\"read data from FILENAME\")     parser.add_option(\"-v\", \"--verbose\",                       action=\"store_true\", dest=\"verbose\")     parser.add_option(\"-q\", \"--quiet\",                       action=\"store_false\", dest=\"verbose\")     [...]     (options, args) = parser.parse_args()     if len(args) != 1:         parser.error(\"incorrect number of arguments\")     if options.verbose:         print \"reading %s...\"  options.filename     [...]  if __name__ == \"__main__\":     main()      15.5.3. Reference Guide\u00b6  15.5.3.1. Creating the parser\u00b6 The first step in using optparse is to create an OptionParser instance.   class optparse.OptionParser(...)\u00b6 The OptionParser constructor has no required arguments, but a number of optional keyword arguments.  You should always pass them as keyword arguments, i.e. do not rely on the order in which the arguments are declared.  usage (default: \"%prog [options]\") The usage summary to print when your program is run incorrectly or with a help option.  When optparse prints the usage string, it expands %prog to os.path.basename(sys.argv[0]) (or to prog if you passed that keyword argument).  To suppress a usage message, pass the special value optparse.SUPPRESS_USAGE. option_list (default: []) A list of Option objects to populate the parser with.  The options in option_list are added after any options in standard_option_list (a class attribute that may be set by OptionParser subclasses), but before any version or help options. Deprecated; use add_option() after creating the parser instead. option_class (default: optparse.Option) Class to use when adding options to the parser in add_option(). version (default: None) A version string to print when the user supplies a version option. If you supply a true value for version, optparse automatically adds a version option with the single option string --version.  The substring %prog is expanded the same as for usage. conflict_handler (default: \"error\") Specifies what to do when options with conflicting option strings are added to the parser; see section Conflicts between options. description (default: None) A paragraph of text giving a brief overview of your program. optparse reformats this paragraph to fit the current terminal width and prints it when the user requests help (after usage, but before the list of options). formatter (default: a new IndentedHelpFormatter) An instance of optparse.HelpFormatter that will be used for printing help text.  optparse provides two concrete classes for this purpose: IndentedHelpFormatter and TitledHelpFormatter. add_help_option (default: True) If true, optparse will add a help option (with option strings -h and --help) to the parser. prog The string to use when expanding %prog in usage and version instead of os.path.basename(sys.argv[0]). epilog (default: None) A paragraph of help text to print after the option help.      15.5.3.2. Populating the parser\u00b6 There are several ways to populate the parser with options.  The preferred way is by using OptionParser.add_option(), as shown in section Tutorial.  add_option() can be called in one of two ways:  pass it an Option instance (as returned by make_option()) pass it any combination of positional and keyword arguments that are acceptable to make_option() (i.e., to the Option constructor), and it will create the Option instance for you  The other alternative is to pass a list of pre-constructed Option instances to the OptionParser constructor, as in: option_list = [     make_option(\"-f\", \"--filename\",                 action=\"store\", type=\"string\", dest=\"filename\"),     make_option(\"-q\", \"--quiet\",                 action=\"store_false\", dest=\"verbose\"),     ] parser = OptionParser(option_list=option_list)   (make_option() is a factory function for creating Option instances; currently it is an alias for the Option constructor.  A future version of optparse may split Option into several classes, and make_option() will pick the right class to instantiate.  Do not instantiate Option directly.)   15.5.3.3. Defining options\u00b6 Each Option instance represents a set of synonymous command-line option strings, e.g. -f and --file.  You can specify any number of short or long option strings, but you must specify at least one overall option string. The canonical way to create an Option instance is with the add_option() method of OptionParser.   OptionParser.add_option(opt_str[, ...], attr=value, ...)\u00b6 To define an option with only a short option string: parser.add_option(\"-f\", attr=value, ...)   And to define an option with only a long option string: parser.add_option(\"--foo\", attr=value, ...)   The keyword arguments define attributes of the new Option object.  The most important option attribute is action, and it largely determines which other attributes are relevant or required.  If you pass irrelevant option attributes, or fail to pass required ones, optparse raises an OptionError exception explaining your mistake. An option&#8217;s action determines what optparse does when it encounters this option on the command-line.  The standard option actions hard-coded into optparse are:  \"store\" store this option&#8217;s argument (default) \"store_const\" store a constant value \"store_true\" store a true value \"store_false\" store a false value \"append\" append this option&#8217;s argument to a list \"append_const\" append a constant value to a list \"count\" increment a counter by one \"callback\" call a specified function \"help\" print a usage message including all options and the documentation for them  (If you don&#8217;t supply an action, the default is \"store\".  For this action, you may also supply type and dest option attributes; see Standard option actions.)   As you can see, most actions involve storing or updating a value somewhere. optparse always creates a special object for this, conventionally called options (it happens to be an instance of optparse.Values).  Option arguments (and various other values) are stored as attributes of this object, according to the dest (destination) option attribute. For example, when you call parser.parse_args()   one of the first things optparse does is create the options object: options = Values()   If one of the options in this parser is defined with parser.add_option(\"-f\", \"--file\", action=\"store\", type=\"string\", dest=\"filename\")   and the command-line being parsed includes any of the following: -ffoo -f foo --file=foo --file foo  then optparse, on seeing this option, will do the equivalent of options.filename = \"foo\"   The type and dest option attributes are almost as important as action, but action is the only one that makes sense for all options.   15.5.3.4. Option attributes\u00b6 The following option attributes may be passed as keyword arguments to OptionParser.add_option().  If you pass an option attribute that is not relevant to a particular option, or fail to pass a required option attribute, optparse raises OptionError.   Option.action\u00b6 (default: \"store\") Determines optparse&#8216;s behaviour when this option is seen on the command line; the available options are documented here.     Option.type\u00b6 (default: \"string\") The argument type expected by this option (e.g., \"string\" or \"int\"); the available option types are documented here.     Option.dest\u00b6 (default: derived from option strings) If the option&#8217;s action implies writing or modifying a value somewhere, this tells optparse where to write it: dest names an attribute of the options object that optparse builds as it parses the command line.     Option.default\u00b6 The value to use for this option&#8217;s destination if the option is not seen on the command line.  See also OptionParser.set_defaults().    Option.nargs\u00b6 (default: 1) How many arguments of type type should be consumed when this option is seen.  If > 1, optparse will store a tuple of values to dest.     Option.const\u00b6 For actions that store a constant value, the constant value to store.    Option.choices\u00b6 For options of type \"choice\", the list of strings the user may choose from.    Option.callback\u00b6 For options with action \"callback\", the callable to call when this option is seen.  See section Option Callbacks for detail on the arguments passed to the callable.    Option.callback_args\u00b6  Option.callback_kwargs\u00b6 Additional positional and keyword arguments to pass to callback after the four standard callback arguments.    Option.help\u00b6 Help text to print for this option when listing all available options after the user supplies a help option (such as --help).  If no help text is supplied, the option will be listed without help text.  To hide this option, use the special value optparse.SUPPRESS_HELP.    Option.metavar\u00b6 (default: derived from option strings) Stand-in for the option argument(s) to use when printing help text.  See section Tutorial for an example.     15.5.3.5. Standard option actions\u00b6 The various option actions all have slightly different requirements and effects. Most actions have several relevant option attributes which you may specify to guide optparse&#8216;s behaviour; a few have required attributes, which you must specify for any option using that action.  \"store\" [relevant: type, dest, nargs, choices] The option must be followed by an argument, which is converted to a value according to type and stored in dest.  If nargs > 1, multiple arguments will be consumed from the command line; all will be converted according to type and stored to dest as a tuple.  See the Standard option types section. If choices is supplied (a list or tuple of strings), the type defaults to \"choice\". If type is not supplied, it defaults to \"string\". If dest is not supplied, optparse derives a destination from the first long option string (e.g., --foo-bar implies foo_bar). If there are no long option strings, optparse derives a destination from the first short option string (e.g., -f implies f). Example: parser.add_option(\"-f\") parser.add_option(\"-p\", type=\"float\", nargs=3, dest=\"point\")   As it parses the command line -f foo.txt -p 1 -3.5 4 -fbar.txt  optparse will set options.f = \"foo.txt\" options.point = (1.0, -3.5, 4.0) options.f = \"bar.txt\"    \"store_const\" [required: const; relevant: dest] The value const is stored in dest. Example: parser.add_option(\"-q\", \"--quiet\",                   action=\"store_const\", const=0, dest=\"verbose\") parser.add_option(\"-v\", \"--verbose\",                   action=\"store_const\", const=1, dest=\"verbose\") parser.add_option(\"--noisy\",                   action=\"store_const\", const=2, dest=\"verbose\")   If --noisy is seen, optparse will set options.verbose = 2    \"store_true\" [relevant: dest] A special case of \"store_const\" that stores a true value to dest.  \"store_false\" [relevant: dest] Like \"store_true\", but stores a false value. Example: parser.add_option(\"--clobber\", action=\"store_true\", dest=\"clobber\") parser.add_option(\"--no-clobber\", action=\"store_false\", dest=\"clobber\")    \"append\" [relevant: type, dest, nargs, choices] The option must be followed by an argument, which is appended to the list in dest.  If no default value for dest is supplied, an empty list is automatically created when optparse first encounters this option on the command-line.  If nargs > 1, multiple arguments are consumed, and a tuple of length nargs is appended to dest. The defaults for type and dest are the same as for the \"store\" action. Example: parser.add_option(\"-t\", \"--tracks\", action=\"append\", type=\"int\")   If -t3 is seen on the command-line, optparse does the equivalent of: options.tracks = [] options.tracks.append(int(\"3\"))   If, a little later on, --tracks=4 is seen, it does: options.tracks.append(int(\"4\"))    \"append_const\" [required: const; relevant: dest] Like \"store_const\", but the value const is appended to dest; as with \"append\", dest defaults to None, and an empty list is automatically created the first time the option is encountered.  \"count\" [relevant: dest] Increment the integer stored at dest.  If no default value is supplied, dest is set to zero before being incremented the first time. Example: parser.add_option(\"-v\", action=\"count\", dest=\"verbosity\")   The first time -v is seen on the command line, optparse does the equivalent of: options.verbosity = 0 options.verbosity += 1   Every subsequent occurrence of -v results in options.verbosity += 1    \"callback\" [required: callback; relevant: type, nargs, callback_args, callback_kwargs] Call the function specified by callback, which is called as func(option, opt_str, value, parser, *args, **kwargs)   See section Option Callbacks for more detail.  \"help\" Prints a complete help message for all the options in the current option parser.  The help message is constructed from the usage string passed to OptionParser&#8217;s constructor and the help string passed to every option. If no help string is supplied for an option, it will still be listed in the help message.  To omit an option entirely, use the special value optparse.SUPPRESS_HELP. optparse automatically adds a help option to all OptionParsers, so you do not normally need to create one. Example: from optparse import OptionParser, SUPPRESS_HELP  # usually, a help option is added automatically, but that can # be suppressed using the add_help_option argument parser = OptionParser(add_help_option=False)  parser.add_option(\"-h\", \"--help\", action=\"help\") parser.add_option(\"-v\", action=\"store_true\", dest=\"verbose\",                   help=\"Be moderately verbose\") parser.add_option(\"--file\", dest=\"filename\",                   help=\"Input file to read data from\") parser.add_option(\"--secret\", help=SUPPRESS_HELP)   If optparse sees either -h or --help on the command line, it will print something like the following help message to stdout (assuming sys.argv[0] is \"foo.py\"): Usage: foo.py [options]  Options:   -h, --help        Show this help message and exit   -v                Be moderately verbose   --file=FILENAME   Input file to read data from   After printing the help message, optparse terminates your process with sys.exit(0).  \"version\" Prints the version number supplied to the OptionParser to stdout and exits. The version number is actually formatted and printed by the print_version() method of OptionParser.  Generally only relevant if the version argument is supplied to the OptionParser constructor.  As with help options, you will rarely create version options, since optparse automatically adds them when needed.     15.5.3.6. Standard option types\u00b6 optparse has six built-in option types: \"string\", \"int\", \"long\", \"choice\", \"float\" and \"complex\".  If you need to add new option types, see section Extending optparse. Arguments to string options are not checked or converted in any way: the text on the command line is stored in the destination (or passed to the callback) as-is. Integer arguments (type \"int\" or \"long\") are parsed as follows:  if the number starts with 0x, it is parsed as a hexadecimal number if the number starts with 0, it is parsed as an octal number if the number starts with 0b, it is parsed as a binary number otherwise, the number is parsed as a decimal number  The conversion is done by calling either int() or long() with the appropriate base (2, 8, 10, or 16).  If this fails, so will optparse, although with a more useful error message. \"float\" and \"complex\" option arguments are converted directly with float() and complex(), with similar error-handling. \"choice\" options are a subtype of \"string\" options.  The choices option attribute (a sequence of strings) defines the set of allowed option arguments.  optparse.check_choice() compares user-supplied option arguments against this master list and raises OptionValueError if an invalid string is given.   15.5.3.7. Parsing arguments\u00b6 The whole point of creating and populating an OptionParser is to call its parse_args() method: (options, args) = parser.parse_args(args=None, values=None)   where the input parameters are  args the list of arguments to process (default: sys.argv[1:]) values a optparse.Values object to store option arguments in (default: a new instance of Values) &#8211; if you give an existing object, the option defaults will not be initialized on it  and the return values are  options the same object that was passed in as values, or the optparse.Values instance created by optparse args the leftover positional arguments after all options have been processed  The most common usage is to supply neither keyword argument.  If you supply values, it will be modified with repeated setattr() calls (roughly one for every option argument stored to an option destination) and returned by parse_args(). If parse_args() encounters any errors in the argument list, it calls the OptionParser&#8217;s error() method with an appropriate end-user error message. This ultimately terminates your process with an exit status of 2 (the traditional Unix exit status for command-line errors).   15.5.3.8. Querying and manipulating your option parser\u00b6 The default behavior of the option parser can be customized slightly, and you can also poke around your option parser and see what&#8217;s there.  OptionParser provides several methods to help you out:   OptionParser.disable_interspersed_args()\u00b6 Set parsing to stop on the first non-option.  For example, if -a and -b are both simple options that take no arguments, optparse normally accepts this syntax: prog -a arg1 -b arg2  and treats it as equivalent to prog -a -b arg1 arg2  To disable this feature, call disable_interspersed_args().  This restores traditional Unix syntax, where option parsing stops with the first non-option argument. Use this if you have a command processor which runs another command which has options of its own and you want to make sure these options don&#8217;t get confused.  For example, each command might have a different set of options.     OptionParser.enable_interspersed_args()\u00b6 Set parsing to not stop on the first non-option, allowing interspersing switches with command arguments.  This is the default behavior.    OptionParser.get_option(opt_str)\u00b6 Returns the Option instance with the option string opt_str, or None if no options have that option string.    OptionParser.has_option(opt_str)\u00b6 Return true if the OptionParser has an option with option string opt_str (e.g., -q or --verbose).    OptionParser.remove_option(opt_str)\u00b6 If the OptionParser has an option corresponding to opt_str, that option is removed.  If that option provided any other option strings, all of those option strings become invalid. If opt_str does not occur in any option belonging to this OptionParser, raises ValueError.    15.5.3.9. Conflicts between options\u00b6 If you&#8217;re not careful, it&#8217;s easy to define options with conflicting option strings: parser.add_option(\"-n\", \"--dry-run\", ...) [...] parser.add_option(\"-n\", \"--noisy\", ...)   (This is particularly true if you&#8217;ve defined your own OptionParser subclass with some standard options.) Every time you add an option, optparse checks for conflicts with existing options.  If it finds any, it invokes the current conflict-handling mechanism. You can set the conflict-handling mechanism either in the constructor: parser = OptionParser(..., conflict_handler=handler)   or with a separate call: parser.set_conflict_handler(handler)   The available conflict handlers are:   \"error\" (default) assume option conflicts are a programming error and raise OptionConflictError \"resolve\" resolve option conflicts intelligently (see below)   As an example, let&#8217;s define an OptionParser that resolves conflicts intelligently and add conflicting options to it: parser = OptionParser(conflict_handler=\"resolve\") parser.add_option(\"-n\", \"--dry-run\", ..., help=\"do no harm\") parser.add_option(\"-n\", \"--noisy\", ..., help=\"be noisy\")   At this point, optparse detects that a previously-added option is already using the -n option string.  Since conflict_handler is \"resolve\", it resolves the situation by removing -n from the earlier option&#8217;s list of option strings.  Now --dry-run is the only way for the user to activate that option.  If the user asks for help, the help message will reflect that: Options:   --dry-run     do no harm   [...]   -n, --noisy   be noisy  It&#8217;s possible to whittle away the option strings for a previously-added option until there are none left, and the user has no way of invoking that option from the command-line.  In that case, optparse removes that option completely, so it doesn&#8217;t show up in help text or anywhere else. Carrying on with our existing OptionParser: parser.add_option(\"--dry-run\", ..., help=\"new dry-run option\")   At this point, the original -n\/--dry-run option is no longer accessible, so optparse removes it, leaving this help text: Options:   [...]   -n, --noisy   be noisy   --dry-run     new dry-run option    15.5.3.10. Cleanup\u00b6 OptionParser instances have several cyclic references.  This should not be a problem for Python&#8217;s garbage collector, but you may wish to break the cyclic references explicitly by calling destroy() on your OptionParser once you are done with it.  This is particularly useful in long-running applications where large object graphs are reachable from your OptionParser.   15.5.3.11. Other methods\u00b6 OptionParser supports several other public methods:   OptionParser.set_usage(usage)\u00b6 Set the usage string according to the rules described above for the usage constructor keyword argument.  Passing None sets the default usage string; use optparse.SUPPRESS_USAGE to suppress a usage message.    OptionParser.print_usage(file=None)\u00b6 Print the usage message for the current program (self.usage) to file (default stdout).  Any occurrence of the string %prog in self.usage is replaced with the name of the current program.  Does nothing if self.usage is empty or not defined.    OptionParser.get_usage()\u00b6 Same as print_usage() but returns the usage string instead of printing it.    OptionParser.set_defaults(dest=value, ...)\u00b6 Set default values for several option destinations at once.  Using set_defaults() is the preferred way to set default values for options, since multiple options can share the same destination.  For example, if several &#8220;mode&#8221; options all set the same destination, any one of them can set the default, and the last one wins: parser.add_option(\"--advanced\", action=\"store_const\",                   dest=\"mode\", const=\"advanced\",                   default=\"novice\")    # overridden below parser.add_option(\"--novice\", action=\"store_const\",                   dest=\"mode\", const=\"novice\",                   default=\"advanced\")  # overrides above setting   To avoid this confusion, use set_defaults(): parser.set_defaults(mode=\"advanced\") parser.add_option(\"--advanced\", action=\"store_const\",                   dest=\"mode\", const=\"advanced\") parser.add_option(\"--novice\", action=\"store_const\",                   dest=\"mode\", const=\"novice\")        15.5.4. Option Callbacks\u00b6 When optparse&#8216;s built-in actions and types aren&#8217;t quite enough for your needs, you have two choices: extend optparse or define a callback option. Extending optparse is more general, but overkill for a lot of simple cases.  Quite often a simple callback is all you need. There are two steps to defining a callback option:  define the option itself using the \"callback\" action write the callback; this is a function (or method) that takes at least four arguments, as described below   15.5.4.1. Defining a callback option\u00b6 As always, the easiest way to define a callback option is by using the OptionParser.add_option() method.  Apart from action, the only option attribute you must specify is callback, the function to call: parser.add_option(\"-c\", action=\"callback\", callback=my_callback)   callback is a function (or other callable object), so you must have already defined my_callback() when you create this callback option. In this simple case, optparse doesn&#8217;t even know if -c takes any arguments, which usually means that the option takes no arguments&#8212;the mere presence of -c on the command-line is all it needs to know.  In some circumstances, though, you might want your callback to consume an arbitrary number of command-line arguments.  This is where writing callbacks gets tricky; it&#8217;s covered later in this section. optparse always passes four particular arguments to your callback, and it will only pass additional arguments if you specify them via callback_args and callback_kwargs.  Thus, the minimal callback function signature is: def my_callback(option, opt, value, parser):  The four arguments to a callback are described below. There are several other option attributes that you can supply when you define a callback option:  type has its usual meaning: as with the \"store\" or \"append\" actions, it instructs optparse to consume one argument and convert it to type.  Rather than storing the converted value(s) anywhere, though, optparse passes it to your callback function. nargs also has its usual meaning: if it is supplied and > 1, optparse will consume nargs arguments, each of which must be convertible to type.  It then passes a tuple of converted values to your callback. callback_args a tuple of extra positional arguments to pass to the callback callback_kwargs a dictionary of extra keyword arguments to pass to the callback    15.5.4.2. How callbacks are called\u00b6 All callbacks are called as follows: func(option, opt_str, value, parser, *args, **kwargs)   where  option is the Option instance that&#8217;s calling the callback opt_str is the option string seen on the command-line that&#8217;s triggering the callback. (If an abbreviated long option was used, opt_str will be the full, canonical option string&#8212;e.g. if the user puts --foo on the command-line as an abbreviation for --foobar, then opt_str will be \"--foobar\".) value is the argument to this option seen on the command-line.  optparse will only expect an argument if type is set; the type of value will be the type implied by the option&#8217;s type.  If type for this option is None (no argument expected), then value will be None.  If nargs > 1, value will be a tuple of values of the appropriate type. parser is the OptionParser instance driving the whole thing, mainly useful because you can access some other interesting data through its instance attributes:  parser.largs the current list of leftover arguments, ie. arguments that have been consumed but are neither options nor option arguments. Feel free to modify parser.largs, e.g. by adding more arguments to it.  (This list will become args, the second return value of parse_args().) parser.rargs the current list of remaining arguments, ie. with opt_str and value (if applicable) removed, and only the arguments following them still there.  Feel free to modify parser.rargs, e.g. by consuming more arguments. parser.values the object where option values are by default stored (an instance of optparse.OptionValues).  This lets callbacks use the same mechanism as the rest of optparse for storing option values; you don&#8217;t need to mess around with globals or closures.  You can also access or modify the value(s) of any options already encountered on the command-line.   args is a tuple of arbitrary positional arguments supplied via the callback_args option attribute. kwargs is a dictionary of arbitrary keyword arguments supplied via callback_kwargs.    15.5.4.3. Raising errors in a callback\u00b6 The callback function should raise OptionValueError if there are any problems with the option or its argument(s).  optparse catches this and terminates the program, printing the error message you supply to stderr.  Your message should be clear, concise, accurate, and mention the option at fault. Otherwise, the user will have a hard time figuring out what he did wrong.   15.5.4.4. Callback example 1: trivial callback\u00b6 Here&#8217;s an example of a callback option that takes no arguments, and simply records that the option was seen: def record_foo_seen(option, opt_str, value, parser):     parser.values.saw_foo = True  parser.add_option(\"--foo\", action=\"callback\", callback=record_foo_seen)   Of course, you could do that with the \"store_true\" action.   15.5.4.5. Callback example 2: check option order\u00b6 Here&#8217;s a slightly more interesting example: record the fact that -a is seen, but blow up if it comes after -b in the command-line. def check_order(option, opt_str, value, parser):     if parser.values.b:         raise OptionValueError(\"can&#39;t use -a after -b\")     parser.values.a = 1 [...] parser.add_option(\"-a\", action=\"callback\", callback=check_order) parser.add_option(\"-b\", action=\"store_true\", dest=\"b\")     15.5.4.6. Callback example 3: check option order (generalized)\u00b6 If you want to re-use this callback for several similar options (set a flag, but blow up if -b has already been seen), it needs a bit of work: the error message and the flag that it sets must be generalized. def check_order(option, opt_str, value, parser):     if parser.values.b:         raise OptionValueError(\"can&#39;t use %s after -b\"  opt_str)     setattr(parser.values, option.dest, 1) [...] parser.add_option(\"-a\", action=\"callback\", callback=check_order, dest=&#39;a&#39;) parser.add_option(\"-b\", action=\"store_true\", dest=\"b\") parser.add_option(\"-c\", action=\"callback\", callback=check_order, dest=&#39;c&#39;)     15.5.4.7. Callback example 4: check arbitrary condition\u00b6 Of course, you could put any condition in there&#8212;you&#8217;re not limited to checking the values of already-defined options.  For example, if you have options that should not be called when the moon is full, all you have to do is this: def check_moon(option, opt_str, value, parser):     if is_moon_full():         raise OptionValueError(\"%s option invalid when moon is full\"                                 opt_str)     setattr(parser.values, option.dest, 1) [...] parser.add_option(\"--foo\",                   action=\"callback\", callback=check_moon, dest=\"foo\")   (The definition of is_moon_full() is left as an exercise for the reader.)   15.5.4.8. Callback example 5: fixed arguments\u00b6 Things get slightly more interesting when you define callback options that take a fixed number of arguments.  Specifying that a callback option takes arguments is similar to defining a \"store\" or \"append\" option: if you define type, then the option takes one argument that must be convertible to that type; if you further define nargs, then the option takes nargs arguments. Here&#8217;s an example that just emulates the standard \"store\" action: def store_value(option, opt_str, value, parser):     setattr(parser.values, option.dest, value) [...] parser.add_option(\"--foo\",                   action=\"callback\", callback=store_value,                   type=\"int\", nargs=3, dest=\"foo\")   Note that optparse takes care of consuming 3 arguments and converting them to integers for you; all you have to do is store them.  (Or whatever; obviously you don&#8217;t need a callback for this example.)   15.5.4.9. Callback example 6: variable arguments\u00b6 Things get hairy when you want an option to take a variable number of arguments. For this case, you must write a callback, as optparse doesn&#8217;t provide any built-in capabilities for it.  And you have to deal with certain intricacies of conventional Unix command-line parsing that optparse normally handles for you.  In particular, callbacks should implement the conventional rules for bare -- and - arguments:  either -- or - can be option arguments bare -- (if not the argument to some option): halt command-line processing and discard the -- bare - (if not the argument to some option): halt command-line processing but keep the - (append it to parser.largs)  If you want an option that takes a variable number of arguments, there are several subtle, tricky issues to worry about.  The exact implementation you choose will be based on which trade-offs you&#8217;re willing to make for your application (which is why optparse doesn&#8217;t support this sort of thing directly). Nevertheless, here&#8217;s a stab at a callback for an option with variable arguments:  def vararg_callback(option, opt_str, value, parser):      assert value is None      value = []       def floatable(str):          try:              float(str)              return True          except ValueError:              return False       for arg in parser.rargs:          # stop on --foo like options          if arg[:2] == \"--\" and len(arg) > 2:              break          # stop on -a, but not on -3 or -3.0          if arg[:1] == \"-\" and len(arg) > 1 and not floatable(arg):              break          value.append(arg)       del parser.rargs[:len(value)]      setattr(parser.values, option.dest, value)  [...] parser.add_option(\"-c\", \"--callback\", dest=\"vararg_attr\",                   action=\"callback\", callback=vararg_callback)     15.5.5. Extending optparse\u00b6 Since the two major controlling factors in how optparse interprets command-line options are the action and type of each option, the most likely direction of extension is to add new actions and new types.  15.5.5.1. Adding new types\u00b6 To add new types, you need to define your own subclass of optparse&#8216;s Option class.  This class has a couple of attributes that define optparse&#8216;s types: TYPES and TYPE_CHECKER.   Option.TYPES\u00b6 A tuple of type names; in your subclass, simply define a new tuple TYPES that builds on the standard one.    Option.TYPE_CHECKER\u00b6 A dictionary mapping type names to type-checking functions.  A type-checking function has the following signature: def check_mytype(option, opt, value)  where option is an Option instance, opt is an option string (e.g., -f), and value is the string from the command line that must be checked and converted to your desired type.  check_mytype() should return an object of the hypothetical type mytype.  The value returned by a type-checking function will wind up in the OptionValues instance returned by OptionParser.parse_args(), or be passed to a callback as the value parameter. Your type-checking function should raise OptionValueError if it encounters any problems.  OptionValueError takes a single string argument, which is passed as-is to OptionParser&#8216;s error() method, which in turn prepends the program name and the string \"error:\" and prints everything to stderr before terminating the process.   Here&#8217;s a silly example that demonstrates adding a \"complex\" option type to parse Python-style complex numbers on the command line.  (This is even sillier than it used to be, because optparse 1.3 added built-in support for complex numbers, but never mind.) First, the necessary imports: from copy import copy from optparse import Option, OptionValueError   You need to define your type-checker first, since it&#8217;s referred to later (in the TYPE_CHECKER class attribute of your Option subclass): def check_complex(option, opt, value):     try:         return complex(value)     except ValueError:         raise OptionValueError(             \"option %s: invalid complex value: %r\"  (opt, value))   Finally, the Option subclass: class MyOption (Option):     TYPES = Option.TYPES + (\"complex\",)     TYPE_CHECKER = copy(Option.TYPE_CHECKER)     TYPE_CHECKER[\"complex\"] = check_complex   (If we didn&#8217;t make a copy() of Option.TYPE_CHECKER, we would end up modifying the TYPE_CHECKER attribute of optparse&#8216;s Option class.  This being Python, nothing stops you from doing that except good manners and common sense.) That&#8217;s it!  Now you can write a script that uses the new option type just like any other optparse-based script, except you have to instruct your OptionParser to use MyOption instead of Option: parser = OptionParser(option_class=MyOption) parser.add_option(\"-c\", type=\"complex\")   Alternately, you can build your own option list and pass it to OptionParser; if you don&#8217;t use add_option() in the above way, you don&#8217;t need to tell OptionParser which option class to use: option_list = [MyOption(\"-c\", action=\"store\", type=\"complex\", dest=\"c\")] parser = OptionParser(option_list=option_list)     15.5.5.2. Adding new actions\u00b6 Adding new actions is a bit trickier, because you have to understand that optparse has a couple of classifications for actions:  &#8220;store&#8221; actions actions that result in optparse storing a value to an attribute of the current OptionValues instance; these options require a dest attribute to be supplied to the Option constructor. &#8220;typed&#8221; actions actions that take a value from the command line and expect it to be of a certain type; or rather, a string that can be converted to a certain type. These options require a type attribute to the Option constructor.  These are overlapping sets: some default &#8220;store&#8221; actions are \"store\", \"store_const\", \"append\", and \"count\", while the default &#8220;typed&#8221; actions are \"store\", \"append\", and \"callback\". When you add an action, you need to categorize it by listing it in at least one of the following class attributes of Option (all are lists of strings):   Option.ACTIONS\u00b6 All actions must be listed in ACTIONS.    Option.STORE_ACTIONS\u00b6 &#8220;store&#8221; actions are additionally listed here.    Option.TYPED_ACTIONS\u00b6 &#8220;typed&#8221; actions are additionally listed here.    Option.ALWAYS_TYPED_ACTIONS\u00b6 Actions that always take a type (i.e. whose options always take a value) are additionally listed here.  The only effect of this is that optparse assigns the default type, \"string\", to options with no explicit type whose action is listed in ALWAYS_TYPED_ACTIONS.  In order to actually implement your new action, you must override Option&#8217;s take_action() method and add a case that recognizes your action. For example, let&#8217;s add an \"extend\" action.  This is similar to the standard \"append\" action, but instead of taking a single value from the command-line and appending it to an existing list, \"extend\" will take multiple values in a single comma-delimited string, and extend an existing list with them.  That is, if --names is an \"extend\" option of type \"string\", the command line --names=foo,bar --names blah --names ding,dong  would result in a list [\"foo\", \"bar\", \"blah\", \"ding\", \"dong\"]   Again we define a subclass of Option: class MyOption(Option):      ACTIONS = Option.ACTIONS + (\"extend\",)     STORE_ACTIONS = Option.STORE_ACTIONS + (\"extend\",)     TYPED_ACTIONS = Option.TYPED_ACTIONS + (\"extend\",)     ALWAYS_TYPED_ACTIONS = Option.ALWAYS_TYPED_ACTIONS + (\"extend\",)      def take_action(self, action, dest, opt, value, values, parser):         if action == \"extend\":             lvalue = value.split(\",\")             values.ensure_value(dest, []).extend(lvalue)         else:             Option.take_action(                 self, action, dest, opt, value, values, parser)   Features of note:  \"extend\" both expects a value on the command-line and stores that value somewhere, so it goes in both STORE_ACTIONS and TYPED_ACTIONS.  to ensure that optparse assigns the default type of \"string\" to \"extend\" actions, we put the \"extend\" action in ALWAYS_TYPED_ACTIONS as well.  MyOption.take_action() implements just this one new action, and passes control back to Option.take_action() for the standard optparse actions.  values is an instance of the optparse_parser.Values class, which provides the very useful ensure_value() method. ensure_value() is essentially getattr() with a safety valve; it is called as values.ensure_value(attr, value)   If the attr attribute of values doesn&#8217;t exist or is None, then ensure_value() first sets it to value, and then returns &#8216;value. This is very handy for actions like \"extend\", \"append\", and \"count\", all of which accumulate data in a variable and expect that variable to be of a certain type (a list for the first two, an integer for the latter).  Using ensure_value() means that scripts using your action don&#8217;t have to worry about setting a default value for the option destinations in question; they can just leave the default as None and ensure_value() will take care of getting it right when it&#8217;s needed."},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionGroup","title":"optparse.OptionGroup","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser","title":"optparse.OptionParser","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.add_option","title":"optparse.OptionParser.add_option","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.disable_interspersed_args","title":"optparse.OptionParser.disable_interspersed_args","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.enable_interspersed_args","title":"optparse.OptionParser.enable_interspersed_args","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.get_option","title":"optparse.OptionParser.get_option","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.get_option_group","title":"optparse.OptionParser.get_option_group","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.get_usage","title":"optparse.OptionParser.get_usage","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.get_version","title":"optparse.OptionParser.get_version","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.has_option","title":"optparse.OptionParser.has_option","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.print_usage","title":"optparse.OptionParser.print_usage","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.print_version","title":"optparse.OptionParser.print_version","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.remove_option","title":"optparse.OptionParser.remove_option","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.set_defaults","title":"optparse.OptionParser.set_defaults","description":""},{"url":"http:\/\/docs.python.org\/library\/optparse.html#optparse.OptionParser.set_usage","title":"optparse.OptionParser.set_usage","description":""},{"url":"http:\/\/docs.python.org\/library\/getpass.html","title":"getpass","description":"15.10. getpass &#8212; Portable password input\u00b6 The getpass module provides two functions:   getpass.getpass([prompt[, stream]])\u00b6 Prompt the user for a password without echoing.  The user is prompted using the string prompt, which defaults to 'Password: '. On Unix, the prompt is written to the file-like object stream.  stream defaults to the controlling terminal (\/dev\/tty) or if that is unavailable to sys.stderr (this argument is ignored on Windows). If echo free input is unavailable getpass() falls back to printing a warning message to stream and reading from sys.stdin and issuing a GetPassWarning. Availability: Macintosh, Unix, Windows.  Changed in version 2.5: The stream parameter was added.  Changed in version 2.6: On Unix it defaults to using \/dev\/tty before falling back to sys.stdin and sys.stderr.  Note If you call getpass from within IDLE, the input may be done in the terminal you launched IDLE from rather than the idle window itself.      exception getpass.GetPassWarning\u00b6 A UserWarning subclass issued when password input may be echoed.    getpass.getuser()\u00b6 Return the &#8220;login name&#8221; of the user. Availability: Unix, Windows. This function checks the environment variables LOGNAME, USER, LNAME and USERNAME, in order, and returns the value of the first one which is set to a non-empty string.  If none are set, the login name from the password database is returned on systems which support the pwd module, otherwise, an exception is raised."},{"url":"http:\/\/docs.python.org\/library\/getpass.html#getpass.getpass","title":"getpass.getpass","description":""},{"url":"http:\/\/docs.python.org\/library\/getpass.html#getpass.getuser","title":"getpass.getuser","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html","title":"logging.handlers","description":"15.9. logging.handlers &#8212; Logging handlers\u00b6  Important This page contains only reference information. For tutorials, please see  Basic Tutorial Advanced Tutorial Logging Cookbook   The following useful handlers are provided in the package. Note that three of the handlers (StreamHandler, FileHandler and NullHandler) are actually defined in the logging module itself, but have been documented here along with the other handlers.  15.9.1. StreamHandler\u00b6 The StreamHandler class, located in the core logging package, sends logging output to streams such as sys.stdout, sys.stderr or any file-like object (or, more precisely, any object which supports write() and flush() methods).   class logging.StreamHandler(stream=None)\u00b6 Returns a new instance of the StreamHandler class. If stream is specified, the instance will use it for logging output; otherwise, sys.stderr will be used.   emit(record)\u00b6 If a formatter is specified, it is used to format the record. The record is then written to the stream with a newline terminator. If exception information is present, it is formatted using traceback.print_exception() and appended to the stream.    flush()\u00b6 Flushes the stream by calling its flush() method. Note that the close() method is inherited from Handler and so does no output, so an explicit flush() call may be needed at times.      15.9.2. FileHandler\u00b6 The FileHandler class, located in the core logging package, sends logging output to a disk file.  It inherits the output functionality from StreamHandler.   class logging.FileHandler(filename, mode='a', encoding=None, delay=False)\u00b6 Returns a new instance of the FileHandler class. The specified file is opened and used as the stream for logging. If mode is not specified, 'a' is used.  If encoding is not None, it is used to open the file with that encoding.  If delay is true, then file opening is deferred until the first call to emit(). By default, the file grows indefinitely.  Changed in version 2.6: delay was added.   close()\u00b6 Closes the file.    emit(record)\u00b6 Outputs the record to the file.      15.9.3. NullHandler\u00b6  New in version 2.7. The NullHandler class, located in the core logging package, does not do any formatting or output. It is essentially a &#8216;no-op&#8217; handler for use by library developers.   class logging.NullHandler\u00b6 Returns a new instance of the NullHandler class.   emit(record)\u00b6 This method does nothing.    handle(record)\u00b6 This method does nothing.    createLock()\u00b6 This method returns None for the lock, since there is no underlying I\/O to which access needs to be serialized.    See Configuring Logging for a Library for more information on how to use NullHandler.   15.9.4. WatchedFileHandler\u00b6  New in version 2.6. The WatchedFileHandler class, located in the logging.handlers module, is a FileHandler which watches the file it is logging to. If the file changes, it is closed and reopened using the file name. A file change can happen because of usage of programs such as newsyslog and logrotate which perform log file rotation. This handler, intended for use under Unix\/Linux, watches the file to see if it has changed since the last emit. (A file is deemed to have changed if its device or inode have changed.) If the file has changed, the old file stream is closed, and the file opened to get a new stream. This handler is not appropriate for use under Windows, because under Windows open log files cannot be moved or renamed - logging opens the files with exclusive locks - and so there is no need for such a handler. Furthermore, ST_INO is not supported under Windows; stat() always returns zero for this value.   class logging.handlers.WatchedFileHandler(filename[, mode[, encoding[, delay]]])\u00b6 Returns a new instance of the WatchedFileHandler class. The specified file is opened and used as the stream for logging. If mode is not specified, 'a' is used.  If encoding is not None, it is used to open the file with that encoding.  If delay is true, then file opening is deferred until the first call to emit().  By default, the file grows indefinitely.   emit(record)\u00b6 Outputs the record to the file, but first checks to see if the file has changed.  If it has, the existing stream is flushed and closed and the file opened again, before outputting the record to the file.      15.9.5. RotatingFileHandler\u00b6 The RotatingFileHandler class, located in the logging.handlers module, supports rotation of disk log files.   class logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=0)\u00b6 Returns a new instance of the RotatingFileHandler class. The specified file is opened and used as the stream for logging. If mode is not specified, 'a' is used.  If encoding is not None, it is used to open the file with that encoding.  If delay is true, then file opening is deferred until the first call to emit().  By default, the file grows indefinitely. You can use the maxBytes and backupCount values to allow the file to rollover at a predetermined size. When the size is about to be exceeded, the file is closed and a new file is silently opened for output. Rollover occurs whenever the current log file is nearly maxBytes in length; if maxBytes is zero, rollover never occurs.  If backupCount is non-zero, the system will save old log files by appending the extensions &#8216;.1&#8217;, &#8216;.2&#8217; etc., to the filename. For example, with a backupCount of 5 and a base file name of app.log, you would get app.log, app.log.1, app.log.2, up to app.log.5. The file being written to is always app.log.  When this file is filled, it is closed and renamed to app.log.1, and if files app.log.1, app.log.2, etc.  exist, then they are renamed to app.log.2, app.log.3 etc.  respectively.  Changed in version 2.6: delay was added.   doRollover()\u00b6 Does a rollover, as described above.    emit(record)\u00b6 Outputs the record to the file, catering for rollover as described previously.      15.9.6. TimedRotatingFileHandler\u00b6 The TimedRotatingFileHandler class, located in the logging.handlers module, supports rotation of disk log files at certain timed intervals.   class logging.handlers.TimedRotatingFileHandler(filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False)\u00b6 Returns a new instance of the TimedRotatingFileHandler class. The specified file is opened and used as the stream for logging. On rotating it also sets the filename suffix. Rotating happens based on the product of when and interval. You can use the when to specify the type of interval. The list of possible values is below.  Note that they are not case sensitive.       Value Type of interval    'S' Seconds  'M' Minutes  'H' Hours  'D' Days  'W' Week day (0=Monday)  'midnight' Roll over at midnight    The system will save old log files by appending extensions to the filename. The extensions are date-and-time based, using the strftime format %Y-%m-%d_%H-%M-%S or a leading portion thereof, depending on the rollover interval. When computing the next rollover time for the first time (when the handler is created), the last modification time of an existing log file, or else the current time, is used to compute when the next rotation will occur. If the utc argument is true, times in UTC will be used; otherwise local time is used. If backupCount is nonzero, at most backupCount files will be kept, and if more would be created when rollover occurs, the oldest one is deleted. The deletion logic uses the interval to determine which files to delete, so changing the interval may leave old files lying around. If delay is true, then file opening is deferred until the first call to emit().  Changed in version 2.6: delay and utc were added.   doRollover()\u00b6 Does a rollover, as described above.    emit(record)\u00b6 Outputs the record to the file, catering for rollover as described above.      15.9.7. SocketHandler\u00b6 The SocketHandler class, located in the logging.handlers module, sends logging output to a network socket. The base class uses a TCP socket.   class logging.handlers.SocketHandler(host, port)\u00b6 Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by host and port.   close()\u00b6 Closes the socket.    emit()\u00b6 Pickles the record&#8217;s attribute dictionary and writes it to the socket in binary format. If there is an error with the socket, silently drops the packet. If the connection was previously lost, re-establishes the connection. To unpickle the record at the receiving end into a LogRecord, use the makeLogRecord() function.    handleError()\u00b6 Handles an error which has occurred during emit(). The most likely cause is a lost connection. Closes the socket so that we can retry on the next event.    makeSocket()\u00b6 This is a factory method which allows subclasses to define the precise type of socket they want. The default implementation creates a TCP socket (socket.SOCK_STREAM).    makePickle(record)\u00b6 Pickles the record&#8217;s attribute dictionary in binary format with a length prefix, and returns it ready for transmission across the socket. Note that pickles aren&#8217;t completely secure. If you are concerned about security, you may want to override this method to implement a more secure mechanism. For example, you can sign pickles using HMAC and then verify them on the receiving end, or alternatively you can disable unpickling of global objects on the receiving end.     send(packet)\u00b6 Send a pickled string packet to the socket. This function allows for partial sends which can happen when the network is busy.    createSocket()\u00b6 Tries to create a socket; on failure, uses an exponential back-off algorithm.  On intial failure, the handler will drop the message it was trying to send.  When subsequent messages are handled by the same instance, it will not try connecting until some time has passed.  The default parameters are such that the initial delay is one second, and if after that delay the connection still can&#8217;t be made, the handler will double the delay each time up to a maximum of 30 seconds. This behaviour is controlled by the following handler attributes:  retryStart (initial delay, defaulting to 1.0 seconds). retryFactor (multiplier, defaulting to 2.0). retryMax (maximum delay, defaulting to 30.0 seconds).  This means that if the remote listener starts up after the handler has been used, you could lose messages (since the handler won&#8217;t even attempt a connection until the delay has elapsed, but just silently drop messages during the delay period).       15.9.8. DatagramHandler\u00b6 The DatagramHandler class, located in the logging.handlers module, inherits from SocketHandler to support sending logging messages over UDP sockets.   class logging.handlers.DatagramHandler(host, port)\u00b6 Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by host and port.   emit()\u00b6 Pickles the record&#8217;s attribute dictionary and writes it to the socket in binary format. If there is an error with the socket, silently drops the packet. To unpickle the record at the receiving end into a LogRecord, use the makeLogRecord() function.    makeSocket()\u00b6 The factory method of SocketHandler is here overridden to create a UDP socket (socket.SOCK_DGRAM).    send(s)\u00b6 Send a pickled string to a socket.      15.9.9. SysLogHandler\u00b6 The SysLogHandler class, located in the logging.handlers module, supports sending logging messages to a remote or local Unix syslog.   class logging.handlers.SysLogHandler(address=('localhost', SYSLOG_UDP_PORT), facility=LOG_USER, socktype=socket.SOCK_DGRAM)\u00b6 Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose address is given by address in the form of a (host, port) tuple.  If address is not specified, ('localhost', 514) is used.  The address is used to open a socket.  An alternative to providing a (host, port) tuple is providing an address as a string, for example &#8216;\/dev\/log&#8217;. In this case, a Unix domain socket is used to send the message to the syslog. If facility is not specified, LOG_USER is used. The type of socket opened depends on the socktype argument, which defaults to socket.SOCK_DGRAM and thus opens a UDP socket. To open a TCP socket (for use with the newer syslog daemons such as rsyslog), specify a value of socket.SOCK_STREAM. Note that if your server is not listening on UDP port 514, SysLogHandler may appear not to work. In that case, check what address you should be using for a domain socket - it&#8217;s system dependent. For example, on Linux it&#8217;s usually &#8216;\/dev\/log&#8217; but on OS\/X it&#8217;s &#8216;\/var\/run\/syslog&#8217;. You&#8217;ll need to check your platform and use the appropriate address (you may need to do this check at runtime if your application needs to run on several platforms). On Windows, you pretty much have to use the UDP option.  Changed in version 2.7: socktype was added.   close()\u00b6 Closes the socket to the remote host.    emit(record)\u00b6 The record is formatted, and then sent to the syslog server. If exception information is present, it is not sent to the server.    encodePriority(facility, priority)\u00b6 Encodes the facility and priority into an integer. You can pass in strings or integers - if strings are passed, internal mapping dictionaries are used to convert them to integers. The symbolic LOG_ values are defined in SysLogHandler and mirror the values defined in the sys\/syslog.h header file. Priorities       Name (string) Symbolic value    alert LOG_ALERT  crit or critical LOG_CRIT  debug LOG_DEBUG  emerg or panic LOG_EMERG  err or error LOG_ERR  info LOG_INFO  notice LOG_NOTICE  warn or warning LOG_WARNING    Facilities       Name (string) Symbolic value    auth LOG_AUTH  authpriv LOG_AUTHPRIV  cron LOG_CRON  daemon LOG_DAEMON  ftp LOG_FTP  kern LOG_KERN  lpr LOG_LPR  mail LOG_MAIL  news LOG_NEWS  syslog LOG_SYSLOG  user LOG_USER  uucp LOG_UUCP  local0 LOG_LOCAL0  local1 LOG_LOCAL1  local2 LOG_LOCAL2  local3 LOG_LOCAL3  local4 LOG_LOCAL4  local5 LOG_LOCAL5  local6 LOG_LOCAL6  local7 LOG_LOCAL7        mapPriority(levelname)\u00b6 Maps a logging level name to a syslog priority name. You may need to override this if you are using custom levels, or if the default algorithm is not suitable for your needs. The default algorithm maps DEBUG, INFO, WARNING, ERROR and CRITICAL to the equivalent syslog names, and all other level names to &#8216;warning&#8217;.      15.9.10. NTEventLogHandler\u00b6 The NTEventLogHandler class, located in the logging.handlers module, supports sending logging messages to a local Windows NT, Windows 2000 or Windows XP event log. Before you can use it, you need Mark Hammond&#8217;s Win32 extensions for Python installed.   class logging.handlers.NTEventLogHandler(appname, dllname=None, logtype='Application')\u00b6 Returns a new instance of the NTEventLogHandler class. The appname is used to define the application name as it appears in the event log. An appropriate registry entry is created using this name. The dllname should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log (if not specified, 'win32service.pyd' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions. Note that use of these placeholders will make your event logs big, as the entire message source is held in the log. If you want slimmer logs, you have to pass in the name of your own .dll or .exe which contains the message definitions you want to use in the event log). The logtype is one of 'Application', 'System' or 'Security', and defaults to 'Application'.   close()\u00b6 At this point, you can remove the application name from the registry as a source of event log entries. However, if you do this, you will not be able to see the events as you intended in the Event Log Viewer - it needs to be able to access the registry to get the .dll name. The current version does not do this.    emit(record)\u00b6 Determines the message ID, event category and event type, and then logs the message in the NT event log.    getEventCategory(record)\u00b6 Returns the event category for the record. Override this if you want to specify your own categories. This version returns 0.    getEventType(record)\u00b6 Returns the event type for the record. Override this if you want to specify your own types. This version does a mapping using the handler&#8217;s typemap attribute, which is set up in __init__() to a dictionary which contains mappings for DEBUG, INFO, WARNING, ERROR and CRITICAL. If you are using your own levels, you will either need to override this method or place a suitable dictionary in the handler&#8217;s typemap attribute.    getMessageID(record)\u00b6 Returns the message ID for the record. If you are using your own messages, you could do this by having the msg passed to the logger being an ID rather than a format string. Then, in here, you could use a dictionary lookup to get the message ID. This version returns 1, which is the base message ID in win32service.pyd.      15.9.11. SMTPHandler\u00b6 The SMTPHandler class, located in the logging.handlers module, supports sending logging messages to an email address via SMTP.   class logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None)\u00b6 Returns a new instance of the SMTPHandler class. The instance is initialized with the from and to addresses and subject line of the email. The toaddrs should be a list of strings. To specify a non-standard SMTP port, use the (host, port) tuple format for the mailhost argument. If you use a string, the standard SMTP port is used. If your SMTP server requires authentication, you can specify a (username, password) tuple for the credentials argument. To specify the use of a secure protocol (TLS), pass in a tuple to the secure argument. This will only be used when authentication credentials are supplied. The tuple should be either an empty tuple, or a single-value tuple with the name of a keyfile, or a 2-value tuple with the names of the keyfile and certificate file. (This tuple is passed to the smtplib.SMTP.starttls() method.)  Changed in version 2.6: credentials was added.  Changed in version 2.7: secure was added.   emit(record)\u00b6 Formats the record and sends it to the specified addressees.    getSubject(record)\u00b6 If you want to specify a subject line which is record-dependent, override this method.      15.9.12. MemoryHandler\u00b6 The MemoryHandler class, located in the logging.handlers module, supports buffering of logging records in memory, periodically flushing them to a target handler. Flushing occurs whenever the buffer is full, or when an event of a certain severity or greater is seen. MemoryHandler is a subclass of the more general BufferingHandler, which is an abstract class. This buffers logging records in memory. Whenever each record is added to the buffer, a check is made by calling shouldFlush() to see if the buffer should be flushed.  If it should, then flush() is expected to do the needful.   class logging.handlers.BufferingHandler(capacity)\u00b6 Initializes the handler with a buffer of the specified capacity.   emit(record)\u00b6 Appends the record to the buffer. If shouldFlush() returns true, calls flush() to process the buffer.    flush()\u00b6 You can override this to implement custom flushing behavior. This version just zaps the buffer to empty.    shouldFlush(record)\u00b6 Returns true if the buffer is up to capacity. This method can be overridden to implement custom flushing strategies.      class logging.handlers.MemoryHandler(capacity, flushLevel=ERROR, target=None)\u00b6 Returns a new instance of the MemoryHandler class. The instance is initialized with a buffer size of capacity. If flushLevel is not specified, ERROR is used. If no target is specified, the target will need to be set using setTarget() before this handler does anything useful.   close()\u00b6 Calls flush(), sets the target to None and clears the buffer.    flush()\u00b6 For a MemoryHandler, flushing means just sending the buffered records to the target, if there is one. The buffer is also cleared when this happens. Override if you want different behavior.    setTarget(target)\u00b6    Changed in version 2.6: credentials was added.Sets the target handler for this handler.    shouldFlush(record)\u00b6 Checks for buffer full or a record at the flushLevel or higher.      15.9.13. HTTPHandler\u00b6 The HTTPHandler class, located in the logging.handlers module, supports sending logging messages to a Web server, using either GET or POST semantics.   class logging.handlers.HTTPHandler(host, url, method='GET')\u00b6 Returns a new instance of the HTTPHandler class. The host can be of the form host:port, should you need to use a specific port number. If no method is specified, GET is used.   emit(record)\u00b6 Sends the record to the Web server as a percent-encoded dictionary.     See also  Module logging API reference for the logging module. Module logging.config Configuration API for the logging module."},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.FileHandler","title":"logging.FileHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.FileHandler.close","title":"logging.FileHandler.close","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.FileHandler.emit","title":"logging.FileHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.BufferingHandler","title":"logging.handlers.BufferingHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.BufferingHandler.emit","title":"logging.handlers.BufferingHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.BufferingHandler.flush","title":"logging.handlers.BufferingHandler.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.BufferingHandler.shouldFlush","title":"logging.handlers.BufferingHandler.shouldFlush","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.DatagramHandler","title":"logging.handlers.DatagramHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.DatagramHandler.emit","title":"logging.handlers.DatagramHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.DatagramHandler.makeSocket","title":"logging.handlers.DatagramHandler.makeSocket","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.DatagramHandler.send","title":"logging.handlers.DatagramHandler.send","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.HTTPHandler","title":"logging.handlers.HTTPHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.HTTPHandler.emit","title":"logging.handlers.HTTPHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.MemoryHandler","title":"logging.handlers.MemoryHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.MemoryHandler.close","title":"logging.handlers.MemoryHandler.close","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.MemoryHandler.flush","title":"logging.handlers.MemoryHandler.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.MemoryHandler.setTarget","title":"logging.handlers.MemoryHandler.setTarget","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.MemoryHandler.shouldFlush","title":"logging.handlers.MemoryHandler.shouldFlush","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.NTEventLogHandler","title":"logging.handlers.NTEventLogHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.NTEventLogHandler.close","title":"logging.handlers.NTEventLogHandler.close","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.NTEventLogHandler.emit","title":"logging.handlers.NTEventLogHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.NTEventLogHandler.getEventCategory","title":"logging.handlers.NTEventLogHandler.getEventCategory","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.NTEventLogHandler.getEventType","title":"logging.handlers.NTEventLogHandler.getEventType","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.NTEventLogHandler.getMessageID","title":"logging.handlers.NTEventLogHandler.getMessageID","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.RotatingFileHandler","title":"logging.handlers.RotatingFileHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.RotatingFileHandler.doRollover","title":"logging.handlers.RotatingFileHandler.doRollover","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.RotatingFileHandler.emit","title":"logging.handlers.RotatingFileHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SMTPHandler","title":"logging.handlers.SMTPHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SMTPHandler.emit","title":"logging.handlers.SMTPHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SMTPHandler.getSubject","title":"logging.handlers.SMTPHandler.getSubject","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SocketHandler","title":"logging.handlers.SocketHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SocketHandler.close","title":"logging.handlers.SocketHandler.close","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SocketHandler.createSocket","title":"logging.handlers.SocketHandler.createSocket","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SocketHandler.emit","title":"logging.handlers.SocketHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SocketHandler.handleError","title":"logging.handlers.SocketHandler.handleError","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SocketHandler.makePickle","title":"logging.handlers.SocketHandler.makePickle","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SocketHandler.makeSocket","title":"logging.handlers.SocketHandler.makeSocket","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SocketHandler.send","title":"logging.handlers.SocketHandler.send","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SysLogHandler","title":"logging.handlers.SysLogHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SysLogHandler.close","title":"logging.handlers.SysLogHandler.close","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SysLogHandler.emit","title":"logging.handlers.SysLogHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SysLogHandler.encodePriority","title":"logging.handlers.SysLogHandler.encodePriority","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.SysLogHandler.mapPriority","title":"logging.handlers.SysLogHandler.mapPriority","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.TimedRotatingFileHandler","title":"logging.handlers.TimedRotatingFileHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.TimedRotatingFileHandler.doRollover","title":"logging.handlers.TimedRotatingFileHandler.doRollover","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.TimedRotatingFileHandler.emit","title":"logging.handlers.TimedRotatingFileHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.WatchedFileHandler","title":"logging.handlers.WatchedFileHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.handlers.WatchedFileHandler.emit","title":"logging.handlers.WatchedFileHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.NullHandler","title":"logging.NullHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.NullHandler.createLock","title":"logging.NullHandler.createLock","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.NullHandler.emit","title":"logging.NullHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.NullHandler.handle","title":"logging.NullHandler.handle","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.StreamHandler","title":"logging.StreamHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.StreamHandler.emit","title":"logging.StreamHandler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.handlers.html#logging.handlers_logging.StreamHandler.flush","title":"logging.StreamHandler.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html","title":"argparse","description":"15.4. argparse &#8212; Parser for command-line options, arguments and sub-commands\u00b6  New in version 2.7. Source code: Lib\/argparse.py  The argparse module makes it easy to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv.  The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments.  15.4.1. Example\u00b6 The following code is a Python program that takes a list of integers and produces either the sum or the max: import argparse  parser = argparse.ArgumentParser(description=&#39;Process some integers.&#39;) parser.add_argument(&#39;integers&#39;, metavar=&#39;N&#39;, type=int, nargs=&#39;+&#39;,                    help=&#39;an integer for the accumulator&#39;) parser.add_argument(&#39;--sum&#39;, dest=&#39;accumulate&#39;, action=&#39;store_const&#39;,                    const=sum, default=max,                    help=&#39;sum the integers (default: find the max)&#39;)  args = parser.parse_args() print args.accumulate(args.integers)   Assuming the Python code above is saved into a file called prog.py, it can be run at the command line and provides useful help messages: $ prog.py -h usage: prog.py [-h] [--sum] N [N ...]  Process some integers.  positional arguments:  N           an integer for the accumulator  optional arguments:  -h, --help  show this help message and exit  --sum       sum the integers (default: find the max)  When run with the appropriate arguments, it prints either the sum or the max of the command-line integers: $ prog.py 1 2 3 4 4  $ prog.py 1 2 3 4 --sum 10  If invalid arguments are passed in, it will issue an error: $ prog.py a b c usage: prog.py [-h] [--sum] N [N ...] prog.py: error: argument N: invalid int value: 'a'  The following sections walk you through this example.  15.4.1.1. Creating a parser\u00b6 The first step in using the argparse is creating an ArgumentParser object: >>> parser = argparse.ArgumentParser(description=&#39;Process some integers.&#39;)   The ArgumentParser object will hold all the information necessary to parse the command line into Python data types.   15.4.1.2. Adding arguments\u00b6 Filling an ArgumentParser with information about program arguments is done by making calls to the add_argument() method. Generally, these calls tell the ArgumentParser how to take the strings on the command line and turn them into objects.  This information is stored and used when parse_args() is called. For example: >>> parser.add_argument(&#39;integers&#39;, metavar=&#39;N&#39;, type=int, nargs=&#39;+&#39;, ...                     help=&#39;an integer for the accumulator&#39;) >>> parser.add_argument(&#39;--sum&#39;, dest=&#39;accumulate&#39;, action=&#39;store_const&#39;, ...                     const=sum, default=max, ...                     help=&#39;sum the integers (default: find the max)&#39;)   Later, calling parse_args() will return an object with two attributes, integers and accumulate.  The integers attribute will be a list of one or more ints, and the accumulate attribute will be either the sum() function, if --sum was specified at the command line, or the max() function if it was not.   15.4.1.3. Parsing arguments\u00b6 ArgumentParser parses arguments through the parse_args() method.  This will inspect the command line, convert each argument to the appropriate type and then invoke the appropriate action. In most cases, this means a simple Namespace object will be built up from attributes parsed out of the command line: >>> parser.parse_args([&#39;--sum&#39;, &#39;7&#39;, &#39;-1&#39;, &#39;42&#39;]) Namespace(accumulate=<built-in function sum>, integers=[7, -1, 42])   In a script, parse_args() will typically be called with no arguments, and the ArgumentParser will automatically determine the command-line arguments from sys.argv.    15.4.2. ArgumentParser objects\u00b6   class argparse.ArgumentParser([description][, epilog][, prog][, usage][, add_help][, argument_default][, parents][, prefix_chars][, conflict_handler][, formatter_class])\u00b6 Create a new ArgumentParser object.  Each parameter has its own more detailed description below, but in short they are:  description - Text to display before the argument help. epilog - Text to display after the argument help. add_help - Add a -h\/&#8211;help option to the parser. (default: True) argument_default - Set the global default value for arguments. (default: None) parents - A list of ArgumentParser objects whose arguments should also be included. prefix_chars - The set of characters that prefix optional arguments. (default: &#8216;-&#8216;) fromfile_prefix_chars - The set of characters that prefix files from which additional arguments should be read. (default: None) formatter_class - A class for customizing the help output. conflict_handler - Usually unnecessary, defines strategy for resolving conflicting optionals. prog - The name of the program (default: sys.argv[0]) usage - The string describing the program usage (default: generated)    The following sections describe how each of these are used.  15.4.2.1. description\u00b6 Most calls to the ArgumentParser constructor will use the description= keyword argument.  This argument gives a brief description of what the program does and how it works.  In help messages, the description is displayed between the command-line usage string and the help messages for the various arguments: >>> parser = argparse.ArgumentParser(description=&#39;A foo that bars&#39;) >>> parser.print_help() usage: argparse.py [-h]  A foo that bars  optional arguments:  -h, --help  show this help message and exit   By default, the description will be line-wrapped so that it fits within the given space.  To change this behavior, see the formatter_class argument.   15.4.2.2. epilog\u00b6 Some programs like to display additional description of the program after the description of the arguments.  Such text can be specified using the epilog= argument to ArgumentParser: >>> parser = argparse.ArgumentParser( ...     description=&#39;A foo that bars&#39;, ...     epilog=\"And that&#39;s how you&#39;d foo a bar\") >>> parser.print_help() usage: argparse.py [-h]  A foo that bars  optional arguments:  -h, --help  show this help message and exit  And that&#39;s how you&#39;d foo a bar   As with the description argument, the epilog= text is by default line-wrapped, but this behavior can be adjusted with the formatter_class argument to ArgumentParser.   15.4.2.3. add_help\u00b6 By default, ArgumentParser objects add an option which simply displays the parser&#8217;s help message. For example, consider a file named myprogram.py containing the following code: import argparse parser = argparse.ArgumentParser() parser.add_argument(&#39;--foo&#39;, help=&#39;foo help&#39;) args = parser.parse_args()   If -h or --help is supplied at the command line, the ArgumentParser help will be printed: $ python myprogram.py --help usage: myprogram.py [-h] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  --foo FOO   foo help  Occasionally, it may be useful to disable the addition of this help option. This can be achieved by passing False as the add_help= argument to ArgumentParser: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;, add_help=False) >>> parser.add_argument(&#39;--foo&#39;, help=&#39;foo help&#39;) >>> parser.print_help() usage: PROG [--foo FOO]  optional arguments:  --foo FOO  foo help   The help option is typically -h\/--help. The exception to this is if the prefix_chars= is specified and does not include -, in which case -h and --help are not valid options.  In this case, the first character in prefix_chars is used to prefix the help options: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;, prefix_chars=&#39;+\/&#39;) >>> parser.print_help() usage: PROG [+h]  optional arguments:   +h, ++help  show this help message and exit     15.4.2.4. prefix_chars\u00b6 Most command-line options will use - as the prefix, e.g. -f\/--foo. Parsers that need to support different or additional prefix characters, e.g. for options like +f or \/foo, may specify them using the prefix_chars= argument to the ArgumentParser constructor: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;, prefix_chars=&#39;-+&#39;) >>> parser.add_argument(&#39;+f&#39;) >>> parser.add_argument(&#39;++bar&#39;) >>> parser.parse_args(&#39;+f X ++bar Y&#39;.split()) Namespace(bar=&#39;Y&#39;, f=&#39;X&#39;)   The prefix_chars= argument defaults to '-'. Supplying a set of characters that does not include - will cause -f\/--foo options to be disallowed.   15.4.2.5. fromfile_prefix_chars\u00b6 Sometimes, for example when dealing with a particularly long argument lists, it may make sense to keep the list of arguments in a file rather than typing it out at the command line.  If the fromfile_prefix_chars= argument is given to the ArgumentParser constructor, then arguments that start with any of the specified characters will be treated as files, and will be replaced by the arguments they contain.  For example: >>> with open(&#39;args.txt&#39;, &#39;w&#39;) as fp: ...    fp.write(&#39;-f\\nbar&#39;) >>> parser = argparse.ArgumentParser(fromfile_prefix_chars=&#39;@&#39;) >>> parser.add_argument(&#39;-f&#39;) >>> parser.parse_args([&#39;-f&#39;, &#39;foo&#39;, &#39;@args.txt&#39;]) Namespace(f=&#39;bar&#39;)   Arguments read from a file must by default be one per line (but see also convert_arg_line_to_args()) and are treated as if they were in the same place as the original file referencing argument on the command line.  So in the example above, the expression ['-f', 'foo', '@args.txt'] is considered equivalent to the expression ['-f', 'foo', '-f', 'bar']. The fromfile_prefix_chars= argument defaults to None, meaning that arguments will never be treated as file references.   15.4.2.6. argument_default\u00b6 Generally, argument defaults are specified either by passing a default to add_argument() or by calling the set_defaults() methods with a specific set of name-value pairs.  Sometimes however, it may be useful to specify a single parser-wide default for arguments.  This can be accomplished by passing the argument_default= keyword argument to ArgumentParser.  For example, to globally suppress attribute creation on parse_args() calls, we supply argument_default=SUPPRESS: >>> parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS) >>> parser.add_argument(&#39;--foo&#39;) >>> parser.add_argument(&#39;bar&#39;, nargs=&#39;?&#39;) >>> parser.parse_args([&#39;--foo&#39;, &#39;1&#39;, &#39;BAR&#39;]) Namespace(bar=&#39;BAR&#39;, foo=&#39;1&#39;) >>> parser.parse_args([]) Namespace()     15.4.2.7. parents\u00b6 Sometimes, several parsers share a common set of arguments. Rather than repeating the definitions of these arguments, a single parser with all the shared arguments and passed to parents= argument to ArgumentParser can be used.  The parents= argument takes a list of ArgumentParser objects, collects all the positional and optional actions from them, and adds these actions to the ArgumentParser object being constructed: >>> parent_parser = argparse.ArgumentParser(add_help=False) >>> parent_parser.add_argument(&#39;--parent&#39;, type=int)  >>> foo_parser = argparse.ArgumentParser(parents=[parent_parser]) >>> foo_parser.add_argument(&#39;foo&#39;) >>> foo_parser.parse_args([&#39;--parent&#39;, &#39;2&#39;, &#39;XXX&#39;]) Namespace(foo=&#39;XXX&#39;, parent=2)  >>> bar_parser = argparse.ArgumentParser(parents=[parent_parser]) >>> bar_parser.add_argument(&#39;--bar&#39;) >>> bar_parser.parse_args([&#39;--bar&#39;, &#39;YYY&#39;]) Namespace(bar=&#39;YYY&#39;, parent=None)   Note that most parent parsers will specify add_help=False.  Otherwise, the ArgumentParser will see two -h\/--help options (one in the parent and one in the child) and raise an error.  Note You must fully initialize the parsers before passing them via parents=. If you change the parent parsers after the child parser, those changes will not be reflected in the child.    15.4.2.8. formatter_class\u00b6 ArgumentParser objects allow the help formatting to be customized by specifying an alternate formatting class.  Currently, there are three such classes:   class argparse.RawDescriptionHelpFormatter\u00b6  class argparse.RawTextHelpFormatter\u00b6  class argparse.ArgumentDefaultsHelpFormatter\u00b6   The first two allow more control over how textual descriptions are displayed, while the last automatically adds information about argument default values. By default, ArgumentParser objects line-wrap the description and epilog texts in command-line help messages: >>> parser = argparse.ArgumentParser( ...     prog=&#39;PROG&#39;, ...     description=&#39;&#39;&#39;this description ...         was indented weird ...             but that is okay&#39;&#39;&#39;, ...     epilog=&#39;&#39;&#39; ...             likewise for this epilog whose whitespace will ...         be cleaned up and whose words will be wrapped ...         across a couple lines&#39;&#39;&#39;) >>> parser.print_help() usage: PROG [-h]  this description was indented weird but that is okay  optional arguments:  -h, --help  show this help message and exit  likewise for this epilog whose whitespace will be cleaned up and whose words will be wrapped across a couple lines   Passing RawDescriptionHelpFormatter as formatter_class= indicates that description and epilog are already correctly formatted and should not be line-wrapped: >>> parser = argparse.ArgumentParser( ...     prog=&#39;PROG&#39;, ...     formatter_class=argparse.RawDescriptionHelpFormatter, ...     description=textwrap.dedent(&#39;&#39;&#39;\\ ...         Please do not mess up this text! ...         -------------------------------- ...             I have indented it ...             exactly the way ...             I want it ...         &#39;&#39;&#39;)) >>> parser.print_help() usage: PROG [-h]  Please do not mess up this text! --------------------------------    I have indented it    exactly the way    I want it  optional arguments:  -h, --help  show this help message and exit   RawTextHelpFormatter maintains whitespace for all sorts of help text, including argument descriptions. The other formatter class available, ArgumentDefaultsHelpFormatter, will add information about the default value of each of the arguments: >>> parser = argparse.ArgumentParser( ...     prog=&#39;PROG&#39;, ...     formatter_class=argparse.ArgumentDefaultsHelpFormatter) >>> parser.add_argument(&#39;--foo&#39;, type=int, default=42, help=&#39;FOO!&#39;) >>> parser.add_argument(&#39;bar&#39;, nargs=&#39;*&#39;, default=[1, 2, 3], help=&#39;BAR!&#39;) >>> parser.print_help() usage: PROG [-h] [--foo FOO] [bar [bar ...]]  positional arguments:  bar         BAR! (default: [1, 2, 3])  optional arguments:  -h, --help  show this help message and exit  --foo FOO   FOO! (default: 42)     15.4.2.9. conflict_handler\u00b6 ArgumentParser objects do not allow two actions with the same option string.  By default, ArgumentParser objects raises an exception if an attempt is made to create an argument with an option string that is already in use: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;-f&#39;, &#39;--foo&#39;, help=&#39;old foo help&#39;) >>> parser.add_argument(&#39;--foo&#39;, help=&#39;new foo help&#39;) Traceback (most recent call last):  .. ArgumentError: argument --foo: conflicting option string(s): --foo   Sometimes (e.g. when using parents) it may be useful to simply override any older arguments with the same option string.  To get this behavior, the value 'resolve' can be supplied to the conflict_handler= argument of ArgumentParser: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;, conflict_handler=&#39;resolve&#39;) >>> parser.add_argument(&#39;-f&#39;, &#39;--foo&#39;, help=&#39;old foo help&#39;) >>> parser.add_argument(&#39;--foo&#39;, help=&#39;new foo help&#39;) >>> parser.print_help() usage: PROG [-h] [-f FOO] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  -f FOO      old foo help  --foo FOO   new foo help   Note that ArgumentParser objects only remove an action if all of its option strings are overridden.  So, in the example above, the old -f\/--foo action is retained as the -f action, because only the --foo option string was overridden.   15.4.2.10. prog\u00b6 By default, ArgumentParser objects uses sys.argv[0] to determine how to display the name of the program in help messages.  This default is almost always desirable because it will make the help messages match how the program was invoked on the command line.  For example, consider a file named myprogram.py with the following code: import argparse parser = argparse.ArgumentParser() parser.add_argument(&#39;--foo&#39;, help=&#39;foo help&#39;) args = parser.parse_args()   The help for this program will display myprogram.py as the program name (regardless of where the program was invoked from): $ python myprogram.py --help usage: myprogram.py [-h] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  --foo FOO   foo help $ cd .. $ python subdir\\myprogram.py --help usage: myprogram.py [-h] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  --foo FOO   foo help  To change this default behavior, another value can be supplied using the prog= argument to ArgumentParser: >>> parser = argparse.ArgumentParser(prog=&#39;myprogram&#39;) >>> parser.print_help() usage: myprogram [-h]  optional arguments:  -h, --help  show this help message and exit   Note that the program name, whether determined from sys.argv[0] or from the prog= argument, is available to help messages using the %(prog)s format specifier. >>> parser = argparse.ArgumentParser(prog=&#39;myprogram&#39;) >>> parser.add_argument(&#39;--foo&#39;, help=&#39;foo of the %(prog)s program&#39;) >>> parser.print_help() usage: myprogram [-h] [--foo FOO]  optional arguments:  -h, --help  show this help message and exit  --foo FOO   foo of the myprogram program     15.4.2.11. usage\u00b6 By default, ArgumentParser calculates the usage message from the arguments it contains: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;--foo&#39;, nargs=&#39;?&#39;, help=&#39;foo help&#39;) >>> parser.add_argument(&#39;bar&#39;, nargs=&#39;+&#39;, help=&#39;bar help&#39;) >>> parser.print_help() usage: PROG [-h] [--foo [FOO]] bar [bar ...]  positional arguments:  bar          bar help  optional arguments:  -h, --help   show this help message and exit  --foo [FOO]  foo help   The default message can be overridden with the usage= keyword argument: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;, usage=&#39;%(prog)s [options]&#39;) >>> parser.add_argument(&#39;--foo&#39;, nargs=&#39;?&#39;, help=&#39;foo help&#39;) >>> parser.add_argument(&#39;bar&#39;, nargs=&#39;+&#39;, help=&#39;bar help&#39;) >>> parser.print_help() usage: PROG [options]  positional arguments:  bar          bar help  optional arguments:  -h, --help   show this help message and exit  --foo [FOO]  foo help   The %(prog)s format specifier is available to fill in the program name in your usage messages.    15.4.3. The add_argument() method\u00b6   ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])\u00b6 Define how a single command-line argument should be parsed.  Each parameter has its own more detailed description below, but in short they are:  name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo. action - The basic type of action to be taken when this argument is encountered at the command line. nargs - The number of command-line arguments that should be consumed. const - A constant value required by some action and nargs selections. default - The value produced if the argument is absent from the command line. type - The type to which the command-line argument should be converted. choices - A container of the allowable values for the argument. required - Whether or not the command-line option may be omitted (optionals only). help - A brief description of what the argument does. metavar - A name for the argument in usage messages. dest - The name of the attribute to be added to the object returned by parse_args().    The following sections describe how each of these are used.  15.4.3.1. name or flags\u00b6 The add_argument() method must know whether an optional argument, like -f or --foo, or a positional argument, like a list of filenames, is expected.  The first arguments passed to add_argument() must therefore be either a series of flags, or a simple argument name.  For example, an optional argument could be created like: >>> parser.add_argument(&#39;-f&#39;, &#39;--foo&#39;)   while a positional argument could be created like: >>> parser.add_argument(&#39;bar&#39;)   When parse_args() is called, optional arguments will be identified by the - prefix, and the remaining arguments will be assumed to be positional: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;-f&#39;, &#39;--foo&#39;) >>> parser.add_argument(&#39;bar&#39;) >>> parser.parse_args([&#39;BAR&#39;]) Namespace(bar=&#39;BAR&#39;, foo=None) >>> parser.parse_args([&#39;BAR&#39;, &#39;--foo&#39;, &#39;FOO&#39;]) Namespace(bar=&#39;BAR&#39;, foo=&#39;FOO&#39;) >>> parser.parse_args([&#39;--foo&#39;, &#39;FOO&#39;]) usage: PROG [-h] [-f FOO] bar PROG: error: too few arguments     15.4.3.2. action\u00b6 ArgumentParser objects associate command-line arguments with actions.  These actions can do just about anything with the command-line arguments associated with them, though most actions simply add an attribute to the object returned by parse_args().  The action keyword argument specifies how the command-line arguments should be handled. The supported actions are:  'store' - This just stores the argument&#8217;s value.  This is the default action. For example: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;) >>> parser.parse_args(&#39;--foo 1&#39;.split()) Namespace(foo=&#39;1&#39;)    'store_const' - This stores the value specified by the const keyword argument.  (Note that the const keyword argument defaults to the rather unhelpful None.)  The 'store_const' action is most commonly used with optional arguments that specify some sort of flag.  For example: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, action=&#39;store_const&#39;, const=42) >>> parser.parse_args(&#39;--foo&#39;.split()) Namespace(foo=42)    'store_true' and 'store_false' - These are special cases of 'store_const' using for storing the values True and False respectively.  In addition, they create default values of False and True respectively.  For example: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, action=&#39;store_true&#39;) >>> parser.add_argument(&#39;--bar&#39;, action=&#39;store_false&#39;) >>> parser.add_argument(&#39;--baz&#39;, action=&#39;store_false&#39;) >>> parser.parse_args(&#39;--foo --bar&#39;.split()) Namespace(bar=False, baz=True, foo=True)    'append' - This stores a list, and appends each argument value to the list.  This is useful to allow an option to be specified multiple times. Example usage: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, action=&#39;append&#39;) >>> parser.parse_args(&#39;--foo 1 --foo 2&#39;.split()) Namespace(foo=[&#39;1&#39;, &#39;2&#39;])    'append_const' - This stores a list, and appends the value specified by the const keyword argument to the list.  (Note that the const keyword argument defaults to None.)  The 'append_const' action is typically useful when multiple arguments need to store constants to the same list. For example: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--str&#39;, dest=&#39;types&#39;, action=&#39;append_const&#39;, const=str) >>> parser.add_argument(&#39;--int&#39;, dest=&#39;types&#39;, action=&#39;append_const&#39;, const=int) >>> parser.parse_args(&#39;--str --int&#39;.split()) Namespace(types=[<type &#39;str&#39;>, <type &#39;int&#39;>])    'count' - This counts the number of times a keyword argument occurs. For example, this is useful for increasing verbosity levels: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--verbose&#39;, &#39;-v&#39;, action=&#39;count&#39;) >>> parser.parse_args(&#39;-vvv&#39;.split()) Namespace(verbose=3)    'help' - This prints a complete help message for all the options in the current parser and then exits. By default a help action is automatically added to the parser. See ArgumentParser for details of how the output is created.  'version' - This expects a version= keyword argument in the add_argument() call, and prints version information and exits when invoked. >>> import argparse >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;--version&#39;, action=&#39;version&#39;, version=&#39;%(prog)s 2.0&#39;) >>> parser.parse_args([&#39;--version&#39;]) PROG 2.0     You can also specify an arbitrary action by passing an object that implements the Action API.  The easiest way to do this is to extend argparse.Action, supplying an appropriate __call__ method.  The __call__ method should accept four parameters:  parser - The ArgumentParser object which contains this action. namespace - The Namespace object that will be returned by parse_args().  Most actions add an attribute to this object. values - The associated command-line arguments, with any type conversions applied.  (Type conversions are specified with the type keyword argument to add_argument(). option_string - The option string that was used to invoke this action. The option_string argument is optional, and will be absent if the action is associated with a positional argument.  An example of a custom action: >>> class FooAction(argparse.Action): ...     def __call__(self, parser, namespace, values, option_string=None): ...         print &#39;%r %r %r&#39;  (namespace, values, option_string) ...         setattr(namespace, self.dest, values) ... >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, action=FooAction) >>> parser.add_argument(&#39;bar&#39;, action=FooAction) >>> args = parser.parse_args(&#39;1 --foo 2&#39;.split()) Namespace(bar=None, foo=None) &#39;1&#39; None Namespace(bar=&#39;1&#39;, foo=None) &#39;2&#39; &#39;--foo&#39; >>> args Namespace(bar=&#39;1&#39;, foo=&#39;2&#39;)     15.4.3.3. nargs\u00b6 ArgumentParser objects usually associate a single command-line argument with a single action to be taken.  The nargs keyword argument associates a different number of command-line arguments with a single action.  The supported values are:  N (an integer).  N arguments from the command line will be gathered together into a list.  For example: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, nargs=2) >>> parser.add_argument(&#39;bar&#39;, nargs=1) >>> parser.parse_args(&#39;c --foo a b&#39;.split()) Namespace(bar=[&#39;c&#39;], foo=[&#39;a&#39;, &#39;b&#39;])   Note that nargs=1 produces a list of one item.  This is different from the default, in which the item is produced by itself.  '?'. One argument will be consumed from the command line if possible, and produced as a single item.  If no command-line argument is present, the value from default will be produced.  Note that for optional arguments, there is an additional case - the option string is present but not followed by a command-line argument.  In this case the value from const will be produced.  Some examples to illustrate this: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, nargs=&#39;?&#39;, const=&#39;c&#39;, default=&#39;d&#39;) >>> parser.add_argument(&#39;bar&#39;, nargs=&#39;?&#39;, default=&#39;d&#39;) >>> parser.parse_args(&#39;XX --foo YY&#39;.split()) Namespace(bar=&#39;XX&#39;, foo=&#39;YY&#39;) >>> parser.parse_args(&#39;XX --foo&#39;.split()) Namespace(bar=&#39;XX&#39;, foo=&#39;c&#39;) >>> parser.parse_args(&#39;&#39;.split()) Namespace(bar=&#39;d&#39;, foo=&#39;d&#39;)   One of the more common uses of nargs='?' is to allow optional input and output files: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;infile&#39;, nargs=&#39;?&#39;, type=argparse.FileType(&#39;r&#39;), ...                     default=sys.stdin) >>> parser.add_argument(&#39;outfile&#39;, nargs=&#39;?&#39;, type=argparse.FileType(&#39;w&#39;), ...                     default=sys.stdout) >>> parser.parse_args([&#39;input.txt&#39;, &#39;output.txt&#39;]) Namespace(infile=<open file &#39;input.txt&#39;, mode &#39;r&#39; at 0x...>,           outfile=<open file &#39;output.txt&#39;, mode &#39;w&#39; at 0x...>) >>> parser.parse_args([]) Namespace(infile=<open file &#39;<stdin>&#39;, mode &#39;r&#39; at 0x...>,           outfile=<open file &#39;<stdout>&#39;, mode &#39;w&#39; at 0x...>)    '*'.  All command-line arguments present are gathered into a list.  Note that it generally doesn&#8217;t make much sense to have more than one positional argument with nargs='*', but multiple optional arguments with nargs='*' is possible.  For example: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, nargs=&#39;*&#39;) >>> parser.add_argument(&#39;--bar&#39;, nargs=&#39;*&#39;) >>> parser.add_argument(&#39;baz&#39;, nargs=&#39;*&#39;) >>> parser.parse_args(&#39;a b --foo x y --bar 1 2&#39;.split()) Namespace(bar=[&#39;1&#39;, &#39;2&#39;], baz=[&#39;a&#39;, &#39;b&#39;], foo=[&#39;x&#39;, &#39;y&#39;])    '+'. Just like '*', all command-line args present are gathered into a list.  Additionally, an error message will be generated if there wasn&#8217;t at least one command-line argument present.  For example: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;foo&#39;, nargs=&#39;+&#39;) >>> parser.parse_args(&#39;a b&#39;.split()) Namespace(foo=[&#39;a&#39;, &#39;b&#39;]) >>> parser.parse_args(&#39;&#39;.split()) usage: PROG [-h] foo [foo ...] PROG: error: too few arguments     If the nargs keyword argument is not provided, the number of arguments consumed is determined by the action.  Generally this means a single command-line argument will be consumed and a single item (not a list) will be produced.   15.4.3.4. const\u00b6 The const argument of add_argument() is used to hold constant values that are not read from the command line but are required for the various ArgumentParser actions.  The two most common uses of it are:  When add_argument() is called with action='store_const' or action='append_const'.  These actions add the const value to one of the attributes of the object returned by parse_args(). See the action description for examples. When add_argument() is called with option strings (like -f or --foo) and nargs='?'.  This creates an optional argument that can be followed by zero or one command-line arguments. When parsing the command line, if the option string is encountered with no command-line argument following it, the value of const will be assumed instead. See the nargs description for examples.  The const keyword argument defaults to None.   15.4.3.5. default\u00b6 All optional arguments and some positional arguments may be omitted at the command line.  The default keyword argument of add_argument(), whose value defaults to None, specifies what value should be used if the command-line argument is not present. For optional arguments, the default value is used when the option string was not present at the command line: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, default=42) >>> parser.parse_args(&#39;--foo 2&#39;.split()) Namespace(foo=&#39;2&#39;) >>> parser.parse_args(&#39;&#39;.split()) Namespace(foo=42)   For positional arguments with nargs equal to ? or *, the default value is used when no command-line argument was present: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;foo&#39;, nargs=&#39;?&#39;, default=42) >>> parser.parse_args(&#39;a&#39;.split()) Namespace(foo=&#39;a&#39;) >>> parser.parse_args(&#39;&#39;.split()) Namespace(foo=42)   Providing default=argparse.SUPPRESS causes no attribute to be added if the command-line argument was not present.: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, default=argparse.SUPPRESS) >>> parser.parse_args([]) Namespace() >>> parser.parse_args([&#39;--foo&#39;, &#39;1&#39;]) Namespace(foo=&#39;1&#39;)     15.4.3.6. type\u00b6 By default, ArgumentParser objects read command-line arguments in as simple strings. However, quite often the command-line string should instead be interpreted as another type, like a float or int.  The type keyword argument of add_argument() allows any necessary type-checking and type conversions to be performed.  Common built-in types and functions can be used directly as the value of the type argument: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;foo&#39;, type=int) >>> parser.add_argument(&#39;bar&#39;, type=file) >>> parser.parse_args(&#39;2 temp.txt&#39;.split()) Namespace(bar=<open file &#39;temp.txt&#39;, mode &#39;r&#39; at 0x...>, foo=2)   To ease the use of various types of files, the argparse module provides the factory FileType which takes the mode= and bufsize= arguments of the file object.  For example, FileType('w') can be used to create a writable file: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;bar&#39;, type=argparse.FileType(&#39;w&#39;)) >>> parser.parse_args([&#39;out.txt&#39;]) Namespace(bar=<open file &#39;out.txt&#39;, mode &#39;w&#39; at 0x...>)   type= can take any callable that takes a single string argument and returns the converted value: >>> def perfect_square(string): ...     value = int(string) ...     sqrt = math.sqrt(value) ...     if sqrt != int(sqrt): ...         msg = \"%r is not a perfect square\"  string ...         raise argparse.ArgumentTypeError(msg) ...     return value ... >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;foo&#39;, type=perfect_square) >>> parser.parse_args(&#39;9&#39;.split()) Namespace(foo=9) >>> parser.parse_args(&#39;7&#39;.split()) usage: PROG [-h] foo PROG: error: argument foo: &#39;7&#39; is not a perfect square   The choices keyword argument may be more convenient for type checkers that simply check against a range of values: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;foo&#39;, type=int, choices=xrange(5, 10)) >>> parser.parse_args(&#39;7&#39;.split()) Namespace(foo=7) >>> parser.parse_args(&#39;11&#39;.split()) usage: PROG [-h] {5,6,7,8,9} PROG: error: argument foo: invalid choice: 11 (choose from 5, 6, 7, 8, 9)   See the choices section for more details.   15.4.3.7. choices\u00b6 Some command-line arguments should be selected from a restricted set of values. These can be handled by passing a container object as the choices keyword argument to add_argument().  When the command line is parsed, argument values will be checked, and an error message will be displayed if the argument was not one of the acceptable values: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;foo&#39;, choices=&#39;abc&#39;) >>> parser.parse_args(&#39;c&#39;.split()) Namespace(foo=&#39;c&#39;) >>> parser.parse_args(&#39;X&#39;.split()) usage: PROG [-h] {a,b,c} PROG: error: argument foo: invalid choice: &#39;X&#39; (choose from &#39;a&#39;, &#39;b&#39;, &#39;c&#39;)   Note that inclusion in the choices container is checked after any type conversions have been performed, so the type of the objects in the choices container should match the type specified: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;foo&#39;, type=complex, choices=[1, 1j]) >>> parser.parse_args(&#39;1j&#39;.split()) Namespace(foo=1j) >>> parser.parse_args(&#39;-- -4&#39;.split()) usage: PROG [-h] {1,1j} PROG: error: argument foo: invalid choice: (-4+0j) (choose from 1, 1j)   Any object that supports the in operator can be passed as the choices value, so dict objects, set objects, custom containers, etc. are all supported.   15.4.3.8. required\u00b6 In general, the argparse module assumes that flags like -f and --bar indicate optional arguments, which can always be omitted at the command line. To make an option required, True can be specified for the required= keyword argument to add_argument(): >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, required=True) >>> parser.parse_args([&#39;--foo&#39;, &#39;BAR&#39;]) Namespace(foo=&#39;BAR&#39;) >>> parser.parse_args([]) usage: argparse.py [-h] [--foo FOO] argparse.py: error: option --foo is required   As the example shows, if an option is marked as required, parse_args() will report an error if that option is not present at the command line.  Note Required options are generally considered bad form because users expect options to be optional, and thus they should be avoided when possible.    15.4.3.9. help\u00b6 The help value is a string containing a brief description of the argument. When a user requests help (usually by using -h or --help at the command line), these help descriptions will be displayed with each argument: >>> parser = argparse.ArgumentParser(prog=&#39;frobble&#39;) >>> parser.add_argument(&#39;--foo&#39;, action=&#39;store_true&#39;, ...         help=&#39;foo the bars before frobbling&#39;) >>> parser.add_argument(&#39;bar&#39;, nargs=&#39;+&#39;, ...         help=&#39;one of the bars to be frobbled&#39;) >>> parser.parse_args(&#39;-h&#39;.split()) usage: frobble [-h] [--foo] bar [bar ...]  positional arguments:  bar     one of the bars to be frobbled  optional arguments:  -h, --help  show this help message and exit  --foo   foo the bars before frobbling   The help strings can include various format specifiers to avoid repetition of things like the program name or the argument default.  The available specifiers include the program name, %(prog)s and most keyword arguments to add_argument(), e.g. %(default)s, %(type)s, etc.: >>> parser = argparse.ArgumentParser(prog=&#39;frobble&#39;) >>> parser.add_argument(&#39;bar&#39;, nargs=&#39;?&#39;, type=int, default=42, ...         help=&#39;the bar to %(prog)s (default: %(default)s)&#39;) >>> parser.print_help() usage: frobble [-h] [bar]  positional arguments:  bar     the bar to frobble (default: 42)  optional arguments:  -h, --help  show this help message and exit   argparse supports silencing the help entry for certain options, by setting the help value to argparse.SUPPRESS: >>> parser = argparse.ArgumentParser(prog=&#39;frobble&#39;) >>> parser.add_argument(&#39;--foo&#39;, help=argparse.SUPPRESS) >>> parser.print_help() usage: frobble [-h]  optional arguments:   -h, --help  show this help message and exit     15.4.3.10. metavar\u00b6 When ArgumentParser generates help messages, it need some way to refer to each expected argument.  By default, ArgumentParser objects use the dest value as the &#8220;name&#8221; of each object.  By default, for positional argument actions, the dest value is used directly, and for optional argument actions, the dest value is uppercased.  So, a single positional argument with dest='bar' will be referred to as bar. A single optional argument --foo that should be followed by a single command-line argument will be referred to as FOO.  An example: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;) >>> parser.add_argument(&#39;bar&#39;) >>> parser.parse_args(&#39;X --foo Y&#39;.split()) Namespace(bar=&#39;X&#39;, foo=&#39;Y&#39;) >>> parser.print_help() usage:  [-h] [--foo FOO] bar  positional arguments:  bar  optional arguments:  -h, --help  show this help message and exit  --foo FOO   An alternative name can be specified with metavar: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, metavar=&#39;YYY&#39;) >>> parser.add_argument(&#39;bar&#39;, metavar=&#39;XXX&#39;) >>> parser.parse_args(&#39;X --foo Y&#39;.split()) Namespace(bar=&#39;X&#39;, foo=&#39;Y&#39;) >>> parser.print_help() usage:  [-h] [--foo YYY] XXX  positional arguments:  XXX  optional arguments:  -h, --help  show this help message and exit  --foo YYY   Note that metavar only changes the displayed name - the name of the attribute on the parse_args() object is still determined by the dest value. Different values of nargs may cause the metavar to be used multiple times. Providing a tuple to metavar specifies a different display for each of the arguments: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;-x&#39;, nargs=2) >>> parser.add_argument(&#39;--foo&#39;, nargs=2, metavar=(&#39;bar&#39;, &#39;baz&#39;)) >>> parser.print_help() usage: PROG [-h] [-x X X] [--foo bar baz]  optional arguments:  -h, --help     show this help message and exit  -x X X  --foo bar baz     15.4.3.11. dest\u00b6 Most ArgumentParser actions add some value as an attribute of the object returned by parse_args().  The name of this attribute is determined by the dest keyword argument of add_argument().  For positional argument actions, dest is normally supplied as the first argument to add_argument(): >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;bar&#39;) >>> parser.parse_args(&#39;XXX&#39;.split()) Namespace(bar=&#39;XXX&#39;)   For optional argument actions, the value of dest is normally inferred from the option strings.  ArgumentParser generates the value of dest by taking the first long option string and stripping away the initial -- string.  If no long option strings were supplied, dest will be derived from the first short option string by stripping the initial - character.  Any internal - characters will be converted to _ characters to make sure the string is a valid attribute name.  The examples below illustrate this behavior: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;-f&#39;, &#39;--foo-bar&#39;, &#39;--foo&#39;) >>> parser.add_argument(&#39;-x&#39;, &#39;-y&#39;) >>> parser.parse_args(&#39;-f 1 -x 2&#39;.split()) Namespace(foo_bar=&#39;1&#39;, x=&#39;2&#39;) >>> parser.parse_args(&#39;--foo 1 -y 2&#39;.split()) Namespace(foo_bar=&#39;1&#39;, x=&#39;2&#39;)   dest allows a custom attribute name to be provided: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, dest=&#39;bar&#39;) >>> parser.parse_args(&#39;--foo XXX&#39;.split()) Namespace(bar=&#39;XXX&#39;)      15.4.4. The parse_args() method\u00b6   ArgumentParser.parse_args(args=None, namespace=None)\u00b6 Convert argument strings to objects and assign them as attributes of the namespace.  Return the populated namespace. Previous calls to add_argument() determine exactly what objects are created and how they are assigned. See the documentation for add_argument() for details. By default, the argument strings are taken from sys.argv, and a new empty Namespace object is created for the attributes.    15.4.4.1. Option value syntax\u00b6 The parse_args() method supports several ways of specifying the value of an option (if it takes one).  In the simplest case, the option and its value are passed as two separate arguments: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;-x&#39;) >>> parser.add_argument(&#39;--foo&#39;) >>> parser.parse_args(&#39;-x X&#39;.split()) Namespace(foo=None, x=&#39;X&#39;) >>> parser.parse_args(&#39;--foo FOO&#39;.split()) Namespace(foo=&#39;FOO&#39;, x=None)   For long options (options with names longer than a single character), the option and value can also be passed as a single command-line argument, using = to separate them: >>> parser.parse_args(&#39;--foo=FOO&#39;.split()) Namespace(foo=&#39;FOO&#39;, x=None)   For short options (options only one character long), the option and its value can be concatenated: >>> parser.parse_args(&#39;-xX&#39;.split()) Namespace(foo=None, x=&#39;X&#39;)   Several short options can be joined together, using only a single - prefix, as long as only the last option (or none of them) requires a value: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;-x&#39;, action=&#39;store_true&#39;) >>> parser.add_argument(&#39;-y&#39;, action=&#39;store_true&#39;) >>> parser.add_argument(&#39;-z&#39;) >>> parser.parse_args(&#39;-xyzZ&#39;.split()) Namespace(x=True, y=True, z=&#39;Z&#39;)     15.4.4.2. Invalid arguments\u00b6 While parsing the command line, parse_args() checks for a variety of errors, including ambiguous options, invalid types, invalid options, wrong number of positional arguments, etc.  When it encounters such an error, it exits and prints the error along with a usage message: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;--foo&#39;, type=int) >>> parser.add_argument(&#39;bar&#39;, nargs=&#39;?&#39;)  >>> # invalid type >>> parser.parse_args([&#39;--foo&#39;, &#39;spam&#39;]) usage: PROG [-h] [--foo FOO] [bar] PROG: error: argument --foo: invalid int value: &#39;spam&#39;  >>> # invalid option >>> parser.parse_args([&#39;--bar&#39;]) usage: PROG [-h] [--foo FOO] [bar] PROG: error: no such option: --bar  >>> # wrong number of arguments >>> parser.parse_args([&#39;spam&#39;, &#39;badger&#39;]) usage: PROG [-h] [--foo FOO] [bar] PROG: error: extra arguments found: badger     15.4.4.3. Arguments containing -\u00b6 The parse_args() method attempts to give errors whenever the user has clearly made a mistake, but some situations are inherently ambiguous.  For example, the command-line argument -1 could either be an attempt to specify an option or an attempt to provide a positional argument. The parse_args() method is cautious here: positional arguments may only begin with - if they look like negative numbers and there are no options in the parser that look like negative numbers: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;-x&#39;) >>> parser.add_argument(&#39;foo&#39;, nargs=&#39;?&#39;)  >>> # no negative number options, so -1 is a positional argument >>> parser.parse_args([&#39;-x&#39;, &#39;-1&#39;]) Namespace(foo=None, x=&#39;-1&#39;)  >>> # no negative number options, so -1 and -5 are positional arguments >>> parser.parse_args([&#39;-x&#39;, &#39;-1&#39;, &#39;-5&#39;]) Namespace(foo=&#39;-5&#39;, x=&#39;-1&#39;)  >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;-1&#39;, dest=&#39;one&#39;) >>> parser.add_argument(&#39;foo&#39;, nargs=&#39;?&#39;)  >>> # negative number options present, so -1 is an option >>> parser.parse_args([&#39;-1&#39;, &#39;X&#39;]) Namespace(foo=None, one=&#39;X&#39;)  >>> # negative number options present, so -2 is an option >>> parser.parse_args([&#39;-2&#39;]) usage: PROG [-h] [-1 ONE] [foo] PROG: error: no such option: -2  >>> # negative number options present, so both -1s are options >>> parser.parse_args([&#39;-1&#39;, &#39;-1&#39;]) usage: PROG [-h] [-1 ONE] [foo] PROG: error: argument -1: expected one argument   If you have positional arguments that must begin with - and don&#8217;t look like negative numbers, you can insert the pseudo-argument '--' which tells parse_args() that everything after that is a positional argument: >>> parser.parse_args([&#39;--&#39;, &#39;-f&#39;]) Namespace(foo=&#39;-f&#39;, one=None)     15.4.4.4. Argument abbreviations\u00b6 The parse_args() method allows long options to be abbreviated if the abbreviation is unambiguous: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;-bacon&#39;) >>> parser.add_argument(&#39;-badger&#39;) >>> parser.parse_args(&#39;-bac MMM&#39;.split()) Namespace(bacon=&#39;MMM&#39;, badger=None) >>> parser.parse_args(&#39;-bad WOOD&#39;.split()) Namespace(bacon=None, badger=&#39;WOOD&#39;) >>> parser.parse_args(&#39;-ba BA&#39;.split()) usage: PROG [-h] [-bacon BACON] [-badger BADGER] PROG: error: ambiguous option: -ba could match -badger, -bacon   An error is produced for arguments that could produce more than one options.   15.4.4.5. Beyond sys.argv\u00b6 Sometimes it may be useful to have an ArgumentParser parse arguments other than those of sys.argv.  This can be accomplished by passing a list of strings to parse_args().  This is useful for testing at the interactive prompt: >>> parser = argparse.ArgumentParser() >>> parser.add_argument( ...     &#39;integers&#39;, metavar=&#39;int&#39;, type=int, choices=xrange(10), ...  nargs=&#39;+&#39;, help=&#39;an integer in the range 0..9&#39;) >>> parser.add_argument( ...     &#39;--sum&#39;, dest=&#39;accumulate&#39;, action=&#39;store_const&#39;, const=sum, ...   default=max, help=&#39;sum the integers (default: find the max)&#39;) >>> parser.parse_args([&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]) Namespace(accumulate=<built-in function max>, integers=[1, 2, 3, 4]) >>> parser.parse_args(&#39;1 2 3 4 --sum&#39;.split()) Namespace(accumulate=<built-in function sum>, integers=[1, 2, 3, 4])     15.4.4.6. The Namespace object\u00b6   class argparse.Namespace\u00b6 Simple class used by default by parse_args() to create an object holding attributes and return it.  This class is deliberately simple, just an object subclass with a readable string representation. If you prefer to have dict-like view of the attributes, you can use the standard Python idiom, vars(): >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;) >>> args = parser.parse_args([&#39;--foo&#39;, &#39;BAR&#39;]) >>> vars(args) {&#39;foo&#39;: &#39;BAR&#39;}   It may also be useful to have an ArgumentParser assign attributes to an already existing object, rather than a new Namespace object.  This can be achieved by specifying the namespace= keyword argument: >>> class C(object): ...     pass ... >>> c = C() >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;) >>> parser.parse_args(args=[&#39;--foo&#39;, &#39;BAR&#39;], namespace=c) >>> c.foo &#39;BAR&#39;      15.4.5. Other utilities\u00b6  15.4.5.1. Sub-commands\u00b6   ArgumentParser.add_subparsers()\u00b6 Many programs split up their functionality into a number of sub-commands, for example, the svn program can invoke sub-commands like svn checkout, svn update, and svn commit.  Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments. ArgumentParser supports the creation of such sub-commands with the add_subparsers() method.  The add_subparsers() method is normally called with no arguments and returns an special action object.  This object has a single method, add_parser(), which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual. Some example usage: >>> # create the top-level parser >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> parser.add_argument(&#39;--foo&#39;, action=&#39;store_true&#39;, help=&#39;foo help&#39;) >>> subparsers = parser.add_subparsers(help=&#39;sub-command help&#39;) >>> >>> # create the parser for the \"a\" command >>> parser_a = subparsers.add_parser(&#39;a&#39;, help=&#39;a help&#39;) >>> parser_a.add_argument(&#39;bar&#39;, type=int, help=&#39;bar help&#39;) >>> >>> # create the parser for the \"b\" command >>> parser_b = subparsers.add_parser(&#39;b&#39;, help=&#39;b help&#39;) >>> parser_b.add_argument(&#39;--baz&#39;, choices=&#39;XYZ&#39;, help=&#39;baz help&#39;) >>> >>> # parse some argument lists >>> parser.parse_args([&#39;a&#39;, &#39;12&#39;]) Namespace(bar=12, foo=False) >>> parser.parse_args([&#39;--foo&#39;, &#39;b&#39;, &#39;--baz&#39;, &#39;Z&#39;]) Namespace(baz=&#39;Z&#39;, foo=True)   Note that the object returned by parse_args() will only contain attributes for the main parser and the subparser that was selected by the command line (and not any other subparsers).  So in the example above, when the a command is specified, only the foo and bar attributes are present, and when the b command is specified, only the foo and baz attributes are present. Similarly, when a help message is requested from a subparser, only the help for that particular parser will be printed.  The help message will not include parent parser or sibling parser messages.  (A help message for each subparser command, however, can be given by supplying the help= argument to add_parser() as above.) >>> parser.parse_args([&#39;--help&#39;]) usage: PROG [-h] [--foo] {a,b} ...  positional arguments:   {a,b}   sub-command help a     a help b     b help  optional arguments:   -h, --help  show this help message and exit   --foo   foo help  >>> parser.parse_args([&#39;a&#39;, &#39;--help&#39;]) usage: PROG a [-h] bar  positional arguments:   bar     bar help  optional arguments:   -h, --help  show this help message and exit  >>> parser.parse_args([&#39;b&#39;, &#39;--help&#39;]) usage: PROG b [-h] [--baz {X,Y,Z}]  optional arguments:   -h, --help     show this help message and exit   --baz {X,Y,Z}  baz help   The add_subparsers() method also supports title and description keyword arguments.  When either is present, the subparser&#8217;s commands will appear in their own group in the help output.  For example: >>> parser = argparse.ArgumentParser() >>> subparsers = parser.add_subparsers(title=&#39;subcommands&#39;, ...                                    description=&#39;valid subcommands&#39;, ...                                    help=&#39;additional help&#39;) >>> subparsers.add_parser(&#39;foo&#39;) >>> subparsers.add_parser(&#39;bar&#39;) >>> parser.parse_args([&#39;-h&#39;]) usage:  [-h] {foo,bar} ...  optional arguments:   -h, --help  show this help message and exit  subcommands:   valid subcommands    {foo,bar}   additional help   One particularly effective way of handling sub-commands is to combine the use of the add_subparsers() method with calls to set_defaults() so that each subparser knows which Python function it should execute.  For example: >>> # sub-command functions >>> def foo(args): ...     print args.x * args.y ... >>> def bar(args): ...     print &#39;((%s))&#39;  args.z ... >>> # create the top-level parser >>> parser = argparse.ArgumentParser() >>> subparsers = parser.add_subparsers() >>> >>> # create the parser for the \"foo\" command >>> parser_foo = subparsers.add_parser(&#39;foo&#39;) >>> parser_foo.add_argument(&#39;-x&#39;, type=int, default=1) >>> parser_foo.add_argument(&#39;y&#39;, type=float) >>> parser_foo.set_defaults(func=foo) >>> >>> # create the parser for the \"bar\" command >>> parser_bar = subparsers.add_parser(&#39;bar&#39;) >>> parser_bar.add_argument(&#39;z&#39;) >>> parser_bar.set_defaults(func=bar) >>> >>> # parse the args and call whatever function was selected >>> args = parser.parse_args(&#39;foo 1 -x 2&#39;.split()) >>> args.func(args) 2.0 >>> >>> # parse the args and call whatever function was selected >>> args = parser.parse_args(&#39;bar XYZYX&#39;.split()) >>> args.func(args) ((XYZYX))   This way, you can let parse_args() does the job of calling the appropriate function after argument parsing is complete.  Associating functions with actions like this is typically the easiest way to handle the different actions for each of your subparsers.  However, if it is necessary to check the name of the subparser that was invoked, the dest keyword argument to the add_subparsers() call will work: >>> parser = argparse.ArgumentParser() >>> subparsers = parser.add_subparsers(dest=&#39;subparser_name&#39;) >>> subparser1 = subparsers.add_parser(&#39;1&#39;) >>> subparser1.add_argument(&#39;-x&#39;) >>> subparser2 = subparsers.add_parser(&#39;2&#39;) >>> subparser2.add_argument(&#39;y&#39;) >>> parser.parse_args([&#39;2&#39;, &#39;frobble&#39;]) Namespace(subparser_name=&#39;2&#39;, y=&#39;frobble&#39;)       15.4.5.2. FileType objects\u00b6   class argparse.FileType(mode='r', bufsize=None)\u00b6 The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument().  Arguments that have FileType objects as their type will open command-line arguments as files with the requested modes and buffer sizes: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--output&#39;, type=argparse.FileType(&#39;wb&#39;, 0)) >>> parser.parse_args([&#39;--output&#39;, &#39;out&#39;]) Namespace(output=<open file &#39;out&#39;, mode &#39;wb&#39; at 0x...>)   FileType objects understand the pseudo-argument '-' and automatically convert this into sys.stdin for readable FileType objects and sys.stdout for writable FileType objects: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;infile&#39;, type=argparse.FileType(&#39;r&#39;)) >>> parser.parse_args([&#39;-&#39;]) Namespace(infile=<open file &#39;<stdin>&#39;, mode &#39;r&#39; at 0x...>)       15.4.5.3. Argument groups\u00b6   ArgumentParser.add_argument_group(title=None, description=None)\u00b6 By default, ArgumentParser groups command-line arguments into &#8220;positional arguments&#8221; and &#8220;optional arguments&#8221; when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the add_argument_group() method: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;, add_help=False) >>> group = parser.add_argument_group(&#39;group&#39;) >>> group.add_argument(&#39;--foo&#39;, help=&#39;foo help&#39;) >>> group.add_argument(&#39;bar&#39;, help=&#39;bar help&#39;) >>> parser.print_help() usage: PROG [--foo FOO] bar  group:   bar    bar help   --foo FOO  foo help   The add_argument_group() method returns an argument group object which has an add_argument() method just like a regular ArgumentParser.  When an argument is added to the group, the parser treats it just like a normal argument, but displays the argument in a separate group for help messages.  The add_argument_group() method accepts title and description arguments which can be used to customize this display: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;, add_help=False) >>> group1 = parser.add_argument_group(&#39;group1&#39;, &#39;group1 description&#39;) >>> group1.add_argument(&#39;foo&#39;, help=&#39;foo help&#39;) >>> group2 = parser.add_argument_group(&#39;group2&#39;, &#39;group2 description&#39;) >>> group2.add_argument(&#39;--bar&#39;, help=&#39;bar help&#39;) >>> parser.print_help() usage: PROG [--bar BAR] foo  group1:   group1 description    foo    foo help  group2:   group2 description    --bar BAR  bar help   Note that any arguments not your user defined groups will end up back in the usual &#8220;positional arguments&#8221; and &#8220;optional arguments&#8221; sections.     15.4.5.4. Mutual exclusion\u00b6   argparse.add_mutually_exclusive_group(required=False)\u00b6 Create a mutually exclusive group. argparse will make sure that only one of the arguments in the mutually exclusive group was present on the command line: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> group = parser.add_mutually_exclusive_group() >>> group.add_argument(&#39;--foo&#39;, action=&#39;store_true&#39;) >>> group.add_argument(&#39;--bar&#39;, action=&#39;store_false&#39;) >>> parser.parse_args([&#39;--foo&#39;]) Namespace(bar=True, foo=True) >>> parser.parse_args([&#39;--bar&#39;]) Namespace(bar=False, foo=False) >>> parser.parse_args([&#39;--foo&#39;, &#39;--bar&#39;]) usage: PROG [-h] [--foo | --bar] PROG: error: argument --bar: not allowed with argument --foo   The add_mutually_exclusive_group() method also accepts a required argument, to indicate that at least one of the mutually exclusive arguments is required: >>> parser = argparse.ArgumentParser(prog=&#39;PROG&#39;) >>> group = parser.add_mutually_exclusive_group(required=True) >>> group.add_argument(&#39;--foo&#39;, action=&#39;store_true&#39;) >>> group.add_argument(&#39;--bar&#39;, action=&#39;store_false&#39;) >>> parser.parse_args([]) usage: PROG [-h] (--foo | --bar) PROG: error: one of the arguments --foo --bar is required   Note that currently mutually exclusive argument groups do not support the title and description arguments of add_argument_group().     15.4.5.5. Parser defaults\u00b6   ArgumentParser.set_defaults(**kwargs)\u00b6 Most of the time, the attributes of the object returned by parse_args() will be fully determined by inspecting the command-line arguments and the argument actions.  set_defaults() allows some additional attributes that are determined without any inspection of the command line to be added: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;foo&#39;, type=int) >>> parser.set_defaults(bar=42, baz=&#39;badger&#39;) >>> parser.parse_args([&#39;736&#39;]) Namespace(bar=42, baz=&#39;badger&#39;, foo=736)   Note that parser-level defaults always override argument-level defaults: >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, default=&#39;bar&#39;) >>> parser.set_defaults(foo=&#39;spam&#39;) >>> parser.parse_args([]) Namespace(foo=&#39;spam&#39;)   Parser-level defaults can be particularly useful when working with multiple parsers.  See the add_subparsers() method for an example of this type.     ArgumentParser.get_default(dest)\u00b6 Get the default value for a namespace attribute, as set by either add_argument() or by set_defaults(): >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, default=&#39;badger&#39;) >>> parser.get_default(&#39;foo&#39;) &#39;badger&#39;       15.4.5.6. Printing help\u00b6 In most typical applications, parse_args() will take care of formatting and printing any usage or error messages.  However, several formatting methods are available:   ArgumentParser.print_usage(file=None)\u00b6 Print a brief description of how the ArgumentParser should be invoked on the command line.  If file is None, sys.stdout is assumed.    ArgumentParser.print_help(file=None)\u00b6 Print a help message, including the program usage and information about the arguments registered with the ArgumentParser.  If file is None, sys.stdout is assumed.  There are also variants of these methods that simply return a string instead of printing it:   ArgumentParser.format_usage()\u00b6 Return a string containing a brief description of how the ArgumentParser should be invoked on the command line.    ArgumentParser.format_help()\u00b6 Return a string containing a help message, including the program usage and information about the arguments registered with the ArgumentParser.    15.4.5.7. Partial parsing\u00b6   ArgumentParser.parse_known_args(args=None, namespace=None)\u00b6   Sometimes a script may only parse a few of the command-line arguments, passing the remaining arguments on to another script or program. In these cases, the parse_known_args() method can be useful.  It works much like parse_args() except that it does not produce an error when extra arguments are present.  Instead, it returns a two item tuple containing the populated namespace and the list of remaining argument strings. >>> parser = argparse.ArgumentParser() >>> parser.add_argument(&#39;--foo&#39;, action=&#39;store_true&#39;) >>> parser.add_argument(&#39;bar&#39;) >>> parser.parse_known_args([&#39;--foo&#39;, &#39;--badger&#39;, &#39;BAR&#39;, &#39;spam&#39;]) (Namespace(bar=&#39;BAR&#39;, foo=True), [&#39;--badger&#39;, &#39;spam&#39;])     15.4.5.8. Customizing file parsing\u00b6   ArgumentParser.convert_arg_line_to_args(arg_line)\u00b6 Arguments that are read from a file (see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor) are read one argument per line. convert_arg_line_to_args() can be overriden for fancier reading. This method takes a single argument arg_line which is a string read from the argument file.  It returns a list of arguments parsed from this string. The method is called once per line read from the argument file, in order. A useful override of this method is one that treats each space-separated word as an argument: def convert_arg_line_to_args(self, arg_line):     for arg in arg_line.split():         if not arg.strip():             continue         yield arg       15.4.5.9. Exiting methods\u00b6   ArgumentParser.exit(status=0, message=None)\u00b6 This method terminates the program, exiting with the specified status and, if given, it prints a message before that.    ArgumentParser.error(message)\u00b6 This method prints a usage message including the message to the standard error and terminates the program with a status code of 2.     15.4.6. Upgrading optparse code\u00b6 Originally, the argparse module had attempted to maintain compatibility with optparse.  However, optparse was difficult to extend transparently, particularly with the changes required to support the new nargs= specifiers and better usage messages.  When most everything in optparse had either been copy-pasted over or monkey-patched, it no longer seemed practical to try to maintain the backwards compatibility. A partial upgrade path from optparse to argparse:  Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument() calls. Replace options, args = parser.parse_args() with args = parser.parse_args() and add additional ArgumentParser.add_argument() calls for the positional arguments. Replace callback actions and the callback_* keyword arguments with type or action arguments. Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex, etc). Replace optparse.Values with Namespace and optparse.OptionError and optparse.OptionValueError with ArgumentError. Replace strings with implicit arguments such as %default or %prog with the standard Python syntax to use dictionaries to format strings, that is, %(default)s and %(prog)s. Replace the OptionParser constructor version argument with a call to parser.add_argument('--version', action='version', version='<the version>')"},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.add_mutually_exclusive_group","title":"argparse.add_mutually_exclusive_group","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser","title":"argparse.ArgumentParser","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.add_argument","title":"argparse.ArgumentParser.add_argument","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.add_argument_group","title":"argparse.ArgumentParser.add_argument_group","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.add_subparsers","title":"argparse.ArgumentParser.add_subparsers","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.convert_arg_line_to_args","title":"argparse.ArgumentParser.convert_arg_line_to_args","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.error","title":"argparse.ArgumentParser.error","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.exit","title":"argparse.ArgumentParser.exit","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.format_help","title":"argparse.ArgumentParser.format_help","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.format_usage","title":"argparse.ArgumentParser.format_usage","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.get_default","title":"argparse.ArgumentParser.get_default","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.parse_args","title":"argparse.ArgumentParser.parse_args","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.parse_known_args","title":"argparse.ArgumentParser.parse_known_args","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.print_help","title":"argparse.ArgumentParser.print_help","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.print_usage","title":"argparse.ArgumentParser.print_usage","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.ArgumentParser.set_defaults","title":"argparse.ArgumentParser.set_defaults","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.FileType","title":"argparse.FileType","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.Namespace","title":"argparse.Namespace","description":""},{"url":"http:\/\/docs.python.org\/library\/argparse.html#argparse.RawDescriptionHelpFormatter","title":"argparse.RawDescriptionHelpFormatter","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html","title":"curses.ascii","description":null},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.alt","title":"curses.ascii.alt","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.ascii","title":"curses.ascii.ascii","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.ctrl","title":"curses.ascii.ctrl","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isalnum","title":"curses.ascii.isalnum","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isalpha","title":"curses.ascii.isalpha","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isascii","title":"curses.ascii.isascii","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isblank","title":"curses.ascii.isblank","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.iscntrl","title":"curses.ascii.iscntrl","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isctrl","title":"curses.ascii.isctrl","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isdigit","title":"curses.ascii.isdigit","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isgraph","title":"curses.ascii.isgraph","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.islower","title":"curses.ascii.islower","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.ismeta","title":"curses.ascii.ismeta","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isprint","title":"curses.ascii.isprint","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.ispunct","title":"curses.ascii.ispunct","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isspace","title":"curses.ascii.isspace","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isupper","title":"curses.ascii.isupper","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.isxdigit","title":"curses.ascii.isxdigit","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.ascii.html#curses.ascii_curses.ascii.unctrl","title":"curses.ascii.unctrl","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.config.html","title":"logging.config","description":"15.8. logging.config &#8212; Logging configuration\u00b6  Important This page contains only reference information. For tutorials, please see  Basic Tutorial Advanced Tutorial Logging Cookbook   This section describes the API for configuring the logging module.  15.8.1. Configuration functions\u00b6 The following functions configure the logging module. They are located in the logging.config module.  Their use is optional &#8212; you can configure the logging module using these functions or by making calls to the main API (defined in logging itself) and defining handlers which are declared either in logging or logging.handlers.   logging.config.dictConfig(config)\u00b6  Takes the logging configuration from a dictionary.  The contents of this dictionary are described in Configuration dictionary schema below. If an error is encountered during configuration, this function will raise a ValueError, TypeError, AttributeError or ImportError with a suitably descriptive message.  The following is a (possibly incomplete) list of conditions which will raise an error:  A level which is not a string or which is a string not corresponding to an actual logging level. A propagate value which is not a boolean. An id which does not have a corresponding destination. A non-existent handler id found during an incremental call. An invalid logger name. Inability to resolve to an internal or external object.  Parsing is performed by the DictConfigurator class, whose constructor is passed the dictionary used for configuration, and has a configure() method.  The logging.config module has a callable attribute dictConfigClass which is initially set to DictConfigurator. You can replace the value of dictConfigClass with a suitable implementation of your own. dictConfig() calls dictConfigClass passing the specified dictionary, and then calls the configure() method on the returned object to put the configuration into effect: def dictConfig(config):     dictConfigClass(config).configure()   For example, a subclass of DictConfigurator could call DictConfigurator.__init__() in its own __init__(), then set up custom prefixes which would be usable in the subsequent configure() call. dictConfigClass would be bound to this new subclass, and then dictConfig() could be called exactly as in the default, uncustomized state.   New in version 2.7.     logging.config.fileConfig(fname, defaults=None, disable_existing_loggers=True)\u00b6 Reads the logging configuration from a configparser-format file named fname. This function can be called several times from an application, allowing an end user to select from various pre-canned configurations (if the developer provides a mechanism to present the choices and load the chosen configuration).     Parameters: defaults &#8211; Defaults to be passed to the ConfigParser can be specified in this argument. disable_existing_loggers &#8211; If specified as False, loggers which exist when this call is made are left alone. The default is True because this enables old behaviour in a backward- compatible way. This behaviour is to disable any existing loggers unless they or their ancestors are explicitly named in the logging configuration.       Changed in version 2.6: The disable_existing_loggers keyword argument was added. Previously, existing loggers were always disabled.     logging.config.listen(port=DEFAULT_LOGGING_CONFIG_PORT)\u00b6 Starts up a socket server on the specified port, and listens for new configurations. If no port is specified, the module&#8217;s default DEFAULT_LOGGING_CONFIG_PORT is used. Logging configurations will be sent as a file suitable for processing by fileConfig(). Returns a Thread instance on which you can call start() to start the server, and which you can join() when appropriate. To stop the server, call stopListening(). To send a configuration to the socket, read in the configuration file and send it to the socket as a string of bytes preceded by a four-byte length string packed in binary using struct.pack('>L', n).     logging.config.stopListening()\u00b6 Stops the listening server which was created with a call to listen(). This is typically called before calling join() on the return value from listen().    15.8.2. Configuration dictionary schema\u00b6 Describing a logging configuration requires listing the various objects to create and the connections between them; for example, you may create a handler named &#8216;console&#8217; and then say that the logger named &#8216;startup&#8217; will send its messages to the &#8216;console&#8217; handler. These objects aren&#8217;t limited to those provided by the logging module because you might write your own formatter or handler class. The parameters to these classes may also need to include external objects such as sys.stderr.  The syntax for describing these objects and connections is defined in Object connections below.  15.8.2.1. Dictionary Schema Details\u00b6 The dictionary passed to dictConfig() must contain the following keys:  version - to be set to an integer value representing the schema version.  The only valid value at present is 1, but having this key allows the schema to evolve while still preserving backwards compatibility.  All other keys are optional, but if present they will be interpreted as described below.  In all cases below where a &#8216;configuring dict&#8217; is mentioned, it will be checked for the special '()' key to see if a custom instantiation is required.  If so, the mechanism described in User-defined objects below is used to create an instance; otherwise, the context is used to determine what to instantiate.  formatters - the corresponding value will be a dict in which each key is a formatter id and each value is a dict describing how to configure the corresponding Formatter instance. The configuring dict is searched for keys format and datefmt (with defaults of None) and these are used to construct a logging.Formatter instance.  filters - the corresponding value will be a dict in which each key is a filter id and each value is a dict describing how to configure the corresponding Filter instance. The configuring dict is searched for the key name (defaulting to the empty string) and this is used to construct a logging.Filter instance.  handlers - the corresponding value will be a dict in which each key is a handler id and each value is a dict describing how to configure the corresponding Handler instance. The configuring dict is searched for the following keys:  class (mandatory).  This is the fully qualified name of the handler class. level (optional).  The level of the handler. formatter (optional).  The id of the formatter for this handler. filters (optional).  A list of ids of the filters for this handler.  All other keys are passed through as keyword arguments to the handler&#8217;s constructor.  For example, given the snippet: handlers:   console:     class : logging.StreamHandler     formatter: brief     level   : INFO     filters: [allow_foo]     stream  : ext:\/\/sys.stdout   file:     class : logging.handlers.RotatingFileHandler     formatter: precise     filename: logconfig.log     maxBytes: 1024     backupCount: 3  the handler with id console is instantiated as a logging.StreamHandler, using sys.stdout as the underlying stream.  The handler with id file is instantiated as a logging.handlers.RotatingFileHandler with the keyword arguments filename='logconfig.log', maxBytes=1024, backupCount=3.  loggers - the corresponding value will be a dict in which each key is a logger name and each value is a dict describing how to configure the corresponding Logger instance. The configuring dict is searched for the following keys:  level (optional).  The level of the logger. propagate (optional).  The propagation setting of the logger. filters (optional).  A list of ids of the filters for this logger. handlers (optional).  A list of ids of the handlers for this logger.  The specified loggers will be configured according to the level, propagation, filters and handlers specified.  root - this will be the configuration for the root logger. Processing of the configuration will be as for any logger, except that the propagate setting will not be applicable.  incremental - whether the configuration is to be interpreted as incremental to the existing configuration.  This value defaults to False, which means that the specified configuration replaces the existing configuration with the same semantics as used by the existing fileConfig() API. If the specified value is True, the configuration is processed as described in the section on Incremental Configuration.  disable_existing_loggers - whether any existing loggers are to be disabled. This setting mirrors the parameter of the same name in fileConfig(). If absent, this parameter defaults to True. This value is ignored if incremental is True.     15.8.2.2. Incremental Configuration\u00b6 It is difficult to provide complete flexibility for incremental configuration.  For example, because objects such as filters and formatters are anonymous, once a configuration is set up, it is not possible to refer to such anonymous objects when augmenting a configuration. Furthermore, there is not a compelling case for arbitrarily altering the object graph of loggers, handlers, filters, formatters at run-time, once a configuration is set up; the verbosity of loggers and handlers can be controlled just by setting levels (and, in the case of loggers, propagation flags).  Changing the object graph arbitrarily in a safe way is problematic in a multi-threaded environment; while not impossible, the benefits are not worth the complexity it adds to the implementation. Thus, when the incremental key of a configuration dict is present and is True, the system will completely ignore any formatters and filters entries, and process only the level settings in the handlers entries, and the level and propagate settings in the loggers and root entries. Using a value in the configuration dict lets configurations to be sent over the wire as pickled dicts to a socket listener. Thus, the logging verbosity of a long-running application can be altered over time with no need to stop and restart the application.   15.8.2.3. Object connections\u00b6 The schema describes a set of logging objects - loggers, handlers, formatters, filters - which are connected to each other in an object graph.  Thus, the schema needs to represent connections between the objects.  For example, say that, once configured, a particular logger has attached to it a particular handler.  For the purposes of this discussion, we can say that the logger represents the source, and the handler the destination, of a connection between the two.  Of course in the configured objects this is represented by the logger holding a reference to the handler.  In the configuration dict, this is done by giving each destination object an id which identifies it unambiguously, and then using the id in the source object&#8217;s configuration to indicate that a connection exists between the source and the destination object with that id. So, for example, consider the following YAML snippet: formatters:   brief:     # configuration for formatter with id 'brief' goes here   precise:     # configuration for formatter with id 'precise' goes here handlers:   h1: #This is an id    # configuration of handler with id 'h1' goes here    formatter: brief   h2: #This is another id    # configuration of handler with id 'h2' goes here    formatter: precise loggers:   foo.bar.baz:     # other configuration for logger 'foo.bar.baz'     handlers: [h1, h2]  (Note: YAML used here because it&#8217;s a little more readable than the equivalent Python source form for the dictionary.) The ids for loggers are the logger names which would be used programmatically to obtain a reference to those loggers, e.g. foo.bar.baz.  The ids for Formatters and Filters can be any string value (such as brief, precise above) and they are transient, in that they are only meaningful for processing the configuration dictionary and used to determine connections between objects, and are not persisted anywhere when the configuration call is complete. The above snippet indicates that logger named foo.bar.baz should have two handlers attached to it, which are described by the handler ids h1 and h2. The formatter for h1 is that described by id brief, and the formatter for h2 is that described by id precise.   15.8.2.4. User-defined objects\u00b6 The schema supports user-defined objects for handlers, filters and formatters.  (Loggers do not need to have different types for different instances, so there is no support in this configuration schema for user-defined logger classes.) Objects to be configured are described by dictionaries which detail their configuration.  In some places, the logging system will be able to infer from the context how an object is to be instantiated, but when a user-defined object is to be instantiated, the system will not know how to do this.  In order to provide complete flexibility for user-defined object instantiation, the user needs to provide a &#8216;factory&#8217; - a callable which is called with a configuration dictionary and which returns the instantiated object. This is signalled by an absolute import path to the factory being made available under the special key '()'.  Here&#8217;s a concrete example: formatters:   brief:     format: '%(message)s'   default:     format: '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'     datefmt: '%Y-%m-%d %H:%M:%S'   custom:       (): my.package.customFormatterFactory       bar: baz       spam: 99.9       answer: 42  The above YAML snippet defines three formatters.  The first, with id brief, is a standard logging.Formatter instance with the specified format string.  The second, with id default, has a longer format and also defines the time format explicitly, and will result in a logging.Formatter initialized with those two format strings.  Shown in Python source form, the brief and default formatters have configuration sub-dictionaries: {   &#39;format&#39; : &#39;%(message)s&#39; }   and: {   &#39;format&#39; : &#39;%(asctime)s %(levelname)-8s %(name)-15s %(message)s&#39;,   &#39;datefmt&#39; : &#39;%Y-%m-%d %H:%M:%S&#39; }   respectively, and as these dictionaries do not contain the special key '()', the instantiation is inferred from the context: as a result, standard logging.Formatter instances are created.  The configuration sub-dictionary for the third formatter, with id custom, is: {   &#39;()&#39; : &#39;my.package.customFormatterFactory&#39;,   &#39;bar&#39; : &#39;baz&#39;,   &#39;spam&#39; : 99.9,   &#39;answer&#39; : 42 }   and this contains the special key '()', which means that user-defined instantiation is wanted.  In this case, the specified factory callable will be used. If it is an actual callable it will be used directly - otherwise, if you specify a string (as in the example) the actual callable will be located using normal import mechanisms. The callable will be called with the remaining items in the configuration sub-dictionary as keyword arguments.  In the above example, the formatter with id custom will be assumed to be returned by the call: my.package.customFormatterFactory(bar=&#39;baz&#39;, spam=99.9, answer=42)   The key '()' has been used as the special key because it is not a valid keyword parameter name, and so will not clash with the names of the keyword arguments used in the call.  The '()' also serves as a mnemonic that the corresponding value is a callable.   15.8.2.5. Access to external objects\u00b6 There are times where a configuration needs to refer to objects external to the configuration, for example sys.stderr.  If the configuration dict is constructed using Python code, this is straightforward, but a problem arises when the configuration is provided via a text file (e.g. JSON, YAML).  In a text file, there is no standard way to distinguish sys.stderr from the literal string 'sys.stderr'.  To facilitate this distinction, the configuration system looks for certain special prefixes in string values and treat them specially.  For example, if the literal string 'ext:\/\/sys.stderr' is provided as a value in the configuration, then the ext:\/\/ will be stripped off and the remainder of the value processed using normal import mechanisms. The handling of such prefixes is done in a way analogous to protocol handling: there is a generic mechanism to look for prefixes which match the regular expression ^(?P<prefix>[a-z]+):\/\/(?P<suffix>.*)$ whereby, if the prefix is recognised, the suffix is processed in a prefix-dependent manner and the result of the processing replaces the string value.  If the prefix is not recognised, then the string value will be left as-is.   15.8.2.6. Access to internal objects\u00b6 As well as external objects, there is sometimes also a need to refer to objects in the configuration.  This will be done implicitly by the configuration system for things that it knows about.  For example, the string value 'DEBUG' for a level in a logger or handler will automatically be converted to the value logging.DEBUG, and the handlers, filters and formatter entries will take an object id and resolve to the appropriate destination object. However, a more generic mechanism is needed for user-defined objects which are not known to the logging module.  For example, consider logging.handlers.MemoryHandler, which takes a target argument which is another handler to delegate to. Since the system already knows about this class, then in the configuration, the given target just needs to be the object id of the relevant target handler, and the system will resolve to the handler from the id.  If, however, a user defines a my.package.MyHandler which has an alternate handler, the configuration system would not know that the alternate referred to a handler.  To cater for this, a generic resolution system allows the user to specify: handlers:   file:     # configuration of file handler goes here    custom:     (): my.package.MyHandler     alternate: cfg:\/\/handlers.file  The literal string 'cfg:\/\/handlers.file' will be resolved in an analogous way to strings with the ext:\/\/ prefix, but looking in the configuration itself rather than the import namespace.  The mechanism allows access by dot or by index, in a similar way to that provided by str.format.  Thus, given the following snippet: handlers:   email:     class: logging.handlers.SMTPHandler     mailhost: localhost     fromaddr: my_app@domain.tld     toaddrs:       - support_team@domain.tld       - dev_team@domain.tld     subject: Houston, we have a problem.  in the configuration, the string 'cfg:\/\/handlers' would resolve to the dict with key handlers, the string 'cfg:\/\/handlers.email would resolve to the dict with key email in the handlers dict, and so on.  The string 'cfg:\/\/handlers.email.toaddrs[1] would resolve to 'dev_team.domain.tld' and the string 'cfg:\/\/handlers.email.toaddrs[0]' would resolve to the value 'support_team@domain.tld'. The subject value could be accessed using either 'cfg:\/\/handlers.email.subject' or, equivalently, 'cfg:\/\/handlers.email[subject]'.  The latter form only needs to be used if the key contains spaces or non-alphanumeric characters.  If an index value consists only of decimal digits, access will be attempted using the corresponding integer value, falling back to the string value if needed. Given a string cfg:\/\/handlers.myhandler.mykey.123, this will resolve to config_dict['handlers']['myhandler']['mykey']['123']. If the string is specified as cfg:\/\/handlers.myhandler.mykey[123], the system will attempt to retrieve the value from config_dict['handlers']['myhandler']['mykey'][123], and fall back to config_dict['handlers']['myhandler']['mykey']['123'] if that fails.   15.8.2.7. Import resolution and custom importers\u00b6 Import resolution, by default, uses the builtin __import__() function to do its importing. You may want to replace this with your own importing mechanism: if so, you can replace the importer attribute of the DictConfigurator or its superclass, the BaseConfigurator class. However, you need to be careful because of the way functions are accessed from classes via descriptors. If you are using a Python callable to do your imports, and you want to define it at class level rather than instance level, you need to wrap it with staticmethod(). For example: from importlib import import_module from logging.config import BaseConfigurator  BaseConfigurator.importer = staticmethod(import_module)   You don&#8217;t need to wrap with staticmethod() if you&#8217;re setting the import callable on a configurator instance.    15.8.3. Configuration file format\u00b6 The configuration file format understood by fileConfig() is based on configparser functionality. The file must contain sections called [loggers], [handlers] and [formatters] which identify by name the entities of each type which are defined in the file. For each such entity, there is a separate section which identifies how that entity is configured.  Thus, for a logger named log01 in the [loggers] section, the relevant configuration details are held in a section [logger_log01]. Similarly, a handler called hand01 in the [handlers] section will have its configuration held in a section called [handler_hand01], while a formatter called form01 in the [formatters] section will have its configuration specified in a section called [formatter_form01]. The root logger configuration must be specified in a section called [logger_root]. Examples of these sections in the file are given below. [loggers] keys=root,log02,log03,log04,log05,log06,log07  [handlers] keys=hand01,hand02,hand03,hand04,hand05,hand06,hand07,hand08,hand09  [formatters] keys=form01,form02,form03,form04,form05,form06,form07,form08,form09   The root logger must specify a level and a list of handlers. An example of a root logger section is given below. [logger_root] level=NOTSET handlers=hand01   The level entry can be one of DEBUG, INFO, WARNING, ERROR, CRITICAL or NOTSET. For the root logger only, NOTSET means that all messages will be logged. Level values are eval()uated in the context of the logging package&#8217;s namespace. The handlers entry is a comma-separated list of handler names, which must appear in the [handlers] section. These names must appear in the [handlers] section and have corresponding sections in the configuration file. For loggers other than the root logger, some additional information is required. This is illustrated by the following example. [logger_parser] level=DEBUG handlers=hand01 propagate=1 qualname=compiler.parser   The level and handlers entries are interpreted as for the root logger, except that if a non-root logger&#8217;s level is specified as NOTSET, the system consults loggers higher up the hierarchy to determine the effective level of the logger. The propagate entry is set to 1 to indicate that messages must propagate to handlers higher up the logger hierarchy from this logger, or 0 to indicate that messages are not propagated to handlers up the hierarchy. The qualname entry is the hierarchical channel name of the logger, that is to say the name used by the application to get the logger. Sections which specify handler configuration are exemplified by the following. [handler_hand01] class=StreamHandler level=NOTSET formatter=form01 args=(sys.stdout,)  The class entry indicates the handler&#8217;s class (as determined by eval() in the logging package&#8217;s namespace). The level is interpreted as for loggers, and NOTSET is taken to mean &#8216;log everything&#8217;.  Changed in version 2.6: Added support for resolving the handler\u2019s class as a dotted module and class name. The formatter entry indicates the key name of the formatter for this handler. If blank, a default formatter (logging._defaultFormatter) is used. If a name is specified, it must appear in the [formatters] section and have a corresponding section in the configuration file. The args entry, when eval()uated in the context of the logging package&#8217;s namespace, is the list of arguments to the constructor for the handler class. Refer to the constructors for the relevant handlers, or to the examples below, to see how typical entries are constructed. [handler_hand02] class=FileHandler level=DEBUG formatter=form02 args=('python.log', 'w')  [handler_hand03] class=handlers.SocketHandler level=INFO formatter=form03 args=('localhost', handlers.DEFAULT_TCP_LOGGING_PORT)  [handler_hand04] class=handlers.DatagramHandler level=WARN formatter=form04 args=('localhost', handlers.DEFAULT_UDP_LOGGING_PORT)  [handler_hand05] class=handlers.SysLogHandler level=ERROR formatter=form05 args=(('localhost', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_USER)  [handler_hand06] class=handlers.NTEventLogHandler level=CRITICAL formatter=form06 args=('Python Application', '', 'Application')  [handler_hand07] class=handlers.SMTPHandler level=WARN formatter=form07 args=('localhost', 'from@abc', ['user1@abc', 'user2@xyz'], 'Logger Subject')  [handler_hand08] class=handlers.MemoryHandler level=NOTSET formatter=form08 target= args=(10, ERROR)  [handler_hand09] class=handlers.HTTPHandler level=NOTSET formatter=form09 args=('localhost:9022', '\/log', 'GET')  Sections which specify formatter configuration are typified by the following. [formatter_form01] format=F1 %(asctime)s %(levelname)s %(message)s datefmt= class=logging.Formatter  The format entry is the overall format string, and the datefmt entry is the strftime()-compatible date\/time format string.  If empty, the package substitutes ISO8601 format date\/times, which is almost equivalent to specifying the date format string '%Y-%m-%d %H:%M:%S'.  The ISO8601 format also specifies milliseconds, which are appended to the result of using the above format string, with a comma separator.  An example time in ISO8601 format is 2003-01-23 00:29:50,411. The class entry is optional.  It indicates the name of the formatter&#8217;s class (as a dotted module and class name.)  This option is useful for instantiating a Formatter subclass.  Subclasses of Formatter can present exception tracebacks in an expanded or condensed format.  See also  Module logging API reference for the logging module. Module logging.handlers Useful handlers included with the logging module."},{"url":"http:\/\/docs.python.org\/library\/logging.config.html#logging.config_logging.config.dictConfig","title":"logging.config.dictConfig","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.config.html#logging.config_logging.config.fileConfig","title":"logging.config.fileConfig","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.config.html#logging.config_logging.config.listen","title":"logging.config.listen","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.config.html#logging.config_logging.config.stopListening","title":"logging.config.stopListening","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html","title":"curses.panel","description":"15.14. curses.panel &#8212; A panel stack extension for curses\u00b6 Panels are windows with the added feature of depth, so they can be stacked on top of each other, and only the visible portions of each window will be displayed.  Panels can be added, moved up or down in the stack, and removed.  15.14.1. Functions\u00b6 The module curses.panel defines the following functions:   curses.panel.bottom_panel()\u00b6 Returns the bottom panel in the panel stack.    curses.panel.new_panel(win)\u00b6 Returns a panel object, associating it with the given window win. Be aware that you need to keep the returned panel object referenced explicitly.  If you don&#8217;t, the panel object is garbage collected and removed from the panel stack.    curses.panel.top_panel()\u00b6 Returns the top panel in the panel stack.    curses.panel.update_panels()\u00b6 Updates the virtual screen after changes in the panel stack. This does not call curses.doupdate(), so you&#8217;ll have to do this yourself.    15.14.2. Panel Objects\u00b6 Panel objects, as returned by new_panel() above, are windows with a stacking order. There&#8217;s always a window associated with a panel which determines the content, while the panel methods are responsible for the window&#8217;s depth in the panel stack. Panel objects have the following methods:   Panel.above()\u00b6 Returns the panel above the current panel.    Panel.below()\u00b6 Returns the panel below the current panel.    Panel.bottom()\u00b6 Push the panel to the bottom of the stack.    Panel.hidden()\u00b6 Returns true if the panel is hidden (not visible), false otherwise.    Panel.hide()\u00b6 Hide the panel. This does not delete the object, it just makes the window on screen invisible.    Panel.move(y, x)\u00b6 Move the panel to the screen coordinates (y, x).    Panel.replace(win)\u00b6 Change the window associated with the panel to the window win.    Panel.set_userptr(obj)\u00b6 Set the panel&#8217;s user pointer to obj. This is used to associate an arbitrary piece of data with the panel, and can be any Python object.    Panel.show()\u00b6 Display the panel (which might have been hidden).    Panel.top()\u00b6 Push panel to the top of the stack.    Panel.userptr()\u00b6 Returns the user pointer for the panel.  This might be any Python object.    Panel.window()\u00b6 Returns the window object associated with the panel."},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.bottom_panel","title":"curses.panel.bottom_panel","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.new_panel","title":"curses.panel.new_panel","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.above","title":"curses.panel.Panel.above","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.below","title":"curses.panel.Panel.below","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.bottom","title":"curses.panel.Panel.bottom","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.hidden","title":"curses.panel.Panel.hidden","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.hide","title":"curses.panel.Panel.hide","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.move","title":"curses.panel.Panel.move","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.replace","title":"curses.panel.Panel.replace","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.set_userptr","title":"curses.panel.Panel.set_userptr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.show","title":"curses.panel.Panel.show","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.top","title":"curses.panel.Panel.top","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.userptr","title":"curses.panel.Panel.userptr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.Panel.window","title":"curses.panel.Panel.window","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.top_panel","title":"curses.panel.top_panel","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.panel.html#curses.panel_curses.panel.update_panels","title":"curses.panel.update_panels","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html","title":"platform","description":"15.15. platform &#8212;  Access to underlying platform&#8217;s identifying data\u00b6  New in version 2.3. Source code: Lib\/platform.py   Note Specific platforms listed alphabetically, with Linux included in the Unix section.   15.15.1. Cross Platform\u00b6   platform.architecture(executable=sys.executable, bits='', linkage='')\u00b6 Queries the given executable (defaults to the Python interpreter binary) for various architecture information. Returns a tuple (bits, linkage) which contain information about the bit architecture and the linkage format used for the executable. Both values are returned as strings. Values that cannot be determined are returned as given by the parameter presets. If bits is given as '', the sizeof(pointer)() (or sizeof(long)() on Python version < 1.5.2) is used as indicator for the supported pointer size. The function relies on the system&#8217;s file command to do the actual work. This is available on most if not all Unix  platforms and some non-Unix platforms and then only if the executable points to the Python interpreter.  Reasonable defaults are used when the above needs are not met.  Note On Mac OS X (and perhaps other platforms), executable files may be universal files containing multiple architectures. To get at the &#8220;64-bitness&#8221; of the current interpreter, it is more reliable to query the sys.maxsize attribute: is_64bits = sys.maxsize > 2**32        platform.machine()\u00b6 Returns the machine type, e.g. 'i386'. An empty string is returned if the value cannot be determined.    platform.node()\u00b6 Returns the computer&#8217;s network name (may not be fully qualified!). An empty string is returned if the value cannot be determined.    platform.platform(aliased=0, terse=0)\u00b6 Returns a single string identifying the underlying platform with as much useful information as possible. The output is intended to be human readable rather than machine parseable. It may look different on different platforms and this is intended. If aliased is true, the function will use aliases for various platforms that report system names which differ from their common names, for example SunOS will be reported as Solaris.  The system_alias() function is used to implement this. Setting terse to true causes the function to return only the absolute minimum information needed to identify the platform.     platform.processor()\u00b6 Returns the (real) processor name, e.g. 'amdk6'. An empty string is returned if the value cannot be determined. Note that many platforms do not provide this information or simply return the same value as for machine().  NetBSD does this.     platform.python_build()\u00b6 Returns a tuple (buildno, builddate) stating the Python build number and date as strings.    platform.python_compiler()\u00b6 Returns a string identifying the compiler used for compiling Python.    platform.python_branch()\u00b6 Returns a string identifying the Python implementation SCM branch.  New in version 2.6.     platform.python_implementation()\u00b6 Returns a string identifying the Python implementation. Possible return values are: &#8216;CPython&#8217;, &#8216;IronPython&#8217;, &#8216;Jython&#8217;, &#8216;PyPy&#8217;.  New in version 2.6.     platform.python_revision()\u00b6 Returns a string identifying the Python implementation SCM revision.  New in version 2.6.     platform.python_version()\u00b6 Returns the Python version as string 'major.minor.patchlevel' Note that unlike the Python sys.version, the returned value will always include the patchlevel (it defaults to 0).     platform.python_version_tuple()\u00b6 Returns the Python version as tuple (major, minor, patchlevel) of strings. Note that unlike the Python sys.version, the returned value will always include the patchlevel (it defaults to '0').     platform.release()\u00b6 Returns the system&#8217;s release, e.g. '2.2.0' or 'NT' An empty string is returned if the value cannot be determined.    platform.system()\u00b6 Returns the system\/OS name, e.g. 'Linux', 'Windows', or 'Java'. An empty string is returned if the value cannot be determined.    platform.system_alias(system, release, version)\u00b6 Returns (system, release, version) aliased to common marketing names used for some systems.  It also does some reordering of the information in some cases where it would otherwise cause confusion.    platform.version()\u00b6 Returns the system&#8217;s release version, e.g. '#3 on degas'. An empty string is returned if the value cannot be determined.    platform.uname()\u00b6 Fairly portable uname interface. Returns a tuple of strings (system, node, release, version, machine, processor) identifying the underlying platform. Note that unlike the os.uname() function this also returns possible processor information as additional tuple entry. Entries which cannot be determined are set to ''.     15.15.2. Java Platform\u00b6   platform.java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', ''))\u00b6 Version interface for Jython. Returns a tuple (release, vendor, vminfo, osinfo) with vminfo being a tuple (vm_name, vm_release, vm_vendor) and osinfo being a tuple (os_name, os_version, os_arch). Values which cannot be determined are set to the defaults given as parameters (which all default to '').     15.15.3. Windows Platform\u00b6   platform.win32_ver(release='', version='', csd='', ptype='')\u00b6 Get additional version information from the Windows Registry and return a tuple (version, csd, ptype) referring to version number, CSD level and OS type (multi\/single processor). As a hint: ptype is 'Uniprocessor Free' on single processor NT machines and 'Multiprocessor Free' on multi processor machines. The &#8216;Free&#8217; refers to the OS version being free of debugging code. It could also state &#8216;Checked&#8217; which means the OS version uses debugging code, i.e. code that checks arguments, ranges, etc.  Note This function works best with Mark Hammond&#8217;s win32all package installed, but also on Python 2.3 and later (support for this was added in Python 2.6). It obviously only runs on Win32 compatible platforms.     15.15.3.1. Win95\/98 specific\u00b6   platform.popen(cmd, mode='r', bufsize=None)\u00b6 Portable popen() interface.  Find a working popen implementation preferring win32pipe.popen().  On Windows NT, win32pipe.popen() should work; on Windows 9x it hangs due to bugs in the MS C library.     15.15.4. Mac OS Platform\u00b6   platform.mac_ver(release='', versioninfo=('', '', ''), machine='')\u00b6 Get Mac OS version information and return it as tuple (release, versioninfo, machine) with versioninfo being a tuple (version, dev_stage, non_release_version). Entries which cannot be determined are set to ''.  All tuple entries are strings.     15.15.5. Unix Platforms\u00b6   platform.dist(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...))\u00b6 This is an old version of the functionality now provided by linux_distribution(). For new code, please use the linux_distribution(). The only difference between the two is that dist() always returns the short name of the distribution taken from the supported_dists parameter.  Deprecated since version 2.6.     platform.linux_distribution(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'redhat', 'mandrake', ...), full_distribution_name=1)\u00b6 Tries to determine the name of the Linux OS distribution name. supported_dists may be given to define the set of Linux distributions to look for. It defaults to a list of currently supported Linux distributions identified by their release file name. If full_distribution_name is true (default), the full distribution read from the OS is returned. Otherwise the short name taken from supported_dists is used. Returns a tuple (distname,version,id) which defaults to the args given as parameters.  id is the item in parentheses after the version number.  It is usually the version codename.  New in version 2.6.     platform.libc_ver(executable=sys.executable, lib='', version='', chunksize=2048)\u00b6 Tries to determine the libc version against which the file executable (defaults to the Python interpreter) is linked.  Returns a tuple of strings (lib, version) which default to the given parameters in case the lookup fails. Note that this function has intimate knowledge of how different libc versions add symbols to the executable is probably only usable for executables compiled using gcc. The file is read and scanned in chunks of chunksize bytes."},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.architecture","title":"platform.architecture","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.dist","title":"platform.dist","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.java_ver","title":"platform.java_ver","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.libc_ver","title":"platform.libc_ver","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.linux_distribution","title":"platform.linux_distribution","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.mac_ver","title":"platform.mac_ver","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.machine","title":"platform.machine","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.node","title":"platform.node","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.platform","title":"platform.platform","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.popen","title":"platform.popen","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.processor","title":"platform.processor","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.python_branch","title":"platform.python_branch","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.python_build","title":"platform.python_build","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.python_compiler","title":"platform.python_compiler","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.python_implementation","title":"platform.python_implementation","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.python_revision","title":"platform.python_revision","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.python_version","title":"platform.python_version","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.python_version_tuple","title":"platform.python_version_tuple","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.release","title":"platform.release","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.system","title":"platform.system","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.system_alias","title":"platform.system_alias","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.uname","title":"platform.uname","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.version","title":"platform.version","description":""},{"url":"http:\/\/docs.python.org\/library\/platform.html#platform.win32_ver","title":"platform.win32_ver","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html","title":"curses","description":"15.11. curses &#8212; Terminal handling for character-cell displays\u00b6 Platforms: Unix  Changed in version 1.6: Added support for the ncurses library and converted to a package. The curses module provides an interface to the curses library, the de-facto standard for portable advanced terminal handling. While curses is most widely used in the Unix environment, versions are available for DOS, OS\/2, and possibly other systems as well.  This extension module is designed to match the API of ncurses, an open-source curses library hosted on Linux and the BSD variants of Unix.  Note Since version 5.4, the ncurses library decides how to interpret non-ASCII data using the nl_langinfo function.  That means that you have to call locale.setlocale() in the application and encode Unicode strings using one of the system&#8217;s available encodings.  This example uses the system&#8217;s default encoding: import locale locale.setlocale(locale.LC_ALL, &#39;&#39;) code = locale.getpreferredencoding()   Then use code as the encoding for str.encode() calls.   See also  Module curses.ascii Utilities for working with ASCII characters, regardless of your locale settings. Module curses.panel A panel stack extension that adds depth to  curses windows. Module curses.textpad Editable text widget for curses supporting  Emacs-like bindings. Curses Programming with Python Tutorial material on using curses with Python, by Andrew Kuchling and Eric Raymond.  The Demo\/curses\/ directory in the Python source distribution contains some example programs using the curses bindings provided by this module.   15.11.1. Functions\u00b6 The module curses defines the following exception:   exception curses.error\u00b6 Exception raised when a curses library function returns an error.   Note Whenever x or y arguments to a function or a method are optional, they default to the current cursor location. Whenever attr is optional, it defaults to A_NORMAL.  The module curses defines the following functions:   curses.baudrate()\u00b6 Return the output speed of the terminal in bits per second.  On software terminal emulators it will have a fixed high value. Included for historical reasons; in former times, it was used to  write output loops for time delays and occasionally to change interfaces depending on the line speed.    curses.beep()\u00b6 Emit a short attention sound.    curses.can_change_color()\u00b6 Return True or False, depending on whether the programmer can change the colors displayed by the terminal.    curses.cbreak()\u00b6 Enter cbreak mode.  In cbreak mode (sometimes called &#8220;rare&#8221; mode) normal tty line buffering is turned off and characters are available to be read one by one. However, unlike raw mode, special characters (interrupt, quit, suspend, and flow control) retain their effects on the tty driver and calling program.  Calling first raw() then cbreak() leaves the terminal in cbreak mode.    curses.color_content(color_number)\u00b6 Return the intensity of the red, green, and blue (RGB) components in the color color_number, which must be between 0 and COLORS.  A 3-tuple is returned, containing the R,G,B values for the given color, which will be between 0 (no component) and 1000 (maximum amount of component).    curses.color_pair(color_number)\u00b6 Return the attribute value for displaying text in the specified color.  This attribute value can be combined with A_STANDOUT, A_REVERSE, and the other A_* attributes.  pair_number() is the counterpart to this function.    curses.curs_set(visibility)\u00b6 Set the cursor state.  visibility can be set to 0, 1, or 2, for invisible, normal, or very visible.  If the terminal supports the visibility requested, the previous cursor state is returned; otherwise, an exception is raised.  On many terminals, the &#8220;visible&#8221; mode is an underline cursor and the &#8220;very visible&#8221; mode is a block cursor.    curses.def_prog_mode()\u00b6 Save the current terminal mode as the &#8220;program&#8221; mode, the mode when the running program is using curses.  (Its counterpart is the &#8220;shell&#8221; mode, for when the program is not in curses.)  Subsequent calls to reset_prog_mode() will restore this mode.    curses.def_shell_mode()\u00b6 Save the current terminal mode as the &#8220;shell&#8221; mode, the mode when the running program is not using curses.  (Its counterpart is the &#8220;program&#8221; mode, when the program is using curses capabilities.) Subsequent calls to reset_shell_mode() will restore this mode.    curses.delay_output(ms)\u00b6 Insert an ms millisecond pause in output.    curses.doupdate()\u00b6 Update the physical screen.  The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state.  The doupdate() ground updates the physical screen to match the virtual screen. The virtual screen may be updated by a noutrefresh() call after write operations such as addstr() have been performed on a window.  The normal refresh() call is simply noutrefresh() followed by doupdate(); if you have to update multiple windows, you can speed performance and perhaps reduce screen flicker by issuing noutrefresh() calls on all windows, followed by a single doupdate().     curses.echo()\u00b6 Enter echo mode.  In echo mode, each character input is echoed to the screen as it is entered.    curses.endwin()\u00b6 De-initialize the library, and return terminal to normal status.    curses.erasechar()\u00b6 Return the user&#8217;s current erase character.  Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself.    curses.filter()\u00b6 The filter() routine, if used, must be called before initscr() is called.  The effect is that, during those calls, LINES is set to 1; the capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home string is set to the value of cr. The effect is that the cursor is confined to the current line, and so are screen updates.  This may be used for enabling character-at-a-time  line editing without touching the rest of the screen.    curses.flash()\u00b6 Flash the screen.  That is, change it to reverse-video and then change it back in a short interval.  Some people prefer such as &#8216;visible bell&#8217; to the audible attention signal produced by beep().    curses.flushinp()\u00b6 Flush all input buffers.  This throws away any  typeahead  that  has been typed by the user and has not yet been processed by the program.    curses.getmouse()\u00b6 After getch() returns KEY_MOUSE to signal a mouse event, this method should be call to retrieve the queued mouse event, represented as a 5-tuple (id, x, y, z, bstate). id is an ID value used to distinguish multiple devices, and x, y, z are the event&#8217;s coordinates.  (z is currently unused.)  bstate is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where n is the button number from 1 to 4: BUTTONn_PRESSED, BUTTONn_RELEASED, BUTTONn_CLICKED, BUTTONn_DOUBLE_CLICKED, BUTTONn_TRIPLE_CLICKED, BUTTON_SHIFT, BUTTON_CTRL, BUTTON_ALT.    curses.getsyx()\u00b6 Return the current coordinates of the virtual screen cursor in y and x.  If leaveok is currently true, then -1,-1 is returned.    curses.getwin(file)\u00b6 Read window related data stored in the file by an earlier putwin() call. The routine then creates and initializes a new window using that data, returning the new window object.    curses.has_colors()\u00b6 Return True if the terminal can display colors; otherwise, return False.    curses.has_ic()\u00b6 Return True if the terminal has insert- and delete-character capabilities. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities.    curses.has_il()\u00b6 Return True if the terminal has insert- and delete-line capabilities, or can simulate  them  using scrolling regions. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities.    curses.has_key(ch)\u00b6 Take a key value ch, and return True if the current terminal type recognizes a key with that value.    curses.halfdelay(tenths)\u00b6 Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program. However, after blocking for tenths tenths of seconds, an exception is raised if nothing has been typed.  The value of tenths must be a number between 1 and 255.  Use nocbreak() to leave half-delay mode.    curses.init_color(color_number, r, g, b)\u00b6 Change the definition of a color, taking the number of the color to be changed followed by three RGB values (for the amounts of red, green, and blue components).  The value of color_number must be between 0 and COLORS.  Each of r, g, b, must be a value between 0 and 1000.  When init_color() is used, all occurrences of that color on the screen immediately change to the new definition.  This function is a no-op on most terminals; it is active only if can_change_color() returns 1.    curses.init_pair(pair_number, fg, bg)\u00b6 Change the definition of a color-pair.  It takes three arguments: the number of the color-pair to be changed, the foreground color number, and the background color number.  The value of pair_number must be between 1 and COLOR_PAIRS - 1 (the 0 color pair is wired to white on black and cannot be changed).  The value of fg and bg arguments must be between 0 and COLORS.  If the color-pair was previously initialized, the screen is refreshed and all occurrences of that color-pair are changed to the new definition.    curses.initscr()\u00b6 Initialize the library. Return a WindowObject which represents the whole screen.  Note If there is an error opening the terminal, the underlying curses library may cause the interpreter to exit.      curses.is_term_resized(nlines, ncols)\u00b6 Return True if resize_term() would modify the window structure, False otherwise.    curses.isendwin()\u00b6 Return True if endwin() has been called (that is, the  curses library has been deinitialized).    curses.keyname(k)\u00b6 Return the name of the key numbered k.  The name of a key generating printable ASCII character is the key&#8217;s character.  The name of a control-key combination is a two-character string consisting of a caret followed by the corresponding printable ASCII character.  The name of an alt-key combination (128-255) is a string consisting of the prefix &#8216;M-&#8216; followed by the name of the corresponding ASCII character.    curses.killchar()\u00b6 Return the user&#8217;s current line kill character. Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself.    curses.longname()\u00b6 Return a string containing the terminfo long name field describing the current terminal.  The maximum length of a verbose description is 128 characters.  It is defined only after the call to initscr().    curses.meta(yes)\u00b6 If yes is 1, allow 8-bit characters to be input. If yes is 0,  allow only 7-bit chars.    curses.mouseinterval(interval)\u00b6 Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click, and return the previous interval value.  The default value is 200 msec, or one fifth of a second.    curses.mousemask(mousemask)\u00b6 Set the mouse events to be reported, and return a tuple (availmask, oldmask).   availmask indicates which of the specified mouse events can be reported; on complete failure it returns 0.  oldmask is the previous value of the given window&#8217;s mouse event mask.  If this function is never called, no mouse events are ever reported.    curses.napms(ms)\u00b6 Sleep for ms milliseconds.    curses.newpad(nlines, ncols)\u00b6 Create and return a pointer to a new pad data structure with the given number of lines and columns.  A pad is returned as a window object. A pad is like a window, except that it is not restricted by the screen size, and is not necessarily associated with a particular part of the screen.  Pads can be used when a large window is needed, and only a part of the window will be on the screen at one time.  Automatic refreshes of pads (such as from scrolling or echoing of input) do not occur.  The refresh() and noutrefresh() methods of a pad require 6 arguments to specify the part of the pad to be displayed and the location on the screen to be used for the display. The arguments are pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol; the p arguments refer to the upper left corner of the pad region to be displayed and the s arguments define a clipping box on the screen within which the pad region is to be displayed.     curses.newwin([nlines, ncols], begin_y, begin_x)\u00b6 Return a new window, whose left-upper corner is at  (begin_y, begin_x), and whose height\/width is  nlines\/ncols. By default, the window will extend from the  specified position to the lower right corner of the screen.     curses.nl()\u00b6 Enter newline mode.  This mode translates the return key into newline on input, and translates newline into return and line-feed on output. Newline mode is initially on.    curses.nocbreak()\u00b6 Leave cbreak mode.  Return to normal &#8220;cooked&#8221; mode with line buffering.    curses.noecho()\u00b6 Leave echo mode.  Echoing of input characters is turned off.    curses.nonl()\u00b6 Leave newline mode.  Disable translation of return into newline on input, and disable low-level translation of newline into newline\/return on output (but this does not change the behavior of addch('\\n'), which always does the equivalent of return and line feed on the virtual screen).  With translation off, curses can sometimes speed up vertical motion a little; also, it will be able to detect the return key on input.    curses.noqiflush()\u00b6 When the noqiflush() routine is used, normal flush of input and output queues associated with the INTR, QUIT and SUSP characters will not be done.  You may want to call noqiflush() in a signal handler if you want output to continue as though the interrupt had not occurred, after the handler exits.    curses.noraw()\u00b6 Leave raw mode. Return to normal &#8220;cooked&#8221; mode with line buffering.    curses.pair_content(pair_number)\u00b6 Return a tuple (fg, bg) containing the colors for the requested color pair. The value of pair_number must be between 1 and COLOR_PAIRS - 1.    curses.pair_number(attr)\u00b6 Return the number of the color-pair set by the attribute value attr. color_pair() is the counterpart to this function.    curses.putp(string)\u00b6 Equivalent to tputs(str, 1, putchar); emit the value of a specified terminfo capability for the current terminal.  Note that the output of putp() always goes to standard output.    curses.qiflush([flag])\u00b6 If flag is False, the effect is the same as calling noqiflush(). If flag is True, or no argument is provided, the queues will be flushed when these control characters are read.    curses.raw()\u00b6 Enter raw mode.  In raw mode, normal line buffering and  processing of interrupt, quit, suspend, and flow control keys are turned off; characters are presented to curses input functions one by one.    curses.reset_prog_mode()\u00b6 Restore the  terminal  to &#8220;program&#8221; mode, as previously saved  by def_prog_mode().    curses.reset_shell_mode()\u00b6 Restore the  terminal  to &#8220;shell&#8221; mode, as previously saved  by def_shell_mode().    curses.resetty()\u00b6 Restore the state of the terminal modes to what it was at the last call to savetty().    curses.resize_term(nlines, ncols)\u00b6 Backend function used by resizeterm(), performing most of the work; when resizing the windows, resize_term() blank-fills the areas that are extended.  The calling application should fill in these areas with appropriate data.  The resize_term() function attempts to resize all windows.  However, due to the calling convention of pads, it is not possible to resize these without additional interaction with the application.    curses.resizeterm(nlines, ncols)\u00b6 Resize the standard and current windows to the specified dimensions, and adjusts other bookkeeping data used by the curses library that record the window dimensions (in particular the SIGWINCH handler).    curses.savetty()\u00b6 Save the current state of the terminal modes in a buffer, usable by resetty().    curses.setsyx(y, x)\u00b6 Set the virtual screen cursor to y, x. If y and x are both -1, then leaveok is set.    curses.setupterm([termstr, fd])\u00b6 Initialize the terminal.  termstr is a string giving the terminal name; if omitted, the value of the TERM environment variable will be used.  fd is the file descriptor to which any initialization sequences will be sent; if not supplied, the file descriptor for sys.stdout will be used.    curses.start_color()\u00b6 Must be called if the programmer wants to use colors, and before any other color manipulation routine is called.  It is good practice to call this routine right after initscr(). start_color() initializes eight basic colors (black, red,  green, yellow, blue, magenta, cyan, and white), and two global variables in the curses module, COLORS and COLOR_PAIRS, containing the maximum number of colors and color-pairs the terminal can support.  It also restores the colors on the terminal to the values they had when the terminal was just turned on.     curses.termattrs()\u00b6 Return a logical OR of all video attributes supported by the terminal.  This information is useful when a curses program needs complete control over the appearance of the screen.    curses.termname()\u00b6 Return the value of the environment variable TERM, truncated to 14 characters.    curses.tigetflag(capname)\u00b6 Return the value of the Boolean capability corresponding to the terminfo capability name capname.  The value -1 is returned if capname is not a Boolean capability, or 0 if it is canceled or absent from the terminal description.    curses.tigetnum(capname)\u00b6 Return the value of the numeric capability corresponding to the terminfo capability name capname.  The value -2 is returned if capname is not a numeric capability, or -1 if it is canceled or absent from the terminal description.    curses.tigetstr(capname)\u00b6 Return the value of the string capability corresponding to the terminfo capability name capname.  None is returned if capname is not a string capability, or is canceled or absent from the terminal description.    curses.tparm(str[, ...])\u00b6 Instantiate the string str with the supplied parameters, where str should be a parameterized string obtained from the terminfo database.  E.g. tparm(tigetstr(\"cup\"), 5, 3) could result in '\\033[6;4H', the exact result depending on terminal type.    curses.typeahead(fd)\u00b6 Specify that the file descriptor fd be used for typeahead checking.  If fd is -1, then no typeahead checking is done. The curses library does &#8220;line-breakout optimization&#8221; by looking for typeahead periodically while updating the screen.  If input is found, and it is coming from a tty, the current update is postponed until refresh or doupdate is called again, allowing faster response to commands typed in advance. This function allows specifying a different file descriptor for typeahead checking.     curses.unctrl(ch)\u00b6 Return a string which is a printable representation of the character ch. Control characters are displayed as a caret followed by the character, for example as ^C. Printing characters are left as they are.    curses.ungetch(ch)\u00b6 Push ch so the next getch() will return it.  Note Only one ch can be pushed before getch() is called.      curses.ungetmouse(id, x, y, z, bstate)\u00b6 Push a KEY_MOUSE event onto the input queue, associating the given state data with it.    curses.use_env(flag)\u00b6 If used, this function should be called before initscr() or newterm are called.  When flag is False, the values of lines and columns specified in the terminfo database will be used, even if environment variables LINES and COLUMNS (used by default) are set, or if curses is running in a window (in which case default behavior would be to use the window size if LINES and COLUMNS are not set).    curses.use_default_colors()\u00b6 Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application.  The default color is assigned to the color number -1. After calling this function,  init_pair(x, curses.COLOR_RED, -1) initializes, for instance, color pair x to a red foreground color on the default background.    curses.wrapper(func, ...)\u00b6 Initialize curses and call another callable object, func, which should be the rest of your curses-using application.  If the application raises an exception, this function will restore the terminal to a sane state before re-raising the exception and generating a traceback.  The callable object func is then passed the main window &#8216;stdscr&#8217; as its first argument, followed by any other arguments passed to wrapper().  Before calling func, wrapper() turns on cbreak mode, turns off echo, enables the terminal keypad, and initializes colors if the terminal has color support.  On exit (whether normally or by exception) it restores cooked mode, turns on echo, and disables the terminal keypad.    15.11.2. Window Objects\u00b6 Window objects, as returned by initscr() and newwin() above, have the following methods:   window.addch([y, x], ch[, attr])\u00b6  Note A character means a C character (an ASCII code), rather than a Python character (a string of length 1). (This note is true whenever the documentation mentions a character.) The built-in ord() is handy for conveying strings to codes.  Paint character ch at (y, x) with attributes attr, overwriting any character previously painter at that location.  By default, the character position and attributes are the current settings for the window object.     window.addnstr([y, x], str, n[, attr])\u00b6 Paint at most n characters of the  string str at (y, x) with attributes attr, overwriting anything previously on the display.    window.addstr([y, x], str[, attr])\u00b6 Paint the string str at (y, x) with attributes attr, overwriting anything previously on the display.    window.attroff(attr)\u00b6 Remove attribute attr from the &#8220;background&#8221; set applied to all writes to the current window.    window.attron(attr)\u00b6 Add attribute attr from the &#8220;background&#8221; set applied to all writes to the current window.    window.attrset(attr)\u00b6 Set the &#8220;background&#8221; set of attributes to attr.  This set is initially 0 (no attributes).    window.bkgd(ch[, attr])\u00b6 Set the background property of the window to the character ch, with attributes attr.  The change is then applied to every character position in that window:  The attribute of every character in the window  is changed to the new background attribute. Wherever  the  former background character appears, it is changed to the new background character.      window.bkgdset(ch[, attr])\u00b6 Set the window&#8217;s background.  A window&#8217;s background consists of a character and any combination of attributes.  The attribute part of the background is combined (OR&#8217;ed) with all non-blank characters that are written into the window.  Both the character and attribute parts of the background are combined with the blank characters.  The background becomes a property of the character and moves with the character through any scrolling and insert\/delete line\/character operations.    window.border([ls[, rs[, ts[, bs[, tl[, tr[, bl[, br]]]]]]]])\u00b6 Draw a border around the edges of the window. Each parameter specifies  the character to use for a specific part of the border; see the table below for more details.  The characters can be specified as integers or as one-character strings.  Note A 0 value for any parameter will cause the default character to be used for that parameter.  Keyword parameters can not be used.  The defaults are listed in this table:         Parameter Description Default value    ls Left side ACS_VLINE  rs Right side ACS_VLINE  ts Top ACS_HLINE  bs Bottom ACS_HLINE  tl Upper-left corner ACS_ULCORNER  tr Upper-right corner ACS_URCORNER  bl Bottom-left corner ACS_LLCORNER  br Bottom-right corner ACS_LRCORNER        window.box([vertch, horch])\u00b6 Similar to border(), but both ls and rs are vertch and both ts and bs are horch.  The default corner characters are always used by this function.    window.chgat([y, x][, num], attr)\u00b6 Set the attributes of num characters at the current cursor position, or at position (y, x) if supplied. If no value of num is given or num = -1, the attribute will  be set on all the characters to the end of the line.  This function does not move the cursor. The changed line will be touched using the touchline() method so that the contents will be redisplayed by the next window refresh.    window.clear()\u00b6 Like erase(), but also cause the whole window to be repainted upon next call to refresh().    window.clearok(yes)\u00b6 If yes is 1, the next call to refresh() will clear the window completely.    window.clrtobot()\u00b6 Erase from cursor to the end of the window: all lines below the cursor are deleted, and then the equivalent of clrtoeol() is performed.    window.clrtoeol()\u00b6 Erase from cursor to the end of the line.    window.cursyncup()\u00b6 Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window.    window.delch([y, x])\u00b6 Delete any character at (y, x).    window.deleteln()\u00b6 Delete the line under the cursor. All following lines are moved up by one line.    window.derwin([nlines, ncols], begin_y, begin_x)\u00b6 An abbreviation for &#8220;derive window&#8221;, derwin() is the same as calling subwin(), except that begin_y and begin_x are relative to the origin of the window, rather than relative to the entire screen.  Return a window object for the derived window.    window.echochar(ch[, attr])\u00b6 Add character ch with attribute attr, and immediately  call refresh() on the window.    window.enclose(y, x)\u00b6 Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window, returning True or False.  It is useful for determining what subset of the screen windows enclose the location of a mouse event.    window.erase()\u00b6 Clear the window.    window.getbegyx()\u00b6 Return a tuple (y, x) of co-ordinates of upper-left corner.    window.getbkgd()\u00b6 Return the given window&#8217;s current background character\/attribute pair.    window.getch([y, x])\u00b6 Get a character. Note that the integer returned does not have to be in ASCII range: function keys, keypad keys and so on return numbers higher than 256. In no-delay mode, -1 is returned if there is no input, else getch() waits until a key is pressed.    window.getkey([y, x])\u00b6 Get a character, returning a string instead of an integer, as getch() does. Function keys, keypad keys and so on return a multibyte string containing the key name.  In no-delay mode, an exception is raised if there is no input.    window.getmaxyx()\u00b6 Return a tuple (y, x) of the height and width of the window.    window.getparyx()\u00b6 Return the beginning coordinates of this window relative to its parent window into two integer variables y and x.  Return -1, -1 if this window has no parent.    window.getstr([y, x])\u00b6 Read a string from the user, with primitive line editing capacity.    window.getyx()\u00b6 Return a tuple (y, x) of current cursor position  relative to the window&#8217;s upper-left corner.    window.hline([y, x], ch, n)\u00b6 Display a horizontal line starting at (y, x) with length n consisting of the character ch.    window.idcok(flag)\u00b6 If flag is False, curses no longer considers using the hardware insert\/delete character feature of the terminal; if flag is True, use of character insertion and deletion is enabled.  When curses is first initialized, use of character insert\/delete is enabled by default.    window.idlok(yes)\u00b6 If called with yes equal to 1, curses will try and use hardware line editing facilities. Otherwise, line insertion\/deletion are disabled.    window.immedok(flag)\u00b6 If flag is True, any change in the window image automatically causes the window to be refreshed; you no longer have to call refresh() yourself. However, it may degrade performance considerably, due to repeated calls to wrefresh.  This option is disabled by default.    window.inch([y, x])\u00b6 Return the character at the given position in the window. The bottom 8 bits are the character proper, and upper bits are the attributes.    window.insch([y, x], ch[, attr])\u00b6 Paint character ch at (y, x) with attributes attr, moving the line from position x right by one character.    window.insdelln(nlines)\u00b6 Insert nlines lines into the specified window above the current line.  The nlines bottom lines are lost.  For negative nlines, delete nlines lines starting with the one under the cursor, and move the remaining lines up.  The bottom nlines lines are cleared.  The current cursor position remains the same.    window.insertln()\u00b6 Insert a blank line under the cursor. All following lines are moved down by one line.    window.insnstr([y, x], str, n[, attr])\u00b6 Insert a character string (as many characters as will fit on the line) before the character under the cursor, up to n characters.   If n is zero or negative, the entire string is inserted. All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost. The cursor position does not change (after moving to y, x, if specified).    window.insstr([y, x], str[, attr])\u00b6 Insert a character string (as many characters as will fit on the line) before the character under the cursor.  All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost.  The cursor position does not change (after moving to y, x, if specified).    window.instr([y, x][, n])\u00b6 Return a string of characters, extracted from the window starting at the current cursor position, or at y, x if specified. Attributes are stripped from the characters.  If n is specified, instr() returns a string at most n characters long (exclusive of the trailing NUL).    window.is_linetouched(line)\u00b6 Return True if the specified line was modified since the last call to refresh(); otherwise return False.  Raise a curses.error exception if line is not valid for the given window.    window.is_wintouched()\u00b6 Return True if the specified window was modified since the last call to refresh(); otherwise return False.    window.keypad(yes)\u00b6 If yes is 1, escape sequences generated by some keys (keypad,  function keys) will be interpreted by curses. If yes is 0, escape sequences will be left as is in the input stream.    window.leaveok(yes)\u00b6 If yes is 1, cursor is left where it is on update, instead of being at &#8220;cursor position.&#8221;  This reduces cursor movement where possible. If possible the cursor will be made invisible. If yes is 0, cursor will always be at &#8220;cursor position&#8221; after an update.     window.move(new_y, new_x)\u00b6 Move cursor to (new_y, new_x).    window.mvderwin(y, x)\u00b6 Move the window inside its parent window.  The screen-relative parameters of the window are not changed.  This routine is used to display different parts of the parent window at the same physical position on the screen.    window.mvwin(new_y, new_x)\u00b6 Move the window so its upper-left corner is at (new_y, new_x).    window.nodelay(yes)\u00b6 If yes is 1, getch() will be non-blocking.    window.notimeout(yes)\u00b6 If yes is 1, escape sequences will not be timed out. If yes is 0, after a few milliseconds, an escape sequence will not be interpreted, and will be left in the input stream as is.     window.noutrefresh()\u00b6 Mark for refresh but wait.  This function updates the data structure representing the desired state of the window, but does not force an update of the physical screen.  To accomplish that, call  doupdate().    window.overlay(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])\u00b6 Overlay the window on top of destwin. The windows need not be the same size, only the overlapping region is copied. This copy is non-destructive, which means that the current background character does not overwrite the old contents of destwin. To get fine-grained control over the copied region, the second form of overlay() can be used. sminrow and smincol are the upper-left coordinates of the source window, and the other variables mark a rectangle in the destination window.     window.overwrite(destwin[, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])\u00b6 Overwrite the window on top of destwin. The windows need not be the same size, in which case only the overlapping region is copied. This copy is destructive, which means that the current background character overwrites the old contents of destwin. To get fine-grained control over the copied region, the second form of overwrite() can be used. sminrow and smincol are the upper-left coordinates of the source window, the other variables mark a rectangle in the destination window.     window.putwin(file)\u00b6 Write all data associated with the window into the provided file object.  This information can be later retrieved using the getwin() function.    window.redrawln(beg, num)\u00b6 Indicate that the num screen lines, starting at line beg, are corrupted and should be completely redrawn on the next refresh() call.    window.redrawwin()\u00b6 Touch the entire window, causing it to be completely redrawn on the next refresh() call.    window.refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])\u00b6 Update the display immediately (sync actual screen with previous drawing\/deleting methods). The 6 optional arguments can only be specified when the window is a pad created with newpad().  The additional parameters are needed to indicate what part of the pad and screen are involved. pminrow and pmincol specify the upper left-hand corner of the rectangle to be displayed in the pad.  sminrow, smincol, smaxrow, and smaxcol specify the edges of the rectangle to be displayed on the screen.  The lower right-hand corner of the rectangle to be displayed in the pad is calculated from the screen coordinates, since the rectangles must be the same size.  Both rectangles must be entirely contained within their respective structures.  Negative values of pminrow, pmincol, sminrow, or smincol are treated as if they were zero.     window.resize(nlines, ncols)\u00b6 Reallocate storage for a curses window to adjust its dimensions to the specified values.  If either dimension is larger than the current values, the window&#8217;s data is filled with blanks that have the current background rendition (as set by bkgdset()) merged into them.    window.scroll([lines=1])\u00b6 Scroll the screen or scrolling region upward by lines lines.    window.scrollok(flag)\u00b6 Control what happens when the cursor of a window is moved off the edge of the window or scrolling region, either as a result of a newline action on the bottom line, or typing the last character of the last line.  If flag is false, the cursor is left on the bottom line.  If flag is true, the window is scrolled up one line.  Note that in order to get the physical scrolling effect on the terminal, it is also necessary to call idlok().    window.setscrreg(top, bottom)\u00b6 Set the scrolling region from line top to line bottom. All scrolling actions will take place in this region.    window.standend()\u00b6 Turn off the standout attribute.  On some terminals this has the side effect of turning off all attributes.    window.standout()\u00b6 Turn on attribute A_STANDOUT.    window.subpad([nlines, ncols], begin_y, begin_x)\u00b6 Return a sub-window, whose upper-left corner is at (begin_y, begin_x), and whose width\/height is ncols\/nlines.    window.subwin([nlines, ncols], begin_y, begin_x)\u00b6 Return a sub-window, whose upper-left corner is at (begin_y, begin_x), and whose width\/height is ncols\/nlines. By default, the sub-window will extend from the specified position to the lower right corner of the window.     window.syncdown()\u00b6 Touch each location in the window that has been touched in any of its ancestor windows.  This routine is called by refresh(), so it should almost never be necessary to call it manually.    window.syncok(flag)\u00b6 If called with flag set to True, then syncup() is called automatically whenever there is a change in the window.    window.syncup()\u00b6 Touch all locations in ancestors of the window that have been changed in  the window.    window.timeout(delay)\u00b6 Set blocking or non-blocking read behavior for the window.  If delay is negative, blocking read is used (which will wait indefinitely for input).  If delay is zero, then non-blocking read is used, and -1 will be returned by getch() if no input is waiting.  If delay is positive, then getch() will block for delay milliseconds, and return -1 if there is still no input at the end of that time.    window.touchline(start, count[, changed])\u00b6 Pretend count lines have been changed, starting with line start.  If changed is supplied, it specifies whether the affected lines are marked as having been changed (changed=1) or unchanged (changed=0).    window.touchwin()\u00b6 Pretend the whole window has been changed, for purposes of drawing optimizations.    window.untouchwin()\u00b6 Mark all lines in  the  window  as unchanged since the last call to refresh().    window.vline([y, x], ch, n)\u00b6 Display a vertical line starting at (y, x) with length n consisting of the character ch.    15.11.3. Constants\u00b6 The curses module defines the following data members:   curses.ERR\u00b6 Some curses routines  that  return  an integer, such as  getch(), return ERR upon failure.    curses.OK\u00b6 Some curses routines  that  return  an integer, such as  napms(), return OK upon success.    curses.version\u00b6 A string representing the current version of the module.  Also available as __version__.  Several constants are available to specify character cell attributes:       Attribute Meaning    A_ALTCHARSET Alternate character set mode.  A_BLINK Blink mode.  A_BOLD Bold mode.  A_DIM Dim mode.  A_NORMAL Normal attribute.  A_REVERSE Reverse background and foreground colors.  A_STANDOUT Standout mode.  A_UNDERLINE Underline mode.    Keys are referred to by integer constants with names starting with  KEY_. The exact keycaps available are system dependent.       Key constant Key    KEY_MIN Minimum key value  KEY_BREAK Break key (unreliable)  KEY_DOWN Down-arrow  KEY_UP Up-arrow  KEY_LEFT Left-arrow  KEY_RIGHT Right-arrow  KEY_HOME Home key (upward+left arrow)  KEY_BACKSPACE Backspace (unreliable)  KEY_F0 Function keys.  Up to 64 function keys are supported.  KEY_Fn Value of function key n  KEY_DL Delete line  KEY_IL Insert line  KEY_DC Delete character  KEY_IC Insert char or enter insert mode  KEY_EIC Exit insert char mode  KEY_CLEAR Clear screen  KEY_EOS Clear to end of screen  KEY_EOL Clear to end of line  KEY_SF Scroll 1 line forward  KEY_SR Scroll 1 line backward (reverse)  KEY_NPAGE Next page  KEY_PPAGE Previous page  KEY_STAB Set tab  KEY_CTAB Clear tab  KEY_CATAB Clear all tabs  KEY_ENTER Enter or send (unreliable)  KEY_SRESET Soft (partial) reset (unreliable)  KEY_RESET Reset or hard reset (unreliable)  KEY_PRINT Print  KEY_LL Home down or bottom (lower left)  KEY_A1 Upper left of keypad  KEY_A3 Upper right of keypad  KEY_B2 Center of keypad  KEY_C1 Lower left of keypad  KEY_C3 Lower right of keypad  KEY_BTAB Back tab  KEY_BEG Beg (beginning)  KEY_CANCEL Cancel  KEY_CLOSE Close  KEY_COMMAND Cmd (command)  KEY_COPY Copy  KEY_CREATE Create  KEY_END End  KEY_EXIT Exit  KEY_FIND Find  KEY_HELP Help  KEY_MARK Mark  KEY_MESSAGE Message  KEY_MOVE Move  KEY_NEXT Next  KEY_OPEN Open  KEY_OPTIONS Options  KEY_PREVIOUS Prev (previous)  KEY_REDO Redo  KEY_REFERENCE Ref (reference)  KEY_REFRESH Refresh  KEY_REPLACE Replace  KEY_RESTART Restart  KEY_RESUME Resume  KEY_SAVE Save  KEY_SBEG Shifted Beg (beginning)  KEY_SCANCEL Shifted Cancel  KEY_SCOMMAND Shifted Command  KEY_SCOPY Shifted Copy  KEY_SCREATE Shifted Create  KEY_SDC Shifted Delete char  KEY_SDL Shifted Delete line  KEY_SELECT Select  KEY_SEND Shifted End  KEY_SEOL Shifted Clear line  KEY_SEXIT Shifted Dxit  KEY_SFIND Shifted Find  KEY_SHELP Shifted Help  KEY_SHOME Shifted Home  KEY_SIC Shifted Input  KEY_SLEFT Shifted Left arrow  KEY_SMESSAGE Shifted Message  KEY_SMOVE Shifted Move  KEY_SNEXT Shifted Next  KEY_SOPTIONS Shifted Options  KEY_SPREVIOUS Shifted Prev  KEY_SPRINT Shifted Print  KEY_SREDO Shifted Redo  KEY_SREPLACE Shifted Replace  KEY_SRIGHT Shifted Right arrow  KEY_SRSUME Shifted Resume  KEY_SSAVE Shifted Save  KEY_SSUSPEND Shifted Suspend  KEY_SUNDO Shifted Undo  KEY_SUSPEND Suspend  KEY_UNDO Undo  KEY_MOUSE Mouse event has occurred  KEY_RESIZE Terminal resize event  KEY_MAX Maximum key value    On VT100s and their software emulations, such as X terminal emulators, there are normally at least four function keys (KEY_F1, KEY_F2, KEY_F3, KEY_F4) available, and the arrow keys mapped to KEY_UP, KEY_DOWN, KEY_LEFT and KEY_RIGHT in the obvious way.  If your machine has a PC keyboard, it is safe to expect arrow keys and twelve function keys (older PC keyboards may have only ten function keys); also, the following keypad mappings are standard:       Keycap Constant    Insert KEY_IC  Delete KEY_DC  Home KEY_HOME  End KEY_END  Page Up KEY_NPAGE  Page Down KEY_PPAGE    The following table lists characters from the alternate character set. These are inherited from the VT100 terminal, and will generally be  available on software emulations such as X terminals.  When there is no graphic available, curses falls back on a crude printable ASCII approximation.  Note These are available only after initscr() has  been called.        ACS code Meaning    ACS_BBSS alternate name for upper right corner  ACS_BLOCK solid square block  ACS_BOARD board of squares  ACS_BSBS alternate name for horizontal line  ACS_BSSB alternate name for upper left corner  ACS_BSSS alternate name for top tee  ACS_BTEE bottom tee  ACS_BULLET bullet  ACS_CKBOARD checker board (stipple)  ACS_DARROW arrow pointing down  ACS_DEGREE degree symbol  ACS_DIAMOND diamond  ACS_GEQUAL greater-than-or-equal-to  ACS_HLINE horizontal line  ACS_LANTERN lantern symbol  ACS_LARROW left arrow  ACS_LEQUAL less-than-or-equal-to  ACS_LLCORNER lower left-hand corner  ACS_LRCORNER lower right-hand corner  ACS_LTEE left tee  ACS_NEQUAL not-equal sign  ACS_PI letter pi  ACS_PLMINUS plus-or-minus sign  ACS_PLUS big plus sign  ACS_RARROW right arrow  ACS_RTEE right tee  ACS_S1 scan line 1  ACS_S3 scan line 3  ACS_S7 scan line 7  ACS_S9 scan line 9  ACS_SBBS alternate name for lower right corner  ACS_SBSB alternate name for vertical line  ACS_SBSS alternate name for right tee  ACS_SSBB alternate name for lower left corner  ACS_SSBS alternate name for bottom tee  ACS_SSSB alternate name for left tee  ACS_SSSS alternate name for crossover or big plus  ACS_STERLING pound sterling  ACS_TTEE top tee  ACS_UARROW up arrow  ACS_ULCORNER upper left corner  ACS_URCORNER upper right corner  ACS_VLINE vertical line    The following table lists the predefined colors:       Constant Color    COLOR_BLACK Black  COLOR_BLUE Blue  COLOR_CYAN Cyan (light greenish blue)  COLOR_GREEN Green  COLOR_MAGENTA Magenta (purplish red)  COLOR_RED Red  COLOR_WHITE White  COLOR_YELLOW Yellow      15.12. curses.textpad &#8212; Text input widget for curses programs\u00b6  New in version 1.6. The curses.textpad module provides a Textbox class that handles elementary text editing in a curses window, supporting a set of keybindings resembling those of Emacs (thus, also of Netscape Navigator, BBedit 6.x, FrameMaker, and many other programs).  The module also provides a rectangle-drawing function useful for framing text boxes or for other purposes. The module curses.textpad defines the following function:   curses.textpad.rectangle(win, uly, ulx, lry, lrx)\u00b6 Draw a rectangle.  The first argument must be a window object; the remaining arguments are coordinates relative to that window.  The second and third arguments are the y and x coordinates of the upper left hand corner of the rectangle to be drawn; the fourth and fifth arguments are the y and x coordinates of the lower right hand corner. The rectangle will be drawn using VT100\/IBM PC forms characters on terminals that make this possible (including xterm and most other software terminal emulators).  Otherwise it will be drawn with ASCII  dashes, vertical bars, and plus signs.   15.12.1. Textbox objects\u00b6 You can instantiate a Textbox object as follows:   class curses.textpad.Textbox(win)\u00b6 Return a textbox widget object.  The win argument should be a curses WindowObject in which the textbox is to be contained. The edit cursor of the textbox is initially located at the upper left hand corner of the containing window, with coordinates (0, 0). The instance&#8217;s stripspaces flag is initially on. Textbox objects have the following methods:   edit([validator])\u00b6 This is the entry point you will normally use.  It accepts editing keystrokes until one of the termination keystrokes is entered.  If validator is supplied, it must be a function.  It will be called for each keystroke entered with the keystroke as a parameter; command dispatch is done on the result. This method returns the window contents as a string; whether blanks in the window are included is affected by the stripspaces attribute.    do_command(ch)\u00b6 Process a single command keystroke.  Here are the supported special keystrokes:       Keystroke Action    Control-A Go to left edge of window.  Control-B Cursor left, wrapping to previous line if appropriate.  Control-D Delete character under cursor.  Control-E Go to right edge (stripspaces off) or end of line (stripspaces on).  Control-F Cursor right, wrapping to next line when appropriate.  Control-G Terminate, returning the window contents.  Control-H Delete character backward.  Control-J Terminate if the window is 1 line, otherwise insert newline.  Control-K If line is blank, delete it, otherwise clear to end of line.  Control-L Refresh screen.  Control-N Cursor down; move down one line.  Control-O Insert a blank line at cursor location.  Control-P Cursor up; move up one line.    Move operations do nothing if the cursor is at an edge where the movement is not possible.  The following synonyms are supported where possible:       Constant Keystroke    KEY_LEFT Control-B  KEY_RIGHT Control-F  KEY_UP Control-P  KEY_DOWN Control-N  KEY_BACKSPACE Control-h    All other keystrokes are treated as a command to insert the given character and move right (with line wrapping).     gather()\u00b6 Return the window contents as a string; whether blanks in the window are included is affected by the stripspaces member.    stripspaces\u00b6 This attribute is a flag which controls the interpretation of blanks in the window.  When it is on, trailing blanks on each line are ignored; any cursor motion that would land the cursor on a trailing blank goes to the end of that line instead, and trailing blanks are stripped when the window contents are gathered."},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.baudrate","title":"curses.baudrate","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.beep","title":"curses.beep","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.can_change_color","title":"curses.can_change_color","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.cbreak","title":"curses.cbreak","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.color_content","title":"curses.color_content","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.color_pair","title":"curses.color_pair","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.curs_set","title":"curses.curs_set","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.def_prog_mode","title":"curses.def_prog_mode","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.def_shell_mode","title":"curses.def_shell_mode","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.delay_output","title":"curses.delay_output","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.doupdate","title":"curses.doupdate","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.echo","title":"curses.echo","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.endwin","title":"curses.endwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.erasechar","title":"curses.erasechar","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.filter","title":"curses.filter","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.flash","title":"curses.flash","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.flushinp","title":"curses.flushinp","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.getmouse","title":"curses.getmouse","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.getsyx","title":"curses.getsyx","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.getwin","title":"curses.getwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.halfdelay","title":"curses.halfdelay","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.has_colors","title":"curses.has_colors","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.has_ic","title":"curses.has_ic","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.has_il","title":"curses.has_il","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.has_key","title":"curses.has_key","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.init_color","title":"curses.init_color","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.init_pair","title":"curses.init_pair","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.initscr","title":"curses.initscr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.is_term_resized","title":"curses.is_term_resized","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.isendwin","title":"curses.isendwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.keyname","title":"curses.keyname","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.killchar","title":"curses.killchar","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.longname","title":"curses.longname","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.meta","title":"curses.meta","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.mouseinterval","title":"curses.mouseinterval","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.mousemask","title":"curses.mousemask","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.napms","title":"curses.napms","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.newpad","title":"curses.newpad","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.newwin","title":"curses.newwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.nl","title":"curses.nl","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.nocbreak","title":"curses.nocbreak","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.noecho","title":"curses.noecho","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.nonl","title":"curses.nonl","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.noqiflush","title":"curses.noqiflush","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.noraw","title":"curses.noraw","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.pair_content","title":"curses.pair_content","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.pair_number","title":"curses.pair_number","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.putp","title":"curses.putp","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.qiflush","title":"curses.qiflush","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.raw","title":"curses.raw","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.reset_prog_mode","title":"curses.reset_prog_mode","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.reset_shell_mode","title":"curses.reset_shell_mode","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.resetty","title":"curses.resetty","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.resize_term","title":"curses.resize_term","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.resizeterm","title":"curses.resizeterm","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.savetty","title":"curses.savetty","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.setsyx","title":"curses.setsyx","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.setupterm","title":"curses.setupterm","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.start_color","title":"curses.start_color","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.termattrs","title":"curses.termattrs","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.termname","title":"curses.termname","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.textpad.rectangle","title":"curses.textpad.rectangle","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.textpad.Textbox","title":"curses.textpad.Textbox","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.textpad.Textbox.do_command","title":"curses.textpad.Textbox.do_command","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.textpad.Textbox.edit","title":"curses.textpad.Textbox.edit","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.textpad.Textbox.gather","title":"curses.textpad.Textbox.gather","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.tigetflag","title":"curses.tigetflag","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.tigetnum","title":"curses.tigetnum","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.tigetstr","title":"curses.tigetstr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.tparm","title":"curses.tparm","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.typeahead","title":"curses.typeahead","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.unctrl","title":"curses.unctrl","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.ungetch","title":"curses.ungetch","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.ungetmouse","title":"curses.ungetmouse","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.use_default_colors","title":"curses.use_default_colors","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.use_env","title":"curses.use_env","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.addch","title":"curses.window.addch","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.addnstr","title":"curses.window.addnstr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.addstr","title":"curses.window.addstr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.attroff","title":"curses.window.attroff","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.attron","title":"curses.window.attron","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.attrset","title":"curses.window.attrset","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.bkgd","title":"curses.window.bkgd","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.bkgdset","title":"curses.window.bkgdset","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.border","title":"curses.window.border","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.box","title":"curses.window.box","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.chgat","title":"curses.window.chgat","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.clear","title":"curses.window.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.clearok","title":"curses.window.clearok","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.clrtobot","title":"curses.window.clrtobot","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.clrtoeol","title":"curses.window.clrtoeol","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.cursyncup","title":"curses.window.cursyncup","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.delch","title":"curses.window.delch","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.deleteln","title":"curses.window.deleteln","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.derwin","title":"curses.window.derwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.echochar","title":"curses.window.echochar","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.enclose","title":"curses.window.enclose","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.erase","title":"curses.window.erase","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.getbegyx","title":"curses.window.getbegyx","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.getbkgd","title":"curses.window.getbkgd","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.getch","title":"curses.window.getch","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.getkey","title":"curses.window.getkey","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.getmaxyx","title":"curses.window.getmaxyx","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.getparyx","title":"curses.window.getparyx","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.getstr","title":"curses.window.getstr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.getyx","title":"curses.window.getyx","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.hline","title":"curses.window.hline","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.idcok","title":"curses.window.idcok","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.idlok","title":"curses.window.idlok","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.immedok","title":"curses.window.immedok","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.inch","title":"curses.window.inch","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.insch","title":"curses.window.insch","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.insdelln","title":"curses.window.insdelln","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.insertln","title":"curses.window.insertln","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.insnstr","title":"curses.window.insnstr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.insstr","title":"curses.window.insstr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.instr","title":"curses.window.instr","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.is_linetouched","title":"curses.window.is_linetouched","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.is_wintouched","title":"curses.window.is_wintouched","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.keypad","title":"curses.window.keypad","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.leaveok","title":"curses.window.leaveok","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.move","title":"curses.window.move","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.mvderwin","title":"curses.window.mvderwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.mvwin","title":"curses.window.mvwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.nodelay","title":"curses.window.nodelay","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.notimeout","title":"curses.window.notimeout","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.noutrefresh","title":"curses.window.noutrefresh","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.overlay","title":"curses.window.overlay","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.overwrite","title":"curses.window.overwrite","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.putwin","title":"curses.window.putwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.redrawln","title":"curses.window.redrawln","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.redrawwin","title":"curses.window.redrawwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.refresh","title":"curses.window.refresh","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.resize","title":"curses.window.resize","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.scroll","title":"curses.window.scroll","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.scrollok","title":"curses.window.scrollok","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.setscrreg","title":"curses.window.setscrreg","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.standend","title":"curses.window.standend","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.standout","title":"curses.window.standout","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.subpad","title":"curses.window.subpad","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.subwin","title":"curses.window.subwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.syncdown","title":"curses.window.syncdown","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.syncok","title":"curses.window.syncok","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.syncup","title":"curses.window.syncup","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.timeout","title":"curses.window.timeout","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.touchline","title":"curses.window.touchline","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.touchwin","title":"curses.window.touchwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.untouchwin","title":"curses.window.untouchwin","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.window.vline","title":"curses.window.vline","description":""},{"url":"http:\/\/docs.python.org\/library\/curses.html#curses.wrapper","title":"curses.wrapper","description":""},{"url":"http:\/\/docs.python.org\/library\/errno.html","title":"errno","description":"15.16. errno &#8212; Standard errno system symbols\u00b6 This module makes available standard errno system symbols. The value of each symbol is the corresponding integer value. The names and descriptions are borrowed from linux\/include\/errno.h, which should be pretty all-inclusive.   errno.errorcode\u00b6 Dictionary providing a mapping from the errno value to the string name in the underlying system.  For instance, errno.errorcode[errno.EPERM] maps to 'EPERM'.  To translate a numeric error code to an error message, use os.strerror(). Of the following list, symbols that are not used on the current platform are not defined by the module.  The specific list of defined symbols is available as errno.errorcode.keys().  Symbols available can include:   errno.EPERM\u00b6 Operation not permitted    errno.ENOENT\u00b6 No such file or directory    errno.ESRCH\u00b6 No such process    errno.EINTR\u00b6 Interrupted system call    errno.EIO\u00b6 I\/O error    errno.ENXIO\u00b6 No such device or address    errno.E2BIG\u00b6 Arg list too long    errno.ENOEXEC\u00b6 Exec format error    errno.EBADF\u00b6 Bad file number    errno.ECHILD\u00b6 No child processes    errno.EAGAIN\u00b6 Try again    errno.ENOMEM\u00b6 Out of memory    errno.EACCES\u00b6 Permission denied    errno.EFAULT\u00b6 Bad address    errno.ENOTBLK\u00b6 Block device required    errno.EBUSY\u00b6 Device or resource busy    errno.EEXIST\u00b6 File exists    errno.EXDEV\u00b6 Cross-device link    errno.ENODEV\u00b6 No such device    errno.ENOTDIR\u00b6 Not a directory    errno.EISDIR\u00b6 Is a directory    errno.EINVAL\u00b6 Invalid argument    errno.ENFILE\u00b6 File table overflow    errno.EMFILE\u00b6 Too many open files    errno.ENOTTY\u00b6 Not a typewriter    errno.ETXTBSY\u00b6 Text file busy    errno.EFBIG\u00b6 File too large    errno.ENOSPC\u00b6 No space left on device    errno.ESPIPE\u00b6 Illegal seek    errno.EROFS\u00b6 Read-only file system    errno.EMLINK\u00b6 Too many links    errno.EPIPE\u00b6 Broken pipe    errno.EDOM\u00b6 Math argument out of domain of func    errno.ERANGE\u00b6 Math result not representable    errno.EDEADLK\u00b6 Resource deadlock would occur    errno.ENAMETOOLONG\u00b6 File name too long    errno.ENOLCK\u00b6 No record locks available    errno.ENOSYS\u00b6 Function not implemented    errno.ENOTEMPTY\u00b6 Directory not empty    errno.ELOOP\u00b6 Too many symbolic links encountered    errno.EWOULDBLOCK\u00b6 Operation would block    errno.ENOMSG\u00b6 No message of desired type    errno.EIDRM\u00b6 Identifier removed    errno.ECHRNG\u00b6 Channel number out of range    errno.EL2NSYNC\u00b6 Level 2 not synchronized    errno.EL3HLT\u00b6 Level 3 halted    errno.EL3RST\u00b6 Level 3 reset    errno.ELNRNG\u00b6 Link number out of range    errno.EUNATCH\u00b6 Protocol driver not attached    errno.ENOCSI\u00b6 No CSI structure available    errno.EL2HLT\u00b6 Level 2 halted    errno.EBADE\u00b6 Invalid exchange    errno.EBADR\u00b6 Invalid request descriptor    errno.EXFULL\u00b6 Exchange full    errno.ENOANO\u00b6 No anode    errno.EBADRQC\u00b6 Invalid request code    errno.EBADSLT\u00b6 Invalid slot    errno.EDEADLOCK\u00b6 File locking deadlock error    errno.EBFONT\u00b6 Bad font file format    errno.ENOSTR\u00b6 Device not a stream    errno.ENODATA\u00b6 No data available    errno.ETIME\u00b6 Timer expired    errno.ENOSR\u00b6 Out of streams resources    errno.ENONET\u00b6 Machine is not on the network    errno.ENOPKG\u00b6 Package not installed    errno.EREMOTE\u00b6 Object is remote    errno.ENOLINK\u00b6 Link has been severed    errno.EADV\u00b6 Advertise error    errno.ESRMNT\u00b6 Srmount error    errno.ECOMM\u00b6 Communication error on send    errno.EPROTO\u00b6 Protocol error    errno.EMULTIHOP\u00b6 Multihop attempted    errno.EDOTDOT\u00b6 RFS specific error    errno.EBADMSG\u00b6 Not a data message    errno.EOVERFLOW\u00b6 Value too large for defined data type    errno.ENOTUNIQ\u00b6 Name not unique on network    errno.EBADFD\u00b6 File descriptor in bad state    errno.EREMCHG\u00b6 Remote address changed    errno.ELIBACC\u00b6 Can not access a needed shared library    errno.ELIBBAD\u00b6 Accessing a corrupted shared library    errno.ELIBSCN\u00b6 .lib section in a.out corrupted    errno.ELIBMAX\u00b6 Attempting to link in too many shared libraries    errno.ELIBEXEC\u00b6 Cannot exec a shared library directly    errno.EILSEQ\u00b6 Illegal byte sequence    errno.ERESTART\u00b6 Interrupted system call should be restarted    errno.ESTRPIPE\u00b6 Streams pipe error    errno.EUSERS\u00b6 Too many users    errno.ENOTSOCK\u00b6 Socket operation on non-socket    errno.EDESTADDRREQ\u00b6 Destination address required    errno.EMSGSIZE\u00b6 Message too long    errno.EPROTOTYPE\u00b6 Protocol wrong type for socket    errno.ENOPROTOOPT\u00b6 Protocol not available    errno.EPROTONOSUPPORT\u00b6 Protocol not supported    errno.ESOCKTNOSUPPORT\u00b6 Socket type not supported    errno.EOPNOTSUPP\u00b6 Operation not supported on transport endpoint    errno.EPFNOSUPPORT\u00b6 Protocol family not supported    errno.EAFNOSUPPORT\u00b6 Address family not supported by protocol    errno.EADDRINUSE\u00b6 Address already in use    errno.EADDRNOTAVAIL\u00b6 Cannot assign requested address    errno.ENETDOWN\u00b6 Network is down    errno.ENETUNREACH\u00b6 Network is unreachable    errno.ENETRESET\u00b6 Network dropped connection because of reset    errno.ECONNABORTED\u00b6 Software caused connection abort    errno.ECONNRESET\u00b6 Connection reset by peer    errno.ENOBUFS\u00b6 No buffer space available    errno.EISCONN\u00b6 Transport endpoint is already connected    errno.ENOTCONN\u00b6 Transport endpoint is not connected    errno.ESHUTDOWN\u00b6 Cannot send after transport endpoint shutdown    errno.ETOOMANYREFS\u00b6 Too many references: cannot splice    errno.ETIMEDOUT\u00b6 Connection timed out    errno.ECONNREFUSED\u00b6 Connection refused    errno.EHOSTDOWN\u00b6 Host is down    errno.EHOSTUNREACH\u00b6 No route to host    errno.EALREADY\u00b6 Operation already in progress    errno.EINPROGRESS\u00b6 Operation now in progress    errno.ESTALE\u00b6 Stale NFS file handle    errno.EUCLEAN\u00b6 Structure needs cleaning    errno.ENOTNAM\u00b6 Not a XENIX named type file    errno.ENAVAIL\u00b6 No XENIX semaphores available    errno.EISNAM\u00b6 Is a named type file    errno.EREMOTEIO\u00b6 Remote I\/O error    errno.EDQUOT\u00b6 Quota exceeded"},{"url":"http:\/\/docs.python.org\/library\/select.html","title":"select","description":"16.1. select &#8212; Waiting for I\/O completion\u00b6 This module provides access to the select() and poll() functions available in most operating systems, epoll() available on Linux 2.5+ and kqueue() available on most BSD. Note that on Windows, it only works for sockets; on other operating systems, it also works for other file types (in particular, on Unix, it works on pipes). It cannot be used on regular files to determine whether a file has grown since it was last read. The module defines the following:   exception select.error\u00b6 The exception raised when an error occurs.  The accompanying value is a pair containing the numeric error code from errno and the corresponding string, as would be printed by the C function perror().    select.epoll([sizehint=-1])\u00b6 (Only supported on Linux 2.5.44 and newer.)  Returns an edge polling object, which can be used as Edge or Level Triggered interface for I\/O events; see section Edge and Level Trigger Polling (epoll) Objects below for the methods supported by epolling objects.  New in version 2.6.     select.poll()\u00b6 (Not supported by all operating systems.)  Returns a polling object, which supports registering and unregistering file descriptors, and then polling them for I\/O events; see section Polling Objects below for the methods supported by polling objects.    select.kqueue()\u00b6 (Only supported on BSD.)  Returns a kernel queue object; see section Kqueue Objects below for the methods supported by kqueue objects.  New in version 2.6.     select.kevent(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD, fflags=0, data=0, udata=0)\u00b6 (Only supported on BSD.)  Returns a kernel event object; see section Kevent Objects below for the methods supported by kevent objects.  New in version 2.6.     select.select(rlist, wlist, xlist[, timeout])\u00b6 This is a straightforward interface to the Unix select() system call. The first three arguments are sequences of &#8216;waitable objects&#8217;: either integers representing file descriptors or objects with a parameterless method named fileno() returning such an integer:  rlist: wait until ready for reading wlist: wait until ready for writing xlist: wait for an &#8220;exceptional condition&#8221; (see the manual page for what your system considers such a condition)  Empty sequences are allowed, but acceptance of three empty sequences is platform-dependent. (It is known to work on Unix but not on Windows.)  The optional timeout argument specifies a time-out as a floating point number in seconds.  When the timeout argument is omitted the function blocks until at least one file descriptor is ready.  A time-out value of zero specifies a poll and never blocks. The return value is a triple of lists of objects that are ready: subsets of the first three arguments.  When the time-out is reached without a file descriptor becoming ready, three empty lists are returned. Among the acceptable object types in the sequences are Python file objects (e.g. sys.stdin, or objects returned by open() or os.popen()), socket objects returned by socket.socket().  You may also define a wrapper class yourself, as long as it has an appropriate fileno() method (that really returns a file descriptor, not just a random integer).  Note File objects on Windows are not acceptable, but sockets are.  On Windows, the underlying select() function is provided by the WinSock library, and does not handle file descriptors that don&#8217;t originate from WinSock.      select.PIPE_BUF\u00b6 Files reported as ready for writing by select(), poll() or similar interfaces in this module are guaranteed to not block on a write of up to PIPE_BUF bytes. This value is guaranteed by POSIX to be at least 512.  Availability: Unix.  New in version 2.7.    16.1.1. Edge and Level Trigger Polling (epoll) Objects\u00b6  http:\/\/linux.die.net\/man\/4\/epoll eventmask       Constant Meaning    EPOLLIN Available for read  EPOLLOUT Available for write  EPOLLPRI Urgent data for read  EPOLLERR Error condition happened on the assoc. fd  EPOLLHUP Hang up happened on the assoc. fd  EPOLLET Set Edge Trigger behavior, the default is Level Trigger behavior  EPOLLONESHOT Set one-shot behavior. After one event is pulled out, the fd is internally disabled  EPOLLRDNORM Equivalent to EPOLLIN  EPOLLRDBAND Priority data band can be read.  EPOLLWRNORM Equivalent to EPOLLOUT  EPOLLWRBAND Priority data may be written.  EPOLLMSG Ignored.       epoll.close()\u00b6 Close the control file descriptor of the epoll object.    epoll.fileno()\u00b6 Return the file descriptor number of the control fd.    epoll.fromfd(fd)\u00b6 Create an epoll object from a given file descriptor.    epoll.register(fd[, eventmask])\u00b6 Register a fd descriptor with the epoll object.  Note Registering a file descriptor that&#8217;s already registered raises an IOError &#8211; contrary to Polling Objects&#8216;s register.      epoll.modify(fd, eventmask)\u00b6 Modify a register file descriptor.    epoll.unregister(fd)\u00b6 Remove a registered file descriptor from the epoll object.    epoll.poll([timeout=-1[, maxevents=-1]])\u00b6 Wait for events. timeout in seconds (float)    16.1.2. Polling Objects\u00b6 The poll() system call, supported on most Unix systems, provides better scalability for network servers that service many, many clients at the same time. poll() scales better because the system call only requires listing the file descriptors of interest, while select() builds a bitmap, turns on bits for the fds of interest, and then afterward the whole bitmap has to be linearly scanned again. select() is O(highest file descriptor), while poll() is O(number of file descriptors).   poll.register(fd[, eventmask])\u00b6 Register a file descriptor with the polling object.  Future calls to the poll() method will then check whether the file descriptor has any pending I\/O events.  fd can be either an integer, or an object with a fileno() method that returns an integer.  File objects implement fileno(), so they can also be used as the argument. eventmask is an optional bitmask describing the type of events you want to check for, and can be a combination of the constants POLLIN, POLLPRI, and POLLOUT, described in the table below.  If not specified, the default value used will check for all 3 types of events.       Constant Meaning    POLLIN There is data to read  POLLPRI There is urgent data to read  POLLOUT Ready for output: writing will not block  POLLERR Error condition of some sort  POLLHUP Hung up  POLLNVAL Invalid request: descriptor not open    Registering a file descriptor that&#8217;s already registered is not an error, and has the same effect as registering the descriptor exactly once.     poll.modify(fd, eventmask)\u00b6 Modifies an already registered fd. This has the same effect as register(fd, eventmask).  Attempting to modify a file descriptor that was never registered causes an IOError exception with errno ENOENT to be raised.  New in version 2.6.     poll.unregister(fd)\u00b6 Remove a file descriptor being tracked by a polling object.  Just like the register() method, fd can be an integer or an object with a fileno() method that returns an integer. Attempting to remove a file descriptor that was never registered causes a KeyError exception to be raised.     poll.poll([timeout])\u00b6 Polls the set of registered file descriptors, and returns a possibly-empty list containing (fd, event) 2-tuples for the descriptors that have events or errors to report. fd is the file descriptor, and event is a bitmask with bits set for the reported events for that descriptor &#8212; POLLIN for waiting input, POLLOUT to indicate that the descriptor can be written to, and so forth. An empty list indicates that the call timed out and no file descriptors had any events to report. If timeout is given, it specifies the length of time in milliseconds which the system will wait for events before returning. If timeout is omitted, negative, or None, the call will block until there is an event for this poll object.    16.1.3. Kqueue Objects\u00b6   kqueue.close()\u00b6 Close the control file descriptor of the kqueue object.    kqueue.fileno()\u00b6 Return the file descriptor number of the control fd.    kqueue.fromfd(fd)\u00b6 Create a kqueue object from a given file descriptor.    kqueue.control(changelist, max_events[, timeout=None]) &rarr; eventlist\u00b6 Low level interface to kevent  changelist must be an iterable of kevent object or None max_events must be 0 or a positive integer timeout in seconds (floats possible)      16.1.4. Kevent Objects\u00b6 http:\/\/www.freebsd.org\/cgi\/man.cgi?query=kqueue&sektion=2   kevent.ident\u00b6 Value used to identify the event. The interpretation depends on the filter but it&#8217;s usually the file descriptor. In the constructor ident can either be an int or an object with a fileno() function. kevent stores the integer internally.    kevent.filter\u00b6 Name of the kernel filter.       Constant Meaning    KQ_FILTER_READ Takes a descriptor and returns whenever there is data available to read  KQ_FILTER_WRITE Takes a descriptor and returns whenever there is data available to write  KQ_FILTER_AIO AIO requests  KQ_FILTER_VNODE Returns when one or more of the requested events watched in fflag occurs  KQ_FILTER_PROC Watch for events on a process id  KQ_FILTER_NETDEV Watch for events on a network device [not available on Mac OS X]  KQ_FILTER_SIGNAL Returns whenever the watched signal is delivered to the process  KQ_FILTER_TIMER Establishes an arbitrary timer        kevent.flags\u00b6 Filter action.       Constant Meaning    KQ_EV_ADD Adds or modifies an event  KQ_EV_DELETE Removes an event from the queue  KQ_EV_ENABLE Permitscontrol() to returns the event  KQ_EV_DISABLE Disablesevent  KQ_EV_ONESHOT Removes event after first occurrence  KQ_EV_CLEAR Reset the state after an event is retrieved  KQ_EV_SYSFLAGS internal event  KQ_EV_FLAG1 internal event  KQ_EV_EOF Filter specific EOF condition  KQ_EV_ERROR See return values        kevent.fflags\u00b6 Filter specific flags. KQ_FILTER_READ and  KQ_FILTER_WRITE filter flags:       Constant Meaning    KQ_NOTE_LOWAT low water mark of a socket buffer    KQ_FILTER_VNODE filter flags:       Constant Meaning    KQ_NOTE_DELETE unlink() was called  KQ_NOTE_WRITE a write occurred  KQ_NOTE_EXTEND the file was extended  KQ_NOTE_ATTRIB an attribute was changed  KQ_NOTE_LINK the link count has changed  KQ_NOTE_RENAME the file was renamed  KQ_NOTE_REVOKE access to the file was revoked    KQ_FILTER_PROC filter flags:       Constant Meaning    KQ_NOTE_EXIT the process has exited  KQ_NOTE_FORK the process has called fork()  KQ_NOTE_EXEC the process has executed a new process  KQ_NOTE_PCTRLMASK internal filter flag  KQ_NOTE_PDATAMASK internal filter flag  KQ_NOTE_TRACK follow a process across fork()  KQ_NOTE_CHILD returned on the child process for NOTE_TRACK  KQ_NOTE_TRACKERR unable to attach to a child    KQ_FILTER_NETDEV filter flags (not available on Mac OS X):       Constant Meaning    KQ_NOTE_LINKUP link is up  KQ_NOTE_LINKDOWN link is down  KQ_NOTE_LINKINV link state is invalid        kevent.data\u00b6 Filter specific data.    kevent.udata\u00b6 User defined value."},{"url":"http:\/\/docs.python.org\/library\/select.html#select.epoll","title":"select.epoll","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.epoll.close","title":"select.epoll.close","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.epoll.fileno","title":"select.epoll.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.epoll.fromfd","title":"select.epoll.fromfd","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.epoll.modify","title":"select.epoll.modify","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.epoll.poll","title":"select.epoll.poll","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.epoll.register","title":"select.epoll.register","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.epoll.unregister","title":"select.epoll.unregister","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.kevent","title":"select.kevent","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.kqueue","title":"select.kqueue","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.kqueue.close","title":"select.kqueue.close","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.kqueue.control","title":"select.kqueue.control","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.kqueue.fileno","title":"select.kqueue.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.kqueue.fromfd","title":"select.kqueue.fromfd","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.poll","title":"select.poll","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.poll.modify","title":"select.poll.modify","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.poll.poll","title":"select.poll.poll","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.poll.register","title":"select.poll.register","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.poll.unregister","title":"select.poll.unregister","description":""},{"url":"http:\/\/docs.python.org\/library\/select.html#select.select","title":"select.select","description":""},{"url":"http:\/\/docs.python.org\/library\/dummy_threading.html","title":"dummy_threading","description":"16.4. dummy_threading &#8212; Drop-in replacement for the threading module\u00b6 Source code: Lib\/dummy_threading.py  This module provides a duplicate interface to the threading module.  It is meant to be imported when the thread module is not provided on a platform. Suggested usage is: try:     import threading as _threading except ImportError:     import dummy_threading as _threading   Be careful to not use this module where deadlock might occur from a thread being created that blocks waiting for another thread to be created.  This  often occurs with blocking I\/O."},{"url":"http:\/\/docs.python.org\/library\/thread.html","title":"thread","description":"16.3. thread &#8212; Multiple threads of control\u00b6  Note The thread module has been renamed to _thread in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0; however, you should consider using the high-level threading module instead.  This module provides low-level primitives for working with multiple threads (also called light-weight processes or tasks) &#8212; multiple threads of control sharing their global data space.  For synchronization, simple locks (also called mutexes or binary semaphores) are provided. The threading module provides an easier to use and higher-level threading API built on top of this module. The module is optional.  It is supported on Windows, Linux, SGI IRIX, Solaris 2.x, as well as on systems that have a POSIX thread (a.k.a. &#8220;pthread&#8221;) implementation.  For systems lacking the thread module, the dummy_thread module is available. It duplicates this module&#8217;s interface and can be used as a drop-in replacement. It defines the following constant and functions:   exception thread.error\u00b6 Raised on thread-specific errors.    thread.LockType\u00b6 This is the type of lock objects.    thread.start_new_thread(function, args[, kwargs])\u00b6 Start a new thread and return its identifier.  The thread executes the function function with the argument list args (which must be a tuple).  The optional kwargs argument specifies a dictionary of keyword arguments. When the function returns, the thread silently exits.  When the function terminates with an unhandled exception, a stack trace is printed and then the thread exits (but other threads continue to run).    thread.interrupt_main()\u00b6 Raise a KeyboardInterrupt exception in the main thread.  A subthread can use this function to interrupt the main thread.  New in version 2.3.     thread.exit()\u00b6 Raise the SystemExit exception.  When not caught, this will cause the thread to exit silently.    thread.allocate_lock()\u00b6 Return a new lock object.  Methods of locks are described below.  The lock is initially unlocked.    thread.get_ident()\u00b6 Return the &#8216;thread identifier&#8217; of the current thread.  This is a nonzero integer.  Its value has no direct meaning; it is intended as a magic cookie to be used e.g. to index a dictionary of thread-specific data.  Thread identifiers may be recycled when a thread exits and another thread is created.    thread.stack_size([size])\u00b6 Return the thread stack size used when creating new threads.  The optional size argument specifies the stack size to be used for subsequently created threads, and must be 0 (use platform or configured default) or a positive integer value of at least 32,768 (32kB). If changing the thread stack size is unsupported, the error exception is raised.  If the specified stack size is invalid, a ValueError is raised and the stack size is unmodified.  32kB is currently the minimum supported stack size value to guarantee sufficient stack space for the interpreter itself.  Note that some platforms may have particular restrictions on values for the stack size, such as requiring a minimum stack size > 32kB or requiring allocation in multiples of the system memory page size - platform documentation should be referred to for more information (4kB pages are common; using multiples of 4096 for the stack size is the suggested approach in the absence of more specific information). Availability: Windows, systems with POSIX threads.  New in version 2.5.   Lock objects have the following methods:   lock.acquire([waitflag])\u00b6 Without the optional argument, this method acquires the lock unconditionally, if necessary waiting until it is released by another thread (only one thread at a time can acquire a lock &#8212; that&#8217;s their reason for existence).  If the integer waitflag argument is present, the action depends on its value: if it is zero, the lock is only acquired if it can be acquired immediately without waiting, while if it is nonzero, the lock is acquired unconditionally as before.  The return value is True if the lock is acquired successfully, False if not.    lock.release()\u00b6 Releases the lock.  The lock must have been acquired earlier, but not necessarily by the same thread.    lock.locked()\u00b6 Return the status of the lock: True if it has been acquired by some thread, False if not.  In addition to these methods, lock objects can also be used via the with statement, e.g.: import thread  a_lock = thread.allocate_lock()  with a_lock:     print \"a_lock is locked while this executes\"   Caveats:    Threads interact strangely with interrupts: the KeyboardInterrupt exception will be received by an arbitrary thread.  (When the signal module is available, interrupts always go to the main thread.)  Calling sys.exit() or raising the SystemExit exception is equivalent to calling thread.exit().  Not all built-in functions that may block waiting for I\/O allow other threads to run.  (The most popular ones (time.sleep(), file.read(), select.select()) work as expected.)  It is not possible to interrupt the acquire() method on a lock &#8212; the KeyboardInterrupt exception will happen after the lock has been acquired.  When the main thread exits, it is system defined whether the other threads survive.  On SGI IRIX using the native thread implementation, they survive.  On most other systems, they are killed without executing try ... finally clauses or executing object destructors.  When the main thread exits, it does not do any of its usual cleanup (except that try ... finally clauses are honored), and the standard I\/O files are not flushed."},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.allocate_lock","title":"thread.allocate_lock","description":""},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.exit","title":"thread.exit","description":""},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.get_ident","title":"thread.get_ident","description":""},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.interrupt_main","title":"thread.interrupt_main","description":""},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.lock.acquire","title":"thread.lock.acquire","description":""},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.lock.locked","title":"thread.lock.locked","description":""},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.lock.release","title":"thread.lock.release","description":""},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.stack_size","title":"thread.stack_size","description":""},{"url":"http:\/\/docs.python.org\/library\/thread.html#thread.start_new_thread","title":"thread.start_new_thread","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html","title":"logging","description":"15.7. logging &#8212; Logging facility for Python\u00b6  Important This page contains the API reference information. For tutorial information and discussion of more advanced topics, see  Basic Tutorial Advanced Tutorial Logging Cookbook    New in version 2.3. This module defines functions and classes which implement a flexible event logging system for applications and libraries. The key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging, so your application log can include your own messages integrated with messages from third-party modules. The module provides a lot of functionality and flexibility.  If you are unfamiliar with logging, the best way to get to grips with it is to see the tutorials (see the links on the right). The basic classes defined by the module, together with their functions, are listed below.  Loggers expose the interface that application code directly uses. Handlers send the log records (created by loggers) to the appropriate destination. Filters provide a finer grained facility for determining which log records to output. Formatters specify the layout of log records in the final output.   15.7.1. Logger Objects\u00b6 Loggers have the following attributes and methods. Note that Loggers are never instantiated directly, but always through the module-level function logging.getLogger(name).   class logging.Logger\u00b6     Logger.propagate\u00b6 If this evaluates to true, logging messages are passed by this logger and by its child loggers to the handlers of higher level (ancestor) loggers. Messages are passed directly to the ancestor loggers&#8217; handlers - neither the level nor filters of the ancestor loggers in question are considered. If this evaluates to false, logging messages are not passed to the handlers of ancestor loggers. The constructor sets this attribute to True.     Logger.setLevel(lvl)\u00b6 Sets the threshold for this logger to lvl. Logging messages which are less severe than lvl will be ignored. When a logger is created, the level is set to NOTSET (which causes all messages to be processed when the logger is the root logger, or delegation to the parent when the logger is a non-root logger). Note that the root logger is created with level WARNING. The term &#8216;delegation to the parent&#8217; means that if a logger has a level of NOTSET, its chain of ancestor loggers is traversed until either an ancestor with a level other than NOTSET is found, or the root is reached. If an ancestor is found with a level other than NOTSET, then that ancestor&#8217;s level is treated as the effective level of the logger where the ancestor search began, and is used to determine how a logging event is handled. If the root is reached, and it has a level of NOTSET, then all messages will be processed. Otherwise, the root&#8217;s level will be used as the effective level.     Logger.isEnabledFor(lvl)\u00b6 Indicates if a message of severity lvl would be processed by this logger. This method checks first the module-level level set by logging.disable(lvl) and then the logger&#8217;s effective level as determined by getEffectiveLevel().    Logger.getEffectiveLevel()\u00b6 Indicates the effective level for this logger. If a value other than NOTSET has been set using setLevel(), it is returned. Otherwise, the hierarchy is traversed towards the root until a value other than NOTSET is found, and that value is returned.    Logger.getChild(suffix)\u00b6 Returns a logger which is a descendant to this logger, as determined by the suffix. Thus, logging.getLogger('abc').getChild('def.ghi') would return the same logger as would be returned by logging.getLogger('abc.def.ghi'). This is a convenience method, useful when the parent logger is named using e.g. __name__ rather than a literal string.  New in version 2.7.     Logger.debug(msg, *args, **kwargs)\u00b6 Logs a message with level DEBUG on this logger. The msg is the message format string, and the args are the arguments which are merged into msg using the string formatting operator. (Note that this means that you can use keywords in the format string, together with a single dictionary argument.) There are two keyword arguments in kwargs which are inspected: exc_info which, if it does not evaluate as false, causes exception information to be added to the logging message. If an exception tuple (in the format returned by sys.exc_info()) is provided, it is used; otherwise, sys.exc_info() is called to get the exception information. The second keyword argument is extra which can be used to pass a dictionary which is used to populate the __dict__ of the LogRecord created for the logging event with user-defined attributes. These custom attributes can then be used as you like. For example, they could be incorporated into logged messages. For example: FORMAT = &#39;%(asctime)-15s %(clientip)s %(user)-8s %(message)s&#39; logging.basicConfig(format=FORMAT) d = { &#39;clientip&#39; : &#39;192.168.0.1&#39;, &#39;user&#39; : &#39;fbloggs&#39; } logger = logging.getLogger(&#39;tcpserver&#39;) logger.warning(&#39;Protocol problem: %s&#39;, &#39;connection reset&#39;, extra=d)   would print something like 2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset  The keys in the dictionary passed in extra should not clash with the keys used by the logging system. (See the Formatter documentation for more information on which keys are used by the logging system.) If you choose to use these attributes in logged messages, you need to exercise some care. In the above example, for instance, the Formatter has been set up with a format string which expects &#8216;clientip&#8217; and &#8216;user&#8217; in the attribute dictionary of the LogRecord. If these are missing, the message will not be logged because a string formatting exception will occur. So in this case, you always need to pass the extra dictionary with these keys. While this might be annoying, this feature is intended for use in specialized circumstances, such as multi-threaded servers where the same code executes in many contexts, and interesting conditions which arise are dependent on this context (such as remote client IP address and authenticated user name, in the above example). In such circumstances, it is likely that specialized Formatters would be used with particular Handlers.     Logger.info(msg, *args, **kwargs)\u00b6 Logs a message with level INFO on this logger. The arguments are interpreted as for debug().    Logger.warning(msg, *args, **kwargs)\u00b6 Logs a message with level WARNING on this logger. The arguments are interpreted as for debug().    Logger.error(msg, *args, **kwargs)\u00b6 Logs a message with level ERROR on this logger. The arguments are interpreted as for debug().    Logger.critical(msg, *args, **kwargs)\u00b6 Logs a message with level CRITICAL on this logger. The arguments are interpreted as for debug().    Logger.log(lvl, msg, *args, **kwargs)\u00b6 Logs a message with integer level lvl on this logger. The other arguments are interpreted as for debug().    Logger.exception(msg, *args)\u00b6 Logs a message with level ERROR on this logger. The arguments are interpreted as for debug(). Exception info is added to the logging message. This method should only be called from an exception handler.    Logger.addFilter(filt)\u00b6 Adds the specified filter filt to this logger.    Logger.removeFilter(filt)\u00b6 Removes the specified filter filt from this logger.    Logger.filter(record)\u00b6 Applies this logger&#8217;s filters to the record and returns a true value if the record is to be processed.    Logger.addHandler(hdlr)\u00b6 Adds the specified handler hdlr to this logger.    Logger.removeHandler(hdlr)\u00b6 Removes the specified handler hdlr from this logger.    Logger.findCaller()\u00b6 Finds the caller&#8217;s source filename and line number. Returns the filename, line number and function name as a 3-element tuple.  Changed in version 2.4: The function name was added. In earlier versions, the filename and line number were returned as a 2-element tuple.     Logger.handle(record)\u00b6 Handles a record by passing it to all handlers associated with this logger and its ancestors (until a false value of propagate is found). This method is used for unpickled records received from a socket, as well as those created locally. Logger-level filtering is applied using filter().    Logger.makeRecord(name, lvl, fn, lno, msg, args, exc_info, func=None, extra=None)\u00b6 This is a factory method which can be overridden in subclasses to create specialized LogRecord instances.  Changed in version 2.5: func and extra were added.     15.7.2. Handler Objects\u00b6 Handlers have the following attributes and methods. Note that Handler is never instantiated directly; this class acts as a base for more useful subclasses. However, the __init__() method in subclasses needs to call Handler.__init__().   Handler.__init__(level=NOTSET)\u00b6 Initializes the Handler instance by setting its level, setting the list of filters to the empty list and creating a lock (using createLock()) for serializing access to an I\/O mechanism.    Handler.createLock()\u00b6 Initializes a thread lock which can be used to serialize access to underlying I\/O functionality which may not be threadsafe.    Handler.acquire()\u00b6 Acquires the thread lock created with createLock().    Handler.release()\u00b6 Releases the thread lock acquired with acquire().    Handler.setLevel(lvl)\u00b6 Sets the threshold for this handler to lvl. Logging messages which are less severe than lvl will be ignored. When a handler is created, the level is set to NOTSET (which causes all messages to be processed).    Handler.setFormatter(form)\u00b6 Sets the Formatter for this handler to form.    Handler.addFilter(filt)\u00b6 Adds the specified filter filt to this handler.    Handler.removeFilter(filt)\u00b6 Removes the specified filter filt from this handler.    Handler.filter(record)\u00b6 Applies this handler&#8217;s filters to the record and returns a true value if the record is to be processed.    Handler.flush()\u00b6 Ensure all logging output has been flushed. This version does nothing and is intended to be implemented by subclasses.    Handler.close()\u00b6 Tidy up any resources used by the handler. This version does no output but removes the handler from an internal list of handlers which is closed when shutdown() is called. Subclasses should ensure that this gets called from overridden close() methods.    Handler.handle(record)\u00b6 Conditionally emits the specified logging record, depending on filters which may have been added to the handler. Wraps the actual emission of the record with acquisition\/release of the I\/O thread lock.    Handler.handleError(record)\u00b6 This method should be called from handlers when an exception is encountered during an emit() call. By default it does nothing, which means that exceptions get silently ignored. This is what is mostly wanted for a logging system - most users will not care about errors in the logging system, they are more interested in application errors. You could, however, replace this with a custom handler if you wish. The specified record is the one which was being processed when the exception occurred.    Handler.format(record)\u00b6 Do formatting for a record - if a formatter is set, use it. Otherwise, use the default formatter for the module.    Handler.emit(record)\u00b6 Do whatever it takes to actually log the specified logging record. This version is intended to be implemented by subclasses and so raises a NotImplementedError.  For a list of handlers included as standard, see logging.handlers.   15.7.3. Formatter Objects\u00b6 Formatter objects have the following attributes and methods. They are responsible for converting a LogRecord to (usually) a string which can be interpreted by either a human or an external system. The base Formatter allows a formatting string to be specified. If none is supplied, the default value of '%(message)s' is used. A Formatter can be initialized with a format string which makes use of knowledge of the LogRecord attributes - such as the default value mentioned above making use of the fact that the user&#8217;s message and arguments are pre-formatted into a LogRecord&#8216;s message attribute.  This format string contains standard Python %-style mapping keys. See section String Formatting Operations for more information on string formatting. The useful mapping keys in a LogRecord are given in the section on LogRecord attributes.   class logging.Formatter(fmt=None, datefmt=None)\u00b6 Returns a new instance of the Formatter class.  The instance is initialized with a format string for the message as a whole, as well as a format string for the date\/time portion of a message.  If no fmt is specified, '%(message)s' is used.  If no datefmt is specified, the ISO8601 date format is used.   format(record)\u00b6 The record&#8217;s attribute dictionary is used as the operand to a string formatting operation. Returns the resulting string. Before formatting the dictionary, a couple of preparatory steps are carried out. The message attribute of the record is computed using msg % args. If the formatting string contains '(asctime)', formatTime() is called to format the event time. If there is exception information, it is formatted using formatException() and appended to the message. Note that the formatted exception information is cached in attribute exc_text. This is useful because the exception information can be pickled and sent across the wire, but you should be careful if you have more than one Formatter subclass which customizes the formatting of exception information. In this case, you will have to clear the cached value after a formatter has done its formatting, so that the next formatter to handle the event doesn&#8217;t use the cached value but recalculates it afresh.    formatTime(record, datefmt=None)\u00b6 This method should be called from format() by a formatter which wants to make use of a formatted time. This method can be overridden in formatters to provide for any specific requirement, but the basic behavior is as follows: if datefmt (a string) is specified, it is used with time.strftime() to format the creation time of the record. Otherwise, the ISO8601 format is used.  The resulting string is returned. This function uses a user-configurable function to convert the creation time to a tuple. By default, time.localtime() is used; to change this for a particular formatter instance, set the converter attribute to a function with the same signature as time.localtime() or time.gmtime(). To change it for all formatters, for example if you want all logging times to be shown in GMT, set the converter attribute in the Formatter class.     formatException(exc_info)\u00b6 Formats the specified exception information (a standard exception tuple as returned by sys.exc_info()) as a string. This default implementation just uses traceback.print_exception(). The resulting string is returned.      15.7.4. Filter Objects\u00b6 Filters can be used by Handlers and Loggers for more sophisticated filtering than is provided by levels. The base filter class only allows events which are below a certain point in the logger hierarchy. For example, a filter initialized with &#8216;A.B&#8217; will allow events logged by loggers &#8216;A.B&#8217;, &#8216;A.B.C&#8217;, &#8216;A.B.C.D&#8217;, &#8216;A.B.D&#8217; etc. but not &#8216;A.BB&#8217;, &#8216;B.A.B&#8217; etc. If initialized with the empty string, all events are passed.   class logging.Filter(name='')\u00b6 Returns an instance of the Filter class. If name is specified, it names a logger which, together with its children, will have its events allowed through the filter. If name is the empty string, allows every event.   filter(record)\u00b6 Is the specified record to be logged? Returns zero for no, nonzero for yes. If deemed appropriate, the record may be modified in-place by this method.    Note that filters attached to handlers are consulted whenever an event is emitted by the handler, whereas filters attached to loggers are consulted whenever an event is logged to the handler (using debug(), info(), etc.) This means that events which have been generated by descendant loggers will not be filtered by a logger&#8217;s filter setting, unless the filter has also been applied to those descendant loggers. You don&#8217;t actually need to subclass Filter: you can pass any instance which has a filter method with the same semantics. Although filters are used primarily to filter records based on more sophisticated criteria than levels, they get to see every record which is processed by the handler or logger they&#8217;re attached to: this can be useful if you want to do things like counting how many records were processed by a particular logger or handler, or adding, changing or removing attributes in the LogRecord being processed. Obviously changing the LogRecord needs to be done with some care, but it does allow the injection of contextual information into logs (see Using Filters to impart contextual information).   15.7.5. LogRecord Objects\u00b6 LogRecord instances are created automatically by the Logger every time something is logged, and can be created manually via makeLogRecord() (for example, from a pickled event received over the wire).   class logging.LogRecord(name, level, pathname, lineno, msg, args, exc_info, func=None)\u00b6 Contains all the information pertinent to the event being logged. The primary information is passed in msg and args, which are combined using msg  args to create the message field of the record.     Parameters: name &#8211; The name of the logger used to log the event represented by this LogRecord. level &#8211; The numeric level of the logging event (one of DEBUG, INFO etc.) Note that this is converted to two attributes of the LogRecord: levelno for the numeric value and levelname for the corresponding level name. pathname &#8211; The full pathname of the source file where the logging call was made. lineno &#8211; The line number in the source file where the logging call was made. msg &#8211; The event description message, possibly a format string with placeholders for variable data. args &#8211; Variable data to merge into the msg argument to obtain the event description. exc_info &#8211; An exception tuple with the current exception information, or None if no exception information is available. func &#8211; The name of the function or method from which the logging call was invoked.       Changed in version 2.5: func was added.   getMessage()\u00b6 Returns the message for this LogRecord instance after merging any user-supplied arguments with the message. If the user-supplied message argument to the logging call is not a string, str() is called on it to convert it to a string. This allows use of user-defined classes as messages, whose __str__ method can return the actual format string to be used.      15.7.6. LogRecord attributes\u00b6 The LogRecord has a number of attributes, most of which are derived from the parameters to the constructor. (Note that the names do not always correspond exactly between the LogRecord constructor parameters and the LogRecord attributes.) These attributes can be used to merge data from the record into the format string. The following table lists (in alphabetical order) the attribute names, their meanings and the corresponding placeholder in a %-style format string.        Attribute name Format Description    args You shouldn&#8217;t need to format this yourself. The tuple of arguments merged into msg to produce message.  asctime %(asctime)s Human-readable time when the LogRecord was created.  By default this is of the form &#8216;2003-07-08 16:49:45,896&#8217; (the numbers after the comma are millisecond portion of the time).  created %(created)f Time when the LogRecord was created (as returned by time.time()).  exc_info You shouldn&#8217;t need to format this yourself. Exception tuple (\u00e0 la sys.exc_info) or, if no exception has occurred, None.  filename %(filename)s Filename portion of pathname.  funcName %(funcName)s Name of function containing the logging call.  levelname %(levelname)s Text logging level for the message ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL').  levelno %(levelno)s Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL).  lineno %(lineno)d Source line number where the logging call was issued (if available).  module %(module)s Module (name portion of filename).  msecs %(msecs)d Millisecond portion of the time when the LogRecord was created.  message %(message)s The logged message, computed as msg  args. This is set when Formatter.format() is invoked.  msg You shouldn&#8217;t need to format this yourself. The format string passed in the original logging call. Merged with args to produce message, or an arbitrary object (see Using arbitrary objects as messages).  name %(name)s Name of the logger used to log the call.  pathname %(pathname)s Full pathname of the source file where the logging call was issued (if available).  process %(process)d Process ID (if available).  processName %(processName)s Process name (if available).  relativeCreated %(relativeCreated)d Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded.  thread %(thread)d Thread ID (if available).  threadName %(threadName)s Thread name (if available).     Changed in version 2.5: funcName was added.   15.7.7. LoggerAdapter Objects\u00b6 LoggerAdapter instances are used to conveniently pass contextual information into logging calls. For a usage example , see the section on adding contextual information to your logging output.  New in version 2.6.   class logging.LoggerAdapter(logger, extra)\u00b6 Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object.   process(msg, kwargs)\u00b6 Modifies the message and\/or keyword arguments passed to a logging call in order to insert contextual information. This implementation takes the object passed as extra to the constructor and adds it to kwargs using key &#8216;extra&#8217;. The return value is a (msg, kwargs) tuple which has the (possibly modified) versions of the arguments passed in.    In addition to the above, LoggerAdapter supports the following methods of Logger, i.e. debug(), info(), warning(), error(), exception(), critical(), log(), isEnabledFor(), getEffectiveLevel(), setLevel(), hasHandlers(). These methods have the same signatures as their counterparts in Logger, so you can use the two types of instances interchangeably.  Changed in version 2.7: The isEnabledFor() method was added to LoggerAdapter.  This method delegates to the underlying logger.   15.7.8. Thread Safety\u00b6 The logging module is intended to be thread-safe without any special work needing to be done by its clients. It achieves this though using threading locks; there is one lock to serialize access to the module&#8217;s shared data, and each handler also creates a lock to serialize access to its underlying I\/O. If you are implementing asynchronous signal handlers using the signal module, you may not be able to use logging from within such handlers. This is because lock implementations in the threading module are not always re-entrant, and so cannot be invoked from such signal handlers.   15.7.9. Module-Level Functions\u00b6 In addition to the classes described above, there are a number of module- level functions.   logging.getLogger([name])\u00b6 Return a logger with the specified name or, if no name is specified, return a logger which is the root logger of the hierarchy. If specified, the name is typically a dot-separated hierarchical name like &#8220;a&#8221;, &#8220;a.b&#8221; or &#8220;a.b.c.d&#8221;. Choice of these names is entirely up to the developer who is using logging. All calls to this function with a given name return the same logger instance. This means that logger instances never need to be passed between different parts of an application.     logging.getLoggerClass()\u00b6 Return either the standard Logger class, or the last class passed to setLoggerClass(). This function may be called from within a new class definition, to ensure that installing a customised Logger class will not undo customisations already applied by other code. For example: class MyLogger(logging.getLoggerClass()):     # ... override behaviour here      logging.debug(msg[, *args[, **kwargs]])\u00b6 Logs a message with level DEBUG on the root logger. The msg is the message format string, and the args are the arguments which are merged into msg using the string formatting operator. (Note that this means that you can use keywords in the format string, together with a single dictionary argument.) There are two keyword arguments in kwargs which are inspected: exc_info which, if it does not evaluate as false, causes exception information to be added to the logging message. If an exception tuple (in the format returned by sys.exc_info()) is provided, it is used; otherwise, sys.exc_info() is called to get the exception information. The other optional keyword argument is extra which can be used to pass a dictionary which is used to populate the __dict__ of the LogRecord created for the logging event with user-defined attributes. These custom attributes can then be used as you like. For example, they could be incorporated into logged messages. For example: FORMAT = \"%(asctime)-15s %(clientip)s %(user)-8s %(message)s\" logging.basicConfig(format=FORMAT) d = {&#39;clientip&#39;: &#39;192.168.0.1&#39;, &#39;user&#39;: &#39;fbloggs&#39;} logging.warning(\"Protocol problem: %s\", \"connection reset\", extra=d)   would print something like: 2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset  The keys in the dictionary passed in extra should not clash with the keys used by the logging system. (See the Formatter documentation for more information on which keys are used by the logging system.) If you choose to use these attributes in logged messages, you need to exercise some care. In the above example, for instance, the Formatter has been set up with a format string which expects &#8216;clientip&#8217; and &#8216;user&#8217; in the attribute dictionary of the LogRecord. If these are missing, the message will not be logged because a string formatting exception will occur. So in this case, you always need to pass the extra dictionary with these keys. While this might be annoying, this feature is intended for use in specialized circumstances, such as multi-threaded servers where the same code executes in many contexts, and interesting conditions which arise are dependent on this context (such as remote client IP address and authenticated user name, in the above example). In such circumstances, it is likely that specialized Formatters would be used with particular Handlers.  Changed in version 2.5: extra was added.     logging.info(msg[, *args[, **kwargs]])\u00b6 Logs a message with level INFO on the root logger. The arguments are interpreted as for debug().    logging.warning(msg[, *args[, **kwargs]])\u00b6 Logs a message with level WARNING on the root logger. The arguments are interpreted as for debug().    logging.error(msg[, *args[, **kwargs]])\u00b6 Logs a message with level ERROR on the root logger. The arguments are interpreted as for debug().    logging.critical(msg[, *args[, **kwargs]])\u00b6 Logs a message with level CRITICAL on the root logger. The arguments are interpreted as for debug().    logging.exception(msg[, *args])\u00b6 Logs a message with level ERROR on the root logger. The arguments are interpreted as for debug(). Exception info is added to the logging message. This function should only be called from an exception handler.    logging.log(level, msg[, *args[, **kwargs]])\u00b6 Logs a message with level level on the root logger. The other arguments are interpreted as for debug(). PLEASE NOTE: The above module-level functions which delegate to the root logger should not be used in threads, in versions of Python earlier than 2.7.1 and 3.2, unless at least one handler has been added to the root logger before the threads are started. These convenience functions call basicConfig() to ensure that at least one handler is available; in earlier versions of Python, this can (under rare circumstances) lead to handlers being added multiple times to the root logger, which can in turn lead to multiple messages for the same event.     logging.disable(lvl)\u00b6 Provides an overriding level lvl for all loggers which takes precedence over the logger&#8217;s own level. When the need arises to temporarily throttle logging output down across the whole application, this function can be useful. Its effect is to disable all logging calls of severity lvl and below, so that if you call it with a value of INFO, then all INFO and DEBUG events would be discarded, whereas those of severity WARNING and above would be processed according to the logger&#8217;s effective level.    logging.addLevelName(lvl, levelName)\u00b6 Associates level lvl with text levelName in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a Formatter formats a message. This function can also be used to define your own levels. The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity. NOTE: If you are thinking of defining your own levels, please see the section on Custom Levels.     logging.getLevelName(lvl)\u00b6 Returns the textual representation of logging level lvl. If the level is one of the predefined levels CRITICAL, ERROR, WARNING, INFO or DEBUG then you get the corresponding string. If you have associated levels with names using addLevelName() then the name you have associated with lvl is returned. If a numeric value corresponding to one of the defined levels is passed in, the corresponding string representation is returned. Otherwise, the string &#8220;Level %s&#8221; % lvl is returned.    logging.makeLogRecord(attrdict)\u00b6 Creates and returns a new LogRecord instance whose attributes are defined by attrdict. This function is useful for taking a pickled LogRecord attribute dictionary, sent over a socket, and reconstituting it as a LogRecord instance at the receiving end.    logging.basicConfig([**kwargs])\u00b6 Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger. The functions debug(), info(), warning(), error() and critical() will call basicConfig() automatically if no handlers are defined for the root logger. This function does nothing if the root logger already has handlers configured for it.  Changed in version 2.4: Formerly, basicConfig() did not take any keyword arguments. PLEASE NOTE: This function should be called from the main thread before other threads are started. In versions of Python prior to 2.7.1 and 3.2, if this function is called from multiple threads, it is possible (in rare circumstances) that a handler will be added to the root logger more than once, leading to unexpected results such as messages being duplicated in the log. The following keyword arguments are supported.       Format Description    filename Specifies that a FileHandler be created, using the specified filename, rather than a StreamHandler.  filemode Specifies the mode to open the file, if filename is specified (if filemode is unspecified, it defaults to &#8216;a&#8217;).  format Use the specified format string for the handler.  datefmt Use the specified date\/time format.  level Set the root logger level to the specified level.  stream Use the specified stream to initialize the StreamHandler. Note that this argument is incompatible with &#8216;filename&#8217; - if both are present, &#8216;stream&#8217; is ignored.        logging.shutdown()\u00b6 Informs the logging system to perform an orderly shutdown by flushing and closing all handlers. This should be called at application exit and no further use of the logging system should be made after this call.    logging.setLoggerClass(klass)\u00b6 Tells the logging system to use the class klass when instantiating a logger. The class should define __init__() such that only a name argument is required, and the __init__() should call Logger.__init__(). This function is typically called before any loggers are instantiated by applications which need to use custom logger behavior.    15.7.10. Integration with the warnings module\u00b6 The captureWarnings() function can be used to integrate logging with the warnings module.   logging.captureWarnings(capture)\u00b6 This function is used to turn the capture of warnings by logging on and off. If capture is True, warnings issued by the warnings module will be redirected to the logging system. Specifically, a warning will be formatted using warnings.formatwarning() and the resulting string logged to a logger named &#8216;py.warnings&#8217; with a severity of WARNING. If capture is False, the redirection of warnings to the logging system will stop, and warnings will be redirected to their original destinations (i.e. those in effect before captureWarnings(True) was called).    See also  Module logging.config Configuration API for the logging module. Module logging.handlers Useful handlers included with the logging module. PEP 282 - A Logging System The proposal which described this feature for inclusion in the Python standard library. Original Python logging package This is the original source for the logging package.  The version of the package available from this site is suitable for use with Python 1.5.2, 2.1.x and 2.2.x, which do not include the logging package in the standard library."},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.addLevelName","title":"logging.addLevelName","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.basicConfig","title":"logging.basicConfig","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.captureWarnings","title":"logging.captureWarnings","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.critical","title":"logging.critical","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.debug","title":"logging.debug","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.disable","title":"logging.disable","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.error","title":"logging.error","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.exception","title":"logging.exception","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Filter","title":"logging.Filter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Filter.filter","title":"logging.Filter.filter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Formatter","title":"logging.Formatter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Formatter.format","title":"logging.Formatter.format","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Formatter.formatException","title":"logging.Formatter.formatException","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Formatter.formatTime","title":"logging.Formatter.formatTime","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.getLevelName","title":"logging.getLevelName","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.getLogger","title":"logging.getLogger","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.getLoggerClass","title":"logging.getLoggerClass","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.__init__","title":"logging.Handler.__init__","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.acquire","title":"logging.Handler.acquire","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.addFilter","title":"logging.Handler.addFilter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.close","title":"logging.Handler.close","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.createLock","title":"logging.Handler.createLock","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.emit","title":"logging.Handler.emit","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.filter","title":"logging.Handler.filter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.flush","title":"logging.Handler.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.format","title":"logging.Handler.format","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.handle","title":"logging.Handler.handle","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.handleError","title":"logging.Handler.handleError","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.release","title":"logging.Handler.release","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.removeFilter","title":"logging.Handler.removeFilter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.setFormatter","title":"logging.Handler.setFormatter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Handler.setLevel","title":"logging.Handler.setLevel","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.info","title":"logging.info","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.log","title":"logging.log","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger","title":"logging.Logger","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.addFilter","title":"logging.Logger.addFilter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.addHandler","title":"logging.Logger.addHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.critical","title":"logging.Logger.critical","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.debug","title":"logging.Logger.debug","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.error","title":"logging.Logger.error","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.exception","title":"logging.Logger.exception","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.filter","title":"logging.Logger.filter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.findCaller","title":"logging.Logger.findCaller","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.getChild","title":"logging.Logger.getChild","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.getEffectiveLevel","title":"logging.Logger.getEffectiveLevel","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.handle","title":"logging.Logger.handle","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.info","title":"logging.Logger.info","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.isEnabledFor","title":"logging.Logger.isEnabledFor","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.log","title":"logging.Logger.log","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.makeRecord","title":"logging.Logger.makeRecord","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.removeFilter","title":"logging.Logger.removeFilter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.removeHandler","title":"logging.Logger.removeHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.setLevel","title":"logging.Logger.setLevel","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.Logger.warning","title":"logging.Logger.warning","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.LoggerAdapter","title":"logging.LoggerAdapter","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.LoggerAdapter.process","title":"logging.LoggerAdapter.process","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.LogRecord","title":"logging.LogRecord","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.LogRecord.getMessage","title":"logging.LogRecord.getMessage","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.makeLogRecord","title":"logging.makeLogRecord","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.setLoggerClass","title":"logging.setLoggerClass","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.shutdown","title":"logging.shutdown","description":""},{"url":"http:\/\/docs.python.org\/library\/logging.html#logging.warning","title":"logging.warning","description":""},{"url":"http:\/\/docs.python.org\/library\/dummy_thread.html","title":"dummy_thread","description":"16.5. dummy_thread &#8212; Drop-in replacement for the thread module\u00b6  Note The dummy_thread module has been renamed to _dummy_thread in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0; however, you should consider using the high-lever dummy_threading module instead.  Source code: Lib\/dummy_thread.py  This module provides a duplicate interface to the thread module.  It is meant to be imported when the thread module is not provided on a platform. Suggested usage is: try:     import thread as _thread except ImportError:     import dummy_thread as _thread   Be careful to not use this module where deadlock might occur from a thread being created that blocks waiting for another thread to be created.  This  often occurs with blocking I\/O."},{"url":"http:\/\/docs.python.org\/library\/ctypes.html","title":"ctypes","description":"15.17. ctypes &#8212; A foreign function library for Python\u00b6  New in version 2.5. ctypes is a foreign function library for Python.  It provides C compatible data types, and allows calling functions in DLLs or shared libraries.  It can be used to wrap these libraries in pure Python.  15.17.1. ctypes tutorial\u00b6 Note: The code samples in this tutorial use doctest to make sure that they actually work.  Since some code samples behave differently under Linux, Windows, or Mac OS X, they contain doctest directives in comments. Note: Some code samples reference the ctypes c_int type. This type is an alias for the c_long type on 32-bit systems.  So, you should not be confused if c_long is printed if you would expect c_int &#8212; they are actually the same type.  15.17.1.1. Loading dynamic link libraries\u00b6 ctypes exports the cdll, and on Windows windll and oledll objects, for loading dynamic link libraries. You load libraries by accessing them as attributes of these objects. cdll loads libraries which export functions using the standard cdecl calling convention, while windll libraries call functions using the stdcall calling convention. oledll also uses the stdcall calling convention, and assumes the functions return a Windows HRESULT error code. The error code is used to automatically raise a WindowsError exception when the function call fails. Here are some examples for Windows. Note that msvcrt is the MS standard C library containing most standard C functions, and uses the cdecl calling convention: >>> from ctypes import * >>> print windll.kernel32 # doctest: +WINDOWS <WinDLL &#39;kernel32&#39;, handle ... at ...> >>> print cdll.msvcrt # doctest: +WINDOWS <CDLL &#39;msvcrt&#39;, handle ... at ...> >>> libc = cdll.msvcrt # doctest: +WINDOWS >>>   Windows appends the usual .dll file suffix automatically. On Linux, it is required to specify the filename including the extension to load a library, so attribute access can not be used to load libraries. Either the LoadLibrary() method of the dll loaders should be used, or you should load the library by creating an instance of CDLL by calling the constructor: >>> cdll.LoadLibrary(\"libc.so.6\") # doctest: +LINUX <CDLL &#39;libc.so.6&#39;, handle ... at ...> >>> libc = CDLL(\"libc.so.6\")     # doctest: +LINUX >>> libc                         # doctest: +LINUX <CDLL &#39;libc.so.6&#39;, handle ... at ...> >>>     15.17.1.2. Accessing functions from loaded dlls\u00b6 Functions are accessed as attributes of dll objects: >>> from ctypes import * >>> libc.printf <_FuncPtr object at 0x...> >>> print windll.kernel32.GetModuleHandleA # doctest: +WINDOWS <_FuncPtr object at 0x...> >>> print windll.kernel32.MyOwnFunction # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"ctypes.py\", line 239, in __getattr__     func = _StdcallFuncPtr(name, self) AttributeError: function &#39;MyOwnFunction&#39; not found >>>   Note that win32 system dlls like kernel32 and user32 often export ANSI as well as UNICODE versions of a function. The UNICODE version is exported with an W appended to the name, while the ANSI version is exported with an A appended to the name. The win32 GetModuleHandle function, which returns a module handle for a given module name, has the following C prototype, and a macro is used to expose one of them as GetModuleHandle depending on whether UNICODE is defined or not: \/* ANSI version *\/ HMODULE GetModuleHandleA(LPCSTR lpModuleName); \/* UNICODE version *\/ HMODULE GetModuleHandleW(LPCWSTR lpModuleName);  windll does not try to select one of them by magic, you must access the version you need by specifying GetModuleHandleA or GetModuleHandleW explicitly, and then call it with strings or unicode strings respectively. Sometimes, dlls export functions with names which aren&#8217;t valid Python identifiers, like \"??2@YAPAXI@Z\". In this case you have to use getattr() to retrieve the function: >>> getattr(cdll.msvcrt, \"??2@YAPAXI@Z\") # doctest: +WINDOWS <_FuncPtr object at 0x...> >>>   On Windows, some dlls export functions not by name but by ordinal. These functions can be accessed by indexing the dll object with the ordinal number: >>> cdll.kernel32[1] # doctest: +WINDOWS <_FuncPtr object at 0x...> >>> cdll.kernel32[0] # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"ctypes.py\", line 310, in __getitem__     func = _StdcallFuncPtr(name, self) AttributeError: function ordinal 0 not found >>>     15.17.1.3. Calling functions\u00b6 You can call these functions like any other Python callable. This example uses the time() function, which returns system time in seconds since the Unix epoch, and the GetModuleHandleA() function, which returns a win32 module handle. This example calls both functions with a NULL pointer (None should be used as the NULL pointer): >>> print libc.time(None) # doctest: +SKIP 1150640792 >>> print hex(windll.kernel32.GetModuleHandleA(None)) # doctest: +WINDOWS 0x1d000000 >>>   ctypes tries to protect you from calling functions with the wrong number of arguments or the wrong calling convention.  Unfortunately this only works on Windows.  It does this by examining the stack after the function returns, so although an error is raised the function has been called: >>> windll.kernel32.GetModuleHandleA() # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: Procedure probably called with not enough arguments (4 bytes missing) >>> windll.kernel32.GetModuleHandleA(0, 0) # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: Procedure probably called with too many arguments (4 bytes in excess) >>>   The same exception is raised when you call an stdcall function with the cdecl calling convention, or vice versa: >>> cdll.kernel32.GetModuleHandleA(None) # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: Procedure probably called with not enough arguments (4 bytes missing) >>>  >>> windll.msvcrt.printf(\"spam\") # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: Procedure probably called with too many arguments (4 bytes in excess) >>>   To find out the correct calling convention you have to look into the C header file or the documentation for the function you want to call. On Windows, ctypes uses win32 structured exception handling to prevent crashes from general protection faults when functions are called with invalid argument values: >>> windll.kernel32.GetModuleHandleA(32) # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ? WindowsError: exception: access violation reading 0x00000020 >>>   There are, however, enough ways to crash Python with ctypes, so you should be careful anyway. None, integers, longs, byte strings and unicode strings are the only native Python objects that can directly be used as parameters in these function calls. None is passed as a C NULL pointer, byte strings and unicode strings are passed as pointer to the memory block that contains their data (char * or wchar_t *).  Python integers and Python longs are passed as the platforms default C int type, their value is masked to fit into the C type. Before we move on calling functions with other parameter types, we have to learn more about ctypes data types.   15.17.1.4. Fundamental data types\u00b6 ctypes defines a number of primitive C compatible data types :        ctypes type C type Python type    c_bool _Bool bool (1)  c_char char 1-character string  c_wchar wchar_t 1-character unicode string  c_byte char int\/long  c_ubyte unsigned char int\/long  c_short short int\/long  c_ushort unsigned short int\/long  c_int int int\/long  c_uint unsigned int int\/long  c_long long int\/long  c_ulong unsigned long int\/long  c_longlong __int64 or long long int\/long  c_ulonglong unsigned __int64 or unsigned long long int\/long  c_float float float  c_double double float  c_longdouble long double float  c_char_p char * (NUL terminated) string or None  c_wchar_p wchar_t * (NUL terminated) unicode or None  c_void_p void * int\/long or None     The constructor accepts any object with a truth value.  All these types can be created by calling them with an optional initializer of the correct type and value: >>> c_int() c_long(0) >>> c_char_p(\"Hello, World\") c_char_p(&#39;Hello, World&#39;) >>> c_ushort(-3) c_ushort(65533) >>>   Since these types are mutable, their value can also be changed afterwards: >>> i = c_int(42) >>> print i c_long(42) >>> print i.value 42 >>> i.value = -99 >>> print i.value -99 >>>   Assigning a new value to instances of the pointer types c_char_p, c_wchar_p, and c_void_p changes the memory location they point to, not the contents of the memory block (of course not, because Python strings are immutable): >>> s = \"Hello, World\" >>> c_s = c_char_p(s) >>> print c_s c_char_p(&#39;Hello, World&#39;) >>> c_s.value = \"Hi, there\" >>> print c_s c_char_p(&#39;Hi, there&#39;) >>> print s                 # first string is unchanged Hello, World >>>   You should be careful, however, not to pass them to functions expecting pointers to mutable memory. If you need mutable memory blocks, ctypes has a create_string_buffer() function which creates these in various ways.  The current memory block contents can be accessed (or changed) with the raw property; if you want to access it as NUL terminated string, use the value property: >>> from ctypes import * >>> p = create_string_buffer(3)      # create a 3 byte buffer, initialized to NUL bytes >>> print sizeof(p), repr(p.raw) 3 &#39;\\x00\\x00\\x00&#39; >>> p = create_string_buffer(\"Hello\")      # create a buffer containing a NUL terminated string >>> print sizeof(p), repr(p.raw) 6 &#39;Hello\\x00&#39; >>> print repr(p.value) &#39;Hello&#39; >>> p = create_string_buffer(\"Hello\", 10)  # create a 10 byte buffer >>> print sizeof(p), repr(p.raw) 10 &#39;Hello\\x00\\x00\\x00\\x00\\x00&#39; >>> p.value = \"Hi\" >>> print sizeof(p), repr(p.raw) 10 &#39;Hi\\x00lo\\x00\\x00\\x00\\x00\\x00&#39; >>>   The create_string_buffer() function replaces the c_buffer() function (which is still available as an alias), as well as the c_string() function from earlier ctypes releases.  To create a mutable memory block containing unicode characters of the C type wchar_t use the create_unicode_buffer() function.   15.17.1.5. Calling functions, continued\u00b6 Note that printf prints to the real standard output channel, not to sys.stdout, so these examples will only work at the console prompt, not from within IDLE or PythonWin: >>> printf = libc.printf >>> printf(\"Hello, %s\\n\", \"World!\") Hello, World! 14 >>> printf(\"Hello, %S\\n\", u\"World!\") Hello, World! 14 >>> printf(\"%d bottles of beer\\n\", 42) 42 bottles of beer 19 >>> printf(\"%f bottles of beer\\n\", 42.5) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ArgumentError: argument 2: exceptions.TypeError: Don&#39;t know how to convert parameter 2 >>>   As has been mentioned before, all Python types except integers, strings, and unicode strings have to be wrapped in their corresponding ctypes type, so that they can be converted to the required C data type: >>> printf(\"An int %d, a double %f\\n\", 1234, c_double(3.14)) An int 1234, a double 3.140000 31 >>>     15.17.1.6. Calling functions with your own custom data types\u00b6 You can also customize ctypes argument conversion to allow instances of your own classes be used as function arguments.  ctypes looks for an _as_parameter_ attribute and uses this as the function argument.  Of course, it must be one of integer, string, or unicode: >>> class Bottles(object): ...     def __init__(self, number): ...         self._as_parameter_ = number ... >>> bottles = Bottles(42) >>> printf(\"%d bottles of beer\\n\", bottles) 42 bottles of beer 19 >>>   If you don&#8217;t want to store the instance&#8217;s data in the _as_parameter_ instance variable, you could define a property() which makes the data available.   15.17.1.7. Specifying the required argument types (function prototypes)\u00b6 It is possible to specify the required argument types of functions exported from DLLs by setting the argtypes attribute. argtypes must be a sequence of C data types (the printf function is probably not a good example here, because it takes a variable number and different types of parameters depending on the format string, on the other hand this is quite handy to experiment with this feature): >>> printf.argtypes = [c_char_p, c_char_p, c_int, c_double] >>> printf(\"String &#39;%s&#39;, Int %d, Double %f\\n\", \"Hi\", 10, 2.2) String &#39;Hi&#39;, Int 10, Double 2.200000 37 >>>   Specifying a format protects against incompatible argument types (just as a prototype for a C function), and tries to convert the arguments to valid types: >>> printf(\"%d %d %d\", 1, 2, 3) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ArgumentError: argument 2: exceptions.TypeError: wrong type >>> printf(\"%s %d %f\\n\", \"X\", 2, 3) X 2 3.000000 13 >>>   If you have defined your own classes which you pass to function calls, you have to implement a from_param() class method for them to be able to use them in the argtypes sequence. The from_param() class method receives the Python object passed to the function call, it should do a typecheck or whatever is needed to make sure this object is acceptable, and then return the object itself, its _as_parameter_ attribute, or whatever you want to pass as the C function argument in this case. Again, the result should be an integer, string, unicode, a ctypes instance, or an object with an _as_parameter_ attribute.   15.17.1.8. Return types\u00b6 By default functions are assumed to return the C int type.  Other return types can be specified by setting the restype attribute of the function object. Here is a more advanced example, it uses the strchr function, which expects a string pointer and a char, and returns a pointer to a string: >>> strchr = libc.strchr >>> strchr(\"abcdef\", ord(\"d\")) # doctest: +SKIP 8059983 >>> strchr.restype = c_char_p # c_char_p is a pointer to a string >>> strchr(\"abcdef\", ord(\"d\")) &#39;def&#39; >>> print strchr(\"abcdef\", ord(\"x\")) None >>>   If you want to avoid the ord(\"x\") calls above, you can set the argtypes attribute, and the second argument will be converted from a single character Python string into a C char: >>> strchr.restype = c_char_p >>> strchr.argtypes = [c_char_p, c_char] >>> strchr(\"abcdef\", \"d\") &#39;def&#39; >>> strchr(\"abcdef\", \"def\") Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ArgumentError: argument 2: exceptions.TypeError: one character string expected >>> print strchr(\"abcdef\", \"x\") None >>> strchr(\"abcdef\", \"d\") &#39;def&#39; >>>   You can also use a callable Python object (a function or a class for example) as the restype attribute, if the foreign function returns an integer.  The callable will be called with the integer the C function returns, and the result of this call will be used as the result of your function call. This is useful to check for error return values and automatically raise an exception: >>> GetModuleHandle = windll.kernel32.GetModuleHandleA # doctest: +WINDOWS >>> def ValidHandle(value): ...     if value == 0: ...         raise WinError() ...     return value ... >>> >>> GetModuleHandle.restype = ValidHandle # doctest: +WINDOWS >>> GetModuleHandle(None) # doctest: +WINDOWS 486539264 >>> GetModuleHandle(\"something silly\") # doctest: +WINDOWS Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"<stdin>\", line 3, in ValidHandle WindowsError: [Errno 126] The specified module could not be found. >>>   WinError is a function which will call Windows FormatMessage() api to get the string representation of an error code, and returns an exception. WinError takes an optional error code parameter, if no one is used, it calls GetLastError() to retrieve it. Please note that a much more powerful error checking mechanism is available through the errcheck attribute; see the reference manual for details.   15.17.1.9. Passing pointers (or: passing parameters by reference)\u00b6 Sometimes a C api function expects a pointer to a data type as parameter, probably to write into the corresponding location, or if the data is too large to be passed by value. This is also known as passing parameters by reference. ctypes exports the byref() function which is used to pass parameters by reference.  The same effect can be achieved with the pointer() function, although pointer() does a lot more work since it constructs a real pointer object, so it is faster to use byref() if you don&#8217;t need the pointer object in Python itself: >>> i = c_int() >>> f = c_float() >>> s = create_string_buffer(&#39;\\000&#39; * 32) >>> print i.value, f.value, repr(s.value) 0 0.0 &#39;&#39; >>> libc.sscanf(\"1 3.14 Hello\", \"%d %f %s\", ...             byref(i), byref(f), s) 3 >>> print i.value, f.value, repr(s.value) 1 3.1400001049 &#39;Hello&#39; >>>     15.17.1.10. Structures and unions\u00b6 Structures and unions must derive from the Structure and Union base classes which are defined in the ctypes module. Each subclass must define a _fields_ attribute.  _fields_ must be a list of 2-tuples, containing a field name and a field type. The field type must be a ctypes type like c_int, or any other derived ctypes type: structure, union, array, pointer. Here is a simple example of a POINT structure, which contains two integers named x and y, and also shows how to initialize a structure in the constructor: >>> from ctypes import * >>> class POINT(Structure): ...     _fields_ = [(\"x\", c_int), ...                 (\"y\", c_int)] ... >>> point = POINT(10, 20) >>> print point.x, point.y 10 20 >>> point = POINT(y=5) >>> print point.x, point.y 0 5 >>> POINT(1, 2, 3) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: too many initializers >>>   You can, however, build much more complicated structures. Structures can itself contain other structures by using a structure as a field type. Here is a RECT structure which contains two POINTs named upperleft and lowerright: >>> class RECT(Structure): ...     _fields_ = [(\"upperleft\", POINT), ...                 (\"lowerright\", POINT)] ... >>> rc = RECT(point) >>> print rc.upperleft.x, rc.upperleft.y 0 5 >>> print rc.lowerright.x, rc.lowerright.y 0 0 >>>   Nested structures can also be initialized in the constructor in several ways: >>> r = RECT(POINT(1, 2), POINT(3, 4)) >>> r = RECT((1, 2), (3, 4))   Field descriptors can be retrieved from the class, they are useful for debugging because they can provide useful information: >>> print POINT.x <Field type=c_long, ofs=0, size=4> >>> print POINT.y <Field type=c_long, ofs=4, size=4> >>>     15.17.1.11. Structure\/union alignment and byte order\u00b6 By default, Structure and Union fields are aligned in the same way the C compiler does it. It is possible to override this behavior be specifying a _pack_ class attribute in the subclass definition. This must be set to a positive integer and specifies the maximum alignment for the fields. This is what #pragma pack(n) also does in MSVC. ctypes uses the native byte order for Structures and Unions.  To build structures with non-native byte order, you can use one of the BigEndianStructure, LittleEndianStructure, BigEndianUnion, and LittleEndianUnion base classes.  These classes cannot contain pointer fields.   15.17.1.12. Bit fields in structures and unions\u00b6 It is possible to create structures and unions containing bit fields. Bit fields are only possible for integer fields, the bit width is specified as the third item in the _fields_ tuples: >>> class Int(Structure): ...     _fields_ = [(\"first_16\", c_int, 16), ...                 (\"second_16\", c_int, 16)] ... >>> print Int.first_16 <Field type=c_long, ofs=0:0, bits=16> >>> print Int.second_16 <Field type=c_long, ofs=0:16, bits=16> >>>     15.17.1.13. Arrays\u00b6 Arrays are sequences, containing a fixed number of instances of the same type. The recommended way to create array types is by multiplying a data type with a positive integer: TenPointsArrayType = POINT * 10   Here is an example of an somewhat artificial data type, a structure containing 4 POINTs among other stuff: >>> from ctypes import * >>> class POINT(Structure): ...    _fields_ = (\"x\", c_int), (\"y\", c_int) ... >>> class MyStruct(Structure): ...    _fields_ = [(\"a\", c_int), ...                (\"b\", c_float), ...                (\"point_array\", POINT * 4)] >>> >>> print len(MyStruct().point_array) 4 >>>   Instances are created in the usual way, by calling the class: arr = TenPointsArrayType() for pt in arr:     print pt.x, pt.y   The above code print a series of 0 0 lines, because the array contents is initialized to zeros. Initializers of the correct type can also be specified: >>> from ctypes import * >>> TenIntegers = c_int * 10 >>> ii = TenIntegers(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) >>> print ii <c_long_Array_10 object at 0x...> >>> for i in ii: print i, ... 1 2 3 4 5 6 7 8 9 10 >>>     15.17.1.14. Pointers\u00b6 Pointer instances are created by calling the pointer() function on a ctypes type: >>> from ctypes import * >>> i = c_int(42) >>> pi = pointer(i) >>>   Pointer instances have a contents attribute which returns the object to which the pointer points, the i object above: >>> pi.contents c_long(42) >>>   Note that ctypes does not have OOR (original object return), it constructs a new, equivalent object each time you retrieve an attribute: >>> pi.contents is i False >>> pi.contents is pi.contents False >>>   Assigning another c_int instance to the pointer&#8217;s contents attribute would cause the pointer to point to the memory location where this is stored: >>> i = c_int(99) >>> pi.contents = i >>> pi.contents c_long(99) >>>   Pointer instances can also be indexed with integers: >>> pi[0] 99 >>>   Assigning to an integer index changes the pointed to value: >>> print i c_long(99) >>> pi[0] = 22 >>> print i c_long(22) >>>   It is also possible to use indexes different from 0, but you must know what you&#8217;re doing, just as in C: You can access or change arbitrary memory locations. Generally you only use this feature if you receive a pointer from a C function, and you know that the pointer actually points to an array instead of a single item. Behind the scenes, the pointer() function does more than simply create pointer instances, it has to create pointer types first.  This is done with the POINTER() function, which accepts any ctypes type, and returns a new type: >>> PI = POINTER(c_int) >>> PI <class &#39;ctypes.LP_c_long&#39;> >>> PI(42) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: expected c_long instead of int >>> PI(c_int(42)) <ctypes.LP_c_long object at 0x...> >>>   Calling the pointer type without an argument creates a NULL pointer. NULL pointers have a False boolean value: >>> null_ptr = POINTER(c_int)() >>> print bool(null_ptr) False >>>   ctypes checks for NULL when dereferencing pointers (but dereferencing invalid non-NULL pointers would crash Python): >>> null_ptr[0] Traceback (most recent call last):     .... ValueError: NULL pointer access >>>  >>> null_ptr[0] = 1234 Traceback (most recent call last):     .... ValueError: NULL pointer access >>>     15.17.1.15. Type conversions\u00b6 Usually, ctypes does strict type checking.  This means, if you have POINTER(c_int) in the argtypes list of a function or as the type of a member field in a structure definition, only instances of exactly the same type are accepted.  There are some exceptions to this rule, where ctypes accepts other objects.  For example, you can pass compatible array instances instead of pointer types.  So, for POINTER(c_int), ctypes accepts an array of c_int: >>> class Bar(Structure): ...     _fields_ = [(\"count\", c_int), (\"values\", POINTER(c_int))] ... >>> bar = Bar() >>> bar.values = (c_int * 3)(1, 2, 3) >>> bar.count = 3 >>> for i in range(bar.count): ...     print bar.values[i] ... 1 2 3 >>>   To set a POINTER type field to NULL, you can assign None: >>> bar.values = None >>>   Sometimes you have instances of incompatible types.  In C, you can cast one type into another type.  ctypes provides a cast() function which can be used in the same way.  The Bar structure defined above accepts POINTER(c_int) pointers or c_int arrays for its values field, but not instances of other types: >>> bar.values = (c_byte * 4)() Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: incompatible types, c_byte_Array_4 instance instead of LP_c_long instance >>>   For these cases, the cast() function is handy. The cast() function can be used to cast a ctypes instance into a pointer to a different ctypes data type.  cast() takes two parameters, a ctypes object that is or can be converted to a pointer of some kind, and a ctypes pointer type.  It returns an instance of the second argument, which references the same memory block as the first argument: >>> a = (c_byte * 4)() >>> cast(a, POINTER(c_int)) <ctypes.LP_c_long object at ...> >>>   So, cast() can be used to assign to the values field of Bar the structure: >>> bar = Bar() >>> bar.values = cast((c_byte * 4)(), POINTER(c_int)) >>> print bar.values[0] 0 >>>     15.17.1.16. Incomplete Types\u00b6 Incomplete Types are structures, unions or arrays whose members are not yet specified. In C, they are specified by forward declarations, which are defined later: struct cell; \/* forward declaration *\/  struct cell {     char *name;     struct cell *next; };  The straightforward translation into ctypes code would be this, but it does not work: >>> class cell(Structure): ...     _fields_ = [(\"name\", c_char_p), ...                 (\"next\", POINTER(cell))] ... Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \"<stdin>\", line 2, in cell NameError: name &#39;cell&#39; is not defined >>>   because the new class cell is not available in the class statement itself. In ctypes, we can define the cell class and set the _fields_ attribute later, after the class statement: >>> from ctypes import * >>> class cell(Structure): ...     pass ... >>> cell._fields_ = [(\"name\", c_char_p), ...                  (\"next\", POINTER(cell))] >>>   Lets try it. We create two instances of cell, and let them point to each other, and finally follow the pointer chain a few times: >>> c1 = cell() >>> c1.name = \"foo\" >>> c2 = cell() >>> c2.name = \"bar\" >>> c1.next = pointer(c2) >>> c2.next = pointer(c1) >>> p = c1 >>> for i in range(8): ...     print p.name, ...     p = p.next[0] ... foo bar foo bar foo bar foo bar >>>     15.17.1.17. Callback functions\u00b6 ctypes allows to create C callable function pointers from Python callables. These are sometimes called callback functions. First, you must create a class for the callback function, the class knows the calling convention, the return type, and the number and types of arguments this function will receive. The CFUNCTYPE factory function creates types for callback functions using the normal cdecl calling convention, and, on Windows, the WINFUNCTYPE factory function creates types for callback functions using the stdcall calling convention. Both of these factory functions are called with the result type as first argument, and the callback functions expected argument types as the remaining arguments. I will present an example here which uses the standard C library&#8217;s qsort() function, this is used to sort items with the help of a callback function. qsort() will be used to sort an array of integers: >>> IntArray5 = c_int * 5 >>> ia = IntArray5(5, 1, 7, 33, 99) >>> qsort = libc.qsort >>> qsort.restype = None >>>   qsort() must be called with a pointer to the data to sort, the number of items in the data array, the size of one item, and a pointer to the comparison function, the callback. The callback will then be called with two pointers to items, and it must return a negative integer if the first item is smaller than the second, a zero if they are equal, and a positive integer else. So our callback function receives pointers to integers, and must return an integer. First we create the type for the callback function: >>> CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int)) >>>   For the first implementation of the callback function, we simply print the arguments we get, and return 0 (incremental development ;-): >>> def py_cmp_func(a, b): ...     print \"py_cmp_func\", a, b ...     return 0 ... >>>   Create the C callable callback: >>> cmp_func = CMPFUNC(py_cmp_func) >>>   And we&#8217;re ready to go: >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> py_cmp_func <ctypes.LP_c_long object at 0x00...> <ctypes.LP_c_long object at 0x00...> >>>   We know how to access the contents of a pointer, so lets redefine our callback: >>> def py_cmp_func(a, b): ...     print \"py_cmp_func\", a[0], b[0] ...     return 0 ... >>> cmp_func = CMPFUNC(py_cmp_func) >>>   Here is what we get on Windows: >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +WINDOWS py_cmp_func 7 1 py_cmp_func 33 1 py_cmp_func 99 1 py_cmp_func 5 1 py_cmp_func 7 5 py_cmp_func 33 5 py_cmp_func 99 5 py_cmp_func 7 99 py_cmp_func 33 99 py_cmp_func 7 33 >>>   It is funny to see that on linux the sort function seems to work much more efficiently, it is doing less comparisons: >>> qsort(ia, len(ia), sizeof(c_int), cmp_func) # doctest: +LINUX py_cmp_func 5 1 py_cmp_func 33 99 py_cmp_func 7 33 py_cmp_func 5 7 py_cmp_func 1 7 >>>   Ah, we&#8217;re nearly done! The last step is to actually compare the two items and return a useful result: >>> def py_cmp_func(a, b): ...     print \"py_cmp_func\", a[0], b[0] ...     return a[0] - b[0] ... >>>   Final run on Windows: >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +WINDOWS py_cmp_func 33 7 py_cmp_func 99 33 py_cmp_func 5 99 py_cmp_func 1 99 py_cmp_func 33 7 py_cmp_func 1 33 py_cmp_func 5 33 py_cmp_func 5 7 py_cmp_func 1 7 py_cmp_func 5 1 >>>   and on Linux: >>> qsort(ia, len(ia), sizeof(c_int), CMPFUNC(py_cmp_func)) # doctest: +LINUX py_cmp_func 5 1 py_cmp_func 33 99 py_cmp_func 7 33 py_cmp_func 1 7 py_cmp_func 5 7 >>>   It is quite interesting to see that the Windows qsort() function needs more comparisons than the linux version! As we can easily check, our array is sorted now: >>> for i in ia: print i, ... 1 5 7 33 99 >>>   Important note for callback functions: Make sure you keep references to CFUNCTYPE objects as long as they are used from C code. ctypes doesn&#8217;t, and if you don&#8217;t, they may be garbage collected, crashing your program when a callback is made.   15.17.1.18. Accessing values exported from dlls\u00b6 Some shared libraries not only export functions, they also export variables. An example in the Python library itself is the Py_OptimizeFlag, an integer set to 0, 1, or 2, depending on the -O or -OO flag given on startup. ctypes can access values like this with the in_dll() class methods of the type.  pythonapi is a predefined symbol giving access to the Python C api: >>> opt_flag = c_int.in_dll(pythonapi, \"Py_OptimizeFlag\") >>> print opt_flag c_long(0) >>>   If the interpreter would have been started with -O, the sample would have printed c_long(1), or c_long(2) if -OO would have been specified. An extended example which also demonstrates the use of pointers accesses the PyImport_FrozenModules pointer exported by Python. Quoting the Python docs: This pointer is initialized to point to an array of &#8220;struct _frozen&#8221; records, terminated by one whose members are all NULL or zero. When a frozen module is imported, it is searched in this table. Third-party code could play tricks with this to provide a dynamically created collection of frozen modules. So manipulating this pointer could even prove useful. To restrict the example size, we show only how this table can be read with ctypes: >>> from ctypes import * >>> >>> class struct_frozen(Structure): ...     _fields_ = [(\"name\", c_char_p), ...                 (\"code\", POINTER(c_ubyte)), ...                 (\"size\", c_int)] ... >>>   We have defined the struct _frozen data type, so we can get the pointer to the table: >>> FrozenTable = POINTER(struct_frozen) >>> table = FrozenTable.in_dll(pythonapi, \"PyImport_FrozenModules\") >>>   Since table is a pointer to the array of struct_frozen records, we can iterate over it, but we just have to make sure that our loop terminates, because pointers have no size. Sooner or later it would probably crash with an access violation or whatever, so it&#8217;s better to break out of the loop when we hit the NULL entry: >>> for item in table: ...    print item.name, item.size ...    if item.name is None: ...        break ... __hello__ 104 __phello__ -104 __phello__.spam 104 None 0 >>>   The fact that standard Python has a frozen module and a frozen package (indicated by the negative size member) is not well known, it is only used for testing. Try it out with import __hello__ for example.   15.17.1.19. Surprises\u00b6 There are some edges in ctypes where you may be expect something else than what actually happens. Consider the following example: >>> from ctypes import * >>> class POINT(Structure): ...     _fields_ = (\"x\", c_int), (\"y\", c_int) ... >>> class RECT(Structure): ...     _fields_ = (\"a\", POINT), (\"b\", POINT) ... >>> p1 = POINT(1, 2) >>> p2 = POINT(3, 4) >>> rc = RECT(p1, p2) >>> print rc.a.x, rc.a.y, rc.b.x, rc.b.y 1 2 3 4 >>> # now swap the two points >>> rc.a, rc.b = rc.b, rc.a >>> print rc.a.x, rc.a.y, rc.b.x, rc.b.y 3 4 3 4 >>>   Hm. We certainly expected the last statement to print 3 4 1 2. What happened? Here are the steps of the rc.a, rc.b = rc.b, rc.a line above: >>> temp0, temp1 = rc.b, rc.a >>> rc.a = temp0 >>> rc.b = temp1 >>>   Note that temp0 and temp1 are objects still using the internal buffer of the rc object above. So executing rc.a = temp0 copies the buffer contents of temp0 into rc &#8216;s buffer.  This, in turn, changes the contents of temp1. So, the last assignment rc.b = temp1, doesn&#8217;t have the expected effect. Keep in mind that retrieving sub-objects from Structure, Unions, and Arrays doesn&#8217;t copy the sub-object, instead it retrieves a wrapper object accessing the root-object&#8217;s underlying buffer. Another example that may behave different from what one would expect is this: >>> s = c_char_p() >>> s.value = \"abc def ghi\" >>> s.value &#39;abc def ghi&#39; >>> s.value is s.value False >>>   Why is it printing False?  ctypes instances are objects containing a memory block plus some descriptors accessing the contents of the memory. Storing a Python object in the memory block does not store the object itself, instead the contents of the object is stored.  Accessing the contents again constructs a new Python object each time!   15.17.1.20. Variable-sized data types\u00b6 ctypes provides some support for variable-sized arrays and structures. The resize() function can be used to resize the memory buffer of an existing ctypes object.  The function takes the object as first argument, and the requested size in bytes as the second argument.  The memory block cannot be made smaller than the natural memory block specified by the objects type, a ValueError is raised if this is tried: >>> short_array = (c_short * 4)() >>> print sizeof(short_array) 8 >>> resize(short_array, 4) Traceback (most recent call last):     ... ValueError: minimum size is 8 >>> resize(short_array, 32) >>> sizeof(short_array) 32 >>> sizeof(type(short_array)) 8 >>>   This is nice and fine, but how would one access the additional elements contained in this array?  Since the type still only knows about 4 elements, we get errors accessing other elements: >>> short_array[:] [0, 0, 0, 0] >>> short_array[7] Traceback (most recent call last):     ... IndexError: invalid index >>>   Another way to use variable-sized data types with ctypes is to use the dynamic nature of Python, and (re-)define the data type after the required size is already known, on a case by case basis.    15.17.2. ctypes reference\u00b6  15.17.2.1. Finding shared libraries\u00b6 When programming in a compiled language, shared libraries are accessed when compiling\/linking a program, and when the program is run. The purpose of the find_library() function is to locate a library in a way similar to what the compiler does (on platforms with several versions of a shared library the most recent should be loaded), while the ctypes library loaders act like when a program is run, and call the runtime loader directly. The ctypes.util module provides a function which can help to determine the library to load.   ctypes.util.find_library(name) Try to find a library and return a pathname.  name is the library name without any prefix like lib, suffix like .so, .dylib or version number (this is the form used for the posix linker option -l).  If no library can be found, returns None.  The exact functionality is system dependent. On Linux, find_library() tries to run external programs (\/sbin\/ldconfig, gcc, and objdump) to find the library file.  It returns the filename of the library file.  Here are some examples: >>> from ctypes.util import find_library >>> find_library(\"m\") &#39;libm.so.6&#39; >>> find_library(\"c\") &#39;libc.so.6&#39; >>> find_library(\"bz2\") &#39;libbz2.so.1.0&#39; >>>   On OS X, find_library() tries several predefined naming schemes and paths to locate the library, and returns a full pathname if successful: >>> from ctypes.util import find_library >>> find_library(\"c\") &#39;\/usr\/lib\/libc.dylib&#39; >>> find_library(\"m\") &#39;\/usr\/lib\/libm.dylib&#39; >>> find_library(\"bz2\") &#39;\/usr\/lib\/libbz2.dylib&#39; >>> find_library(\"AGL\") &#39;\/System\/Library\/Frameworks\/AGL.framework\/AGL&#39; >>>   On Windows, find_library() searches along the system search path, and returns the full pathname, but since there is no predefined naming scheme a call like find_library(\"c\") will fail and return None. If wrapping a shared library with ctypes, it may be better to determine the shared library name at development type, and hardcode that into the wrapper module instead of using find_library() to locate the library at runtime.   15.17.2.2. Loading shared libraries\u00b6 There are several ways to loaded shared libraries into the Python process.  One way is to instantiate one of the following classes:   class ctypes.CDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\u00b6 Instances of this class represent loaded shared libraries. Functions in these libraries use the standard C calling convention, and are assumed to return int.    class ctypes.OleDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\u00b6 Windows only: Instances of this class represent loaded shared libraries, functions in these libraries use the stdcall calling convention, and are assumed to return the windows specific HRESULT code.  HRESULT values contain information specifying whether the function call failed or succeeded, together with additional error code.  If the return value signals a failure, an WindowsError is automatically raised.    class ctypes.WinDLL(name, mode=DEFAULT_MODE, handle=None, use_errno=False, use_last_error=False)\u00b6 Windows only: Instances of this class represent loaded shared libraries, functions in these libraries use the stdcall calling convention, and are assumed to return int by default. On Windows CE only the standard calling convention is used, for convenience the WinDLL and OleDLL use the standard calling convention on this platform.   The Python global interpreter lock is released before calling any function exported by these libraries, and reacquired afterwards.   class ctypes.PyDLL(name, mode=DEFAULT_MODE, handle=None)\u00b6 Instances of this class behave like CDLL instances, except that the Python GIL is not released during the function call, and after the function execution the Python error flag is checked. If the error flag is set, a Python exception is raised. Thus, this is only useful to call Python C api functions directly.   All these classes can be instantiated by calling them with at least one argument, the pathname of the shared library.  If you have an existing handle to an already loaded shared library, it can be passed as the handle named parameter, otherwise the underlying platforms dlopen or LoadLibrary function is used to load the library into the process, and to get a handle to it. The mode parameter can be used to specify how the library is loaded.  For details, consult the dlopen(3) manpage, on Windows, mode is ignored. The use_errno parameter, when set to True, enables a ctypes mechanism that allows to access the system errno error number in a safe way. ctypes maintains a thread-local copy of the systems errno variable; if you call foreign functions created with use_errno=True then the errno value before the function call is swapped with the ctypes private copy, the same happens immediately after the function call. The function ctypes.get_errno() returns the value of the ctypes private copy, and the function ctypes.set_errno() changes the ctypes private copy to a new value and returns the former value. The use_last_error parameter, when set to True, enables the same mechanism for the Windows error code which is managed by the GetLastError() and SetLastError() Windows API functions; ctypes.get_last_error() and ctypes.set_last_error() are used to request and change the ctypes private copy of the windows error code.  New in version 2.6: The use_last_error and use_errno optional parameters were added.   ctypes.RTLD_GLOBAL Flag to use as mode parameter.  On platforms where this flag is not available, it is defined as the integer zero.    ctypes.RTLD_LOCAL Flag to use as mode parameter.  On platforms where this is not available, it is the same as RTLD_GLOBAL.    ctypes.DEFAULT_MODE The default mode which is used to load shared libraries.  On OSX 10.3, this is RTLD_GLOBAL, otherwise it is the same as RTLD_LOCAL.  Instances of these classes have no public methods, however __getattr__() and __getitem__() have special behavior: functions exported by the shared library can be accessed as attributes of by index.  Please note that both __getattr__() and __getitem__() cache their result, so calling them repeatedly returns the same object each time. The following public attributes are available, their name starts with an underscore to not clash with exported function names:   PyDLL._handle\u00b6 The system handle used to access the library.    PyDLL._name\u00b6 The name of the library passed in the constructor.  Shared libraries can also be loaded by using one of the prefabricated objects, which are instances of the LibraryLoader class, either by calling the LoadLibrary() method, or by retrieving the library as attribute of the loader instance.   class ctypes.LibraryLoader(dlltype)\u00b6 Class which loads shared libraries.  dlltype should be one of the CDLL, PyDLL, WinDLL, or OleDLL types. __getattr__() has special behavior: It allows to load a shared library by accessing it as attribute of a library loader instance.  The result is cached, so repeated attribute accesses return the same library each time.   LoadLibrary(name)\u00b6 Load a shared library into the process and return it.  This method always returns a new instance of the library.    These prefabricated library loaders are available:   ctypes.cdll Creates CDLL instances.    ctypes.windll Windows only: Creates WinDLL instances.    ctypes.oledll Windows only: Creates OleDLL instances.    ctypes.pydll Creates PyDLL instances.  For accessing the C Python api directly, a ready-to-use Python shared library object is available:   ctypes.pythonapi An instance of PyDLL that exposes Python C API functions as attributes.  Note that all these functions are assumed to return C int, which is of course not always the truth, so you have to assign the correct restype attribute to use these functions.    15.17.2.3. Foreign functions\u00b6 As explained in the previous section, foreign functions can be accessed as attributes of loaded shared libraries.  The function objects created in this way by default accept any number of arguments, accept any ctypes data instances as arguments, and return the default result type specified by the library loader. They are instances of a private class:   class ctypes._FuncPtr\u00b6 Base class for C callable foreign functions. Instances of foreign functions are also C compatible data types; they represent C function pointers. This behavior can be customized by assigning to special attributes of the foreign function object.   restype\u00b6 Assign a ctypes type to specify the result type of the foreign function. Use None for void, a function not returning anything. It is possible to assign a callable Python object that is not a ctypes type, in this case the function is assumed to return a C int, and the callable will be called with this integer, allowing to do further processing or error checking.  Using this is deprecated, for more flexible post processing or error checking use a ctypes data type as restype and assign a callable to the errcheck attribute.     argtypes\u00b6 Assign a tuple of ctypes types to specify the argument types that the function accepts.  Functions using the stdcall calling convention can only be called with the same number of arguments as the length of this tuple; functions using the C calling convention accept additional, unspecified arguments as well. When a foreign function is called, each actual argument is passed to the from_param() class method of the items in the argtypes tuple, this method allows to adapt the actual argument to an object that the foreign function accepts.  For example, a c_char_p item in the argtypes tuple will convert a unicode string passed as argument into an byte string using ctypes conversion rules. New: It is now possible to put items in argtypes which are not ctypes types, but each item must have a from_param() method which returns a value usable as argument (integer, string, ctypes instance).  This allows to define adapters that can adapt custom objects as function parameters.     errcheck\u00b6 Assign a Python function or another callable to this attribute. The callable will be called with three or more arguments:   callable(result, func, arguments) result is what the foreign function returns, as specified by the restype attribute. func is the foreign function object itself, this allows to reuse the same callable object to check or post process the results of several functions. arguments is a tuple containing the parameters originally passed to the function call, this allows to specialize the behavior on the arguments used.   The object that this function returns will be returned from the foreign function call, but it can also check the result value and raise an exception if the foreign function call failed.       exception ctypes.ArgumentError\u00b6 This exception is raised when a foreign function call cannot convert one of the passed arguments.    15.17.2.4. Function prototypes\u00b6 Foreign functions can also be created by instantiating function prototypes. Function prototypes are similar to function prototypes in C; they describe a function (return type, argument types, calling convention) without defining an implementation.  The factory functions must be called with the desired result type and the argument types of the function.   ctypes.CFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)\u00b6 The returned function prototype creates functions that use the standard C calling convention.  The function will release the GIL during the call.  If use_errno is set to True, the ctypes private copy of the system errno variable is exchanged with the real errno value before and after the call; use_last_error does the same for the Windows error code.  Changed in version 2.6: The optional use_errno and use_last_error parameters were added.     ctypes.WINFUNCTYPE(restype, *argtypes, use_errno=False, use_last_error=False)\u00b6 Windows only: The returned function prototype creates functions that use the stdcall calling convention, except on Windows CE where WINFUNCTYPE() is the same as CFUNCTYPE().  The function will release the GIL during the call.  use_errno and use_last_error have the same meaning as above.    ctypes.PYFUNCTYPE(restype, *argtypes)\u00b6 The returned function prototype creates functions that use the Python calling convention.  The function will not release the GIL during the call.  Function prototypes created by these factory functions can be instantiated in different ways, depending on the type and number of the parameters in the call:    prototype(address) Returns a foreign function at the specified address which must be an integer.    prototype(callable) Create a C callable function (a callback function) from a Python callable.    prototype(func_spec[, paramflags]) Returns a foreign function exported by a shared library. func_spec must be a 2-tuple (name_or_ordinal, library). The first item is the name of the exported function as string, or the ordinal of the exported function as small integer.  The second item is the shared library instance.    prototype(vtbl_index, name[, paramflags[, iid]]) Returns a foreign function that will call a COM method. vtbl_index is the index into the virtual function table, a small non-negative integer. name is name of the COM method. iid is an optional pointer to the interface identifier which is used in extended error reporting. COM methods use a special calling convention: They require a pointer to the COM interface as first argument, in addition to those parameters that are specified in the argtypes tuple.   The optional paramflags parameter creates foreign function wrappers with much more functionality than the features described above. paramflags must be a tuple of the same length as argtypes. Each item in this tuple contains further information about a parameter, it must be a tuple containing one, two, or three items. The first item is an integer containing a combination of direction flags for the parameter:   1 Specifies an input parameter to the function. 2 Output parameter.  The foreign function fills in a value. 4 Input parameter which defaults to the integer zero.   The optional second item is the parameter name as string.  If this is specified, the foreign function can be called with named parameters. The optional third item is the default value for this parameter.  This example demonstrates how to wrap the Windows MessageBoxA function so that it supports default parameters and named arguments. The C declaration from the windows header file is this: WINUSERAPI int WINAPI MessageBoxA(     HWND hWnd ,     LPCSTR lpText,     LPCSTR lpCaption,     UINT uType);  Here is the wrapping with ctypes: >>> from ctypes import c_int, WINFUNCTYPE, windll >>> from ctypes.wintypes import HWND, LPCSTR, UINT >>> prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT) >>> paramflags = (1, \"hwnd\", 0), (1, \"text\", \"Hi\"), (1, \"caption\", None), (1, \"flags\", 0) >>> MessageBox = prototype((\"MessageBoxA\", windll.user32), paramflags) >>>   The MessageBox foreign function can now be called in these ways: >>> MessageBox() >>> MessageBox(text=\"Spam, spam, spam\") >>> MessageBox(flags=2, text=\"foo bar\") >>>   A second example demonstrates output parameters.  The win32 GetWindowRect function retrieves the dimensions of a specified window by copying them into RECT structure that the caller has to supply.  Here is the C declaration: WINUSERAPI BOOL WINAPI GetWindowRect(      HWND hWnd,      LPRECT lpRect);  Here is the wrapping with ctypes: >>> from ctypes import POINTER, WINFUNCTYPE, windll, WinError >>> from ctypes.wintypes import BOOL, HWND, RECT >>> prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT)) >>> paramflags = (1, \"hwnd\"), (2, \"lprect\") >>> GetWindowRect = prototype((\"GetWindowRect\", windll.user32), paramflags) >>>   Functions with output parameters will automatically return the output parameter value if there is a single one, or a tuple containing the output parameter values when there are more than one, so the GetWindowRect function now returns a RECT instance, when called. Output parameters can be combined with the errcheck protocol to do further output processing and error checking.  The win32 GetWindowRect api function returns a BOOL to signal success or failure, so this function could do the error checking, and raises an exception when the api call failed: >>> def errcheck(result, func, args): ...     if not result: ...         raise WinError() ...     return args ... >>> GetWindowRect.errcheck = errcheck >>>   If the errcheck function returns the argument tuple it receives unchanged, ctypes continues the normal processing it does on the output parameters.  If you want to return a tuple of window coordinates instead of a RECT instance, you can retrieve the fields in the function and return them instead, the normal processing will no longer take place: >>> def errcheck(result, func, args): ...     if not result: ...         raise WinError() ...     rc = args[1] ...     return rc.left, rc.top, rc.bottom, rc.right ... >>> GetWindowRect.errcheck = errcheck >>>     15.17.2.5. Utility functions\u00b6   ctypes.addressof(obj)\u00b6 Returns the address of the memory buffer as integer.  obj must be an instance of a ctypes type.    ctypes.alignment(obj_or_type)\u00b6 Returns the alignment requirements of a ctypes type. obj_or_type must be a ctypes type or instance.    ctypes.byref(obj[, offset])\u00b6 Returns a light-weight pointer to obj, which must be an instance of a ctypes type.  offset defaults to zero, and must be an integer that will be added to the internal pointer value. byref(obj, offset) corresponds to this C code: (((char *)&obj) + offset)  The returned object can only be used as a foreign function call parameter.  It behaves similar to pointer(obj), but the construction is a lot faster.  New in version 2.6: The offset optional argument was added.     ctypes.cast(obj, type)\u00b6 This function is similar to the cast operator in C.  It returns a new instance of type which points to the same memory block as obj.  type must be a pointer type, and obj must be an object that can be interpreted as a pointer.    ctypes.create_string_buffer(init_or_size[, size])\u00b6 This function creates a mutable character buffer. The returned object is a ctypes array of c_char. init_or_size must be an integer which specifies the size of the array, or a string which will be used to initialize the array items. If a string is specified as first argument, the buffer is made one item larger than the length of the string so that the last element in the array is a NUL termination character. An integer can be passed as second argument which allows to specify the size of the array if the length of the string should not be used. If the first parameter is a unicode string, it is converted into an 8-bit string according to ctypes conversion rules.     ctypes.create_unicode_buffer(init_or_size[, size])\u00b6 This function creates a mutable unicode character buffer. The returned object is a ctypes array of c_wchar. init_or_size must be an integer which specifies the size of the array, or a unicode string which will be used to initialize the array items. If a unicode string is specified as first argument, the buffer is made one item larger than the length of the string so that the last element in the array is a NUL termination character. An integer can be passed as second argument which allows to specify the size of the array if the length of the string should not be used. If the first parameter is a 8-bit string, it is converted into an unicode string according to ctypes conversion rules.     ctypes.DllCanUnloadNow()\u00b6 Windows only: This function is a hook which allows to implement in-process COM servers with ctypes.  It is called from the DllCanUnloadNow function that the _ctypes extension dll exports.    ctypes.DllGetClassObject()\u00b6 Windows only: This function is a hook which allows to implement in-process COM servers with ctypes.  It is called from the DllGetClassObject function that the _ctypes extension dll exports.    ctypes.util.find_library(name)\u00b6 Try to find a library and return a pathname.  name is the library name without any prefix like lib, suffix like .so, .dylib or version number (this is the form used for the posix linker option -l).  If no library can be found, returns None. The exact functionality is system dependent.  Changed in version 2.6: Windows only: find_library(\"m\") or find_library(\"c\") return the result of a call to find_msvcrt().     ctypes.util.find_msvcrt()\u00b6 Windows only: return the filename of the VC runtype library used by Python, and by the extension modules.  If the name of the library cannot be determined, None is returned. If you need to free memory, for example, allocated by an extension module with a call to the free(void *), it is important that you use the function in the same library that allocated the memory.  New in version 2.6.     ctypes.FormatError([code])\u00b6 Windows only: Returns a textual description of the error code code.  If no error code is specified, the last error code is used by calling the Windows api function GetLastError.    ctypes.GetLastError()\u00b6 Windows only: Returns the last error code set by Windows in the calling thread. This function calls the Windows GetLastError() function directly, it does not return the ctypes-private copy of the error code.    ctypes.get_errno()\u00b6 Returns the current value of the ctypes-private copy of the system errno variable in the calling thread.  New in version 2.6.     ctypes.get_last_error()\u00b6 Windows only: returns the current value of the ctypes-private copy of the system LastError variable in the calling thread.  New in version 2.6.     ctypes.memmove(dst, src, count)\u00b6 Same as the standard C memmove library function: copies count bytes from src to dst. dst and src must be integers or ctypes instances that can be converted to pointers.    ctypes.memset(dst, c, count)\u00b6 Same as the standard C memset library function: fills the memory block at address dst with count bytes of value c. dst must be an integer specifying an address, or a ctypes instance.    ctypes.POINTER(type)\u00b6 This factory function creates and returns a new ctypes pointer type. Pointer types are cached an reused internally, so calling this function repeatedly is cheap. type must be a ctypes type.    ctypes.pointer(obj)\u00b6 This function creates a new pointer instance, pointing to obj. The returned object is of the type POINTER(type(obj)). Note: If you just want to pass a pointer to an object to a foreign function call, you should use byref(obj) which is much faster.     ctypes.resize(obj, size)\u00b6 This function resizes the internal memory buffer of obj, which must be an instance of a ctypes type.  It is not possible to make the buffer smaller than the native size of the objects type, as given by sizeof(type(obj)), but it is possible to enlarge the buffer.    ctypes.set_conversion_mode(encoding, errors)\u00b6 This function sets the rules that ctypes objects use when converting between 8-bit strings and unicode strings.  encoding must be a string specifying an encoding, like 'utf-8' or 'mbcs', errors must be a string specifying the error handling on encoding\/decoding errors.  Examples of possible values are \"strict\", \"replace\", or \"ignore\". set_conversion_mode() returns a 2-tuple containing the previous conversion rules.  On windows, the initial conversion rules are ('mbcs', 'ignore'), on other systems ('ascii', 'strict').     ctypes.set_errno(value)\u00b6 Set the current value of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value.  New in version 2.6.     ctypes.set_last_error(value)\u00b6 Windows only: set the current value of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value.  New in version 2.6.     ctypes.sizeof(obj_or_type)\u00b6 Returns the size in bytes of a ctypes type or instance memory buffer. Does the same as the C sizeof() function.    ctypes.string_at(address[, size])\u00b6 This function returns the string starting at memory address address. If size is specified, it is used as size, otherwise the string is assumed to be zero-terminated.    ctypes.WinError(code=None, descr=None)\u00b6 Windows only: this function is probably the worst-named thing in ctypes.  It creates an instance of WindowsError.  If code is not specified, GetLastError is called to determine the error code.  If descr is not specified, FormatError() is called to get a textual description of the error.    ctypes.wstring_at(address[, size])\u00b6 This function returns the wide character string starting at memory address address as unicode string.  If size is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero-terminated.    15.17.2.6. Data types\u00b6   class ctypes._CData\u00b6 This non-public class is the common base class of all ctypes data types. Among other things, all ctypes type instances contain a memory block that hold C compatible data; the address of the memory block is returned by the addressof() helper function.  Another instance variable is exposed as _objects; this contains other Python objects that need to be kept alive in case the memory block contains pointers. Common methods of ctypes data types, these are all class methods (to be exact, they are methods of the metaclass):   from_buffer(source[, offset])\u00b6 This method returns a ctypes instance that shares the buffer of the source object.  The source object must support the writeable buffer interface.  The optional offset parameter specifies an offset into the source buffer in bytes; the default is zero.  If the source buffer is not large enough a ValueError is raised.  New in version 2.6.     from_buffer_copy(source[, offset])\u00b6 This method creates a ctypes instance, copying the buffer from the source object buffer which must be readable.  The optional offset parameter specifies an offset into the source buffer in bytes; the default is zero.  If the source buffer is not large enough a ValueError is raised.  New in version 2.6.     from_address(address)\u00b6 This method returns a ctypes type instance using the memory specified by address which must be an integer.    from_param(obj)\u00b6 This method adapts obj to a ctypes type.  It is called with the actual object used in a foreign function call when the type is present in the foreign function&#8217;s argtypes tuple; it must return an object that can be used as a function call parameter. All ctypes data types have a default implementation of this classmethod that normally returns obj if that is an instance of the type.  Some types accept other objects as well.     in_dll(library, name)\u00b6 This method returns a ctypes type instance exported by a shared library. name is the name of the symbol that exports the data, library is the loaded shared library.  Common instance variables of ctypes data types:   _b_base_\u00b6 Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.  The _b_base_ read-only member is the root ctypes object that owns the memory block.    _b_needsfree_\u00b6 This read-only variable is true when the ctypes data instance has allocated the memory block itself, false otherwise.    _objects\u00b6 This member is either None or a dictionary containing Python objects that need to be kept alive so that the memory block contents is kept valid.  This object is only exposed for debugging; never modify the contents of this dictionary.      15.17.2.7. Fundamental data types\u00b6   class ctypes._SimpleCData\u00b6 This non-public class is the base class of all fundamental ctypes data types. It is mentioned here because it contains the common attributes of the fundamental ctypes data types.  _SimpleCData is a subclass of _CData, so it inherits their methods and attributes.  Changed in version 2.6: ctypes data types that are not and do not contain pointers can now be pickled. Instances have a single attribute:   value\u00b6 This attribute contains the actual value of the instance. For integer and pointer types, it is an integer, for character types, it is a single character string, for character pointer types it is a Python string or unicode string. When the value attribute is retrieved from a ctypes instance, usually a new object is returned each time.  ctypes does not implement original object return, always a new object is constructed.  The same is true for all other ctypes object instances.     Fundamental data types, when returned as foreign function call results, or, for example, by retrieving structure field members or array items, are transparently converted to native Python types.  In other words, if a foreign function has a restype of c_char_p, you will always receive a Python string, not a c_char_p instance. Subclasses of fundamental data types do not inherit this behavior. So, if a foreign functions restype is a subclass of c_void_p, you will receive an instance of this subclass from the function call. Of course, you can get the value of the pointer by accessing the value attribute. These are the fundamental ctypes data types:   class ctypes.c_byte\u00b6 Represents the C signed char datatype, and interprets the value as small integer.  The constructor accepts an optional integer initializer; no overflow checking is done.    class ctypes.c_char\u00b6 Represents the C char datatype, and interprets the value as a single character.  The constructor accepts an optional string initializer, the length of the string must be exactly one character.    class ctypes.c_char_p\u00b6 Represents the C char * datatype when it points to a zero-terminated string.  For a general character pointer that may also point to binary data, POINTER(c_char) must be used.  The constructor accepts an integer address, or a string.    class ctypes.c_double\u00b6 Represents the C double datatype.  The constructor accepts an optional float initializer.    class ctypes.c_longdouble\u00b6 Represents the C long double datatype.  The constructor accepts an optional float initializer.  On platforms where sizeof(long double) == sizeof(double) it is an alias to c_double.  New in version 2.6.     class ctypes.c_float\u00b6 Represents the C float datatype.  The constructor accepts an optional float initializer.    class ctypes.c_int\u00b6 Represents the C signed int datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.  On platforms where sizeof(int) == sizeof(long) it is an alias to c_long.    class ctypes.c_int8\u00b6 Represents the C 8-bit signed int datatype.  Usually an alias for c_byte.    class ctypes.c_int16\u00b6 Represents the C 16-bit signed int datatype.  Usually an alias for c_short.    class ctypes.c_int32\u00b6 Represents the C 32-bit signed int datatype.  Usually an alias for c_int.    class ctypes.c_int64\u00b6 Represents the C 64-bit signed int datatype.  Usually an alias for c_longlong.    class ctypes.c_long\u00b6 Represents the C signed long datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.    class ctypes.c_longlong\u00b6 Represents the C signed long long datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.    class ctypes.c_short\u00b6 Represents the C signed short datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.    class ctypes.c_size_t\u00b6 Represents the C size_t datatype.    class ctypes.c_ssize_t\u00b6 Represents the C ssize_t datatype.  New in version 2.7.     class ctypes.c_ubyte\u00b6 Represents the C unsigned char datatype, it interprets the value as small integer.  The constructor accepts an optional integer initializer; no overflow checking is done.    class ctypes.c_uint\u00b6 Represents the C unsigned int datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.  On platforms where sizeof(int) == sizeof(long) it is an alias for c_ulong.    class ctypes.c_uint8\u00b6 Represents the C 8-bit unsigned int datatype.  Usually an alias for c_ubyte.    class ctypes.c_uint16\u00b6 Represents the C 16-bit unsigned int datatype.  Usually an alias for c_ushort.    class ctypes.c_uint32\u00b6 Represents the C 32-bit unsigned int datatype.  Usually an alias for c_uint.    class ctypes.c_uint64\u00b6 Represents the C 64-bit unsigned int datatype.  Usually an alias for c_ulonglong.    class ctypes.c_ulong\u00b6 Represents the C unsigned long datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.    class ctypes.c_ulonglong\u00b6 Represents the C unsigned long long datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.    class ctypes.c_ushort\u00b6 Represents the C unsigned short datatype.  The constructor accepts an optional integer initializer; no overflow checking is done.    class ctypes.c_void_p\u00b6 Represents the C void * type.  The value is represented as integer. The constructor accepts an optional integer initializer.    class ctypes.c_wchar\u00b6 Represents the C wchar_t datatype, and interprets the value as a single character unicode string.  The constructor accepts an optional string initializer, the length of the string must be exactly one character.    class ctypes.c_wchar_p\u00b6 Represents the C wchar_t * datatype, which must be a pointer to a zero-terminated wide character string.  The constructor accepts an integer address, or a string.    class ctypes.c_bool\u00b6 Represent the C bool datatype (more accurately, _Bool from C99).  Its value can be True or False, and the constructor accepts any object that has a truth value.  New in version 2.6.     class ctypes.HRESULT\u00b6 Windows only: Represents a HRESULT value, which contains success or error information for a function or method call.    class ctypes.py_object\u00b6 Represents the C PyObject * datatype.  Calling this without an argument creates a NULL PyObject * pointer.  The ctypes.wintypes module provides quite some other Windows specific data types, for example HWND, WPARAM, or DWORD.  Some useful structures like MSG or RECT are also defined.   15.17.2.8. Structured data types\u00b6   class ctypes.Union(*args, **kw)\u00b6 Abstract base class for unions in native byte order.    class ctypes.BigEndianStructure(*args, **kw)\u00b6 Abstract base class for structures in big endian byte order.    class ctypes.LittleEndianStructure(*args, **kw)\u00b6 Abstract base class for structures in little endian byte order.  Structures with non-native byte order cannot contain pointer type fields, or any other data types containing pointer type fields.   class ctypes.Structure(*args, **kw)\u00b6 Abstract base class for structures in native byte order. Concrete structure and union types must be created by subclassing one of these types, and at least define a _fields_ class variable. ctypes will create descriptors which allow reading and writing the fields by direct attribute accesses.  These are the   _fields_\u00b6 A sequence defining the structure fields.  The items must be 2-tuples or 3-tuples.  The first item is the name of the field, the second item specifies the type of the field; it can be any ctypes data type. For integer type fields like c_int, a third optional item can be given.  It must be a small positive integer defining the bit width of the field. Field names must be unique within one structure or union.  This is not checked, only one field can be accessed when names are repeated. It is possible to define the _fields_ class variable after the class statement that defines the Structure subclass, this allows to create data types that directly or indirectly reference themselves: class List(Structure):     pass List._fields_ = [(\"pnext\", POINTER(List)),                  ...                 ]   The _fields_ class variable must, however, be defined before the type is first used (an instance is created, sizeof() is called on it, and so on).  Later assignments to the _fields_ class variable will raise an AttributeError. Structure and union subclass constructors accept both positional and named arguments.  Positional arguments are used to initialize the fields in the same order as they appear in the _fields_ definition, named arguments are used to initialize the fields with the corresponding name. It is possible to defined sub-subclasses of structure types, they inherit the fields of the base class plus the _fields_ defined in the sub-subclass, if any.     _pack_\u00b6 An optional small integer that allows to override the alignment of structure fields in the instance.  _pack_ must already be defined when _fields_ is assigned, otherwise it will have no effect.    _anonymous_\u00b6 An optional sequence that lists the names of unnamed (anonymous) fields. _anonymous_ must be already defined when _fields_ is assigned, otherwise it will have no effect. The fields listed in this variable must be structure or union type fields. ctypes will create descriptors in the structure type that allows to access the nested fields directly, without the need to create the structure or union field. Here is an example type (Windows): class _U(Union):     _fields_ = [(\"lptdesc\", POINTER(TYPEDESC)),                 (\"lpadesc\", POINTER(ARRAYDESC)),                 (\"hreftype\", HREFTYPE)]  class TYPEDESC(Structure):     _anonymous_ = (\"u\",)     _fields_ = [(\"u\", _U),                 (\"vt\", VARTYPE)]   The TYPEDESC structure describes a COM data type, the vt field specifies which one of the union fields is valid.  Since the u field is defined as anonymous field, it is now possible to access the members directly off the TYPEDESC instance. td.lptdesc and td.u.lptdesc are equivalent, but the former is faster since it does not need to create a temporary union instance: td = TYPEDESC() td.vt = VT_PTR td.lptdesc = POINTER(some_type) td.u.lptdesc = POINTER(some_type)     It is possible to defined sub-subclasses of structures, they inherit the fields of the base class.  If the subclass definition has a separate _fields_ variable, the fields specified in this are appended to the fields of the base class. Structure and union constructors accept both positional and keyword arguments.  Positional arguments are used to initialize member fields in the same order as they are appear in _fields_.  Keyword arguments in the constructor are interpreted as attribute assignments, so they will initialize _fields_ with the same name, or create new attributes for names not present in _fields_.     15.17.2.9. Arrays and pointers\u00b6 Not yet written - please see the sections Pointers and section Arrays in the tutorial."},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes._CData","title":"ctypes._CData","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes._CData.from_address","title":"ctypes._CData.from_address","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes._CData.from_buffer","title":"ctypes._CData.from_buffer","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes._CData.from_buffer_copy","title":"ctypes._CData.from_buffer_copy","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes._CData.from_param","title":"ctypes._CData.from_param","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes._CData.in_dll","title":"ctypes._CData.in_dll","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes._FuncPtr","title":"ctypes._FuncPtr","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes._SimpleCData","title":"ctypes._SimpleCData","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.addressof","title":"ctypes.addressof","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.alignment","title":"ctypes.alignment","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.BigEndianStructure","title":"ctypes.BigEndianStructure","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.byref","title":"ctypes.byref","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_bool","title":"ctypes.c_bool","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_byte","title":"ctypes.c_byte","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_char","title":"ctypes.c_char","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_char_p","title":"ctypes.c_char_p","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_double","title":"ctypes.c_double","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_float","title":"ctypes.c_float","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_int","title":"ctypes.c_int","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_int16","title":"ctypes.c_int16","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_int32","title":"ctypes.c_int32","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_int64","title":"ctypes.c_int64","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_int8","title":"ctypes.c_int8","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_long","title":"ctypes.c_long","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_longdouble","title":"ctypes.c_longdouble","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_longlong","title":"ctypes.c_longlong","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_short","title":"ctypes.c_short","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_size_t","title":"ctypes.c_size_t","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_ssize_t","title":"ctypes.c_ssize_t","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_ubyte","title":"ctypes.c_ubyte","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_uint","title":"ctypes.c_uint","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_uint16","title":"ctypes.c_uint16","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_uint32","title":"ctypes.c_uint32","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_uint64","title":"ctypes.c_uint64","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_uint8","title":"ctypes.c_uint8","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_ulong","title":"ctypes.c_ulong","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_ulonglong","title":"ctypes.c_ulonglong","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_ushort","title":"ctypes.c_ushort","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_void_p","title":"ctypes.c_void_p","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_wchar","title":"ctypes.c_wchar","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.c_wchar_p","title":"ctypes.c_wchar_p","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.cast","title":"ctypes.cast","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.CDLL","title":"ctypes.CDLL","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.CFUNCTYPE","title":"ctypes.CFUNCTYPE","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.create_string_buffer","title":"ctypes.create_string_buffer","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.create_unicode_buffer","title":"ctypes.create_unicode_buffer","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.DllCanUnloadNow","title":"ctypes.DllCanUnloadNow","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.DllGetClassObject","title":"ctypes.DllGetClassObject","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.FormatError","title":"ctypes.FormatError","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.get_errno","title":"ctypes.get_errno","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.get_last_error","title":"ctypes.get_last_error","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.GetLastError","title":"ctypes.GetLastError","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.HRESULT","title":"ctypes.HRESULT","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.LibraryLoader","title":"ctypes.LibraryLoader","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.LibraryLoader.LoadLibrary","title":"ctypes.LibraryLoader.LoadLibrary","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.LittleEndianStructure","title":"ctypes.LittleEndianStructure","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.memmove","title":"ctypes.memmove","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.memset","title":"ctypes.memset","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.OleDLL","title":"ctypes.OleDLL","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes_ctypes_ctypes.POINTER","title":"ctypes.POINTER","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.pointer","title":"ctypes.pointer","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes_ctypes_ctypes.POINTER","title":"ctypes.POINTER","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.py_object","title":"ctypes.py_object","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.PyDLL","title":"ctypes.PyDLL","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.PYFUNCTYPE","title":"ctypes.PYFUNCTYPE","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.resize","title":"ctypes.resize","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.set_conversion_mode","title":"ctypes.set_conversion_mode","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.set_errno","title":"ctypes.set_errno","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.set_last_error","title":"ctypes.set_last_error","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.sizeof","title":"ctypes.sizeof","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.string_at","title":"ctypes.string_at","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.Structure","title":"ctypes.Structure","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.Union","title":"ctypes.Union","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.util.find_library","title":"ctypes.util.find_library","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.util.find_msvcrt","title":"ctypes.util.find_msvcrt","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.WinDLL","title":"ctypes.WinDLL","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.WinError","title":"ctypes.WinError","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.WINFUNCTYPE","title":"ctypes.WINFUNCTYPE","description":""},{"url":"http:\/\/docs.python.org\/library\/ctypes.html#ctypes.wstring_at","title":"ctypes.wstring_at","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html","title":"readline","description":"16.8. readline &#8212; GNU readline interface\u00b6 Platforms: Unix The readline module defines a number of functions to facilitate completion and reading\/writing of history files from the Python interpreter. This module can be used directly or via the rlcompleter module.  Settings made using  this module affect the behaviour of both the interpreter&#8217;s interactive prompt  and the prompts offered by the raw_input() and input() built-in functions.  Note On MacOS X the readline module can be implemented using the libedit library instead of GNU readline. The configuration file for libedit is different from that of GNU readline. If you programmatically load configuration strings you can check for the text &#8220;libedit&#8221; in readline.__doc__ to differentiate between GNU readline and libedit.  The readline module defines the following functions:   readline.parse_and_bind(string)\u00b6 Parse and execute single line of a readline init file.    readline.get_line_buffer()\u00b6 Return the current contents of the line buffer.    readline.insert_text(string)\u00b6 Insert text into the command line.    readline.read_init_file([filename])\u00b6 Parse a readline initialization file. The default filename is the last filename used.    readline.read_history_file([filename])\u00b6 Load a readline history file. The default filename is ~\/.history.    readline.write_history_file([filename])\u00b6 Save a readline history file. The default filename is ~\/.history.    readline.clear_history()\u00b6 Clear the current history.  (Note: this function is not available if the installed version of GNU readline doesn&#8217;t support it.)  New in version 2.4.     readline.get_history_length()\u00b6 Return the desired length of the history file.  Negative values imply unlimited history file size.    readline.set_history_length(length)\u00b6 Set the number of lines to save in the history file. write_history_file() uses this value to truncate the history file when saving.  Negative values imply unlimited history file size.    readline.get_current_history_length()\u00b6 Return the number of lines currently in the history.  (This is different from get_history_length(), which returns the maximum number of lines that will be written to a history file.)  New in version 2.3.     readline.get_history_item(index)\u00b6 Return the current contents of history item at index.  New in version 2.3.     readline.remove_history_item(pos)\u00b6 Remove history item specified by its position from the history.  New in version 2.4.     readline.replace_history_item(pos, line)\u00b6 Replace history item specified by its position with the given line.  New in version 2.4.     readline.redisplay()\u00b6 Change what&#8217;s displayed on the screen to reflect the current contents of the line buffer.  New in version 2.3.     readline.set_startup_hook([function])\u00b6 Set or remove the startup_hook function.  If function is specified, it will be used as the new startup_hook function; if omitted or None, any hook function already installed is removed.  The startup_hook function is called with no arguments just before readline prints the first prompt.    readline.set_pre_input_hook([function])\u00b6 Set or remove the pre_input_hook function.  If function is specified, it will be used as the new pre_input_hook function; if omitted or None, any hook function already installed is removed.  The pre_input_hook function is called with no arguments after the first prompt has been printed and just before readline starts reading input characters.    readline.set_completer([function])\u00b6 Set or remove the completer function.  If function is specified, it will be used as the new completer function; if omitted or None, any completer function already installed is removed.  The completer function is called as function(text, state), for state in 0, 1, 2, ..., until it returns a non-string value.  It should return the next possible completion starting with text.    readline.get_completer()\u00b6 Get the completer function, or None if no completer function has been set.  New in version 2.3.     readline.get_completion_type()\u00b6 Get the type of completion being attempted.  New in version 2.6.     readline.get_begidx()\u00b6 Get the beginning index of the readline tab-completion scope.    readline.get_endidx()\u00b6 Get the ending index of the readline tab-completion scope.    readline.set_completer_delims(string)\u00b6 Set the readline word delimiters for tab-completion.    readline.get_completer_delims()\u00b6 Get the readline word delimiters for tab-completion.    readline.set_completion_display_matches_hook([function])\u00b6 Set or remove the completion display function.  If function is specified, it will be used as the new completion display function; if omitted or None, any completion display function already installed is removed.  The completion display function is called as function(substitution, [matches], longest_match_length) once each time matches need to be displayed.  New in version 2.6.     readline.add_history(line)\u00b6 Append a line to the history buffer, as if it was the last line typed.   See also  Module rlcompleter Completion of Python identifiers at the interactive prompt.    16.8.1. Example\u00b6 The following example demonstrates how to use the readline module&#8217;s history reading and writing functions to automatically load and save a history file named .pyhist from the user&#8217;s home directory.  The code below would normally be executed automatically during interactive sessions from the user&#8217;s PYTHONSTARTUP file. import os import readline histfile = os.path.join(os.path.expanduser(\"~\"), \".pyhist\") try:     readline.read_history_file(histfile) except IOError:     pass import atexit atexit.register(readline.write_history_file, histfile) del os, histfile   The following example extends the code.InteractiveConsole class to support history save\/restore. import code import readline import atexit import os  class HistoryConsole(code.InteractiveConsole):     def __init__(self, locals=None, filename=\"<console>\",                  histfile=os.path.expanduser(\"~\/.console-history\")):         code.InteractiveConsole.__init__(self, locals, filename)         self.init_history(histfile)      def init_history(self, histfile):         readline.parse_and_bind(\"tab: complete\")         if hasattr(readline, \"read_history_file\"):             try:                 readline.read_history_file(histfile)             except IOError:                 pass             atexit.register(self.save_history, histfile)      def save_history(self, histfile):         readline.write_history_file(histfile)"},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.add_history","title":"readline.add_history","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.clear_history","title":"readline.clear_history","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_begidx","title":"readline.get_begidx","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_completer","title":"readline.get_completer","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_completer_delims","title":"readline.get_completer_delims","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_completion_type","title":"readline.get_completion_type","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_current_history_length","title":"readline.get_current_history_length","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_endidx","title":"readline.get_endidx","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_history_item","title":"readline.get_history_item","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_history_length","title":"readline.get_history_length","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.get_line_buffer","title":"readline.get_line_buffer","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.insert_text","title":"readline.insert_text","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.parse_and_bind","title":"readline.parse_and_bind","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.read_history_file","title":"readline.read_history_file","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.read_init_file","title":"readline.read_init_file","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.redisplay","title":"readline.redisplay","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.remove_history_item","title":"readline.remove_history_item","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.replace_history_item","title":"readline.replace_history_item","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.set_completer","title":"readline.set_completer","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.set_completer_delims","title":"readline.set_completer_delims","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.set_completion_display_matches_hook","title":"readline.set_completion_display_matches_hook","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.set_history_length","title":"readline.set_history_length","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.set_pre_input_hook","title":"readline.set_pre_input_hook","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.set_startup_hook","title":"readline.set_startup_hook","description":""},{"url":"http:\/\/docs.python.org\/library\/readline.html#readline.write_history_file","title":"readline.write_history_file","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html","title":"mmap","description":"16.7. mmap &#8212; Memory-mapped file support\u00b6 Memory-mapped file objects behave like both strings and like file objects. Unlike normal string objects, however, these are mutable.  You can use mmap objects in most places where strings are expected; for example, you can use the re module to search through a memory-mapped file.  Since they&#8217;re mutable, you can change a single character by doing obj[index] = 'a', or change a substring by assigning to a slice: obj[i1:i2] = '...'.  You can also read and write data starting at the current file position, and seek() through the file to different positions. A memory-mapped file is created by the mmap constructor, which is different on Unix and on Windows.  In either case you must provide a file descriptor for a file opened for update. If you wish to map an existing Python file object, use its fileno() method to obtain the correct value for the fileno parameter.  Otherwise, you can open the file using the os.open() function, which returns a file descriptor directly (the file still needs to be closed when done).  Note If you want to create a memory-mapping for a writable, buffered file, you should flush() the file first.  This is necessary to ensure that local modifications to the buffers are actually available to the mapping.  For both the Unix and Windows versions of the constructor, access may be specified as an optional keyword parameter. access accepts one of three values: ACCESS_READ, ACCESS_WRITE, or ACCESS_COPY to specify read-only, write-through or copy-on-write memory respectively. access can be used on both Unix and Windows.  If access is not specified, Windows mmap returns a write-through mapping.  The initial memory values for all three access types are taken from the specified file.  Assignment to an ACCESS_READ memory map raises a TypeError exception. Assignment to an ACCESS_WRITE memory map affects both memory and the underlying file.  Assignment to an ACCESS_COPY memory map affects memory but does not update the underlying file.  Changed in version 2.5: To map anonymous memory, -1 should be passed as the fileno along with the length.  Changed in version 2.6: mmap.mmap has formerly been a factory function creating mmap objects. Now mmap.mmap is the class itself.   class mmap.mmap(fileno, length[, tagname[, access[, offset]]])\u00b6 (Windows version) Maps length bytes from the file specified by the file handle fileno, and creates a mmap object.  If length is larger than the current size of the file, the file is extended to contain length bytes.  If length is 0, the maximum length of the map is the current size of the file, except that if the file is empty Windows raises an exception (you cannot create an empty mapping on Windows). tagname, if specified and not None, is a string giving a tag name for the mapping.  Windows allows you to have many different mappings against the same file.  If you specify the name of an existing tag, that tag is opened, otherwise a new tag of this name is created.  If this parameter is omitted or None, the mapping is created without a name.  Avoiding the use of the tag parameter will assist in keeping your code portable between Unix and Windows. offset may be specified as a non-negative integer offset. mmap references will be relative to the offset from the beginning of the file. offset defaults to 0.  offset must be a multiple of the ALLOCATIONGRANULARITY.     class mmap.mmap(fileno, length[, flags[, prot[, access[, offset]]]]) (Unix version) Maps length bytes from the file specified by the file descriptor fileno, and returns a mmap object.  If length is 0, the maximum length of the map will be the current size of the file when mmap is called. flags specifies the nature of the mapping. MAP_PRIVATE creates a private copy-on-write mapping, so changes to the contents of the mmap object will be private to this process, and MAP_SHARED creates a mapping that&#8217;s shared with all other processes mapping the same areas of the file.  The default value is MAP_SHARED. prot, if specified, gives the desired memory protection; the two most useful values are PROT_READ and PROT_WRITE, to specify that the pages may be read or written.  prot defaults to PROT_READ | PROT_WRITE. access may be specified in lieu of flags and prot as an optional keyword parameter.  It is an error to specify both flags, prot and access.  See the description of access above for information on how to use this parameter. offset may be specified as a non-negative integer offset. mmap references will be relative to the offset from the beginning of the file. offset defaults to 0.  offset must be a multiple of the PAGESIZE or ALLOCATIONGRANULARITY. To ensure validity of the created memory mapping the file specified by the descriptor fileno is internally automatically synchronized with physical backing store on Mac OS X and OpenVMS. This example shows a simple way of using mmap: import mmap  # write a simple example file with open(\"hello.txt\", \"wb\") as f:     f.write(\"Hello Python!\\n\")  with open(\"hello.txt\", \"r+b\") as f:     # memory-map the file, size 0 means whole file     map = mmap.mmap(f.fileno(), 0)     # read content via standard file methods     print map.readline()  # prints \"Hello Python!\"     # read content via slice notation     print map[:5]  # prints \"Hello\"     # update content using slice notation;     # note that new content must have same size     map[6:] = \" world!\\n\"     # ... and read again using standard file methods     map.seek(0)     print map.readline()  # prints \"Hello  world!\"     # close the map     map.close()   The next example demonstrates how to create an anonymous map and exchange data between the parent and child processes: import mmap import os  map = mmap.mmap(-1, 13) map.write(\"Hello world!\")  pid = os.fork()  if pid == 0: # In a child process     map.seek(0)     print map.readline()      map.close()   Memory-mapped file objects support the following methods:   mmap.close()\u00b6 Close the file.  Subsequent calls to other methods of the object will result in an exception being raised.    mmap.find(string[, start[, end]])\u00b6 Returns the lowest index in the object where the substring string is found, such that string is contained in the range [start, end]. Optional arguments start and end are interpreted as in slice notation. Returns -1 on failure.    mmap.flush([offset, size])\u00b6 Flushes changes made to the in-memory copy of a file back to disk. Without use of this call there is no guarantee that changes are written back before the object is destroyed.  If offset and size are specified, only changes to the given range of bytes will be flushed to disk; otherwise, the whole extent of the mapping is flushed. (Windows version) A nonzero value returned indicates success; zero indicates failure. (Unix version) A zero value is returned to indicate success. An exception is raised when the call failed.     mmap.move(dest, src, count)\u00b6 Copy the count bytes starting at offset src to the destination index dest.  If the mmap was created with ACCESS_READ, then calls to move will raise a TypeError exception.    mmap.read(num)\u00b6 Return a string containing up to num bytes starting from the current file position; the file position is updated to point after the bytes that were returned.    mmap.read_byte()\u00b6 Returns a string of length 1 containing the character at the current file position, and advances the file position by 1.    mmap.readline()\u00b6 Returns a single line, starting at the current file position and up to the next newline.    mmap.resize(newsize)\u00b6 Resizes the map and the underlying file, if any. If the mmap was created with ACCESS_READ or ACCESS_COPY, resizing the map will raise a TypeError exception.    mmap.rfind(string[, start[, end]])\u00b6 Returns the highest index in the object where the substring string is found, such that string is contained in the range [start, end]. Optional arguments start and end are interpreted as in slice notation. Returns -1 on failure.    mmap.seek(pos[, whence])\u00b6 Set the file&#8217;s current position.  whence argument is optional and defaults to os.SEEK_SET or 0 (absolute file positioning); other values are os.SEEK_CUR or 1 (seek relative to the current position) and os.SEEK_END or 2 (seek relative to the file&#8217;s end).    mmap.size()\u00b6 Return the length of the file, which can be larger than the size of the memory-mapped area.    mmap.tell()\u00b6 Returns the current position of the file pointer.    mmap.write(string)\u00b6 Write the bytes in string into memory at the current position of the file pointer; the file position is updated to point after the bytes that were written. If the mmap was created with ACCESS_READ, then writing to it will raise a TypeError exception.    mmap.write_byte(byte)\u00b6 Write the single-character string byte into memory at the current position of the file pointer; the file position is advanced by 1. If the mmap was created with ACCESS_READ, then writing to it will raise a TypeError exception."},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.close","title":"mmap.close","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.find","title":"mmap.find","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.flush","title":"mmap.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.mmap","title":"mmap.mmap","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.move","title":"mmap.move","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.read","title":"mmap.read","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.read_byte","title":"mmap.read_byte","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.readline","title":"mmap.readline","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.resize","title":"mmap.resize","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.rfind","title":"mmap.rfind","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.seek","title":"mmap.seek","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.size","title":"mmap.size","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.tell","title":"mmap.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.write","title":"mmap.write","description":""},{"url":"http:\/\/docs.python.org\/library\/mmap.html#mmap.write_byte","title":"mmap.write_byte","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html","title":"threading","description":"16.2. threading &#8212; Higher-level threading interface\u00b6 Source code: Lib\/threading.py  This module constructs higher-level threading interfaces on top of the  lower level thread module. See also the mutex and Queue modules. The dummy_threading module is provided for situations where threading cannot be used because thread is missing.  Note Starting with Python 2.6, this module provides PEP 8 compliant aliases and properties to replace the camelCase names that were inspired by Java&#8217;s threading API. This updated API is compatible with that of the multiprocessing module. However, no schedule has been set for the deprecation of the camelCase names and they remain fully supported in both Python 2.x and 3.x.   Note Starting with Python 2.5, several Thread methods raise RuntimeError instead of AssertionError if called erroneously.   CPython implementation detail: Due to the Global Interpreter Lock, in CPython only one thread can execute Python code at once (even though certain performance-oriented libraries might overcome this limitation). If you want your application to make better of use of the computational resources of multi-core machines, you are advised to use multiprocessing. However, threading is still an appropriate model if you want to run multiple I\/O-bound tasks simultaneously.  This module defines the following functions and objects:   threading.active_count()\u00b6  threading.activeCount()\u00b6 Return the number of Thread objects currently alive.  The returned count is equal to the length of the list returned by enumerate().    threading.Condition() A factory function that returns a new condition variable object. A condition variable allows one or more threads to wait until they are notified by another thread. See Condition Objects.     threading.current_thread()\u00b6  threading.currentThread()\u00b6 Return the current Thread object, corresponding to the caller&#8217;s thread of control.  If the caller&#8217;s thread of control was not created through the threading module, a dummy thread object with limited functionality is returned.    threading.enumerate()\u00b6 Return a list of all Thread objects currently alive.  The list includes daemonic threads, dummy thread objects created by current_thread(), and the main thread.  It excludes terminated threads and threads that have not yet been started.    threading.Event() A factory function that returns a new event object.  An event manages a flag that can be set to true with the set() method and reset to false with the clear() method.  The wait() method blocks until the flag is true. See Event Objects.     class threading.local\u00b6 A class that represents thread-local data.  Thread-local data are data whose values are thread specific.  To manage thread-local data, just create an instance of local (or a subclass) and store attributes on it: mydata = threading.local() mydata.x = 1   The instance&#8217;s values will be different for separate threads. For more details and extensive examples, see the documentation string of the _threading_local module.  New in version 2.4.     threading.Lock()\u00b6 A factory function that returns a new primitive lock object.  Once a thread has acquired it, subsequent attempts to acquire it block, until it is released; any thread may release it. See Lock Objects.     threading.RLock()\u00b6 A factory function that returns a new reentrant lock object. A reentrant lock must be released by the thread that acquired it. Once a thread has acquired a reentrant lock, the same thread may acquire it again without blocking; the thread must release it once for each time it has acquired it. See RLock Objects.     threading.Semaphore([value]) A factory function that returns a new semaphore object.  A semaphore manages a counter representing the number of release() calls minus the number of acquire() calls, plus an initial value. The acquire() method blocks if necessary until it can return without making the counter negative.  If not given, value defaults to 1. See Semaphore Objects.     threading.BoundedSemaphore([value])\u00b6 A factory function that returns a new bounded semaphore object.  A bounded semaphore checks to make sure its current value doesn&#8217;t exceed its initial value.  If it does, ValueError is raised. In most situations semaphores are used to guard resources with limited capacity.  If the semaphore is released too many times it&#8217;s a sign of a bug.  If not given, value defaults to 1.    class threading.Thread A class that represents a thread of control.  This class can be safely subclassed in a limited fashion. See Thread Objects.     class threading.Timer A thread that executes a function after a specified interval has passed. See Timer Objects.     threading.settrace(func)\u00b6 Set a trace function for all threads started from the threading module. The func will be passed to  sys.settrace() for each thread, before its run() method is called.  New in version 2.3.     threading.setprofile(func)\u00b6 Set a profile function for all threads started from the threading module. The func will be passed to  sys.setprofile() for each thread, before its run() method is called.  New in version 2.3.     threading.stack_size([size])\u00b6 Return the thread stack size used when creating new threads.  The optional size argument specifies the stack size to be used for subsequently created threads, and must be 0 (use platform or configured default) or a positive integer value of at least 32,768 (32kB). If changing the thread stack size is unsupported, a ThreadError is raised.  If the specified stack size is invalid, a ValueError is raised and the stack size is unmodified.  32kB is currently the minimum supported stack size value to guarantee sufficient stack space for the interpreter itself.  Note that some platforms may have particular restrictions on values for the stack size, such as requiring a minimum stack size > 32kB or requiring allocation in multiples of the system memory page size - platform documentation should be referred to for more information (4kB pages are common; using multiples of 4096 for the stack size is the suggested approach in the absence of more specific information). Availability: Windows, systems with POSIX threads.  New in version 2.5.   Detailed interfaces for the objects are documented below. The design of this module is loosely based on Java&#8217;s threading model. However, where Java makes locks and condition variables basic behavior of every object, they are separate objects in Python.  Python&#8217;s Thread class supports a subset of the behavior of Java&#8217;s Thread class; currently, there are no priorities, no thread groups, and threads cannot be destroyed, stopped, suspended, resumed, or interrupted.  The static methods of Java&#8217;s Thread class, when implemented, are mapped to module-level functions. All of the methods described below are executed atomically.  16.2.1. Thread Objects\u00b6 This class represents an activity that is run in a separate thread of control. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass.  No other methods (except for the constructor) should be overridden in a subclass.  In other words,  only  override the __init__() and run() methods of this class. Once a thread object is created, its activity must be started by calling the thread&#8217;s start() method.  This invokes the run() method in a separate thread of control. Once the thread&#8217;s activity is started, the thread is considered &#8216;alive&#8217;. It stops being alive when its run() method terminates &#8211; either normally, or by raising an unhandled exception.  The is_alive() method tests whether the thread is alive. Other threads can call a thread&#8217;s join() method.  This blocks the calling thread until the thread whose join() method is called is terminated. A thread has a name.  The name can be passed to the constructor, and read or changed through the name attribute. A thread can be flagged as a &#8220;daemon thread&#8221;.  The significance of this flag is that the entire Python program exits when only daemon threads are left.  The initial value is inherited from the creating thread.  The flag can be set through the daemon property. There is a &#8220;main thread&#8221; object; this corresponds to the initial thread of control in the Python program.  It is not a daemon thread. There is the possibility that &#8220;dummy thread objects&#8221; are created. These are thread objects corresponding to &#8220;alien threads&#8221;, which are threads of control started outside the threading module, such as directly from C code.  Dummy thread objects have limited functionality; they are always considered alive and daemonic, and cannot be join()ed.  They are never deleted, since it is impossible to detect the termination of alien threads.   class threading.Thread(group=None, target=None, name=None, args=(), kwargs={})\u00b6 This constructor should always be called with keyword arguments.  Arguments are: group should be None; reserved for future extension when a ThreadGroup class is implemented. target is the callable object to be invoked by the run() method. Defaults to None, meaning nothing is called. name is the thread name.  By default, a unique name is constructed of the form &#8220;Thread-N&#8221; where N is a small decimal number. args is the argument tuple for the target invocation.  Defaults to (). kwargs is a dictionary of keyword arguments for the target invocation. Defaults to {}. If the subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__()) before doing anything else to the thread.   start()\u00b6 Start the thread&#8217;s activity. It must be called at most once per thread object.  It arranges for the object&#8217;s run() method to be invoked in a separate thread of control. This method will raise a RuntimeError if called more than once on the same thread object.     run()\u00b6 Method representing the thread&#8217;s activity. You may override this method in a subclass.  The standard run() method invokes the callable object passed to the object&#8217;s constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.     join([timeout])\u00b6 Wait until the thread terminates. This blocks the calling thread until the thread whose join() method is called terminates &#8211; either normally or through an unhandled exception &#8211; or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As join() always returns None, you must call isAlive() after join() to decide whether a timeout happened &#8211; if the thread is still alive, the join() call timed out. When the timeout argument is not present or None, the operation will block until the thread terminates. A thread can be join()ed many times. join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to join() a thread before it has been started and attempts to do so raises the same exception.     getName()\u00b6  setName()\u00b6 Old API for name.    name\u00b6 A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name.  The initial name is set by the constructor.    ident\u00b6 The &#8216;thread identifier&#8217; of this thread or None if the thread has not been started.  This is a nonzero integer.  See the thread.get_ident() function.  Thread identifiers may be recycled when a thread exits and another thread is created.  The identifier is available even after the thread has exited.  New in version 2.6.     is_alive()\u00b6  isAlive()\u00b6 Return whether the thread is alive. This method returns True just before the run() method starts until just after the run() method terminates.  The module function enumerate() returns a list of all alive threads.     isDaemon()\u00b6  setDaemon()\u00b6 Old API for daemon.    daemon\u00b6 A boolean value indicating whether this thread is a daemon thread (True) or not (False).  This must be set before start() is called, otherwise RuntimeError is raised.  Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False. The entire Python program exits when no alive non-daemon threads are left.       16.2.2. Lock Objects\u00b6 A primitive lock is a synchronization primitive that is not owned by a particular thread when locked.  In Python, it is currently the lowest level synchronization primitive available, implemented directly by the thread extension module. A primitive lock is in one of two states, &#8220;locked&#8221; or &#8220;unlocked&#8221;. It is created in the unlocked state.  It has two basic methods, acquire() and release().  When the state is unlocked, acquire() changes the state to locked and returns immediately.  When the state is locked, acquire() blocks until a call to release() in another thread changes it to unlocked, then the acquire() call resets it to locked and returns.  The release() method should only be called in the locked state; it changes the state to unlocked and returns immediately. If an attempt is made to release an unlocked lock, a RuntimeError will be raised. When more than one thread is blocked in acquire() waiting for the state to turn to unlocked, only one thread proceeds when a release() call resets the state to unlocked; which one of the waiting threads proceeds is not defined, and may vary across implementations. All methods are executed atomically.   Lock.acquire([blocking])\u00b6 Acquire a lock, blocking or non-blocking. When invoked without arguments, block until the lock is unlocked, then set it to locked, and return true. When invoked with the blocking argument set to true, do the same thing as when called without arguments, and return true. When invoked with the blocking argument set to false, do not block.  If a call without an argument would block, return false immediately; otherwise, do the same thing as when called without arguments, and return true.     Lock.release()\u00b6 Release a lock. When the lock is locked, reset it to unlocked, and return.  If any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed. Do not call this method when the lock is unlocked. There is no return value.     16.2.3. RLock Objects\u00b6 A reentrant lock is a synchronization primitive that may be acquired multiple times by the same thread.  Internally, it uses the concepts of &#8220;owning thread&#8221; and &#8220;recursion level&#8221; in addition to the locked\/unlocked state used by primitive locks.  In the locked state, some thread owns the lock; in the unlocked state, no thread owns it. To lock the lock, a thread calls its acquire() method; this returns once the thread owns the lock.  To unlock the lock, a thread calls its release() method. acquire()\/release() call pairs may be nested; only the final release() (the release() of the outermost pair) resets the lock to unlocked and allows another thread blocked in acquire() to proceed.   RLock.acquire([blocking=1])\u00b6 Acquire a lock, blocking or non-blocking. When invoked without arguments: if this thread already owns the lock, increment the recursion level by one, and return immediately.  Otherwise, if another thread owns the lock, block until the lock is unlocked.  Once the lock is unlocked (not owned by any thread), then grab ownership, set the recursion level to one, and return.  If more than one thread is blocked waiting until the lock is unlocked, only one at a time will be able to grab ownership of the lock. There is no return value in this case. When invoked with the blocking argument set to true, do the same thing as when called without arguments, and return true. When invoked with the blocking argument set to false, do not block.  If a call without an argument would block, return false immediately; otherwise, do the same thing as when called without arguments, and return true.     RLock.release()\u00b6 Release a lock, decrementing the recursion level.  If after the decrement it is zero, reset the lock to unlocked (not owned by any thread), and if any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.  If after the decrement the recursion level is still nonzero, the lock remains locked and owned by the calling thread. Only call this method when the calling thread owns the lock. A RuntimeError is raised if this method is called when the lock is unlocked. There is no return value.     16.2.4. Condition Objects\u00b6 A condition variable is always associated with some kind of lock; this can be passed in or one will be created by default.  (Passing one in is useful when several condition variables must share the same lock.) A condition variable has acquire() and release() methods that call the corresponding methods of the associated lock. It also has a wait() method, and notify() and notifyAll() methods.  These three must only be called when the calling thread has acquired the lock, otherwise a RuntimeError is raised. The wait() method releases the lock, and then blocks until it is awakened by a notify() or notifyAll() call for the same condition variable in another thread.  Once awakened, it re-acquires the lock and returns.  It is also possible to specify a timeout. The notify() method wakes up one of the threads waiting for the condition variable, if any are waiting.  The notifyAll() method wakes up all threads waiting for the condition variable. Note: the notify() and notifyAll() methods don&#8217;t release the lock; this means that the thread or threads awakened will not return from their wait() call immediately, but only when the thread that called notify() or notifyAll() finally relinquishes ownership of the lock. Tip: the typical programming style using condition variables uses the lock to synchronize access to some shared state; threads that are interested in a particular change of state call wait() repeatedly until they see the desired state, while threads that modify the state call notify() or notifyAll() when they change the state in such a way that it could possibly be a desired state for one of the waiters.  For example, the following code is a generic producer-consumer situation with unlimited buffer capacity: # Consume one item cv.acquire() while not an_item_is_available():     cv.wait() get_an_available_item() cv.release()  # Produce one item cv.acquire() make_an_item_available() cv.notify() cv.release()   To choose between notify() and notifyAll(), consider whether one state change can be interesting for only one or several waiting threads.  E.g. in a typical producer-consumer situation, adding one item to the buffer only needs to wake up one consumer thread.   class threading.Condition([lock])\u00b6 If the lock argument is given and not None, it must be a Lock or RLock object, and it is used as the underlying lock.  Otherwise, a new RLock object is created and used as the underlying lock.   acquire(*args)\u00b6 Acquire the underlying lock. This method calls the corresponding method on the underlying lock; the return value is whatever that method returns.    release()\u00b6 Release the underlying lock. This method calls the corresponding method on the underlying lock; there is no return value.    wait([timeout])\u00b6 Wait until notified or until a timeout occurs. If the calling thread has not acquired the lock when this method is called, a RuntimeError is raised. This method releases the underlying lock, and then blocks until it is awakened by a notify() or notifyAll() call for the same condition variable in another thread, or until the optional timeout occurs.  Once awakened or timed out, it re-acquires the lock and returns. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). When the underlying lock is an RLock, it is not released using its release() method, since this may not actually unlock the lock when it was acquired multiple times recursively.  Instead, an internal interface of the RLock class is used, which really unlocks it even when it has been recursively acquired several times. Another internal interface is then used to restore the recursion level when the lock is reacquired.     notify(n=1)\u00b6 By default, wake up one thread waiting on this condition, if any.  If the calling thread has not acquired the lock when this method is called, a RuntimeError is raised. This method wakes up at most n of the threads waiting for the condition variable; it is a no-op if no threads are waiting. The current implementation wakes up exactly n threads, if at least n threads are waiting.  However, it&#8217;s not safe to rely on this behavior. A future, optimized implementation may occasionally wake up more than n threads. Note: an awakened thread does not actually return from its wait() call until it can reacquire the lock.  Since notify() does not release the lock, its caller should.     notify_all()\u00b6  notifyAll()\u00b6 Wake up all threads waiting on this condition.  This method acts like notify(), but wakes up all waiting threads instead of one. If the calling thread has not acquired the lock when this method is called, a RuntimeError is raised.      16.2.5. Semaphore Objects\u00b6 This is one of the oldest synchronization primitives in the history of computer science, invented by the early Dutch computer scientist Edsger W. Dijkstra (he used P() and V() instead of acquire() and release()). A semaphore manages an internal counter which is decremented by each acquire() call and incremented by each release() call.  The counter can never go below zero; when acquire() finds that it is zero, it blocks, waiting until some other thread calls release().   class threading.Semaphore([value])\u00b6 The optional argument gives the initial value for the internal counter; it defaults to 1. If the value given is less than 0, ValueError is raised.   acquire([blocking])\u00b6 Acquire a semaphore. When invoked without arguments: if the internal counter is larger than zero on entry, decrement it by one and return immediately.  If it is zero on entry, block, waiting until some other thread has called release() to make it larger than zero.  This is done with proper interlocking so that if multiple acquire() calls are blocked, release() will wake exactly one of them up.  The implementation may pick one at random, so the order in which blocked threads are awakened should not be relied on.  There is no return value in this case. When invoked with blocking set to true, do the same thing as when called without arguments, and return true. When invoked with blocking set to false, do not block.  If a call without an argument would block, return false immediately; otherwise, do the same thing as when called without arguments, and return true.     release()\u00b6 Release a semaphore, incrementing the internal counter by one.  When it was zero on entry and another thread is waiting for it to become larger than zero again, wake up that thread.     16.2.5.1. Semaphore Example\u00b6 Semaphores are often used to guard resources with limited capacity, for example, a database server.  In any situation where the size of the resource is fixed, you should use a bounded semaphore.  Before spawning any worker threads, your main thread would initialize the semaphore: maxconnections = 5 ... pool_sema = BoundedSemaphore(value=maxconnections)   Once spawned, worker threads call the semaphore&#8217;s acquire and release methods when they need to connect to the server: pool_sema.acquire() conn = connectdb() ... use connection ... conn.close() pool_sema.release()   The use of a bounded semaphore reduces the chance that a programming error which causes the semaphore to be released more than it&#8217;s acquired will go undetected.    16.2.6. Event Objects\u00b6 This is one of the simplest mechanisms for communication between threads: one thread signals an event and other threads wait for it. An event object manages an internal flag that can be set to true with the set() method and reset to false with the clear() method.  The wait() method blocks until the flag is true.   class threading.Event\u00b6 The internal flag is initially false.   is_set()\u00b6  isSet()\u00b6 Return true if and only if the internal flag is true.  Changed in version 2.6: The is_set() syntax is new.     set()\u00b6 Set the internal flag to true. All threads waiting for it to become true are awakened. Threads that call wait() once the flag is true will not block at all.    clear()\u00b6 Reset the internal flag to false. Subsequently, threads calling wait() will block until set() is called to set the internal flag to true again.    wait([timeout])\u00b6 Block until the internal flag is true.  If the internal flag is true on entry, return immediately.  Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs. When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). This method returns the internal flag on exit, so it will always return True except if a timeout is given and the operation times out.  Changed in version 2.7: Previously, the method always returned None.       16.2.7. Timer Objects\u00b6 This class represents an action that should be run only after a certain amount of time has passed &#8212; a timer.  Timer is a subclass of Thread and as such also functions as an example of creating custom threads. Timers are started, as with threads, by calling their start() method.  The timer can be stopped (before its action has begun) by calling the cancel() method.  The interval the timer will wait before executing its action may not be exactly the same as the interval specified by the user. For example: def hello():     print \"hello, world\"  t = Timer(30.0, hello) t.start() # after 30 seconds, \"hello, world\" will be printed     class threading.Timer(interval, function, args=[], kwargs={})\u00b6 Create a timer that will run function with arguments args and  keyword arguments kwargs, after interval seconds have passed.   cancel()\u00b6 Stop the timer, and cancel the execution of the timer&#8217;s action.  This will only work if the timer is still in its waiting stage.      16.2.8. Using locks, conditions, and semaphores in the with statement\u00b6 All of the objects provided by this module that have acquire() and release() methods can be used as context managers for a with statement.  The acquire() method will be called when the block is entered, and release() will be called when the block is exited. Currently, Lock, RLock, Condition, Semaphore, and BoundedSemaphore objects may be used as with statement context managers.  For example: import threading  some_rlock = threading.RLock()  with some_rlock:     print \"some_rlock is locked while this executes\"     16.2.9. Importing in threaded code\u00b6 While the import machinery is thread-safe, there are two key restrictions on threaded imports due to inherent limitations in the way that thread-safety is provided:  Firstly, other than in the main module, an import should not have the side effect of spawning a new thread and then waiting for that thread in any way. Failing to abide by this restriction can lead to a deadlock if the spawned thread directly or indirectly attempts to import a module. Secondly, all import attempts must be completed before the interpreter starts shutting itself down. This can be most easily achieved by only performing imports from non-daemon threads created through the threading module. Daemon threads and threads created directly with the thread module will require some other form of synchronization to ensure they do not attempt imports after system shutdown has commenced. Failure to abide by this restriction will lead to intermittent exceptions and crashes during interpreter shutdown (as the late imports attempt to access machinery which is no longer in a valid state)."},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.active_count","title":"threading.active_count","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.BoundedSemaphore","title":"threading.BoundedSemaphore","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Condition","title":"threading.Condition","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Condition.acquire","title":"threading.Condition.acquire","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Condition.notify","title":"threading.Condition.notify","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Condition.notify_all","title":"threading.Condition.notify_all","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Condition.release","title":"threading.Condition.release","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Condition.wait","title":"threading.Condition.wait","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.current_thread","title":"threading.current_thread","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.enumerate","title":"threading.enumerate","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Event","title":"threading.Event","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Event.clear","title":"threading.Event.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Event.is_set","title":"threading.Event.is_set","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Event.set","title":"threading.Event.set","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Event.wait","title":"threading.Event.wait","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.local","title":"threading.local","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Lock","title":"threading.Lock","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Lock.acquire","title":"threading.Lock.acquire","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Lock.release","title":"threading.Lock.release","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.RLock","title":"threading.RLock","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.RLock.acquire","title":"threading.RLock.acquire","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.RLock.release","title":"threading.RLock.release","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Semaphore","title":"threading.Semaphore","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Semaphore.acquire","title":"threading.Semaphore.acquire","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Semaphore.release","title":"threading.Semaphore.release","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.setprofile","title":"threading.setprofile","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.settrace","title":"threading.settrace","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.stack_size","title":"threading.stack_size","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Thread","title":"threading.Thread","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Thread.getName","title":"threading.Thread.getName","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Thread.is_alive","title":"threading.Thread.is_alive","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Thread.isDaemon","title":"threading.Thread.isDaemon","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Thread.join","title":"threading.Thread.join","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Thread.run","title":"threading.Thread.run","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Thread.start","title":"threading.Thread.start","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Timer","title":"threading.Timer","description":""},{"url":"http:\/\/docs.python.org\/library\/threading.html#threading.Timer.cancel","title":"threading.Timer.cancel","description":""},{"url":"http:\/\/docs.python.org\/library\/rlcompleter.html","title":"rlcompleter","description":"16.9. rlcompleter &#8212; Completion function for GNU readline\u00b6 Source code: Lib\/rlcompleter.py  The rlcompleter module defines a completion function suitable for the readline module by completing valid Python identifiers and keywords. When this module is imported on a Unix platform with the readline module available, an instance of the Completer class is automatically created and its complete() method is set as the readline completer. Example: >>> import rlcompleter >>> import readline >>> readline.parse_and_bind(\"tab: complete\") >>> readline. <TAB PRESSED> readline.__doc__          readline.get_line_buffer(  readline.read_init_file( readline.__file__         readline.insert_text(      readline.set_completer( readline.__name__         readline.parse_and_bind( >>> readline.   The rlcompleter module is designed for use with Python&#8217;s interactive mode.  A user can add the following lines to his or her initialization file (identified by the PYTHONSTARTUP environment variable) to get automatic Tab completion: try:     import readline except ImportError:     print \"Module readline not available.\" else:     import rlcompleter     readline.parse_and_bind(\"tab: complete\")   On platforms without readline, the Completer class defined by this module can still be used for custom purposes.  16.9.1. Completer Objects\u00b6 Completer objects have the following method:   Completer.complete(text, state)\u00b6 Return the stateth completion for text. If called for text that doesn&#8217;t include a period character ('.'), it will complete from names currently defined in __main__, __builtin__ and keywords (as defined by the keyword module). If called for a dotted name, it will try to evaluate anything without obvious side-effects (functions will not be evaluated, but it can generate calls to __getattr__()) up to the last part, and find matches for the rest via the dir() function.  Any exception raised during the evaluation of the expression is caught, silenced and None is returned."},{"url":"http:\/\/docs.python.org\/library\/rlcompleter.html#rlcompleter.Completer.complete","title":"rlcompleter.Completer.complete","description":""},{"url":"http:\/\/docs.python.org\/library\/signal.html","title":"signal","description":"17.4. signal &#8212; Set handlers for asynchronous events\u00b6 This module provides mechanisms to use signal handlers in Python. Some general rules for working with signals and their handlers:  A handler for a particular signal, once set, remains installed until it is explicitly reset (Python emulates the BSD style interface regardless of the underlying implementation), with the exception of the handler for SIGCHLD, which follows the underlying implementation. There is no way to &#8220;block&#8221; signals temporarily from critical sections (since this is not supported by all Unix flavors). Although Python signal handlers are called asynchronously as far as the Python user is concerned, they can only occur between the &#8220;atomic&#8221; instructions of the Python interpreter.  This means that signals arriving during long calculations implemented purely in C (such as regular expression matches on large bodies of text) may be delayed for an arbitrary amount of time. When a signal arrives during an I\/O operation, it is possible that the I\/O operation raises an exception after the signal handler returns. This is dependent on the underlying Unix system&#8217;s semantics regarding interrupted system calls. Because the C signal handler always returns, it makes little sense to catch synchronous errors like SIGFPE or SIGSEGV. Python installs a small number of signal handlers by default: SIGPIPE is ignored (so write errors on pipes and sockets can be reported as ordinary Python exceptions) and SIGINT is translated into a KeyboardInterrupt exception.  All of these can be overridden. Some care must be taken if both signals and threads are used in the same program.  The fundamental thing to remember in using signals and threads simultaneously is: always perform signal() operations in the main thread of execution.  Any thread can perform an alarm(), getsignal(), pause(), setitimer() or getitimer(); only the main thread can set a new signal handler, and the main thread will be the only one to receive signals (this is enforced by the Python signal module, even if the underlying thread implementation supports sending signals to individual threads).  This means that signals can&#8217;t be used as a means of inter-thread communication.  Use locks instead.  The variables defined in the signal module are:   signal.SIG_DFL\u00b6 This is one of two standard signal handling options; it will simply perform the default function for the signal.  For example, on most systems the default action for SIGQUIT is to dump core and exit, while the default action for SIGCHLD is to simply ignore it.    signal.SIG_IGN\u00b6 This is another standard signal handler, which will simply ignore the given signal.    SIG* All the signal numbers are defined symbolically.  For example, the hangup signal is defined as signal.SIGHUP; the variable names are identical to the names used in C programs, as found in <signal.h>. The Unix man page for &#8216;signal()&#8216; lists the existing signals (on some systems this is signal(2), on others the list is in signal(7)). Note that not all systems define the same set of signal names; only those names defined by the system are defined by this module.    signal.CTRL_C_EVENT\u00b6 The signal corresponding to the CTRL+C keystroke event. This signal can only be used with os.kill(). Availability: Windows.  New in version 2.7.     signal.CTRL_BREAK_EVENT\u00b6 The signal corresponding to the CTRL+BREAK keystroke event. This signal can only be used with os.kill(). Availability: Windows.  New in version 2.7.     signal.NSIG\u00b6 One more than the number of the highest signal number.    signal.ITIMER_REAL\u00b6 Decrements interval timer in real time, and delivers SIGALRM upon expiration.    signal.ITIMER_VIRTUAL\u00b6 Decrements interval timer only when the process is executing, and delivers SIGVTALRM upon expiration.    signal.ITIMER_PROF\u00b6 Decrements interval timer both when the process executes and when the system is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this timer is usually used to profile the time spent by the application in user and kernel space. SIGPROF is delivered upon expiration.  The signal module defines one exception:   exception signal.ItimerError\u00b6 Raised to signal an error from the underlying setitimer() or getitimer() implementation. Expect this error if an invalid interval timer or a negative time is passed to setitimer(). This error is a subtype of IOError.  The signal module defines the following functions:   signal.alarm(time)\u00b6 If time is non-zero, this function requests that a SIGALRM signal be sent to the process in time seconds. Any previously scheduled alarm is canceled (only one alarm can be scheduled at any time).  The returned value is then the number of seconds before any previously set alarm was to have been delivered. If time is zero, no alarm is scheduled, and any scheduled alarm is canceled.  If the return value is zero, no alarm is currently scheduled.  (See the Unix man page alarm(2).) Availability: Unix.    signal.getsignal(signalnum)\u00b6 Return the current signal handler for the signal signalnum. The returned value may be a callable Python object, or one of the special values signal.SIG_IGN, signal.SIG_DFL or None.  Here, signal.SIG_IGN means that the signal was previously ignored, signal.SIG_DFL means that the default way of handling the signal was previously in use, and None means that the previous signal handler was not installed from Python.    signal.pause()\u00b6 Cause the process to sleep until a signal is received; the appropriate handler will then be called.  Returns nothing.  Not on Windows. (See the Unix man page signal(2).)    signal.setitimer(which, seconds[, interval])\u00b6 Sets given interval timer (one of signal.ITIMER_REAL, signal.ITIMER_VIRTUAL or signal.ITIMER_PROF) specified by which to fire after seconds (float is accepted, different from alarm()) and after that every interval seconds. The interval timer specified by which can be cleared by setting seconds to zero. When an interval timer fires, a signal is sent to the process. The signal sent is dependent on the timer being used; signal.ITIMER_REAL will deliver SIGALRM, signal.ITIMER_VIRTUAL sends SIGVTALRM, and signal.ITIMER_PROF will deliver SIGPROF. The old values are returned as a tuple: (delay, interval). Attempting to pass an invalid interval timer will cause an ItimerError.  Availability: Unix.  New in version 2.6.     signal.getitimer(which)\u00b6 Returns current value of a given interval timer specified by which. Availability: Unix.  New in version 2.6.     signal.set_wakeup_fd(fd)\u00b6 Set the wakeup fd to fd.  When a signal is received, a '\\0' byte is written to the fd.  This can be used by a library to wakeup a poll or select call, allowing the signal to be fully processed. The old wakeup fd is returned.  fd must be non-blocking.  It is up to the library to remove any bytes before calling poll or select again. When threads are enabled, this function can only be called from the main thread; attempting to call it from other threads will cause a ValueError exception to be raised.  New in version 2.6.     signal.siginterrupt(signalnum, flag)\u00b6 Change system call restart behaviour: if flag is False, system calls will be restarted when interrupted by signal signalnum, otherwise system calls will be interrupted.  Returns nothing.  Availability: Unix (see the man page siginterrupt(3) for further information). Note that installing a signal handler with signal() will reset the restart behaviour to interruptible by implicitly calling siginterrupt() with a true flag value for the given signal.  New in version 2.6.     signal.signal(signalnum, handler)\u00b6 Set the handler for signal signalnum to the function handler.  handler can be a callable Python object taking two arguments (see below), or one of the special values signal.SIG_IGN or signal.SIG_DFL.  The previous signal handler will be returned (see the description of getsignal() above).  (See the Unix man page signal(2).) When threads are enabled, this function can only be called from the main thread; attempting to call it from other threads will cause a ValueError exception to be raised. The handler is called with two arguments: the signal number and the current stack frame (None or a frame object; for a description of frame objects, see the description in the type hierarchy or see the attribute descriptions in the inspect module). On Windows, signal() can only be called with SIGABRT, SIGFPE, SIGILL, SIGINT, SIGSEGV, or SIGTERM. A ValueError will be raised in any other case.    17.4.1. Example\u00b6 Here is a minimal example program. It uses the alarm() function to limit the time spent waiting to open a file; this is useful if the file is for a serial device that may not be turned on, which would normally cause the os.open() to hang indefinitely.  The solution is to set a 5-second alarm before opening the file; if the operation takes too long, the alarm signal will be sent, and the handler raises an exception. import signal, os  def handler(signum, frame):     print &#39;Signal handler called with signal&#39;, signum     raise IOError(\"Couldn&#39;t open device!\")  # Set the signal handler and a 5-second alarm signal.signal(signal.SIGALRM, handler) signal.alarm(5)  # This open() may hang indefinitely fd = os.open(&#39;\/dev\/ttyS0&#39;, os.O_RDWR)  signal.alarm(0)          # Disable the alarm"},{"url":"http:\/\/docs.python.org\/library\/signal.html#signal.alarm","title":"signal.alarm","description":""},{"url":"http:\/\/docs.python.org\/library\/signal.html#signal.getitimer","title":"signal.getitimer","description":""},{"url":"http:\/\/docs.python.org\/library\/signal.html#signal.getsignal","title":"signal.getsignal","description":""},{"url":"http:\/\/docs.python.org\/library\/signal.html#signal.pause","title":"signal.pause","description":""},{"url":"http:\/\/docs.python.org\/library\/signal.html#signal.set_wakeup_fd","title":"signal.set_wakeup_fd","description":""},{"url":"http:\/\/docs.python.org\/library\/signal.html#signal.setitimer","title":"signal.setitimer","description":""},{"url":"http:\/\/docs.python.org\/library\/signal.html#signal.siginterrupt","title":"signal.siginterrupt","description":""},{"url":"http:\/\/docs.python.org\/library\/signal.html#signal.signal","title":"signal.signal","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html","title":"popen2","description":"17.5. popen2 &#8212; Subprocesses with accessible I\/O streams\u00b6  Deprecated since version 2.6: This module is obsolete.  Use the subprocess module.  Check especially the Replacing Older Functions with the subprocess Module section. This module allows you to spawn processes and connect to their input\/output\/error pipes and obtain their return codes under Unix and Windows. The subprocess module provides more powerful facilities for spawning new processes and retrieving their results.  Using the subprocess module is preferable to using the popen2 module. The primary interface offered by this module is a trio of factory functions. For each of these, if bufsize is specified,  it specifies the buffer size for the I\/O pipes.  mode, if provided, should be the string 'b' or 't'; on Windows this is needed to determine whether the file objects should be opened in binary or text mode.  The default value for mode is 't'. On Unix, cmd may be a sequence, in which case arguments will be passed directly to the program without shell intervention (as with os.spawnv()). If cmd is a string it will be passed to the shell (as with os.system()). The only way to retrieve the return codes for the child processes is by using the poll() or wait() methods on the Popen3 and Popen4 classes; these are only available on Unix.  This information is not available when using the popen2(), popen3(), and popen4() functions, or the equivalent functions in the os module. (Note that the tuples returned by the os module&#8217;s functions are in a different order from the ones returned by the popen2 module.)   popen2.popen2(cmd[, bufsize[, mode]])\u00b6 Executes cmd as a sub-process.  Returns the file objects (child_stdout, child_stdin).    popen2.popen3(cmd[, bufsize[, mode]])\u00b6 Executes cmd as a sub-process.  Returns the file objects (child_stdout, child_stdin, child_stderr).    popen2.popen4(cmd[, bufsize[, mode]])\u00b6 Executes cmd as a sub-process.  Returns the file objects (child_stdout_and_stderr, child_stdin).  New in version 2.0.   On Unix, a class defining the objects returned by the factory functions is also available.  These are not used for the Windows implementation, and are not available on that platform.   class popen2.Popen3(cmd[, capturestderr[, bufsize]])\u00b6 This class represents a child process.  Normally, Popen3 instances are created using the popen2() and popen3() factory functions described above. If not using one of the helper functions to create Popen3 objects, the parameter cmd is the shell command to execute in a sub-process.  The capturestderr flag, if true, specifies that the object should capture standard error output of the child process. The default is false.  If the bufsize parameter is specified, it specifies the size of the I\/O buffers to\/from the child process.     class popen2.Popen4(cmd[, bufsize])\u00b6 Similar to Popen3, but always captures standard error into the same file object as standard output.  These are typically created using popen4().  New in version 2.0.    17.5.1. Popen3 and Popen4 Objects\u00b6 Instances of the Popen3 and Popen4 classes have the following methods:   Popen3.poll()\u00b6 Returns -1 if child process hasn&#8217;t completed yet, or its status code (see wait()) otherwise.    Popen3.wait()\u00b6 Waits for and returns the status code of the child process.  The status code encodes both the return code of the process and information about whether it exited using the exit() system call or died due to a signal.  Functions to help interpret the status code are defined in the os module; see section Process Management for the W*() family of functions.  The following attributes are also available:   Popen3.fromchild\u00b6 A file object that provides output from the child process.  For Popen4 instances, this will provide both the standard output and standard error streams.    Popen3.tochild\u00b6 A file object that provides input to the child process.    Popen3.childerr\u00b6 A file object that provides error output from the child process, if capturestderr was true for the constructor, otherwise None.  This will always be None for Popen4 instances.    Popen3.pid\u00b6 The process ID of the child process.    17.5.2. Flow Control Issues\u00b6 Any time you are working with any form of inter-process communication, control flow needs to be carefully thought out.  This remains the case with the file objects provided by this module (or the os module equivalents). When reading output from a child process that writes a lot of data to standard error while the parent is reading from the child&#8217;s standard output, a deadlock can occur.  A similar situation can occur with other combinations of reads and writes.  The essential factors are that more than _PC_PIPE_BUF bytes are being written by one process in a blocking fashion, while the other process is reading from the first process, also in a blocking fashion. There are several ways to deal with this situation. The simplest application change, in many cases, will be to follow this model in the parent process: import popen2  r, w, e = popen2.popen3(&#39;python slave.py&#39;) e.readlines() r.readlines() r.close() e.close() w.close()   with code like this in the child: import os import sys  # note that each of these print statements # writes a single long string  print >>sys.stderr, 400 * &#39;this is a test\\n&#39; os.close(sys.stderr.fileno()) print >>sys.stdout, 400 * &#39;this is another test\\n&#39;   In particular, note that sys.stderr must be closed after writing all data, or readlines() won&#8217;t return.  Also note that os.close() must be used, as sys.stderr.close() won&#8217;t close stderr (otherwise assigning to sys.stderr will silently close it, so no further errors can be printed). Applications which need to support a more general approach should integrate I\/O over pipes with their select() loops, or use separate threads to read each of the individual files provided by whichever popen*() function or Popen* class was used.  See also  Module subprocess Module for spawning and managing subprocesses."},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2.popen2","title":"popen2.popen2","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2_popen2_popen2.Popen3","title":"popen2.Popen3","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2.popen3","title":"popen2.popen3","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2_popen2_popen2.Popen3","title":"popen2.Popen3","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2.Popen3.poll","title":"popen2.Popen3.poll","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2.Popen3.wait","title":"popen2.Popen3.wait","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2_popen2_popen2.Popen4","title":"popen2.Popen4","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2.popen4","title":"popen2.popen4","description":""},{"url":"http:\/\/docs.python.org\/library\/popen2.html#popen2_popen2_popen2.Popen4","title":"popen2.Popen4","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html","title":"subprocess","description":"17.1. subprocess &#8212; Subprocess management\u00b6  New in version 2.4. The subprocess module allows you to spawn new processes, connect to their input\/output\/error pipes, and obtain their return codes.  This module intends to replace several other, older modules and functions, such as: os.system os.spawn* os.popen* popen2.* commands.*  Information about how the subprocess module can be used to replace these modules and functions can be found in the following sections.  See also PEP 324 &#8211; PEP proposing the subprocess module   17.1.1. Using the subprocess Module\u00b6 The recommended approach to invoking subprocesses is to use the following convenience functions for all use cases they can handle. For more advanced use cases, the underlying Popen interface can be used directly.   subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False)\u00b6 Run the command described by args.  Wait for command to complete, then return the returncode attribute. The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the slightly odd notation in the abbreviated signature). The full function signature is the same as that of the Popen constructor - this functions passes all supplied arguments directly through to that interface. Examples: >>> subprocess.call([\"ls\", \"-l\"]) 0  >>> subprocess.call(\"exit 1\", shell=True) 1    Warning Invoking the system shell with shell=True can be a security hazard if combined with untrusted input. See the warning under Frequently Used Arguments for details.   Note Do not use stdout=PIPE or stderr=PIPE with this function. As the pipes are not being read in the current process, the child process may block if it generates enough output to a pipe to fill up the OS pipe buffer.      subprocess.check_call(args, *, stdin=None, stdout=None, stderr=None, shell=False)\u00b6 Run command with arguments.  Wait for command to complete. If the return code was zero then return, otherwise raise CalledProcessError. The CalledProcessError object will have the return code in the returncode attribute. The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the slightly odd notation in the abbreviated signature). The full function signature is the same as that of the Popen constructor - this functions passes all supplied arguments directly through to that interface. Examples: >>> subprocess.check_call([\"ls\", \"-l\"]) 0  >>> subprocess.check_call(\"exit 1\", shell=True) Traceback (most recent call last):    ... subprocess.CalledProcessError: Command &#39;exit 1&#39; returned non-zero exit status 1    New in version 2.5.  Warning Invoking the system shell with shell=True can be a security hazard if combined with untrusted input. See the warning under Frequently Used Arguments for details.   Note Do not use stdout=PIPE or stderr=PIPE with this function. As the pipes are not being read in the current process, the child process may block if it generates enough output to a pipe to fill up the OS pipe buffer.      subprocess.check_output(args, *, stdin=None, stderr=None, shell=False, universal_newlines=False)\u00b6 Run command with arguments and return its output as a byte string. If the return code was non-zero it raises a CalledProcessError. The CalledProcessError object will have the return code in the returncode attribute and any output in the output attribute. The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the slightly odd notation in the abbreviated signature). The full function signature is largely the same as that of the Popen constructor, except that stdout is not permitted as it is used internally. All other supplied arguments are passed directly through to the Popen constructor. Examples: >>> subprocess.check_output([\"echo\", \"Hello World!\"]) &#39;Hello World!\\n&#39;  >>> subprocess.check_output(\"exit 1\", shell=True) Traceback (most recent call last):    ... subprocess.CalledProcessError: Command &#39;exit 1&#39; returned non-zero exit status 1   To also capture standard error in the result, use stderr=subprocess.STDOUT: >>> subprocess.check_output( ...     \"ls non_existent_file; exit 0\", ...     stderr=subprocess.STDOUT, ...     shell=True) &#39;ls: non_existent_file: No such file or directory\\n&#39;    New in version 2.7.  Warning Invoking the system shell with shell=True can be a security hazard if combined with untrusted input. See the warning under Frequently Used Arguments for details.   Note Do not use stderr=PIPE with this function. As the pipe is not being read in the current process, the child process may block if it generates enough output to the pipe to fill up the OS pipe buffer.      subprocess.PIPE\u00b6 Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.    subprocess.STDOUT\u00b6 Special value that can be used as the stderr argument to Popen and indicates that standard error should go into the same handle as standard output.   17.1.1.1. Frequently Used Arguments\u00b6 To support a wide variety of use cases, the Popen constructor (and the convenience functions) accept a large number of optional arguments. For most typical use cases, many of these arguments can be safely left at their default values. The arguments that are most commonly needed are:  args is required for all calls and should be a string, or a sequence of program arguments. Providing a sequence of arguments is generally preferred, as it allows the module to take care of any required escaping and quoting of arguments (e.g. to permit spaces in file names). If passing a single string, either shell must be True (see below) or else the string must simply name the program to be executed without specifying any arguments. stdin, stdout and stderr specify the executed program&#8217;s standard input, standard output and standard error file handles, respectively.  Valid values are PIPE, an existing file descriptor (a positive integer), an existing file object, and None.  PIPE indicates that a new pipe to the child should be created.  With the default settings of None, no redirection will occur; the child&#8217;s file handles will be inherited from the parent.  Additionally, stderr can be STDOUT, which indicates that the stderr data from the child process should be captured into the same file handle as for stdout. When stdout or stderr are pipes and universal_newlines is True then all line endings will be converted to '\\n' as described for the universal newlines &#8216;U&#8217;` mode argument to open(). If shell is True, the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want access to other shell features such as filename wildcards, shell pipes and environment variable expansion.  Warning Executing shell commands that incorporate unsanitized input from an untrusted source makes a program vulnerable to shell injection, a serious security flaw which can result in arbitrary command execution. For this reason, the use of shell=True is strongly discouraged in cases where the command string is constructed from external input: >>> from subprocess import call >>> filename = input(\"What file would you like to display?\\n\") What file would you like to display? non_existent; rm -rf \/ # >>> call(\"cat \" + filename, shell=True) # Uh-oh. This will end badly...   shell=False disables all shell based features, but does not suffer from this vulnerability; see the Note in the Popen constructor documentation for helpful hints in getting shell=False to work.   These options, along with all of the other options, are described in more detail in the Popen constructor documentation.   17.1.1.2. Popen Constructor\u00b6 The underlying process creation and management in this module is handled by the Popen class. It offers a lot of flexibility so that developers are able to handle the less common cases not covered by the convenience functions.   class subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)\u00b6 Arguments are: args should be a string, or a sequence of program arguments.  The program to execute is normally the first item in the args sequence or the string if a string is given, but can be explicitly set by using the executable argument.  When executable is given, the first item in the args sequence is still treated by most programs as the command name, which can then be different from the actual executable name.  On Unix, it becomes the display name for the executing program in utilities such as ps. On Unix, with shell=False (default): In this case, the Popen class uses os.execvp() to execute the child program. args should normally be a sequence.  If a string is specified for args, it will be used as the name or path of the program to execute; this will only work if the program is being given no arguments.  Note shlex.split() can be useful when determining the correct tokenization for args, especially in complex cases: >>> import shlex, subprocess >>> command_line = raw_input() \/bin\/vikings -input eggs.txt -output \"spam spam.txt\" -cmd \"echo &#39;$MONEY&#39;\" >>> args = shlex.split(command_line) >>> print args [&#39;\/bin\/vikings&#39;, &#39;-input&#39;, &#39;eggs.txt&#39;, &#39;-output&#39;, &#39;spam spam.txt&#39;, &#39;-cmd&#39;, \"echo &#39;$MONEY&#39;\"] >>> p = subprocess.Popen(args) # Success!   Note in particular that options (such as -input) and arguments (such as eggs.txt) that are separated by whitespace in the shell go in separate list elements, while arguments that need quoting or backslash escaping when used in the shell (such as filenames containing spaces or the echo command shown above) are single list elements.  On Unix, with shell=True: If args is a string, it specifies the command string to execute through the shell.  This means that the string must be formatted exactly as it would be when typed at the shell prompt.  This includes, for example, quoting or backslash escaping filenames with spaces in them.  If args is a sequence, the first item specifies the command string, and any additional items will be treated as additional arguments to the shell itself.  That is to say, Popen does the equivalent of: Popen([&#39;\/bin\/sh&#39;, &#39;-c&#39;, args[0], args[1], ...])   On Windows: the Popen class uses CreateProcess() to execute the child child program, which operates on strings.  If args is a sequence, it will be converted to a string in a manner described in Converting an argument sequence to a string on Windows. bufsize, if given, has the same meaning as the corresponding argument to the built-in open() function: 0 means unbuffered, 1 means line buffered, any other positive value means use a buffer of (approximately) that size.  A negative bufsize means to use the system default, which usually means fully buffered.  The default value for bufsize is 0 (unbuffered).  Note If you experience performance issues, it is recommended that you try to enable buffering by setting bufsize to either -1 or a large enough positive value (such as 4096).  The executable argument specifies the program to execute. It is very seldom needed: Usually, the program to execute is defined by the args argument. If shell=True, the executable argument specifies which shell to use. On Unix, the default shell is \/bin\/sh.  On Windows, the default shell is specified by the COMSPEC environment variable. The only reason you would need to specify shell=True on Windows is where the command you wish to execute is actually built in to the shell, eg dir, copy. You don&#8217;t need shell=True to run a batch file, nor to run a console-based executable. stdin, stdout and stderr specify the executed program&#8217;s standard input, standard output and standard error file handles, respectively.  Valid values are PIPE, an existing file descriptor (a positive integer), an existing file object, and None.  PIPE indicates that a new pipe to the child should be created.  With the default settings of None, no redirection will occur; the child&#8217;s file handles will be inherited from the parent.  Additionally, stderr can be STDOUT, which indicates that the stderr data from the child process should be captured into the same file handle as for stdout. If preexec_fn is set to a callable object, this object will be called in the child process just before the child is executed. (Unix only) If close_fds is true, all file descriptors except 0, 1 and 2 will be closed before the child process is executed. (Unix only). Or, on Windows, if close_fds is true then no handles will be inherited by the child process.  Note that on Windows, you cannot set close_fds to true and also redirect the standard handles by setting stdin, stdout or stderr. If shell is True, the specified command will be executed through the shell.  Warning Enabling this option can be a security hazard if combined with untrusted input. See the warning under Frequently Used Arguments for details.  If cwd is not None, the child&#8217;s current directory will be changed to cwd before it is executed.  Note that this directory is not considered when searching the executable, so you can&#8217;t specify the program&#8217;s path relative to cwd. If env is not None, it must be a mapping that defines the environment variables for the new process; these are used instead of inheriting the current process&#8217; environment, which is the default behavior.  Note If specified, env must provide any variables required for the program to execute.  On Windows, in order to run a side-by-side assembly the specified env must include a valid SystemRoot.  If universal_newlines is True, the file objects stdout and stderr are opened as text files, but lines may be terminated by any of '\\n', the Unix end-of-line convention, '\\r', the old Macintosh convention or '\\r\\n', the Windows convention. All of these external representations are seen as '\\n' by the Python program.  Note This feature is only available if Python is built with universal newline support (the default).  Also, the newlines attribute of the file objects stdout, stdin and stderr are not updated by the communicate() method.  If given, startupinfo will be a STARTUPINFO object, which is passed to the underlying CreateProcess function. creationflags, if given, can be CREATE_NEW_CONSOLE or CREATE_NEW_PROCESS_GROUP. (Windows only)     17.1.1.3. Exceptions\u00b6 Exceptions raised in the child process, before the new program has started to execute, will be re-raised in the parent.  Additionally, the exception object will have one extra attribute called child_traceback, which is a string containing traceback information from the child&#8217;s point of view. The most common exception raised is OSError.  This occurs, for example, when trying to execute a non-existent file.  Applications should prepare for OSError exceptions. A ValueError will be raised if Popen is called with invalid arguments. check_call() and check_output() will raise CalledProcessError if the called process returns a non-zero return code.   17.1.1.4. Security\u00b6 Unlike some other popen functions, this implementation will never call a system shell implicitly.  This means that all characters, including shell metacharacters, can safely be passed to child processes. Obviously, if the shell is invoked explicitly, then it is the application&#8217;s responsibility to ensure that all whitespace and metacharacters are quoted appropriately.    17.1.2. Popen Objects\u00b6 Instances of the Popen class have the following methods:   Popen.poll()\u00b6 Check if child process has terminated.  Set and return returncode attribute.    Popen.wait()\u00b6 Wait for child process to terminate.  Set and return returncode attribute.  Warning This will deadlock when using stdout=PIPE and\/or stderr=PIPE and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data.  Use communicate() to avoid that.      Popen.communicate(input=None)\u00b6 Interact with process: Send data to stdin.  Read data from stdout and stderr, until end-of-file is reached.  Wait for process to terminate. The optional input argument should be a string to be sent to the child process, or None, if no data should be sent to the child. communicate() returns a tuple (stdoutdata, stderrdata). Note that if you want to send data to the process&#8217;s stdin, you need to create the Popen object with stdin=PIPE.  Similarly, to get anything other than None in the result tuple, you need to give stdout=PIPE and\/or stderr=PIPE too.  Note The data read is buffered in memory, so do not use this method if the data size is large or unlimited.      Popen.send_signal(signal)\u00b6 Sends the signal signal to the child.  Note On Windows, SIGTERM is an alias for terminate(). CTRL_C_EVENT and CTRL_BREAK_EVENT can be sent to processes started with a creationflags parameter which includes CREATE_NEW_PROCESS_GROUP.   New in version 2.6.     Popen.terminate()\u00b6 Stop the child. On Posix OSs the method sends SIGTERM to the child. On Windows the Win32 API function TerminateProcess() is called to stop the child.  New in version 2.6.     Popen.kill()\u00b6 Kills the child. On Posix OSs the function sends SIGKILL to the child. On Windows kill() is an alias for terminate().  New in version 2.6.   The following attributes are also available:  Warning Use communicate() rather than .stdin.write, .stdout.read or .stderr.read to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process.    Popen.stdin\u00b6 If the stdin argument was PIPE, this attribute is a file object that provides input to the child process.  Otherwise, it is None.    Popen.stdout\u00b6 If the stdout argument was PIPE, this attribute is a file object that provides output from the child process.  Otherwise, it is None.    Popen.stderr\u00b6 If the stderr argument was PIPE, this attribute is a file object that provides error output from the child process.  Otherwise, it is None.    Popen.pid\u00b6 The process ID of the child process. Note that if you set the shell argument to True, this is the process ID of the spawned shell.     Popen.returncode\u00b6 The child return code, set by poll() and wait() (and indirectly by communicate()).  A None value indicates that the process hasn&#8217;t terminated yet. A negative value -N indicates that the child was terminated by signal N (Unix only).     17.1.3. Windows Popen Helpers\u00b6 The STARTUPINFO class and following constants are only available on Windows.   class subprocess.STARTUPINFO\u00b6 Partial support of the Windows STARTUPINFO structure is used for Popen creation.   dwFlags\u00b6 A bit field that determines whether certain STARTUPINFO attributes are used when the process creates a window. si = subprocess.STARTUPINFO() si.dwFlags = subprocess.STARTF_USESTDHANDLES | subprocess.STARTF_USESHOWWINDOW       hStdInput\u00b6 If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard input handle for the process. If STARTF_USESTDHANDLES is not specified, the default for standard input is the keyboard buffer.    hStdOutput\u00b6 If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard output handle for the process. Otherwise, this attribute is ignored and the default for standard output is the console window&#8217;s buffer.    hStdError\u00b6 If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard error handle for the process. Otherwise, this attribute is ignored and the default for standard error is the console window&#8217;s buffer.    wShowWindow\u00b6 If dwFlags specifies STARTF_USESHOWWINDOW, this attribute can be any of the values that can be specified in the nCmdShow parameter for the ShowWindow function, except for SW_SHOWDEFAULT. Otherwise, this attribute is ignored. SW_HIDE is provided for this attribute. It is used when Popen is called with shell=True.      17.1.3.1. Constants\u00b6 The subprocess module exposes the following constants.   subprocess.STD_INPUT_HANDLE\u00b6 The standard input device. Initially, this is the console input buffer, CONIN$.    subprocess.STD_OUTPUT_HANDLE\u00b6 The standard output device. Initially, this is the active console screen buffer, CONOUT$.    subprocess.STD_ERROR_HANDLE\u00b6 The standard error device. Initially, this is the active console screen buffer, CONOUT$.    subprocess.SW_HIDE\u00b6 Hides the window. Another window will be activated.    subprocess.STARTF_USESTDHANDLES\u00b6 Specifies that the STARTUPINFO.hStdInput, STARTUPINFO.hStdOutput, and STARTUPINFO.hStdError attributes contain additional information.    subprocess.STARTF_USESHOWWINDOW\u00b6 Specifies that the STARTUPINFO.wShowWindow attribute contains additional information.    subprocess.CREATE_NEW_CONSOLE\u00b6 The new process has a new console, instead of inheriting its parent&#8217;s console (the default). This flag is always set when Popen is created with shell=True.     subprocess.CREATE_NEW_PROCESS_GROUP\u00b6 A Popen creationflags parameter to specify that a new process group will be created. This flag is necessary for using os.kill() on the subprocess. This flag is ignored if CREATE_NEW_CONSOLE is specified.      17.1.4. Replacing Older Functions with the subprocess Module\u00b6 In this section, &#8220;a becomes b&#8221; means that b can be used as a replacement for a.  Note All &#8220;a&#8221; functions in this section fail (more or less) silently if the executed program cannot be found; the &#8220;b&#8221; replacements raise OSError instead. In addition, the replacements using check_output() will fail with a CalledProcessError if the requested operation produces a non-zero return code. The output is still available as the output attribute of the raised exception.  In the following examples, we assume that the relevant functions have already been imported from the subprocess module.  17.1.4.1. Replacing \/bin\/sh shell backquote\u00b6 output=`mycmd myarg` # becomes output = check_output([\"mycmd\", \"myarg\"])    17.1.4.2. Replacing shell pipeline\u00b6 output=`dmesg | grep hda` # becomes p1 = Popen([\"dmesg\"], stdout=PIPE) p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE) p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits. output = p2.communicate()[0]  The p1.stdout.close() call after starting the p2 is important in order for p1 to receive a SIGPIPE if p2 exits before p1. Alternatively, for trusted input, the shell&#8217;s own pipeline support may still be used directly:  output=`dmesg | grep hda` # becomes output=check_output(&#8220;dmesg | grep hda&#8221;, shell=True)   17.1.4.3. Replacing os.system()\u00b6 sts = os.system(\"mycmd\" + \" myarg\") # becomes sts = call(\"mycmd\" + \" myarg\", shell=True)   Notes:  Calling the program through the shell is usually not required.  A more realistic example would look like this: try:     retcode = call(\"mycmd\" + \" myarg\", shell=True)     if retcode < 0:         print >>sys.stderr, \"Child was terminated by signal\", -retcode     else:         print >>sys.stderr, \"Child returned\", retcode except OSError, e:     print >>sys.stderr, \"Execution failed:\", e     17.1.4.4. Replacing the os.spawn family\u00b6 P_NOWAIT example: pid = os.spawnlp(os.P_NOWAIT, \"\/bin\/mycmd\", \"mycmd\", \"myarg\") ==> pid = Popen([\"\/bin\/mycmd\", \"myarg\"]).pid  P_WAIT example: retcode = os.spawnlp(os.P_WAIT, \"\/bin\/mycmd\", \"mycmd\", \"myarg\") ==> retcode = call([\"\/bin\/mycmd\", \"myarg\"])  Vector example: os.spawnvp(os.P_NOWAIT, path, args) ==> Popen([path] + args[1:])  Environment example: os.spawnlpe(os.P_NOWAIT, \"\/bin\/mycmd\", \"mycmd\", \"myarg\", env) ==> Popen([\"\/bin\/mycmd\", \"myarg\"], env={\"PATH\": \"\/usr\/bin\"})    17.1.4.5. Replacing os.popen(), os.popen2(), os.popen3()\u00b6 pipe = os.popen(\"cmd\", 'r', bufsize) ==> pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdout=PIPE).stdout  pipe = os.popen(\"cmd\", 'w', bufsize) ==> pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdin=PIPE).stdin  (child_stdin, child_stdout) = os.popen2(\"cmd\", mode, bufsize) ==> p = Popen(\"cmd\", shell=True, bufsize=bufsize,           stdin=PIPE, stdout=PIPE, close_fds=True) (child_stdin, child_stdout) = (p.stdin, p.stdout)  (child_stdin,  child_stdout,  child_stderr) = os.popen3(\"cmd\", mode, bufsize) ==> p = Popen(\"cmd\", shell=True, bufsize=bufsize,           stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True) (child_stdin,  child_stdout,  child_stderr) = (p.stdin, p.stdout, p.stderr)  (child_stdin, child_stdout_and_stderr) = os.popen4(\"cmd\", mode,                                                    bufsize) ==> p = Popen(\"cmd\", shell=True, bufsize=bufsize,           stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True) (child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)  On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as the command to execute, in which case arguments will be passed directly to the program without shell intervention.  This usage can be replaced as follows: (child_stdin, child_stdout) = os.popen2([\"\/bin\/ls\", \"-l\"], mode,                                         bufsize) ==> p = Popen([\"\/bin\/ls\", \"-l\"], bufsize=bufsize, stdin=PIPE, stdout=PIPE) (child_stdin, child_stdout) = (p.stdin, p.stdout)  Return code handling translates as follows: pipe = os.popen(\"cmd\", 'w') ... rc = pipe.close() if rc is not None and rc >> 8:     print \"There were some errors\" ==> process = Popen(\"cmd\", 'w', shell=True, stdin=PIPE) ... process.stdin.close() if process.wait() != 0:     print \"There were some errors\"    17.1.4.6. Replacing functions from the popen2 module\u00b6 (child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode) ==> p = Popen([\"somestring\"], shell=True, bufsize=bufsize,           stdin=PIPE, stdout=PIPE, close_fds=True) (child_stdout, child_stdin) = (p.stdout, p.stdin)  On Unix, popen2 also accepts a sequence as the command to execute, in which case arguments will be passed directly to the program without shell intervention.  This usage can be replaced as follows: (child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize,                                             mode) ==> p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,           stdin=PIPE, stdout=PIPE, close_fds=True) (child_stdout, child_stdin) = (p.stdout, p.stdin)  popen2.Popen3 and popen2.Popen4 basically work as subprocess.Popen, except that:  Popen raises an exception if the execution fails. the capturestderr argument is replaced with the stderr argument. stdin=PIPE and stdout=PIPE must be specified. popen2 closes all file descriptors by default, but you have to specify close_fds=True with Popen.     17.1.5. Notes\u00b6  17.1.5.1. Converting an argument sequence to a string on Windows\u00b6 On Windows, an args sequence is converted to a string that can be parsed using the following rules (which correspond to the rules used by the MS C runtime):  Arguments are delimited by white space, which is either a space or a tab. A string surrounded by double quotation marks is interpreted as a single argument, regardless of white space contained within.  A quoted string can be embedded in an argument. A double quotation mark preceded by a backslash is interpreted as a literal double quotation mark. Backslashes are interpreted literally, unless they immediately precede a double quotation mark. If backslashes immediately precede a double quotation mark, every pair of backslashes is interpreted as a literal backslash.  If the number of backslashes is odd, the last backslash escapes the next double quotation mark as described in rule 3."},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.call","title":"subprocess.call","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.check_call","title":"subprocess.check_call","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.check_output","title":"subprocess.check_output","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.Popen","title":"subprocess.Popen","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.Popen.communicate","title":"subprocess.Popen.communicate","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.Popen.kill","title":"subprocess.Popen.kill","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.Popen.poll","title":"subprocess.Popen.poll","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.Popen.send_signal","title":"subprocess.Popen.send_signal","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.Popen.terminate","title":"subprocess.Popen.terminate","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.Popen.wait","title":"subprocess.Popen.wait","description":""},{"url":"http:\/\/docs.python.org\/library\/subprocess.html#subprocess.STARTUPINFO","title":"subprocess.STARTUPINFO","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html","title":"multiprocessing","description":null},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.active_children","title":"multiprocessing.active_children","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Array","title":"multiprocessing.Array","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.BoundedSemaphore","title":"multiprocessing.BoundedSemaphore","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Condition","title":"multiprocessing.Condition","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection","title":"multiprocessing.Connection","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.connection.answerChallenge","title":"multiprocessing.connection.answerChallenge","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.connection.Client","title":"multiprocessing.connection.Client","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection.close","title":"multiprocessing.Connection.close","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.connection.deliver_challenge","title":"multiprocessing.connection.deliver_challenge","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection.fileno","title":"multiprocessing.Connection.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.connection.Listener","title":"multiprocessing.connection.Listener","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.connection.Listener.accept","title":"multiprocessing.connection.Listener.accept","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.connection.Listener.close","title":"multiprocessing.connection.Listener.close","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection.poll","title":"multiprocessing.Connection.poll","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection.recv","title":"multiprocessing.Connection.recv","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection.recv_bytes","title":"multiprocessing.Connection.recv_bytes","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection.recv_bytes_into","title":"multiprocessing.Connection.recv_bytes_into","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection.send","title":"multiprocessing.Connection.send","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Connection.send_bytes","title":"multiprocessing.Connection.send_bytes","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.cpu_count","title":"multiprocessing.cpu_count","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.current_process","title":"multiprocessing.current_process","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Event","title":"multiprocessing.Event","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.freeze_support","title":"multiprocessing.freeze_support","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.get_logger","title":"multiprocessing.get_logger","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.JoinableQueue","title":"multiprocessing.JoinableQueue","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.JoinableQueue.join","title":"multiprocessing.JoinableQueue.join","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.JoinableQueue.task_done","title":"multiprocessing.JoinableQueue.task_done","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Lock","title":"multiprocessing.Lock","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.log_to_stderr","title":"multiprocessing.log_to_stderr","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseManager","title":"multiprocessing.managers.BaseManager","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseManager.connect","title":"multiprocessing.managers.BaseManager.connect","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseManager.get_server","title":"multiprocessing.managers.BaseManager.get_server","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseManager.register","title":"multiprocessing.managers.BaseManager.register","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseManager.shutdown","title":"multiprocessing.managers.BaseManager.shutdown","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseManager.start","title":"multiprocessing.managers.BaseManager.start","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseProxy","title":"multiprocessing.managers.BaseProxy","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseProxy.__repr__","title":"multiprocessing.managers.BaseProxy.__repr__","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseProxy.__str__","title":"multiprocessing.managers.BaseProxy.__str__","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseProxy._callmethod","title":"multiprocessing.managers.BaseProxy._callmethod","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.BaseProxy._getvalue","title":"multiprocessing.managers.BaseProxy._getvalue","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager","title":"multiprocessing.managers.SyncManager","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.Array","title":"multiprocessing.managers.SyncManager.Array","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.BoundedSemaphore","title":"multiprocessing.managers.SyncManager.BoundedSemaphore","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.Condition","title":"multiprocessing.managers.SyncManager.Condition","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.dict","title":"multiprocessing.managers.SyncManager.dict","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.Event","title":"multiprocessing.managers.SyncManager.Event","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.list","title":"multiprocessing.managers.SyncManager.list","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.Lock","title":"multiprocessing.managers.SyncManager.Lock","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.Namespace","title":"multiprocessing.managers.SyncManager.Namespace","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.Queue","title":"multiprocessing.managers.SyncManager.Queue","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.RLock","title":"multiprocessing.managers.SyncManager.RLock","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.Semaphore","title":"multiprocessing.managers.SyncManager.Semaphore","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.managers.SyncManager.Value","title":"multiprocessing.managers.SyncManager.Value","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Pipe","title":"multiprocessing.Pipe","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.AsyncResult","title":"multiprocessing.pool.AsyncResult","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.AsyncResult.get","title":"multiprocessing.pool.AsyncResult.get","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.AsyncResult.ready","title":"multiprocessing.pool.AsyncResult.ready","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.AsyncResult.successful","title":"multiprocessing.pool.AsyncResult.successful","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.AsyncResult.wait","title":"multiprocessing.pool.AsyncResult.wait","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool","title":"multiprocessing.pool.multiprocessing.Pool","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.apply","title":"multiprocessing.pool.multiprocessing.Pool.apply","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.apply_async","title":"multiprocessing.pool.multiprocessing.Pool.apply_async","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.close","title":"multiprocessing.pool.multiprocessing.Pool.close","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.imap","title":"multiprocessing.pool.multiprocessing.Pool.imap","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.imap_unordered","title":"multiprocessing.pool.multiprocessing.Pool.imap_unordered","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.join","title":"multiprocessing.pool.multiprocessing.Pool.join","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.map","title":"multiprocessing.pool.multiprocessing.Pool.map","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.map_async","title":"multiprocessing.pool.multiprocessing.Pool.map_async","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.terminate","title":"multiprocessing.pool.multiprocessing.Pool.terminate","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process","title":"multiprocessing.Process","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process.is_alive","title":"multiprocessing.Process.is_alive","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process.join","title":"multiprocessing.Process.join","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process.run","title":"multiprocessing.Process.run","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process.start","title":"multiprocessing.Process.start","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process.terminate","title":"multiprocessing.Process.terminate","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue","title":"multiprocessing.Queue","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.cancel_join_thread","title":"multiprocessing.Queue.cancel_join_thread","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.close","title":"multiprocessing.Queue.close","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.empty","title":"multiprocessing.Queue.empty","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.full","title":"multiprocessing.Queue.full","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.get","title":"multiprocessing.Queue.get","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.get_nowait","title":"multiprocessing.Queue.get_nowait","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.join_thread","title":"multiprocessing.Queue.join_thread","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.put","title":"multiprocessing.Queue.put","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.put_nowait","title":"multiprocessing.Queue.put_nowait","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Queue.qsize","title":"multiprocessing.Queue.qsize","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.RLock","title":"multiprocessing.RLock","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Semaphore","title":"multiprocessing.Semaphore","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.set_executable","title":"multiprocessing.set_executable","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.sharedctypes.Array","title":"multiprocessing.sharedctypes.Array","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.sharedctypes.copy","title":"multiprocessing.sharedctypes.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.sharedctypes.multiprocessing.Manager","title":"multiprocessing.sharedctypes.multiprocessing.Manager","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.sharedctypes.RawArray","title":"multiprocessing.sharedctypes.RawArray","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.sharedctypes.RawValue","title":"multiprocessing.sharedctypes.RawValue","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.sharedctypes.synchronized","title":"multiprocessing.sharedctypes.synchronized","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.sharedctypes.Value","title":"multiprocessing.sharedctypes.Value","description":""},{"url":"http:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Value","title":"multiprocessing.Value","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html","title":"ssl","description":"17.3. ssl &#8212; TLS\/SSL wrapper for socket objects\u00b6  New in version 2.6. Source code: Lib\/ssl.py  This module provides access to Transport Layer Security (often known as &#8220;Secure Sockets Layer&#8221;) encryption and peer authentication facilities for network sockets, both client-side and server-side.  This module uses the OpenSSL library. It is available on all modern Unix systems, Windows, Mac OS X, and probably additional platforms, as long as OpenSSL is installed on that platform.  Note Some behavior may be platform dependent, since calls are made to the operating system socket APIs.  The installed version of OpenSSL may also cause variations in behavior.  This section documents the objects and functions in the ssl module; for more general information about TLS, SSL, and certificates, the reader is referred to the documents in the &#8220;See Also&#8221; section at the bottom. This module provides a class, ssl.SSLSocket, which is derived from the socket.socket type, and provides a socket-like wrapper that also encrypts and decrypts the data going over the socket with SSL.  It supports additional read() and write() methods, along with a method, getpeercert(), to retrieve the certificate of the other side of the connection, and a method, cipher(), to retrieve the cipher being used for the secure connection.  17.3.1. Functions, Constants, and Exceptions\u00b6   exception ssl.SSLError\u00b6 Raised to signal an error from the underlying SSL implementation.  This signifies some problem in the higher-level encryption and authentication layer that&#8217;s superimposed on the underlying network connection.  This error is a subtype of socket.error, which in turn is a subtype of IOError.    ssl.wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version={see docs}, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)\u00b6 Takes an instance sock of socket.socket, and returns an instance of ssl.SSLSocket, a subtype of socket.socket, which wraps the underlying socket in an SSL context.  For client-side sockets, the context construction is lazy; if the underlying socket isn&#8217;t connected yet, the context construction will be performed after connect() is called on the socket.  For server-side sockets, if the socket has no remote peer, it is assumed to be a listening socket, and the server-side SSL wrapping is automatically performed on client connections accepted via the accept() method.  wrap_socket() may raise SSLError. The keyfile and certfile parameters specify optional files which contain a certificate to be used to identify the local side of the connection.  See the discussion of Certificates for more information on how the certificate is stored in the certfile. Often the private key is stored in the same file as the certificate; in this case, only the certfile parameter need be passed.  If the private key is stored in a separate file, both parameters must be used.  If the private key is stored in the certfile, it should come before the first certificate in the certificate chain: -----BEGIN RSA PRIVATE KEY----- ... (private key in base64 encoding) ... -----END RSA PRIVATE KEY----- -----BEGIN CERTIFICATE----- ... (certificate in base64 PEM encoding) ... -----END CERTIFICATE-----  The parameter server_side is a boolean which identifies whether server-side or client-side behavior is desired from this socket. The parameter cert_reqs specifies whether a certificate is required from the other side of the connection, and whether it will be validated if provided.  It must be one of the three values CERT_NONE (certificates ignored), CERT_OPTIONAL (not required, but validated if provided), or CERT_REQUIRED (required and validated).  If the value of this parameter is not CERT_NONE, then the ca_certs parameter must point to a file of CA certificates. The ca_certs file contains a set of concatenated &#8220;certification authority&#8221; certificates, which are used to validate certificates passed from the other end of the connection.  See the discussion of Certificates for more information about how to arrange the certificates in this file. The parameter ssl_version specifies which version of the SSL protocol to use.  Typically, the server chooses a particular protocol version, and the client must adapt to the server&#8217;s choice.  Most of the versions are not interoperable with the other versions.  If not specified, the default is PROTOCOL_SSLv23; it provides the most compatibility with other versions. Here&#8217;s a table showing which versions in a client (down the side) can connect to which versions in a server (along the top):           client \/ server SSLv2 SSLv3 SSLv23 TLSv1  SSLv2 yes no yes no  SSLv3 no yes yes no  SSLv23 yes no yes no  TLSv1 no no yes yes      Note Which connections succeed will vary depending on the version of OpenSSL.  For instance, in some older versions of OpenSSL (such as 0.9.7l on OS X 10.4), an SSLv2 client could not connect to an SSLv23 server.  Another example: beginning with OpenSSL 1.0.0, an SSLv23 client will not actually attempt SSLv2 connections unless you explicitly enable SSLv2 ciphers; for example, you might specify \"ALL\" or \"SSLv2\" as the ciphers parameter to enable them.  The ciphers parameter sets the available ciphers for this SSL object. It should be a string in the OpenSSL cipher list format. The parameter do_handshake_on_connect specifies whether to do the SSL handshake automatically after doing a socket.connect(), or whether the application program will call it explicitly, by invoking the SSLSocket.do_handshake() method.  Calling SSLSocket.do_handshake() explicitly gives the program control over the blocking behavior of the socket I\/O involved in the handshake. The parameter suppress_ragged_eofs specifies how the SSLSocket.read() method should signal unexpected EOF from the other end of the connection.  If specified as True (the default), it returns a normal EOF in response to unexpected EOF errors raised from the underlying socket; if False, it will raise the exceptions back to the caller.  Changed in version 2.7: New optional argument ciphers.     ssl.RAND_status()\u00b6 Returns True if the SSL pseudo-random number generator has been seeded with &#8216;enough&#8217; randomness, and False otherwise.  You can use ssl.RAND_egd() and ssl.RAND_add() to increase the randomness of the pseudo-random number generator.    ssl.RAND_egd(path)\u00b6 If you are running an entropy-gathering daemon (EGD) somewhere, and path is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys.  This is typically only necessary on systems without better sources of randomness. See http:\/\/egd.sourceforge.net\/ or http:\/\/prngd.sourceforge.net\/ for sources of entropy-gathering daemons.     ssl.RAND_add(bytes, entropy)\u00b6 Mixes the given bytes into the SSL pseudo-random number generator.  The parameter entropy (a float) is a lower bound on the entropy contained in string (so you can always use 0.0).  See RFC 1750 for more information on sources of entropy.    ssl.cert_time_to_seconds(timestring)\u00b6 Returns a floating-point value containing a normal seconds-after-the-epoch time value, given the time-string representing the &#8220;notBefore&#8221; or &#8220;notAfter&#8221; date from a certificate. Here&#8217;s an example: >>> import ssl >>> ssl.cert_time_to_seconds(\"May  9 00:00:00 2007 GMT\") 1178694000.0 >>> import time >>> time.ctime(ssl.cert_time_to_seconds(\"May  9 00:00:00 2007 GMT\")) &#39;Wed May  9 00:00:00 2007&#39; >>>       ssl.get_server_certificate(addr, ssl_version=PROTOCOL_SSLv3, ca_certs=None)\u00b6 Given the address addr of an SSL-protected server, as a (hostname, port-number) pair, fetches the server&#8217;s certificate, and returns it as a PEM-encoded string.  If ssl_version is specified, uses that version of the SSL protocol to attempt to connect to the server.  If ca_certs is specified, it should be a file containing a list of root certificates, the same format as used for the same parameter in wrap_socket().  The call will attempt to validate the server certificate against that set of root certificates, and will fail if the validation attempt fails.    ssl.DER_cert_to_PEM_cert(DER_cert_bytes)\u00b6 Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate.    ssl.PEM_cert_to_DER_cert(PEM_cert_string)\u00b6 Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate.    ssl.CERT_NONE\u00b6 Value to pass to the cert_reqs parameter to sslobject() when no certificates will be required or validated from the other side of the socket connection.    ssl.CERT_OPTIONAL\u00b6 Value to pass to the cert_reqs parameter to sslobject() when no certificates will be required from the other side of the socket connection, but if they are provided, will be validated.  Note that use of this setting requires a valid certificate validation file also be passed as a value of the ca_certs parameter.    ssl.CERT_REQUIRED\u00b6 Value to pass to the cert_reqs parameter to sslobject() when certificates will be required from the other side of the socket connection. Note that use of this setting requires a valid certificate validation file also be passed as a value of the ca_certs parameter.    ssl.PROTOCOL_SSLv2\u00b6 Selects SSL version 2 as the channel encryption protocol. This protocol is not available if OpenSSL is compiled with OPENSSL_NO_SSL2 flag.  Warning SSL version 2 is insecure.  Its use is highly discouraged.      ssl.PROTOCOL_SSLv23\u00b6 Selects SSL version 2 or 3 as the channel encryption protocol.  This is a setting to use with servers for maximum compatibility with the other end of an SSL connection, but it may cause the specific ciphers chosen for the encryption to be of fairly low quality.    ssl.PROTOCOL_SSLv3\u00b6 Selects SSL version 3 as the channel encryption protocol.  For clients, this is the maximally compatible SSL variant.    ssl.PROTOCOL_TLSv1\u00b6 Selects TLS version 1 as the channel encryption protocol.  This is the most modern version, and probably the best choice for maximum protection, if both sides can speak it.    ssl.OPENSSL_VERSION\u00b6 The version string of the OpenSSL library loaded by the interpreter: >>> ssl.OPENSSL_VERSION &#39;OpenSSL 0.9.8k 25 Mar 2009&#39;    New in version 2.7.     ssl.OPENSSL_VERSION_INFO\u00b6 A tuple of five integers representing version information about the OpenSSL library: >>> ssl.OPENSSL_VERSION_INFO (0, 9, 8, 11, 15)    New in version 2.7.     ssl.OPENSSL_VERSION_NUMBER\u00b6 The raw version number of the OpenSSL library, as a single integer: >>> ssl.OPENSSL_VERSION_NUMBER 9470143L >>> hex(ssl.OPENSSL_VERSION_NUMBER) &#39;0x9080bfL&#39;    New in version 2.7.     17.3.2. SSLSocket Objects\u00b6   SSLSocket.read([nbytes=1024])\u00b6 Reads up to nbytes bytes from the SSL-encrypted channel and returns them.    SSLSocket.write(data)\u00b6 Writes the data to the other side of the connection, using the SSL channel to encrypt.  Returns the number of bytes written.    SSLSocket.getpeercert(binary_form=False)\u00b6 If there is no certificate for the peer on the other end of the connection, returns None. If the parameter binary_form is False, and a certificate was received from the peer, this method returns a dict instance.  If the certificate was not validated, the dict is empty.  If the certificate was validated, it returns a dict with the keys subject (the principal for which the certificate was issued), and notAfter (the time after which the certificate should not be trusted).  The certificate was already validated, so the notBefore and issuer fields are not returned.  If a certificate contains an instance of the Subject Alternative Name extension (see RFC 3280), there will also be a subjectAltName key in the dictionary. The &#8220;subject&#8221; field is a tuple containing the sequence of relative distinguished names (RDNs) given in the certificate&#8217;s data structure for the principal, and each RDN is a sequence of name-value pairs: {&#39;notAfter&#39;: &#39;Feb 16 16:54:50 2013 GMT&#39;,  &#39;subject&#39;: (((&#39;countryName&#39;, u&#39;US&#39;),),              ((&#39;stateOrProvinceName&#39;, u&#39;Delaware&#39;),),              ((&#39;localityName&#39;, u&#39;Wilmington&#39;),),              ((&#39;organizationName&#39;, u&#39;Python Software Foundation&#39;),),              ((&#39;organizationalUnitName&#39;, u&#39;SSL&#39;),),              ((&#39;commonName&#39;, u&#39;somemachine.python.org&#39;),))}   If the binary_form parameter is True, and a certificate was provided, this method returns the DER-encoded form of the entire certificate as a sequence of bytes, or None if the peer did not provide a certificate.  This return value is independent of validation; if validation was required (CERT_OPTIONAL or CERT_REQUIRED), it will have been validated, but if CERT_NONE was used to establish the connection, the certificate, if present, will not have been validated.     SSLSocket.cipher()\u00b6 Returns a three-value tuple containing the name of the cipher being used, the version of the SSL protocol that defines its use, and the number of secret bits being used.  If no connection has been established, returns None.    SSLSocket.do_handshake()\u00b6 Perform a TLS\/SSL handshake.  If this is used with a non-blocking socket, it may raise SSLError with an arg[0] of SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE, in which case it must be called again until it completes successfully.  For example, to simulate the behavior of a blocking socket, one might write: while True:     try:         s.do_handshake()         break     except ssl.SSLError, err:         if err.args[0] == ssl.SSL_ERROR_WANT_READ:             select.select([s], [], [])         elif err.args[0] == ssl.SSL_ERROR_WANT_WRITE:             select.select([], [s], [])         else:             raise       SSLSocket.unwrap()\u00b6 Performs the SSL shutdown handshake, which removes the TLS layer from the underlying socket, and returns the underlying socket object.  This can be used to go from encrypted operation over a connection to unencrypted.  The socket instance returned should always be used for further communication with the other side of the connection, rather than the original socket instance (which may not function properly after the unwrap).    17.3.3. Certificates\u00b6 Certificates in general are part of a public-key \/ private-key system.  In this system, each principal, (which may be a machine, or a person, or an organization) is assigned a unique two-part encryption key.  One part of the key is public, and is called the public key; the other part is kept secret, and is called the private key.  The two parts are related, in that if you encrypt a message with one of the parts, you can decrypt it with the other part, and only with the other part. A certificate contains information about two principals.  It contains the name of a subject, and the subject&#8217;s public key.  It also contains a statement by a second principal, the issuer, that the subject is who he claims to be, and that this is indeed the subject&#8217;s public key.  The issuer&#8217;s statement is signed with the issuer&#8217;s private key, which only the issuer knows.  However, anyone can verify the issuer&#8217;s statement by finding the issuer&#8217;s public key, decrypting the statement with it, and comparing it to the other information in the certificate. The certificate also contains information about the time period over which it is valid.  This is expressed as two fields, called &#8220;notBefore&#8221; and &#8220;notAfter&#8221;. In the Python use of certificates, a client or server can use a certificate to prove who they are.  The other side of a network connection can also be required to produce a certificate, and that certificate can be validated to the satisfaction of the client or server that requires such validation.  The connection attempt can be set to raise an exception if the validation fails. Validation is done automatically, by the underlying OpenSSL framework; the application need not concern itself with its mechanics.  But the application does usually need to provide sets of certificates to allow this process to take place. Python uses files to contain certificates.  They should be formatted as &#8220;PEM&#8221; (see RFC 1422), which is a base-64 encoded form wrapped with a header line and a footer line: -----BEGIN CERTIFICATE----- ... (certificate in base64 PEM encoding) ... -----END CERTIFICATE-----  The Python files which contain certificates can contain a sequence of certificates, sometimes called a certificate chain.  This chain should start with the specific certificate for the principal who &#8220;is&#8221; the client or server, and then the certificate for the issuer of that certificate, and then the certificate for the issuer of that certificate, and so on up the chain till you get to a certificate which is self-signed, that is, a certificate which has the same subject and issuer, sometimes called a root certificate.  The certificates should just be concatenated together in the certificate file.  For example, suppose we had a three certificate chain, from our server certificate to the certificate of the certification authority that signed our server certificate, to the root certificate of the agency which issued the certification authority&#8217;s certificate: -----BEGIN CERTIFICATE----- ... (certificate for your server)... -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... (the certificate for the CA)... -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- ... (the root certificate for the CA's issuer)... -----END CERTIFICATE-----  If you are going to require validation of the other side of the connection&#8217;s certificate, you need to provide a &#8220;CA certs&#8221; file, filled with the certificate chains for each issuer you are willing to trust.  Again, this file just contains these chains concatenated together.  For validation, Python will use the first chain it finds in the file which matches. Some &#8220;standard&#8221; root certificates are available from various certification authorities: CACert.org, Thawte, Verisign, Positive SSL (used by python.org), Equifax and GeoTrust. In general, if you are using SSL3 or TLS1, you don&#8217;t need to put the full chain in your &#8220;CA certs&#8221; file; you only need the root certificates, and the remote peer is supposed to furnish the other certificates necessary to chain from its certificate to a root certificate.  See RFC 4158 for more discussion of the way in which certification chains can be built. If you are going to create a server that provides SSL-encrypted connection services, you will need to acquire a certificate for that service.  There are many ways of acquiring appropriate certificates, such as buying one from a certification authority.  Another common practice is to generate a self-signed certificate.  The simplest way to do this is with the OpenSSL package, using something like the following:   The disadvantage of a self-signed certificate is that it is its own root certificate, and no one else will have it in their cache of known (and trusted) root certificates.   17.3.4. Examples\u00b6  17.3.4.1. Testing for SSL support\u00b6 To test for the presence of SSL support in a Python installation, user code should use the following idiom: try:     import ssl except ImportError:     pass else:     ... # do something that requires SSL support     17.3.4.2. Client-side operation\u00b6 This example connects to an SSL server, prints the server&#8217;s address and certificate, sends some bytes, and reads part of the response: import socket, ssl, pprint  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # require a certificate from the server ssl_sock = ssl.wrap_socket(s,                            ca_certs=\"\/etc\/ca_certs_file\",                            cert_reqs=ssl.CERT_REQUIRED)  ssl_sock.connect((&#39;www.verisign.com&#39;, 443))  print repr(ssl_sock.getpeername()) print ssl_sock.cipher() print pprint.pformat(ssl_sock.getpeercert())  # Set a simple HTTP request -- use httplib in actual code. ssl_sock.write(\"\"\"GET \/ HTTP\/1.0\\r Host: www.verisign.com\\r\\n\\r\\n\"\"\")  # Read a chunk of data.  Will not necessarily # read all the data returned by the server. data = ssl_sock.read()  # note that closing the SSLSocket will also close the underlying socket ssl_sock.close()   As of September 6, 2007, the certificate printed by this program looked like this: {&#39;notAfter&#39;: &#39;May  8 23:59:59 2009 GMT&#39;,  &#39;subject&#39;: (((&#39;serialNumber&#39;, u&#39;2497886&#39;),),              ((&#39;1.3.6.1.4.1.311.60.2.1.3&#39;, u&#39;US&#39;),),              ((&#39;1.3.6.1.4.1.311.60.2.1.2&#39;, u&#39;Delaware&#39;),),              ((&#39;countryName&#39;, u&#39;US&#39;),),              ((&#39;postalCode&#39;, u&#39;94043&#39;),),              ((&#39;stateOrProvinceName&#39;, u&#39;California&#39;),),              ((&#39;localityName&#39;, u&#39;Mountain View&#39;),),              ((&#39;streetAddress&#39;, u&#39;487 East Middlefield Road&#39;),),              ((&#39;organizationName&#39;, u&#39;VeriSign, Inc.&#39;),),              ((&#39;organizationalUnitName&#39;,                u&#39;Production Security Services&#39;),),              ((&#39;organizationalUnitName&#39;,                u&#39;Terms of use at www.verisign.com\/rpa (c)06&#39;),),              ((&#39;commonName&#39;, u&#39;www.verisign.com&#39;),))}   which is a fairly poorly-formed subject field.   17.3.4.3. Server-side operation\u00b6 For server operation, typically you&#8217;d need to have a server certificate, and private key, each in a file.  You&#8217;d open a socket, bind it to a port, call listen() on it, then start waiting for clients to connect: import socket, ssl  bindsocket = socket.socket() bindsocket.bind((&#39;myaddr.mydomain.com&#39;, 10023)) bindsocket.listen(5)   When one did, you&#8217;d call accept() on the socket to get the new socket from the other end, and use wrap_socket() to create a server-side SSL context for it: while True:     newsocket, fromaddr = bindsocket.accept()     connstream = ssl.wrap_socket(newsocket,                                  server_side=True,                                  certfile=\"mycertfile\",                                  keyfile=\"mykeyfile\",                                  ssl_version=ssl.PROTOCOL_TLSv1)     try:         deal_with_client(connstream)     finally:         connstream.shutdown(socket.SHUT_RDWR)         connstream.close()   Then you&#8217;d read data from the connstream and do something with it till you are finished with the client (or the client is finished with you): def deal_with_client(connstream):     data = connstream.read()     # null data means the client is finished with us     while data:         if not do_something(connstream, data):             # we&#39;ll assume do_something returns False             # when we&#39;re finished with client             break         data = connstream.read()     # finished with client   And go back to listening for new client connections.  See also  Class socket.socket Documentation of underlying socket class TLS (Transport Layer Security) and SSL (Secure Socket Layer) Debby Koren RFC 1422: Privacy Enhancement for Internet Electronic Mail: Part II: Certificate-Based Key Management Steve Kent RFC 1750: Randomness Recommendations for Security D. Eastlake et. al. RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile Housley et. al."},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.cert_time_to_seconds","title":"ssl.cert_time_to_seconds","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.DER_cert_to_PEM_cert","title":"ssl.DER_cert_to_PEM_cert","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.get_server_certificate","title":"ssl.get_server_certificate","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.PEM_cert_to_DER_cert","title":"ssl.PEM_cert_to_DER_cert","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.RAND_add","title":"ssl.RAND_add","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.RAND_egd","title":"ssl.RAND_egd","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.RAND_status","title":"ssl.RAND_status","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.SSLSocket.cipher","title":"ssl.SSLSocket.cipher","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.SSLSocket.do_handshake","title":"ssl.SSLSocket.do_handshake","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.SSLSocket.getpeercert","title":"ssl.SSLSocket.getpeercert","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.SSLSocket.read","title":"ssl.SSLSocket.read","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.SSLSocket.unwrap","title":"ssl.SSLSocket.unwrap","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.SSLSocket.write","title":"ssl.SSLSocket.write","description":""},{"url":"http:\/\/docs.python.org\/library\/ssl.html#ssl.wrap_socket","title":"ssl.wrap_socket","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html","title":"asyncore","description":"17.6. asyncore &#8212; Asynchronous socket handler\u00b6 Source code: Lib\/asyncore.py  This module provides the basic infrastructure for writing asynchronous  socket service clients and servers. There are only two ways to have a program on a single processor do  &#8220;more than one thing at a time.&#8221; Multi-threaded programming is the  simplest and most popular way to do it, but there is another very different technique, that lets you have nearly all the advantages of  multi-threading, without actually using multiple threads.  It&#8217;s really  only practical if your program is largely I\/O bound.  If your program is processor bound, then pre-emptive scheduled threads are probably what you really need.  Network servers are rarely processor bound, however. If your operating system supports the select() system call in its I\/O library (and nearly all do), then you can use it to juggle multiple communication channels at once; doing other work while your I\/O is taking place in the &#8220;background.&#8221;  Although this strategy can seem strange and complex, especially at first, it is in many ways easier to understand and control than multi-threaded programming.  The asyncore module solves many of the difficult problems for you, making the task of building sophisticated high-performance network servers and clients a snap.  For &#8220;conversational&#8221; applications and protocols the companion asynchat module is invaluable. The basic idea behind both modules is to create one or more network channels, instances of class asyncore.dispatcher and asynchat.async_chat.  Creating the channels adds them to a global map, used by the loop() function if you do not provide it with your own map. Once the initial channel(s) is(are) created, calling the loop() function activates channel service, which continues until the last channel (including any that have been added to the map during asynchronous service) is closed.   asyncore.loop([timeout[, use_poll[, map[, count]]]])\u00b6 Enter a polling loop that terminates after count passes or all open channels have been closed.  All arguments are optional.  The count parameter defaults to None, resulting in the loop terminating only when all channels have been closed.  The timeout argument sets the timeout parameter for the appropriate select() or poll() call, measured in seconds; the default is 30 seconds.  The use_poll parameter, if true, indicates that poll() should be used in preference to select() (the default is False). The map parameter is a dictionary whose items are the channels to watch. As channels are closed they are deleted from their map.  If map is omitted, a global map is used. Channels (instances of asyncore.dispatcher, asynchat.async_chat and subclasses thereof) can freely be mixed in the map.     class asyncore.dispatcher\u00b6 The dispatcher class is a thin wrapper around a low-level socket object. To make it more useful, it has a few methods for event-handling which are called from the asynchronous loop.   Otherwise, it can be treated as a normal non-blocking socket object. The firing of low-level events at certain times or in certain connection states tells the asynchronous loop that certain higher-level events have taken place.  For example, if we have asked for a socket to connect to another host, we know that the connection has been made when the socket becomes writable for the first time (at this point you know that you may write to it with the expectation of success).  The implied higher-level events are:       Event Description    handle_connect() Implied by the first read or write event  handle_close() Implied by a read event with no data available  handle_accept() Implied by a read event on a listening socket    During asynchronous processing, each mapped channel&#8217;s readable() and writable() methods are used to determine whether the channel&#8217;s socket should be added to the list of channels select()ed or poll()ed for read and write events. Thus, the set of channel events is larger than the basic socket events.  The full set of methods that can be overridden in your subclass follows:   handle_read()\u00b6 Called when the asynchronous loop detects that a read() call on the channel&#8217;s socket will succeed.    handle_write()\u00b6 Called when the asynchronous loop detects that a writable socket can be written.  Often this method will implement the necessary buffering for performance.  For example: def handle_write(self):     sent = self.send(self.buffer)     self.buffer = self.buffer[sent:]       handle_expt()\u00b6 Called when there is out of band (OOB) data for a socket connection.  This will almost never happen, as OOB is tenuously supported and rarely used.    handle_connect()\u00b6 Called when the active opener&#8217;s socket actually makes a connection.  Might send a &#8220;welcome&#8221; banner, or initiate a protocol negotiation with the remote endpoint, for example.    handle_close()\u00b6 Called when the socket is closed.    handle_error()\u00b6 Called when an exception is raised and not otherwise handled.  The default version prints a condensed traceback.    handle_accept()\u00b6 Called on listening channels (passive openers) when a connection can be established with a new remote endpoint that has issued a connect() call for the local endpoint.    readable()\u00b6 Called each time around the asynchronous loop to determine whether a channel&#8217;s socket should be added to the list on which read events can occur.  The default method simply returns True, indicating that by default, all channels will be interested in read events.    writable()\u00b6 Called each time around the asynchronous loop to determine whether a channel&#8217;s socket should be added to the list on which write events can occur.  The default method simply returns True, indicating that by default, all channels will be interested in write events.  In addition, each channel delegates or extends many of the socket methods. Most of these are nearly identical to their socket partners.   create_socket(family, type)\u00b6 This is identical to the creation of a normal socket, and will use the same options for creation.  Refer to the socket documentation for information on creating sockets.    connect(address)\u00b6 As with the normal socket object, address is a tuple with the first element the host to connect to, and the second the port number.    send(data)\u00b6 Send data to the remote end-point of the socket.    recv(buffer_size)\u00b6 Read at most buffer_size bytes from the socket&#8217;s remote end-point.  An empty string implies that the channel has been closed from the other end.    listen(backlog)\u00b6 Listen for connections made to the socket.  The backlog argument specifies the maximum number of queued connections and should be at least 1; the maximum value is system-dependent (usually 5).    bind(address)\u00b6 Bind the socket to address.  The socket must not already be bound.  (The format of address depends on the address family &#8212; refer to the socket documentation for more information.)  To mark the socket as re-usable (setting the SO_REUSEADDR option), call the dispatcher object&#8217;s set_reuse_addr() method.    accept()\u00b6 Accept a connection.  The socket must be bound to an address and listening for connections.  The return value can be either None or a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection. When None is returned it means the connection didn&#8217;t take place, in which case the server should just ignore this event and keep listening for further incoming connections.    close()\u00b6 Close the socket.  All future operations on the socket object will fail. The remote end-point will receive no more data (after queued data is flushed).  Sockets are automatically closed when they are garbage-collected.      class asyncore.dispatcher_with_send\u00b6 A dispatcher subclass which adds simple buffered output capability, useful for simple clients. For more sophisticated usage use asynchat.async_chat.    class asyncore.file_dispatcher\u00b6 A file_dispatcher takes a file descriptor or file object along with an optional map argument and wraps it for use with the poll() or loop() functions.  If provided a file object or anything with a fileno() method, that method will be called and passed to the file_wrapper constructor.  Availability: UNIX.    class asyncore.file_wrapper\u00b6 A file_wrapper takes an integer file descriptor and calls os.dup() to duplicate the handle so that the original handle may be closed independently of the file_wrapper.  This class implements sufficient methods to emulate a socket for use by the file_dispatcher class.  Availability: UNIX.   17.6.1. asyncore Example basic HTTP client\u00b6 Here is a very basic HTTP client that uses the dispatcher class to implement its socket handling: import asyncore, socket  class HTTPClient(asyncore.dispatcher):      def __init__(self, host, path):         asyncore.dispatcher.__init__(self)         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)         self.connect( (host, 80) )         self.buffer = &#39;GET %s HTTP\/1.0\\r\\n\\r\\n&#39;  path      def handle_connect(self):         pass      def handle_close(self):         self.close()      def handle_read(self):         print self.recv(8192)      def writable(self):         return (len(self.buffer) > 0)      def handle_write(self):         sent = self.send(self.buffer)         self.buffer = self.buffer[sent:]   client = HTTPClient(&#39;www.python.org&#39;, &#39;\/&#39;) asyncore.loop()     17.6.2. asyncore Example basic echo server\u00b6 Here is a basic echo server that uses the dispatcher class to accept connections and dispatches the incoming connections to a handler: import asyncore import socket  class EchoHandler(asyncore.dispatcher_with_send):      def handle_read(self):         data = self.recv(8192)         if data:             self.send(data)  class EchoServer(asyncore.dispatcher):      def __init__(self, host, port):         asyncore.dispatcher.__init__(self)         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)         self.set_reuse_addr()         self.bind((host, port))         self.listen(5)      def handle_accept(self):         pair = self.accept()         if pair is None:             pass         else:             sock, addr = pair             print &#39;Incoming connection from %s&#39;  repr(addr)             handler = EchoHandler(sock)  server = EchoServer(&#39;localhost&#39;, 8080) asyncore.loop()"},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher","title":"asyncore.dispatcher","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.accept","title":"asyncore.dispatcher.accept","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.bind","title":"asyncore.dispatcher.bind","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.close","title":"asyncore.dispatcher.close","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.connect","title":"asyncore.dispatcher.connect","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.create_socket","title":"asyncore.dispatcher.create_socket","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.handle_accept","title":"asyncore.dispatcher.handle_accept","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.handle_close","title":"asyncore.dispatcher.handle_close","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.handle_connect","title":"asyncore.dispatcher.handle_connect","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.handle_error","title":"asyncore.dispatcher.handle_error","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.handle_expt","title":"asyncore.dispatcher.handle_expt","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.handle_read","title":"asyncore.dispatcher.handle_read","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.handle_write","title":"asyncore.dispatcher.handle_write","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.listen","title":"asyncore.dispatcher.listen","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.readable","title":"asyncore.dispatcher.readable","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.recv","title":"asyncore.dispatcher.recv","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.send","title":"asyncore.dispatcher.send","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher.writable","title":"asyncore.dispatcher.writable","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.dispatcher_with_send","title":"asyncore.dispatcher_with_send","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.file_dispatcher","title":"asyncore.file_dispatcher","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.file_wrapper","title":"asyncore.file_wrapper","description":""},{"url":"http:\/\/docs.python.org\/library\/asyncore.html#asyncore.loop","title":"asyncore.loop","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html","title":"socket","description":"17.2. socket &#8212; Low-level networking interface\u00b6 This module provides access to the BSD socket interface. It is available on all modern Unix systems, Windows, Mac OS X, BeOS, OS\/2, and probably additional platforms.  Note Some behavior may be platform dependent, since calls are made to the operating system socket APIs.  For an introduction to socket programming (in C), see the following papers: An Introductory 4.3BSD Interprocess Communication Tutorial, by Stuart Sechrest and An Advanced 4.3BSD Interprocess Communication Tutorial, by Samuel J.  Leffler et al, both in the UNIX Programmer&#8217;s Manual, Supplementary Documents 1 (sections PS1:7 and PS1:8).  The platform-specific reference material for the various socket-related system calls are also a valuable source of information on the details of socket semantics.  For Unix, refer to the manual pages; for Windows, see the WinSock (or Winsock 2) specification. For IPv6-ready APIs, readers may want to refer to RFC 3493 titled Basic Socket Interface Extensions for IPv6. The Python interface is a straightforward transliteration of the Unix system call and library interface for sockets to Python&#8217;s object-oriented style: the socket() function returns a socket object whose methods implement the various socket system calls.  Parameter types are somewhat higher-level than in the C interface: as with read() and write() operations on Python files, buffer allocation on receive operations is automatic, and buffer length is implicit on send operations. Socket addresses are represented as follows: A single string is used for the AF_UNIX address family. A pair (host, port) is used for the AF_INET address family, where host is a string representing either a hostname in Internet domain notation like 'daring.cwi.nl' or an IPv4 address like '100.50.200.5', and port is an integral port number. For AF_INET6 address family, a four-tuple (host, port, flowinfo, scopeid) is used, where flowinfo and scopeid represents sin6_flowinfo and sin6_scope_id member in struct sockaddr_in6 in C. For socket module methods, flowinfo and scopeid can be omitted just for backward compatibility. Note, however, omission of scopeid can cause problems in manipulating scoped IPv6 addresses. Other address families are currently not supported. The address format required by a particular socket object is automatically selected based on the address family specified when the socket object was created. For IPv4 addresses, two special forms are accepted instead of a host address: the empty string represents INADDR_ANY, and the string '<broadcast>' represents INADDR_BROADCAST. The behavior is not available for IPv6 for backward compatibility, therefore, you may want to avoid these if you intend to support IPv6 with your Python programs. If you use a hostname in the host portion of IPv4\/v6 socket address, the program may show a nondeterministic behavior, as Python uses the first address returned from the DNS resolution.  The socket address will be resolved differently into an actual IPv4\/v6 address, depending on the results from DNS resolution and\/or the host configuration.  For deterministic behavior use a numeric address in host portion.  New in version 2.5: AF_NETLINK sockets are represented as  pairs pid, groups.  New in version 2.6: Linux-only support for TIPC is also available using the AF_TIPC address family. TIPC is an open, non-IP based networked protocol designed for use in clustered computer environments.  Addresses are represented by a tuple, and the fields depend on the address type. The general tuple form is (addr_type, v1, v2, v3 [, scope]), where: addr_type is one of TIPC_ADDR_NAMESEQ, TIPC_ADDR_NAME, or TIPC_ADDR_ID.  scope is one of TIPC_ZONE_SCOPE, TIPC_CLUSTER_SCOPE, and TIPC_NODE_SCOPE.  If addr_type is TIPC_ADDR_NAME, then v1 is the server type, v2 is the port identifier, and v3 should be 0. If addr_type is TIPC_ADDR_NAMESEQ, then v1 is the server type, v2 is the lower port number, and v3 is the upper port number. If addr_type is TIPC_ADDR_ID, then v1 is the node, v2 is the reference, and v3 should be set to 0.    All errors raise exceptions.  The normal exceptions for invalid argument types and out-of-memory conditions can be raised; errors related to socket or address semantics raise the error socket.error. Non-blocking mode is supported through setblocking().  A generalization of this based on timeouts is supported through settimeout(). The module socket exports the following constants and functions:   exception socket.error\u00b6 This exception is raised for socket-related errors. The accompanying value is either a string telling what went wrong or a pair (errno, string) representing an error returned by a system call, similar to the value accompanying os.error. See the module errno, which contains names for the error codes defined by the underlying operating system.  Changed in version 2.6: socket.error is now a child class of IOError.     exception socket.herror\u00b6 This exception is raised for address-related errors, i.e. for functions that use h_errno in the C API, including gethostbyname_ex() and gethostbyaddr(). The accompanying value is a pair (h_errno, string) representing an error returned by a library call. string represents the description of h_errno, as returned by the hstrerror() C function.     exception socket.gaierror\u00b6 This exception is raised for address-related errors, for getaddrinfo() and getnameinfo(). The accompanying value is a pair (error, string) representing an error returned by a library call. string represents the description of error, as returned by the gai_strerror() C function. The error value will match one of the EAI_* constants defined in this module.    exception socket.timeout\u00b6 This exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to settimeout().  The accompanying value is a string whose value is currently always &#8220;timed out&#8221;.  New in version 2.3.     socket.AF_UNIX\u00b6  socket.AF_INET\u00b6  socket.AF_INET6\u00b6 These constants represent the address (and protocol) families, used for the first argument to socket().  If the AF_UNIX constant is not defined then this protocol is unsupported.    socket.SOCK_STREAM\u00b6  socket.SOCK_DGRAM\u00b6  socket.SOCK_RAW\u00b6  socket.SOCK_RDM\u00b6  socket.SOCK_SEQPACKET\u00b6 These constants represent the socket types, used for the second argument to socket(). (Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)    SO_*  socket.SOMAXCONN\u00b6  MSG_*  SOL_*  IPPROTO_*  IPPORT_*  INADDR_*  IP_*  IPV6_*  EAI_*  AI_*  NI_*  TCP_* Many constants of these forms, documented in the Unix documentation on sockets and\/or the IP protocol, are also defined in the socket module. They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.  In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided.    SIO_*  RCVALL_* Constants for Windows&#8217; WSAIoctl(). The constants are used as arguments to the ioctl() method of socket objects.  New in version 2.6.     TIPC_* TIPC related constants, matching the ones exported by the C socket API. See the TIPC documentation for more information.  New in version 2.6.     socket.has_ipv6\u00b6 This constant contains a boolean value which indicates if IPv6 is supported on this platform.  New in version 2.3.     socket.create_connection(address[, timeout[, source_address]])\u00b6 Connect to a TCP service listening on the Internet address (a 2-tuple (host, port)), and return the socket object.  This is a higher-level function than socket.connect(): if host is a non-numeric hostname, it will try to resolve it for both AF_INET and AF_INET6, and then try to connect to all possible addresses in turn until a connection succeeds.  This makes it easy to write clients that are compatible to both IPv4 and IPv6. Passing the optional timeout parameter will set the timeout on the socket instance before attempting to connect.  If no timeout is supplied, the global default timeout setting returned by getdefaulttimeout() is used. If supplied, source_address must be a 2-tuple (host, port) for the socket to bind to as its source address before connecting.  If host or port are &#8216;&#8217; or 0 respectively the OS default behavior will be used.  New in version 2.6.  Changed in version 2.7: source_address was added.     socket.getaddrinfo(host, port, family=0, socktype=0, proto=0, flags=0)\u00b6 Translate the host\/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. host is a domain name, a string representation of an IPv4\/v6 address or None. port is a string service name such as 'http', a numeric port number or None.  By passing None as the value of host and port, you can pass NULL to the underlying C API. The family, socktype and proto arguments can be optionally specified in order to narrow the list of addresses returned.  Passing zero as a value for each of these arguments selects the full range of results. The flags argument can be one or several of the AI_* constants, and will influence how results are computed and returned. For example, AI_NUMERICHOST will disable domain name resolution and will raise an error if host is a domain name. The function returns a list of 5-tuples with the following structure: (family, socktype, proto, canonname, sockaddr) In these tuples, family, socktype, proto are all integers and are meant to be passed to the socket() function.  canonname will be a string representing the canonical name of the host if AI_CANONNAME is part of the flags argument; else canonname will be empty.  sockaddr is a tuple describing a socket address, whose format depends on the returned family (a (address, port) 2-tuple for AF_INET, a (address, port, flow info, scope id) 4-tuple for AF_INET6), and is meant to be passed to the socket.connect() method. The following example fetches address information for a hypothetical TCP connection to www.python.org on port 80 (results may differ on your system if IPv6 isn&#8217;t enabled): >>> socket.getaddrinfo(\"www.python.org\", 80, 0, 0, socket.SOL_TCP) [(2, 1, 6, &#39;&#39;, (&#39;82.94.164.162&#39;, 80)),  (10, 1, 6, &#39;&#39;, (&#39;2001:888:2000:d::a2&#39;, 80, 0, 0))]    New in version 2.2.     socket.getfqdn([name])\u00b6 Return a fully qualified domain name for name. If name is omitted or empty, it is interpreted as the local host.  To find the fully qualified name, the hostname returned by gethostbyaddr() is checked, followed by aliases for the host, if available.  The first name which includes a period is selected.  In case no fully qualified domain name is available, the hostname as returned by gethostname() is returned.  New in version 2.0.     socket.gethostbyname(hostname)\u00b6 Translate a host name to IPv4 address format.  The IPv4 address is returned as a string, such as  '100.50.200.5'.  If the host name is an IPv4 address itself it is returned unchanged.  See gethostbyname_ex() for a more complete interface. gethostbyname() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4\/v6 dual stack support.    socket.gethostbyname_ex(hostname)\u00b6 Translate a host name to IPv4 address format, extended interface. Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). gethostbyname_ex() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4\/v6 dual stack support.    socket.gethostname()\u00b6 Return a string containing the hostname of the machine where  the Python interpreter is currently executing. If you want to know the current machine&#8217;s IP address, you may want to use gethostbyname(gethostname()). This operation assumes that there is a valid address-to-host mapping for the host, and the assumption does not always hold. Note: gethostname() doesn&#8217;t always return the fully qualified domain name; use getfqdn() (see above).     socket.gethostbyaddr(ip_address)\u00b6 Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4\/v6 addresses for the same interface on the same host (most likely containing only a single address). To find the fully qualified domain name, use the function getfqdn(). gethostbyaddr() supports both IPv4 and IPv6.    socket.getnameinfo(sockaddr, flags)\u00b6 Translate a socket address sockaddr into a 2-tuple (host, port). Depending on the settings of flags, the result can contain a fully-qualified domain name or numeric address representation in host.  Similarly, port can contain a string port name or a numeric port number.  New in version 2.2.     socket.getprotobyname(protocolname)\u00b6 Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function.  This is usually only needed for sockets opened in &#8220;raw&#8221; mode (SOCK_RAW); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero.    socket.getservbyname(servicename[, protocolname])\u00b6 Translate an Internet service name and protocol name to a port number for that service.  The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.    socket.getservbyport(port[, protocolname])\u00b6 Translate an Internet port number and protocol name to a service name for that service.  The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match.    socket.socket([family[, type[, proto]]])\u00b6 Create a new socket using the given address family, socket type and protocol number.  The address family should be AF_INET (the default), AF_INET6 or AF_UNIX.  The socket type should be SOCK_STREAM (the default), SOCK_DGRAM or perhaps one of the other SOCK_ constants.  The protocol number is usually zero and may be omitted in that case.    socket.socketpair([family[, type[, proto]]])\u00b6 Build a pair of connected socket objects using the given address family, socket type, and protocol number.  Address family, socket type, and protocol number are as for the socket() function above. The default family is AF_UNIX if defined on the platform; otherwise, the default is AF_INET. Availability: Unix.  New in version 2.4.     socket.fromfd(fd, family, type[, proto])\u00b6 Duplicate the file descriptor fd (an integer as returned by a file object&#8217;s fileno() method) and build a socket object from the result.  Address family, socket type and protocol number are as for the socket() function above. The file descriptor should refer to a socket, but this is not checked &#8212; subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon).  The socket is assumed to be in blocking mode. Availability: Unix.    socket.ntohl(x)\u00b6 Convert 32-bit positive integers from network to host byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.    socket.ntohs(x)\u00b6 Convert 16-bit positive integers from network to host byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.    socket.htonl(x)\u00b6 Convert 32-bit positive integers from host to network byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.    socket.htons(x)\u00b6 Convert 16-bit positive integers from host to network byte order.  On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.    socket.inet_aton(ip_string)\u00b6 Convert an IPv4 address from dotted-quad string format (for example, &#8216;123.45.67.89&#8217;) to 32-bit packed binary format, as a string four characters in length.  This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary this function returns. inet_aton() also accepts strings with less than three dots; see the Unix manual page inet(3) for details. If the IPv4 address string passed to this function is invalid, socket.error will be raised. Note that exactly what is valid depends on the underlying C implementation of inet_aton(). inet_aton() does not support IPv6, and inet_pton() should be used instead for IPv4\/v6 dual stack support.     socket.inet_ntoa(packed_ip)\u00b6 Convert a 32-bit packed IPv4 address (a string four characters in length) to its standard dotted-quad string representation (for example, &#8216;123.45.67.89&#8217;).  This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary data this function takes as an argument. If the string passed to this function is not exactly 4 bytes in length, socket.error will be raised. inet_ntoa() does not support IPv6, and inet_ntop() should be used instead for IPv4\/v6 dual stack support.     socket.inet_pton(address_family, ip_string)\u00b6 Convert an IP address from its family-specific string format to a packed, binary format. inet_pton() is useful when a library or network protocol calls for an object of type struct in_addr (similar to inet_aton()) or struct in6_addr. Supported values for address_family are currently AF_INET and AF_INET6. If the IP address string ip_string is invalid, socket.error will be raised. Note that exactly what is valid depends on both the value of address_family and the underlying implementation of inet_pton(). Availability: Unix (maybe not all platforms).  New in version 2.3.     socket.inet_ntop(address_family, packed_ip)\u00b6 Convert a packed IP address (a string of some number of characters) to its standard, family-specific string representation (for example, '7.10.0.5' or '5aef:2b::8') inet_ntop() is useful when a library or network protocol returns an object of type struct in_addr (similar to inet_ntoa()) or struct in6_addr. Supported values for address_family are currently AF_INET and AF_INET6. If the string packed_ip is not the correct length for the specified address family, ValueError will be raised.  A socket.error is raised for errors from the call to inet_ntop(). Availability: Unix (maybe not all platforms).  New in version 2.3.     socket.getdefaulttimeout()\u00b6 Return the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None.  New in version 2.3.     socket.setdefaulttimeout(timeout)\u00b6 Set the default timeout in seconds (float) for new socket objects. A value of None indicates that new socket objects have no timeout. When the socket module is first imported, the default is None.  New in version 2.3.     socket.SocketType\u00b6 This is a Python type object that represents the socket object type. It is the same as type(socket(...)).   See also  Module SocketServer Classes that simplify writing network servers. Module ssl A TLS\/SSL wrapper for socket objects.    17.2.1. Socket Objects\u00b6 Socket objects have the following methods.  Except for makefile() these correspond to Unix system calls applicable to sockets.   socket.accept()\u00b6 Accept a connection. The socket must be bound to an address and listening for connections. The return value is a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection.    socket.bind(address)\u00b6 Bind the socket to address.  The socket must not already be bound. (The format of address depends on the address family &#8212; see above.)  Note This method has historically accepted a pair of parameters for AF_INET addresses instead of only a tuple.  This was never intentional and is no longer available in Python 2.0 and later.      socket.close()\u00b6 Close the socket.  All future operations on the socket object will fail. The remote end will receive no more data (after queued data is flushed). Sockets are automatically closed when they are garbage-collected.  Note close() releases the resource associated with a connection but does not necessarily close the connection immediately.  If you want to close the connection in a timely fashion, call shutdown() before close().      socket.connect(address)\u00b6 Connect to a remote socket at address. (The format of address depends on the address family &#8212; see above.)  Note This method has historically accepted a pair of parameters for AF_INET addresses instead of only a tuple.  This was never intentional and is no longer available in Python 2.0 and later.      socket.connect_ex(address)\u00b6 Like connect(address), but return an error indicator instead of raising an exception for errors returned by the C-level connect() call (other problems, such as &#8220;host not found,&#8221; can still raise exceptions).  The error indicator is 0 if the operation succeeded, otherwise the value of the errno variable.  This is useful to support, for example, asynchronous connects.  Note This method has historically accepted a pair of parameters for AF_INET addresses instead of only a tuple. This was never intentional and is no longer available in Python 2.0 and later.      socket.fileno()\u00b6 Return the socket&#8217;s file descriptor (a small integer).  This is useful with select.select(). Under Windows the small integer returned by this method cannot be used where a file descriptor can be used (such as os.fdopen()).  Unix does not have this limitation.     socket.getpeername()\u00b6 Return the remote address to which the socket is connected.  This is useful to find out the port number of a remote IPv4\/v6 socket, for instance. (The format of the address returned depends on the address family &#8212; see above.)  On some systems this function is not supported.    socket.getsockname()\u00b6 Return the socket&#8217;s own address.  This is useful to find out the port number of an IPv4\/v6 socket, for instance. (The format of the address returned depends on the address family &#8212; see above.)    socket.getsockopt(level, optname[, buflen])\u00b6 Return the value of the given socket option (see the Unix man page getsockopt(2)).  The needed symbolic constants (SO_* etc.) are defined in this module.  If buflen is absent, an integer option is assumed and its integer value is returned by the function.  If buflen is present, it specifies the maximum length of the buffer used to receive the option in, and this buffer is returned as a string.  It is up to the caller to decode the contents of the buffer (see the optional built-in module struct for a way to decode C structures encoded as strings).    socket.ioctl(control, option)\u00b6     Platform:Windows    The ioctl() method is a limited interface to the WSAIoctl system interface.  Please refer to the Win32 documentation for more information. On other platforms, the generic fcntl.fcntl() and fcntl.ioctl() functions may be used; they accept a socket object as their first argument.  New in version 2.6.     socket.listen(backlog)\u00b6 Listen for connections made to the socket.  The backlog argument specifies the maximum number of queued connections and should be at least 0; the maximum value is system-dependent (usually 5), the minimum value is forced to 0.    socket.makefile([mode[, bufsize]])\u00b6 Return a file object associated with the socket.  (File objects are described in File Objects.) The file object references a dup()ped version of the socket file descriptor, so the file object and socket object may be closed or garbage-collected independently. The socket must be in blocking mode (it can not have a timeout). The optional mode and bufsize arguments are interpreted the same way as by the built-in file() function.  Note On Windows, the file-like object created by makefile() cannot be used where a file object with a file descriptor is expected, such as the stream arguments of subprocess.Popen().      socket.recv(bufsize[, flags])\u00b6 Receive data from the socket.  The return value is a string representing the data received.  The maximum amount of data to be received at once is specified by bufsize.  See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.  Note For best match with hardware and network realities, the value of  bufsize should be a relatively small power of 2, for example, 4096.      socket.recvfrom(bufsize[, flags])\u00b6 Receive data from the socket.  The return value is a pair (string, address) where string is a string representing the data received and address is the address of the socket sending the data.  See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero. (The format of address depends on the address family &#8212; see above.)    socket.recvfrom_into(buffer[, nbytes[, flags]])\u00b6 Receive data from the socket, writing it into buffer instead of  creating a new string.  The return value is a pair (nbytes, address) where nbytes is the number of bytes received and address is the address of the socket sending the data.  See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.  (The format of address depends on the address family &#8212; see above.)  New in version 2.5.     socket.recv_into(buffer[, nbytes[, flags]])\u00b6 Receive up to nbytes bytes from the socket, storing the data into a buffer rather than creating a new string.  If nbytes is not specified (or 0), receive up to the size available in the given buffer.  Returns the number of bytes received.  See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.  New in version 2.5.     socket.send(string[, flags])\u00b6 Send data to the socket.  The socket must be connected to a remote socket.  The optional flags argument has the same meaning as for recv() above. Returns the number of bytes sent. Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data.    socket.sendall(string[, flags])\u00b6 Send data to the socket.  The socket must be connected to a remote socket.  The optional flags argument has the same meaning as for recv() above. Unlike send(), this method continues to send data from string until either all data has been sent or an error occurs.  None is returned on success.  On error, an exception is raised, and there is no way to determine how much data, if any, was successfully sent.    socket.sendto(string[, flags], address)\u00b6 Send data to the socket.  The socket should not be connected to a remote socket, since the destination socket is specified by address.  The optional flags argument has the same meaning as for recv() above.  Return the number of bytes sent. (The format of address depends on the address family &#8212; see above.)    socket.setblocking(flag)\u00b6 Set blocking or non-blocking mode of the socket: if flag is 0, the socket is set to non-blocking, else to blocking mode.  Initially all sockets are in blocking mode.  In non-blocking mode, if a recv() call doesn&#8217;t find any data, or if a send() call can&#8217;t immediately dispose of the data, a error exception is raised; in blocking mode, the calls block until they can proceed. s.setblocking(0) is equivalent to s.settimeout(0.0); s.setblocking(1) is equivalent to s.settimeout(None).    socket.settimeout(value)\u00b6 Set a timeout on blocking socket operations.  The value argument can be a nonnegative float expressing seconds, or None. If a float is given, subsequent socket operations will raise a timeout exception if the timeout period value has elapsed before the operation has completed.  Setting a timeout of None disables timeouts on socket operations. s.settimeout(0.0) is equivalent to s.setblocking(0); s.settimeout(None) is equivalent to s.setblocking(1).  New in version 2.3.     socket.gettimeout()\u00b6 Return the timeout in seconds (float) associated with socket operations, or None if no timeout is set.  This reflects the last call to setblocking() or settimeout().  New in version 2.3.   Some notes on socket blocking and timeouts: A socket object can be in one of three modes: blocking, non-blocking, or timeout.  Sockets are always created in blocking mode.  In blocking mode, operations block until complete or the system returns an error (such as connection timed out).  In non-blocking mode, operations fail (with an error that is unfortunately system-dependent) if they cannot be completed immediately.  In timeout mode, operations fail if they cannot be completed within the timeout specified for the socket or if the system returns an error.  The setblocking() method is simply a shorthand for certain settimeout() calls. Timeout mode internally sets the socket in non-blocking mode.  The blocking and timeout modes are shared between file descriptors and socket objects that refer to the same network endpoint.  A consequence of this is that file objects returned by the makefile() method must only be used when the socket is in blocking mode; in timeout or non-blocking mode file operations that cannot be completed immediately will fail. Note that the connect() operation is subject to the timeout setting, and in general it is recommended to call settimeout() before calling connect() or pass a timeout parameter to create_connection().  The system network stack may return a connection timeout error of its own regardless of any Python socket timeout setting.   socket.setsockopt(level, optname, value)\u00b6 Set the value of the given socket option (see the Unix manual page setsockopt(2)).  The needed symbolic constants are defined in the socket module (SO_* etc.).  The value can be an integer or a string representing a buffer.  In the latter case it is up to the caller to ensure that the string contains the proper bits (see the optional built-in module struct for a way to encode C structures as strings).     socket.shutdown(how)\u00b6 Shut down one or both halves of the connection.  If how is SHUT_RD, further receives are disallowed.  If how is SHUT_WR, further sends are disallowed.  If how is SHUT_RDWR, further sends and receives are disallowed.  Depending on the platform, shutting down one half of the connection can also close the opposite half (e.g. on Mac OS X, shutdown(SHUT_WR) does not allow further reads on the other end of the connection).  Note that there are no methods read() or write(); use recv() and send() without flags argument instead. Socket objects also have these (read-only) attributes that correspond to the values given to the socket constructor.   socket.family\u00b6 The socket family.  New in version 2.5.     socket.type\u00b6 The socket type.  New in version 2.5.     socket.proto\u00b6 The socket protocol.  New in version 2.5.     17.2.2. Example\u00b6 Here are four minimal example programs using the TCP\/IP protocol: a server that echoes all data that it receives back (servicing only one client), and a client using it.  Note that a server must perform the sequence socket(), bind(), listen(), accept() (possibly repeating the accept() to service more than one client), while a client only needs the sequence socket(), connect().  Also note that the server does not send()\/recv() on the socket it is listening on but on the new socket returned by accept(). The first two examples support IPv4 only. # Echo server program import socket  HOST = &#39;&#39;                 # Symbolic name meaning all available interfaces PORT = 50007              # Arbitrary non-privileged port s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen(1) conn, addr = s.accept() print &#39;Connected by&#39;, addr while 1:     data = conn.recv(1024)     if not data: break     conn.send(data) conn.close()   # Echo client program import socket  HOST = &#39;daring.cwi.nl&#39;    # The remote host PORT = 50007              # The same port as used by the server s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) s.send(&#39;Hello, world&#39;) data = s.recv(1024) s.close() print &#39;Received&#39;, repr(data)   The next two examples are identical to the above two, but support both IPv4 and IPv6. The server side will listen to the first address family available (it should listen to both instead). On most of IPv6-ready systems, IPv6 will take precedence and the server may not accept IPv4 traffic. The client side will try to connect to the all addresses returned as a result of the name resolution, and sends traffic to the first one connected successfully. # Echo server program import socket import sys  HOST = None               # Symbolic name meaning all available interfaces PORT = 50007              # Arbitrary non-privileged port s = None for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC,                               socket.SOCK_STREAM, 0, socket.AI_PASSIVE):     af, socktype, proto, canonname, sa = res     try:         s = socket.socket(af, socktype, proto)     except socket.error, msg:         s = None         continue     try:         s.bind(sa)         s.listen(1)     except socket.error, msg:         s.close()         s = None         continue     break if s is None:     print &#39;could not open socket&#39;     sys.exit(1) conn, addr = s.accept() print &#39;Connected by&#39;, addr while 1:     data = conn.recv(1024)     if not data: break     conn.send(data) conn.close()   # Echo client program import socket import sys  HOST = &#39;daring.cwi.nl&#39;    # The remote host PORT = 50007              # The same port as used by the server s = None for res in socket.getaddrinfo(HOST, PORT, socket.AF_UNSPEC, socket.SOCK_STREAM):     af, socktype, proto, canonname, sa = res     try:         s = socket.socket(af, socktype, proto)     except socket.error, msg:         s = None         continue     try:         s.connect(sa)     except socket.error, msg:         s.close()         s = None         continue     break if s is None:     print &#39;could not open socket&#39;     sys.exit(1) s.send(&#39;Hello, world&#39;) data = s.recv(1024) s.close() print &#39;Received&#39;, repr(data)   The last example shows how to write a very simple network sniffer with raw sockets on Windows. The example requires administrator privileges to modify the interface: import socket  # the public network interface HOST = socket.gethostbyname(socket.gethostname())  # create a raw socket and bind it to the public interface s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP) s.bind((HOST, 0))  # Include IP headers s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)  # receive all packages s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)  # receive a package print s.recvfrom(65565)  # disabled promiscuous mode s.ioctl(socket.SIO_RCVALL, socket.RCVALL_OFF)   Running an example several times with too small delay between executions, could lead to this error: socket.error: [Errno 98] Address already in use  This is because the previous execution has left the socket in a TIME_WAIT state, and can&#8217;t be immediately reused. There is a socket flag to set, in order to prevent this, socket.SO_REUSEADDR: s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((HOST, PORT))   the SO_REUSEADDR flag tells the kernel to reuse a local socket in TIME_WAIT state, without waiting for its natural timeout to expire."},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.create_connection","title":"socket.create_connection","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.fromfd","title":"socket.fromfd","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.getaddrinfo","title":"socket.getaddrinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.getdefaulttimeout","title":"socket.getdefaulttimeout","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.getfqdn","title":"socket.getfqdn","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.gethostbyaddr","title":"socket.gethostbyaddr","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.gethostbyname","title":"socket.gethostbyname","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.gethostbyname_ex","title":"socket.gethostbyname_ex","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.gethostname","title":"socket.gethostname","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.getnameinfo","title":"socket.getnameinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.getprotobyname","title":"socket.getprotobyname","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.getservbyname","title":"socket.getservbyname","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.getservbyport","title":"socket.getservbyport","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.htonl","title":"socket.htonl","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.htons","title":"socket.htons","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.inet_aton","title":"socket.inet_aton","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.inet_ntoa","title":"socket.inet_ntoa","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.inet_ntop","title":"socket.inet_ntop","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.inet_pton","title":"socket.inet_pton","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.ntohl","title":"socket.ntohl","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.ntohs","title":"socket.ntohs","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.setdefaulttimeout","title":"socket.setdefaulttimeout","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket","title":"socket.socket","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.accept","title":"socket.socket.accept","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.bind","title":"socket.socket.bind","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.close","title":"socket.socket.close","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.connect","title":"socket.socket.connect","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.connect_ex","title":"socket.socket.connect_ex","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.fileno","title":"socket.socket.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.getpeername","title":"socket.socket.getpeername","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.getsockname","title":"socket.socket.getsockname","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.getsockopt","title":"socket.socket.getsockopt","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.gettimeout","title":"socket.socket.gettimeout","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.ioctl","title":"socket.socket.ioctl","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.listen","title":"socket.socket.listen","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.makefile","title":"socket.socket.makefile","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.recv","title":"socket.socket.recv","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.recv_into","title":"socket.socket.recv_into","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.recvfrom","title":"socket.socket.recvfrom","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.recvfrom_into","title":"socket.socket.recvfrom_into","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.send","title":"socket.socket.send","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.sendall","title":"socket.socket.sendall","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.sendto","title":"socket.socket.sendto","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.setblocking","title":"socket.socket.setblocking","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.setsockopt","title":"socket.socket.setsockopt","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.settimeout","title":"socket.socket.settimeout","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socket.shutdown","title":"socket.socket.shutdown","description":""},{"url":"http:\/\/docs.python.org\/library\/socket.html#socket.socketpair","title":"socket.socketpair","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html","title":"asynchat","description":"17.7. asynchat &#8212; Asynchronous socket command\/response handler\u00b6 Source code: Lib\/asynchat.py  This module builds on the asyncore infrastructure, simplifying asynchronous clients and servers and making it easier to handle protocols whose elements are terminated by arbitrary strings, or are of variable length. asynchat defines the abstract class async_chat that you subclass, providing implementations of the collect_incoming_data() and found_terminator() methods. It uses the same asynchronous loop as asyncore, and the two types of channel, asyncore.dispatcher and asynchat.async_chat, can freely be mixed in the channel map. Typically an asyncore.dispatcher server channel generates new asynchat.async_chat channel objects as it receives incoming connection requests.   class asynchat.async_chat\u00b6 This class is an abstract subclass of asyncore.dispatcher. To make practical use of the code you must subclass async_chat, providing meaningful collect_incoming_data() and found_terminator() methods. The asyncore.dispatcher methods can be used, although not all make sense in a message\/response context. Like asyncore.dispatcher, async_chat defines a set of events that are generated by an analysis of socket conditions after a select() call. Once the polling loop has been started the async_chat object&#8217;s methods are called by the event-processing framework with no action on the part of the programmer. Two class attributes can be modified, to improve performance, or possibly even to conserve memory.   ac_in_buffer_size\u00b6 The asynchronous input buffer size (default 4096).    ac_out_buffer_size\u00b6 The asynchronous output buffer size (default 4096).  Unlike asyncore.dispatcher, async_chat allows you to define a first-in-first-out queue (fifo) of producers. A producer need have only one method, more(), which should return data to be transmitted on the channel. The producer indicates exhaustion (i.e. that it contains no more data) by having its more() method return the empty string. At this point the async_chat object removes the producer from the fifo and starts using the next producer, if any. When the producer fifo is empty the handle_write() method does nothing. You use the channel object&#8217;s set_terminator() method to describe how to recognize the end of, or an important breakpoint in, an incoming transmission from the remote endpoint. To build a functioning async_chat subclass your  input methods collect_incoming_data() and found_terminator() must handle the data that the channel receives asynchronously. The methods are described below.     async_chat.close_when_done()\u00b6 Pushes a None on to the producer fifo. When this producer is popped off the fifo it causes the channel to be closed.    async_chat.collect_incoming_data(data)\u00b6 Called with data holding an arbitrary amount of received data.  The default method, which must be overridden, raises a NotImplementedError exception.    async_chat.discard_buffers()\u00b6 In emergencies this method will discard any data held in the input and\/or output buffers and the producer fifo.    async_chat.found_terminator()\u00b6 Called when the incoming data stream  matches the termination condition set by set_terminator(). The default method, which must be overridden, raises a NotImplementedError exception. The buffered input data should be available via an instance attribute.    async_chat.get_terminator()\u00b6 Returns the current terminator for the channel.    async_chat.push(data)\u00b6 Pushes data on to the channel&#8217;s fifo to ensure its transmission. This is all you need to do to have the channel write the data out to the network, although it is possible to use your own producers in more complex schemes to implement encryption and chunking, for example.    async_chat.push_with_producer(producer)\u00b6 Takes a producer object and adds it to the producer fifo associated with the channel.  When all currently-pushed producers have been exhausted the channel will consume this producer&#8217;s data by calling its more() method and send the data to the remote endpoint.    async_chat.set_terminator(term)\u00b6 Sets the terminating condition to be recognized on the channel.  term may be any of three types of value, corresponding to three different ways to handle incoming protocol data.       term Description    string Will call found_terminator() when the string is found in the input stream  integer Will call found_terminator() when the indicated number of characters have been received  None The channel continues to collect data forever    Note that any data following the terminator will be available for reading by the channel after found_terminator() is called.    17.7.1. asynchat - Auxiliary Classes\u00b6   class asynchat.fifo([list=None])\u00b6 A fifo holding data which has been pushed by the application but not yet popped for writing to the channel.  A fifo is a list used to hold data and\/or producers until they are required.  If the list argument is provided then it should contain producers or data items to be written to the channel.   is_empty()\u00b6 Returns True if and only if the fifo is empty.    first()\u00b6 Returns the least-recently push()ed item from the fifo.    push(data)\u00b6 Adds the given data (which may be a string or a producer object) to the producer fifo.    pop()\u00b6 If the fifo is not empty, returns True, first(), deleting the popped item.  Returns False, None for an empty fifo.      17.7.2. asynchat Example\u00b6 The following partial example shows how HTTP requests can be read with async_chat.  A web server might create an http_request_handler object for each incoming client connection. Notice that initially the channel terminator is set to match the blank line at the end of the HTTP headers, and a flag indicates that the headers are being read. Once the headers have been read, if the request is of type POST (indicating that further data are present in the input stream) then the Content-Length: header is used to set a numeric terminator to read the right amount of data from the channel. The handle_request() method is called once all relevant input has been marshalled, after setting the channel terminator to None to ensure that any extraneous data sent by the web client are ignored. class http_request_handler(asynchat.async_chat):      def __init__(self, sock, addr, sessions, log):         asynchat.async_chat.__init__(self, sock=sock)         self.addr = addr         self.sessions = sessions         self.ibuffer = []         self.obuffer = \"\"         self.set_terminator(\"\\r\\n\\r\\n\")         self.reading_headers = True         self.handling = False         self.cgi_data = None         self.log = log      def collect_incoming_data(self, data):         \"\"\"Buffer the data\"\"\"         self.ibuffer.append(data)      def found_terminator(self):         if self.reading_headers:             self.reading_headers = False             self.parse_headers(\"\".join(self.ibuffer))             self.ibuffer = []             if self.op.upper() == \"POST\":                 clen = self.headers.getheader(\"content-length\")                 self.set_terminator(int(clen))             else:                 self.handling = True                 self.set_terminator(None)                 self.handle_request()         elif not self.handling:             self.set_terminator(None) # browsers sometimes over-send             self.cgi_data = parse(self.headers, \"\".join(self.ibuffer))             self.handling = True             self.ibuffer = []             self.handle_request()"},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat","title":"asynchat.async_chat","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat.close_when_done","title":"asynchat.async_chat.close_when_done","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat.collect_incoming_data","title":"asynchat.async_chat.collect_incoming_data","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat.discard_buffers","title":"asynchat.async_chat.discard_buffers","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat.found_terminator","title":"asynchat.async_chat.found_terminator","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat.get_terminator","title":"asynchat.async_chat.get_terminator","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat.push","title":"asynchat.async_chat.push","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat.push_with_producer","title":"asynchat.async_chat.push_with_producer","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.async_chat.set_terminator","title":"asynchat.async_chat.set_terminator","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.fifo","title":"asynchat.fifo","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.fifo.first","title":"asynchat.fifo.first","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.fifo.is_empty","title":"asynchat.fifo.is_empty","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.fifo.pop","title":"asynchat.fifo.pop","description":""},{"url":"http:\/\/docs.python.org\/library\/asynchat.html#asynchat.fifo.push","title":"asynchat.fifo.push","description":""},{"url":"http:\/\/docs.python.org\/library\/mailcap.html","title":"mailcap","description":"18.3. mailcap &#8212; Mailcap file handling\u00b6 Source code: Lib\/mailcap.py  Mailcap files are used to configure how MIME-aware applications such as mail readers and Web browsers react to files with different MIME types. (The name &#8220;mailcap&#8221; is derived from the phrase &#8220;mail capability&#8221;.)  For example, a mailcap file might contain a line like video\/mpeg; xmpeg %s.  Then, if the user encounters an email message or Web document with the MIME type video\/mpeg, %s will be replaced by a filename (usually one belonging to a temporary file) and the xmpeg program can be automatically started to view the file. The mailcap format is documented in RFC 1524, &#8220;A User Agent Configuration Mechanism For Multimedia Mail Format Information,&#8221; but is not an Internet standard.  However, mailcap files are supported on most Unix systems.   mailcap.findmatch(caps, MIMEtype[, key[, filename[, plist]]])\u00b6 Return a 2-tuple; the first element is a string containing the command line to be executed (which can be passed to os.system()), and the second element is the mailcap entry for a given MIME type.  If no matching MIME type can be found, (None, None) is returned. key is the name of the field desired, which represents the type of activity to be performed; the default value is &#8216;view&#8217;, since in the  most common case you simply want to view the body of the MIME-typed data.  Other possible values might be &#8216;compose&#8217; and &#8216;edit&#8217;, if you wanted to create a new body of the given MIME type or alter the existing body data.  See RFC 1524 for a complete list of these fields. filename is the filename to be substituted for %s in the command line; the default value is '\/dev\/null' which is almost certainly not what you want, so usually you&#8217;ll override it by specifying a filename. plist can be a list containing named parameters; the default value is simply an empty list.  Each entry in the list must be a string containing the parameter name, an equals sign ('='), and the parameter&#8217;s value.  Mailcap entries can contain  named parameters like %{foo}, which will be replaced by the value of the parameter named &#8216;foo&#8217;.  For example, if the command line showpartial %{id} %{number} %{total} was in a mailcap file, and plist was set to ['id=1', 'number=2', 'total=3'], the resulting command line would be 'showpartial 1 2 3'. In a mailcap file, the &#8220;test&#8221; field can optionally be specified to test some external condition (such as the machine architecture, or the window system in use) to determine whether or not the mailcap line applies.  findmatch() will automatically check such conditions and skip the entry if the check fails.     mailcap.getcaps()\u00b6 Returns a dictionary mapping MIME types to a list of mailcap file entries. This dictionary must be passed to the findmatch() function.  An entry is stored as a list of dictionaries, but it shouldn&#8217;t be necessary to know the details of this representation. The information is derived from all of the mailcap files found on the system. Settings in the user&#8217;s mailcap file $HOME\/.mailcap will override settings in the system mailcap files \/etc\/mailcap, \/usr\/etc\/mailcap, and \/usr\/local\/etc\/mailcap.   An example usage: >>> import mailcap >>> d=mailcap.getcaps() >>> mailcap.findmatch(d, &#39;video\/mpeg&#39;, filename=&#39;\/tmp\/tmp1223&#39;) (&#39;xmpeg \/tmp\/tmp1223&#39;, {&#39;view&#39;: &#39;xmpeg %s&#39;})"},{"url":"http:\/\/docs.python.org\/library\/mailcap.html#mailcap.findmatch","title":"mailcap.findmatch","description":""},{"url":"http:\/\/docs.python.org\/library\/mailcap.html#mailcap.getcaps","title":"mailcap.getcaps","description":""},{"url":"http:\/\/docs.python.org\/library\/email.html","title":"email","description":"18.1. email &#8212; An email and MIME handling package\u00b6  New in version 2.2. The email package is a library for managing email messages, including MIME and other RFC 2822-based message documents.  It subsumes most of the functionality in several older standard modules such as rfc822, mimetools, multifile, and other non-standard packages such as mimecntl.  It is specifically not designed to do any sending of email messages to SMTP (RFC 2821), NNTP, or other servers; those are functions of modules such as smtplib and nntplib. The email package attempts to be as RFC-compliant as possible, supporting in addition to RFC 2822, such MIME-related RFCs as RFC 2045, RFC 2046, RFC 2047, and RFC 2231. The primary distinguishing feature of the email package is that it splits the parsing and generating of email messages from the internal object model representation of email.  Applications using the email package deal primarily with objects; you can add sub-objects to messages, remove sub-objects from messages, completely re-arrange the contents, etc.  There is a separate parser and a separate generator which handles the transformation from flat text to the object model, and then back to flat text again.  There are also handy subclasses for some common MIME object types, and a few miscellaneous utilities that help with such common tasks as extracting and parsing message field values, creating RFC-compliant dates, etc. The following sections describe the functionality of the email package. The ordering follows a progression that should be common in applications: an email message is read as flat text from a file or other source, the text is parsed to produce the object structure of the email message, this structure is manipulated, and finally, the object tree is rendered back into flat text. It is perfectly feasible to create the object structure out of whole cloth &#8212; i.e. completely from scratch.  From there, a similar progression can be taken as above. Also included are detailed specifications of all the classes and modules that the email package provides, the exception classes you might encounter while using the email package, some auxiliary utilities, and a few examples.  For users of the older mimelib package, or previous versions of the email package, a section on differences and porting is provided. Contents of the email package documentation:  18.1.1. email: Representing an email message 18.1.2. email: Parsing email messages 18.1.2.1. FeedParser API 18.1.2.2. Parser class API 18.1.2.3. Additional notes   18.1.3. email: Generating MIME documents 18.1.4. email: Creating email and MIME objects from scratch 18.1.5. email: Internationalized headers 18.1.6. email: Representing character sets 18.1.7. email: Encoders 18.1.8. email: Exception and Defect classes 18.1.9. email: Miscellaneous utilities 18.1.10. email: Iterators 18.1.11. email: Examples   See also  Module smtplib SMTP protocol client Module nntplib NNTP protocol client    18.1.12. Package History\u00b6 This table describes the release history of the email package, corresponding to the version of Python that the package was released with.  For purposes of this document, when you see a note about change or added versions, these refer to the Python version the change was made in, not the email package version.  This table also describes the Python compatibility of each version of the package.        email version distributed with compatible with    1.x Python 2.2.0 to Python 2.2.1 no longer supported  2.5 Python 2.2.2+ and Python 2.3 Python 2.1 to 2.5  3.0 Python 2.4 Python 2.3 to 2.5  4.0 Python 2.5 Python 2.3 to 2.5    Here are the major differences between email version 4 and version 3:  All modules have been renamed according to PEP 8 standards.  For example, the version 3 module email.Message was renamed to email.message in version 4.  A new subpackage email.mime was added and all the version 3 email.MIME* modules were renamed and situated into the email.mime subpackage.  For example, the version 3 module email.MIMEText was renamed to email.mime.text. Note that the version 3 names will continue to work until Python 2.6.  The email.mime.application module was added, which contains the MIMEApplication class.  Methods that were deprecated in version 3 have been removed.  These include Generator.__call__(), Message.get_type(), Message.get_main_type(), Message.get_subtype().  Fixes have been added for RFC 2231 support which can change some of the return types for Message.get_param() and friends.  Under some circumstances, values which used to return a 3-tuple now return simple strings (specifically, if all extended parameter segments were unencoded, there is no language and charset designation expected, so the return type is now a simple string).  Also, %-decoding used to be done for both encoded and unencoded segments; this decoding is now done only for encoded segments.   Here are the major differences between email version 3 and version 2:  The FeedParser class was introduced, and the Parser class was implemented in terms of the FeedParser.  All parsing therefore is non-strict, and parsing will make a best effort never to raise an exception. Problems found while parsing messages are stored in the message&#8217;s defect attribute. All aspects of the API which raised DeprecationWarnings in version 2 have been removed.  These include the _encoder argument to the MIMEText constructor, the Message.add_payload() method, the Utils.dump_address_pair() function, and the functions Utils.decode() and Utils.encode(). New DeprecationWarnings have been added to: Generator.__call__(), Message.get_type(), Message.get_main_type(), Message.get_subtype(), and the strict argument to the Parser class.  These are expected to be removed in future versions. Support for Pythons earlier than 2.3 has been removed.  Here are the differences between email version 2 and version 1:  The email.Header and email.Charset modules have been added.  The pickle format for Message instances has changed. Since this was never (and still isn&#8217;t) formally defined, this isn&#8217;t considered a backward incompatibility.  However if your application pickles and unpickles Message instances, be aware that in email version 2, Message instances now have private variables _charset and _default_type.  Several methods in the Message class have been deprecated, or their signatures changed.  Also, many new methods have been added.  See the documentation for the Message class for details.  The changes should be completely backward compatible.  The object structure has changed in the face of message\/rfc822 content types.  In email version 1, such a type would be represented by a scalar payload, i.e. the container message&#8217;s is_multipart() returned false, get_payload() was not a list object, but a single Message instance. This structure was inconsistent with the rest of the package, so the object representation for message\/rfc822 content types was changed.  In email version 2, the container does return True from is_multipart(), and get_payload() returns a list containing a single Message item. Note that this is one place that backward compatibility could not be completely maintained.  However, if you&#8217;re already testing the return type of get_payload(), you should be fine.  You just need to make sure your code doesn&#8217;t do a set_payload() with a Message instance on a container with a content type of message\/rfc822.  The Parser constructor&#8217;s strict argument was added, and its parse() and parsestr() methods grew a headersonly argument.  The strict flag was also added to functions email.message_from_file() and email.message_from_string().  Generator.__call__() is deprecated; use Generator.flatten() instead.  The Generator class has also grown the clone() method.  The DecodedGenerator class in the email.Generator module was added.  The intermediate base classes MIMENonMultipart and MIMEMultipart have been added, and interposed in the class hierarchy for most of the other MIME-related derived classes.  The _encoder argument to the MIMEText constructor has been deprecated.  Encoding  now happens implicitly based on the _charset argument.  The following functions in the email.Utils module have been deprecated: dump_address_pairs(), decode(), and encode().  The following functions have been added to the module: make_msgid(), decode_rfc2231(), encode_rfc2231(), and decode_params().  The non-public function email.Iterators._structure() was added.     18.1.13. Differences from mimelib\u00b6 The email package was originally prototyped as a separate library called mimelib. Changes have been made so that method names are more consistent, and some methods or modules have either been added or removed.  The semantics of some of the methods have also changed.  For the most part, any functionality available in mimelib is still available in the email package, albeit often in a different way.  Backward compatibility between the mimelib package and the email package was not a priority. Here is a brief description of the differences between the mimelib and the email packages, along with hints on how to port your applications. Of course, the most visible difference between the two packages is that the package name has been changed to email.  In addition, the top-level package has the following differences:  messageFromString() has been renamed to message_from_string(). messageFromFile() has been renamed to message_from_file().  The Message class has the following differences:  The method asString() was renamed to as_string(). The method ismultipart() was renamed to is_multipart(). The get_payload() method has grown a decode optional argument. The method getall() was renamed to get_all(). The method addheader() was renamed to add_header(). The method gettype() was renamed to get_type(). The method getmaintype() was renamed to get_main_type(). The method getsubtype() was renamed to get_subtype(). The method getparams() was renamed to get_params(). Also, whereas getparams() returned a list of strings, get_params() returns a list of 2-tuples, effectively the key\/value pairs of the parameters, split on the '=' sign. The method getparam() was renamed to get_param(). The method getcharsets() was renamed to get_charsets(). The method getfilename() was renamed to get_filename(). The method getboundary() was renamed to get_boundary(). The method setboundary() was renamed to set_boundary(). The method getdecodedpayload() was removed.  To get similar functionality, pass the value 1 to the decode flag of the get_payload() method. The method getpayloadastext() was removed.  Similar functionality is supported by the DecodedGenerator class in the email.generator module. The method getbodyastext() was removed.  You can get similar functionality by creating an iterator with typed_subpart_iterator() in the email.iterators module.  The Parser class has no differences in its public interface. It does have some additional smarts to recognize message\/delivery-status type messages, which it represents as a Message instance containing separate Message subparts for each header block in the delivery status notification [1]. The Generator class has no differences in its public interface.  There is a new class in the email.generator module though, called DecodedGenerator which provides most of the functionality previously available in the Message.getpayloadastext() method. The following modules and classes have been changed:  The MIMEBase class constructor arguments _major and _minor have changed to _maintype and _subtype respectively.  The Image class\/module has been renamed to MIMEImage.  The _minor argument has been renamed to _subtype.  The Text class\/module has been renamed to MIMEText.  The _minor argument has been renamed to _subtype.  The MessageRFC822 class\/module has been renamed to MIMEMessage.  Note that an earlier version of mimelib called this class\/module RFC822, but that clashed with the Python standard library module rfc822 on some case-insensitive file systems. Also, the MIMEMessage class now represents any kind of MIME message with main type message.  It takes an optional argument _subtype which is used to set the MIME subtype.  _subtype defaults to rfc822.   mimelib provided some utility functions in its address and date modules.  All of these functions have been moved to the email.utils module. The MsgReader class\/module has been removed.  Its functionality is most closely supported in the body_line_iterator() function in the email.iterators module. Footnotes    [1]Delivery Status Notifications (DSN) are defined in RFC 1894."},{"url":"http:\/\/docs.python.org\/library\/json.html","title":"json","description":"18.2. json &#8212; JSON encoder and decoder\u00b6  New in version 2.6. JSON (JavaScript Object Notation) is a subset of JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data interchange format. json exposes an API familiar to users of the standard library marshal and pickle modules. Encoding basic Python object hierarchies: >>> import json >>> json.dumps([&#39;foo&#39;, {&#39;bar&#39;: (&#39;baz&#39;, None, 1.0, 2)}]) &#39;[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2]}]&#39; >>> print json.dumps(\"\\\"foo\\bar\") \"\\\"foo\\bar\" >>> print json.dumps(u&#39;\\u1234&#39;) \"\\u1234\" >>> print json.dumps(&#39;\\\\&#39;) \"\\\\\" >>> print json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort_keys=True) {\"a\": 0, \"b\": 0, \"c\": 0} >>> from StringIO import StringIO >>> io = StringIO() >>> json.dump([&#39;streaming API&#39;], io) >>> io.getvalue() &#39;[\"streaming API\"]&#39;   Compact encoding: >>> import json >>> json.dumps([1,2,3,{&#39;4&#39;: 5, &#39;6&#39;: 7}], separators=(&#39;,&#39;,&#39;:&#39;)) &#39;[1,2,3,{\"4\":5,\"6\":7}]&#39;   Pretty printing: >>> import json >>> print json.dumps({&#39;4&#39;: 5, &#39;6&#39;: 7}, sort_keys=True, indent=4) {     \"4\": 5,     \"6\": 7 }   Decoding JSON: >>> import json >>> json.loads(&#39;[\"foo\", {\"bar\":[\"baz\", null, 1.0, 2]}]&#39;) [u&#39;foo&#39;, {u&#39;bar&#39;: [u&#39;baz&#39;, None, 1.0, 2]}] >>> json.loads(&#39;\"\\\\\"foo\\\\bar\"&#39;) u&#39;\"foo\\x08ar&#39; >>> from StringIO import StringIO >>> io = StringIO(&#39;[\"streaming API\"]&#39;) >>> json.load(io) [u&#39;streaming API&#39;]   Specializing JSON object decoding: >>> import json >>> def as_complex(dct): ...     if &#39;__complex__&#39; in dct: ...         return complex(dct[&#39;real&#39;], dct[&#39;imag&#39;]) ...     return dct ... >>> json.loads(&#39;{\"__complex__\": true, \"real\": 1, \"imag\": 2}&#39;, ...     object_hook=as_complex) (1+2j) >>> import decimal >>> json.loads(&#39;1.1&#39;, parse_float=decimal.Decimal) Decimal(&#39;1.1&#39;)   Extending JSONEncoder: >>> import json >>> class ComplexEncoder(json.JSONEncoder): ...     def default(self, obj): ...         if isinstance(obj, complex): ...             return [obj.real, obj.imag] ...         return json.JSONEncoder.default(self, obj) ... >>> dumps(2 + 1j, cls=ComplexEncoder) &#39;[2.0, 1.0]&#39; >>> ComplexEncoder().encode(2 + 1j) &#39;[2.0, 1.0]&#39; >>> list(ComplexEncoder().iterencode(2 + 1j)) [&#39;[&#39;, &#39;2.0&#39;, &#39;, &#39;, &#39;1.0&#39;, &#39;]&#39;]   Using json.tool from the shell to validate and pretty-print: $ echo &#39;{\"json\":\"obj\"}&#39; | python -mjson.tool {     \"json\": \"obj\" } $ echo &#39;{ 1.2:3.4}&#39; | python -mjson.tool Expecting property name: line 1 column 2 (char 2)    Note The JSON produced by this module&#8217;s default settings is a subset of YAML, so it may be used as a serializer for that as well.   18.2.1. Basic Usage\u00b6   json.dump(obj, fp[, skipkeys[, ensure_ascii[, check_circular[, allow_nan[, cls[, indent[, separators[, encoding[, default[, **kw]]]]]]]]]])\u00b6 Serialize obj as a JSON formatted stream to fp (a .write()-supporting file-like object). If skipkeys is True (default: False), then dict keys that are not of a basic type (str, unicode, int, long, float, bool, None) will be skipped instead of raising a TypeError. If ensure_ascii is False (default: True), then some chunks written to fp may be unicode instances, subject to normal Python str to unicode coercion rules.  Unless fp.write() explicitly understands unicode (as in codecs.getwriter()) this is likely to cause an error. If check_circular is False (default: True), then the circular reference check for container types will be skipped and a circular reference will result in an OverflowError (or worse). If allow_nan is False (default: True), then it will be a ValueError to serialize out of range float values (nan, inf, -inf) in strict compliance of the JSON specification, instead of using the JavaScript equivalents (NaN, Infinity, -Infinity). If indent is a non-negative integer, then JSON array elements and object members will be pretty-printed with that indent level.  An indent level of 0, or negative, will only insert newlines.  None (the default) selects the most compact representation. If separators is an (item_separator, dict_separator) tuple, then it will be used instead of the default (', ', ': ') separators.  (',', ':') is the most compact JSON representation. encoding is the character encoding for str instances, default is UTF-8. default(obj) is a function that should return a serializable version of obj or raise TypeError.  The default simply raises TypeError. To use a custom JSONEncoder subclass (e.g. one that overrides the default() method to serialize additional types), specify it with the cls kwarg; otherwise JSONEncoder is used.  Note Unlike pickle and marshal, JSON is not a framed protocol so trying to serialize more objects with repeated calls to dump() and the same fp will result in an invalid JSON file.      json.dumps(obj[, skipkeys[, ensure_ascii[, check_circular[, allow_nan[, cls[, indent[, separators[, encoding[, default[, **kw]]]]]]]]]])\u00b6 Serialize obj to a JSON formatted str. If ensure_ascii is False, then the return value will be a unicode instance.  The other arguments have the same meaning as in dump().     json.load(fp[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])\u00b6 Deserialize fp (a .read()-supporting file-like object containing a JSON document) to a Python object. If the contents of fp are encoded with an ASCII based encoding other than UTF-8 (e.g. latin-1), then an appropriate encoding name must be specified. Encodings that are not ASCII based (such as UCS-2) are not allowed, and should be wrapped with codecs.getreader(encoding)(fp), or simply decoded to a unicode object and passed to loads(). object_hook is an optional function that will be called with the result of any object literal decoded (a dict).  The return value of object_hook will be used instead of the dict.  This feature can be used to implement custom decoders (e.g. JSON-RPC class hinting). object_pairs_hook is an optional function that will be called with the result of any object literal decoded with an ordered list of pairs.  The return value of object_pairs_hook will be used instead of the dict.  This feature can be used to implement custom decoders that rely on the order that the key and value pairs are decoded (for example, collections.OrderedDict() will remember the order of insertion). If object_hook is also defined, the object_pairs_hook takes priority.  Changed in version 2.7: Added support for object_pairs_hook. parse_float, if specified, will be called with the string of every JSON float to be decoded.  By default, this is equivalent to float(num_str). This can be used to use another datatype or parser for JSON floats (e.g. decimal.Decimal). parse_int, if specified, will be called with the string of every JSON int to be decoded.  By default, this is equivalent to int(num_str).  This can be used to use another datatype or parser for JSON integers (e.g. float). parse_constant, if specified, will be called with one of the following strings: '-Infinity', 'Infinity', 'NaN', 'null', 'true', 'false'.  This can be used to raise an exception if invalid JSON numbers are encountered. To use a custom JSONDecoder subclass, specify it with the cls kwarg; otherwise JSONDecoder is used.  Additional keyword arguments will be passed to the constructor of the class.     json.loads(s[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])\u00b6 Deserialize s (a str or unicode instance containing a JSON document) to a Python object. If s is a str instance and is encoded with an ASCII based encoding other than UTF-8 (e.g. latin-1), then an appropriate encoding name must be specified.  Encodings that are not ASCII based (such as UCS-2) are not allowed and should be decoded to unicode first. The other arguments have the same meaning as in load().     18.2.2. Encoders and decoders\u00b6   class json.JSONDecoder([encoding[, object_hook[, parse_float[, parse_int[, parse_constant[, strict[, object_pairs_hook]]]]]]])\u00b6 Simple JSON decoder. Performs the following translations in decoding by default:       JSON Python    object dict  array list  string unicode  number (int) int, long  number (real) float  true True  false False  null None    It also understands NaN, Infinity, and -Infinity as their corresponding float values, which is outside the JSON spec. encoding determines the encoding used to interpret any str objects decoded by this instance (UTF-8 by default).  It has no effect when decoding unicode objects. Note that currently only encodings that are a superset of ASCII work, strings of other encodings should be passed in as unicode. object_hook, if specified, will be called with the result of every JSON object decoded and its return value will be used in place of the given dict.  This can be used to provide custom deserializations (e.g. to support JSON-RPC class hinting). object_pairs_hook, if specified will be called with the result of every JSON object decoded with an ordered list of pairs.  The return value of object_pairs_hook will be used instead of the dict.  This feature can be used to implement custom decoders that rely on the order that the key and value pairs are decoded (for example, collections.OrderedDict() will remember the order of insertion). If object_hook is also defined, the object_pairs_hook takes priority.  Changed in version 2.7: Added support for object_pairs_hook. parse_float, if specified, will be called with the string of every JSON float to be decoded.  By default, this is equivalent to float(num_str). This can be used to use another datatype or parser for JSON floats (e.g. decimal.Decimal). parse_int, if specified, will be called with the string of every JSON int to be decoded.  By default, this is equivalent to int(num_str).  This can be used to use another datatype or parser for JSON integers (e.g. float). parse_constant, if specified, will be called with one of the following strings: '-Infinity', 'Infinity', 'NaN', 'null', 'true', 'false'.  This can be used to raise an exception if invalid JSON numbers are encountered. If strict is False (True is the default), then control characters will be allowed inside strings.  Control characters in this context are those with character codes in the 0-31 range, including '\\t' (tab), '\\n', '\\r' and '\\0'.   decode(s)\u00b6 Return the Python representation of s (a str or unicode instance containing a JSON document)    raw_decode(s)\u00b6 Decode a JSON document from s (a str or unicode beginning with a JSON document) and return a 2-tuple of the Python representation and the index in s where the document ended. This can be used to decode a JSON document from a string that may have extraneous data at the end.       class json.JSONEncoder([skipkeys[, ensure_ascii[, check_circular[, allow_nan[, sort_keys[, indent[, separators[, encoding[, default]]]]]]]]])\u00b6 Extensible JSON encoder for Python data structures. Supports the following objects and types by default:       Python JSON    dict object  list, tuple array  str, unicode string  int, long, float number  True true  False false  None null    To extend this to recognize other objects, subclass and implement a default() method with another method that returns a serializable object for o if possible, otherwise it should call the superclass implementation (to raise TypeError). If skipkeys is False (the default), then it is a TypeError to attempt encoding of keys that are not str, int, long, float or None.  If skipkeys is True, such items are simply skipped. If ensure_ascii is True (the default), the output is guaranteed to be str objects with all incoming unicode characters escaped.  If ensure_ascii is False, the output will be a unicode object. If check_circular is True (the default), then lists, dicts, and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion (which would cause an OverflowError). Otherwise, no such check takes place. If allow_nan is True (the default), then NaN, Infinity, and -Infinity will be encoded as such.  This behavior is not JSON specification compliant, but is consistent with most JavaScript based encoders and decoders.  Otherwise, it will be a ValueError to encode such floats. If sort_keys is True (default False), then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis. If indent is a non-negative integer (it is None by default), then JSON array elements and object members will be pretty-printed with that indent level.  An indent level of 0 will only insert newlines.  None is the most compact representation. If specified, separators should be an (item_separator, key_separator) tuple.  The default is (', ', ': ').  To get the most compact JSON representation, you should specify (',', ':') to eliminate whitespace. If specified, default is a function that gets called for objects that can&#8217;t otherwise be serialized.  It should return a JSON encodable version of the object or raise a TypeError. If encoding is not None, then all input strings will be transformed into unicode using that encoding prior to JSON-encoding.  The default is UTF-8.   default(o)\u00b6 Implement this method in a subclass such that it returns a serializable object for o, or calls the base implementation (to raise a TypeError). For example, to support arbitrary iterators, you could implement default like this: def default(self, o):    try:        iterable = iter(o)    except TypeError:        pass    else:        return list(iterable)    return JSONEncoder.default(self, o)       encode(o)\u00b6 Return a JSON string representation of a Python data structure, o.  For example: >>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]}) &#39;{\"foo\": [\"bar\", \"baz\"]}&#39;       iterencode(o)\u00b6 Encode the given object, o, and yield each string representation as available.  For example: for chunk in JSONEncoder().iterencode(bigobject):     mysocket.write(chunk)"},{"url":"http:\/\/docs.python.org\/library\/json.html#json.dump","title":"json.dump","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.dumps","title":"json.dumps","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.JSONDecoder","title":"json.JSONDecoder","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.JSONDecoder.decode","title":"json.JSONDecoder.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.JSONDecoder.raw_decode","title":"json.JSONDecoder.raw_decode","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.JSONEncoder","title":"json.JSONEncoder","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.JSONEncoder.default","title":"json.JSONEncoder.default","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.JSONEncoder.encode","title":"json.JSONEncoder.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.JSONEncoder.iterencode","title":"json.JSONEncoder.iterencode","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.load","title":"json.load","description":""},{"url":"http:\/\/docs.python.org\/library\/json.html#json.loads","title":"json.loads","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html","title":"mimetools","description":"18.6. mimetools &#8212; Tools for parsing MIME messages\u00b6  Deprecated since version 2.3: The email package should be used in preference to the mimetools module.  This module is present only to maintain backward compatibility, and it has been removed in 3.x. This module defines a subclass of the rfc822 module&#8217;s Message class and a number of utility functions that are useful for the manipulation for MIME multipart or encoded message. It defines the following items:   class mimetools.Message(fp[, seekable])\u00b6 Return a new instance of the Message class.  This is a subclass of the rfc822.Message class, with some additional methods (see below).  The seekable argument has the same meaning as for rfc822.Message.    mimetools.choose_boundary()\u00b6 Return a unique string that has a high likelihood of being usable as a part boundary.  The string has the form 'hostipaddr.uid.pid.timestamp.random'.    mimetools.decode(input, output, encoding)\u00b6 Read data encoded using the allowed MIME encoding from open file object input and write the decoded data to open file object output.  Valid values for encoding include 'base64', 'quoted-printable', 'uuencode', 'x-uuencode', 'uue', 'x-uue', '7bit', and  '8bit'.  Decoding messages encoded in '7bit' or '8bit' has no effect.  The input is simply copied to the output.    mimetools.encode(input, output, encoding)\u00b6 Read data from open file object input and write it encoded using the allowed MIME encoding to open file object output. Valid values for encoding are the same as for decode().    mimetools.copyliteral(input, output)\u00b6 Read lines from open file input until EOF and write them to open file output.    mimetools.copybinary(input, output)\u00b6 Read blocks until EOF from open file input and write them to open file output.  The block size is currently fixed at 8192.   See also  Module email Comprehensive email handling package; supersedes the mimetools module. Module rfc822 Provides the base class for mimetools.Message. Module multifile Support for reading files which contain distinct parts, such as MIME data. http:\/\/faqs.cs.uu.nl\/na-dir\/mail\/mime-faq\/.html The MIME Frequently Asked Questions document.  For an overview of MIME, see the answer to question 1.1 in Part 1 of this document.    18.6.1. Additional Methods of Message Objects\u00b6 The Message class defines the following methods in addition to the rfc822.Message methods:   Message.getplist()\u00b6 Return the parameter list of the Content-Type header. This is a list of strings.  For parameters of the form key=value, key is converted to lower case but value is not.  For example, if the message contains the header Content-type: text\/html; spam=1; Spam=2; Spam then getplist() will return the Python list ['spam=1', 'spam=2', 'Spam'].    Message.getparam(name)\u00b6 Return the value of the first parameter (as returned by getplist()) of the form name=value for the given name.  If value is surrounded by quotes of the form &#8216;<...>&#8216; or &#8216;\"...\"&#8216;, these are removed.    Message.getencoding()\u00b6 Return the encoding specified in the Content-Transfer-Encoding message header.  If no such header exists, return '7bit'.  The encoding is converted to lower case.    Message.gettype()\u00b6 Return the message type (of the form type\/subtype) as specified in the Content-Type header.  If no such header exists, return 'text\/plain'.  The type is converted to lower case.    Message.getmaintype()\u00b6 Return the main type as specified in the Content-Type header.  If no such header exists, return 'text'.  The main type is converted to lower case.    Message.getsubtype()\u00b6 Return the subtype as specified in the Content-Type header.  If no such header exists, return 'plain'.  The subtype is converted to lower case."},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.choose_boundary","title":"mimetools.choose_boundary","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.copybinary","title":"mimetools.copybinary","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.copyliteral","title":"mimetools.copyliteral","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.decode","title":"mimetools.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.encode","title":"mimetools.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.Message","title":"mimetools.Message","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.Message.getencoding","title":"mimetools.Message.getencoding","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.Message.getmaintype","title":"mimetools.Message.getmaintype","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.Message.getparam","title":"mimetools.Message.getparam","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.Message.getplist","title":"mimetools.Message.getplist","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.Message.getsubtype","title":"mimetools.Message.getsubtype","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetools.html#mimetools.Message.gettype","title":"mimetools.Message.gettype","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html","title":"mhlib","description":"18.5. mhlib &#8212; Access to MH mailboxes\u00b6  Deprecated since version 2.6: The mhlib module has been removed in Python 3.0. Use the mailbox instead. The mhlib module provides a Python interface to MH folders and their contents. The module contains three basic classes, MH, which represents a particular collection of folders, Folder, which represents a single folder, and Message, which represents a single message.   class mhlib.MH([path[, profile]])\u00b6 MH represents a collection of MH folders.    class mhlib.Folder(mh, name)\u00b6 The Folder class represents a single folder and its messages.    class mhlib.Message(folder, number[, name])\u00b6 Message objects represent individual messages in a folder.  The Message class is derived from mimetools.Message.   18.5.1. MH Objects\u00b6 MH instances have the following methods:   MH.error(format[, ...])\u00b6 Print an error message &#8211; can be overridden.    MH.getprofile(key)\u00b6 Return a profile entry (None if not set).    MH.getpath()\u00b6 Return the mailbox pathname.    MH.getcontext()\u00b6 Return the current folder name.    MH.setcontext(name)\u00b6 Set the current folder name.    MH.listfolders()\u00b6 Return a list of top-level folders.    MH.listallfolders()\u00b6 Return a list of all folders.    MH.listsubfolders(name)\u00b6 Return a list of direct subfolders of the given folder.    MH.listallsubfolders(name)\u00b6 Return a list of all subfolders of the given folder.    MH.makefolder(name)\u00b6 Create a new folder.    MH.deletefolder(name)\u00b6 Delete a folder &#8211; must have no subfolders.    MH.openfolder(name)\u00b6 Return a new open folder object.    18.5.2. Folder Objects\u00b6 Folder instances represent open folders and have the following methods:   Folder.error(format[, ...])\u00b6 Print an error message &#8211; can be overridden.    Folder.getfullname()\u00b6 Return the folder&#8217;s full pathname.    Folder.getsequencesfilename()\u00b6 Return the full pathname of the folder&#8217;s sequences file.    Folder.getmessagefilename(n)\u00b6 Return the full pathname of message n of the folder.    Folder.listmessages()\u00b6 Return a list of messages in the folder (as numbers).    Folder.getcurrent()\u00b6 Return the current message number.    Folder.setcurrent(n)\u00b6 Set the current message number to n.    Folder.parsesequence(seq)\u00b6 Parse msgs syntax into list of messages.    Folder.getlast()\u00b6 Get last message, or 0 if no messages are in the folder.    Folder.setlast(n)\u00b6 Set last message (internal use only).    Folder.getsequences()\u00b6 Return dictionary of sequences in folder.  The sequence names are used  as keys, and the values are the lists of message numbers in the sequences.    Folder.putsequences(dict)\u00b6 Return dictionary of sequences in folder name: list.    Folder.removemessages(list)\u00b6 Remove messages in list from folder.    Folder.refilemessages(list, tofolder)\u00b6 Move messages in list to other folder.    Folder.movemessage(n, tofolder, ton)\u00b6 Move one message to a given destination in another folder.    Folder.copymessage(n, tofolder, ton)\u00b6 Copy one message to a given destination in another folder.    18.5.3. Message Objects\u00b6 The Message class adds one method to those of mimetools.Message:   Message.openmessage(n)\u00b6 Return a new open message object (costs a file descriptor)."},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder","title":"mhlib.Folder","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.copymessage","title":"mhlib.Folder.copymessage","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.error","title":"mhlib.Folder.error","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.getcurrent","title":"mhlib.Folder.getcurrent","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.getfullname","title":"mhlib.Folder.getfullname","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.getlast","title":"mhlib.Folder.getlast","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.getmessagefilename","title":"mhlib.Folder.getmessagefilename","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.getsequences","title":"mhlib.Folder.getsequences","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.getsequencesfilename","title":"mhlib.Folder.getsequencesfilename","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.listmessages","title":"mhlib.Folder.listmessages","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.movemessage","title":"mhlib.Folder.movemessage","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.parsesequence","title":"mhlib.Folder.parsesequence","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.putsequences","title":"mhlib.Folder.putsequences","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.refilemessages","title":"mhlib.Folder.refilemessages","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.removemessages","title":"mhlib.Folder.removemessages","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.setcurrent","title":"mhlib.Folder.setcurrent","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Folder.setlast","title":"mhlib.Folder.setlast","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Message","title":"mhlib.Message","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.Message.openmessage","title":"mhlib.Message.openmessage","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH","title":"mhlib.MH","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.deletefolder","title":"mhlib.MH.deletefolder","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.error","title":"mhlib.MH.error","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.getcontext","title":"mhlib.MH.getcontext","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.getpath","title":"mhlib.MH.getpath","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.getprofile","title":"mhlib.MH.getprofile","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.listallfolders","title":"mhlib.MH.listallfolders","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.listallsubfolders","title":"mhlib.MH.listallsubfolders","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.listfolders","title":"mhlib.MH.listfolders","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.listsubfolders","title":"mhlib.MH.listsubfolders","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.makefolder","title":"mhlib.MH.makefolder","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.openfolder","title":"mhlib.MH.openfolder","description":""},{"url":"http:\/\/docs.python.org\/library\/mhlib.html#mhlib.MH.setcontext","title":"mhlib.MH.setcontext","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html","title":"mimetypes","description":"18.7. mimetypes &#8212; Map filenames to MIME types\u00b6 Source code: Lib\/mimetypes.py  The mimetypes module converts between a filename or URL and the MIME type associated with the filename extension.  Conversions are provided from filename to MIME type and from MIME type to filename extension; encodings are not supported for the latter conversion. The module provides one class and a number of convenience functions. The functions are the normal interface to this module, but some applications may be interested in the class as well. The functions described below provide the primary interface for this module.  If the module has not been initialized, they will call init() if they rely on the information init() sets up.   mimetypes.guess_type(url, strict=True)\u00b6 Guess the type of a file based on its filename or URL, given by url.  The return value is a tuple (type, encoding) where type is None if the type can&#8217;t be guessed (missing or unknown suffix) or a string of the form 'type\/subtype', usable for a MIME content-type header. encoding is None for no encoding or the name of the program used to encode (e.g. compress or gzip). The encoding is suitable for use as a Content-Encoding header, not as a Content-Transfer-Encoding header. The mappings are table driven. Encoding suffixes are case sensitive; type suffixes are first tried case sensitively, then case insensitively. The optional strict argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA. When strict is True (the default), only the IANA types are supported; when strict is False, some additional non-standard but commonly used MIME types are also recognized.     mimetypes.guess_all_extensions(type, strict=True)\u00b6 Guess the extensions for a file based on its MIME type, given by type. The return value is a list of strings giving all possible filename extensions, including the leading dot ('.').  The extensions are not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type type by guess_type(). The optional strict argument has the same meaning as with the guess_type() function.     mimetypes.guess_extension(type, strict=True)\u00b6 Guess the extension for a file based on its MIME type, given by type. The return value is a string giving a filename extension, including the leading dot ('.').  The extension is not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type type by guess_type().  If no extension can be guessed for type, None is returned. The optional strict argument has the same meaning as with the guess_type() function.   Some additional functions and data items are available for controlling the behavior of the module.   mimetypes.init(files=None)\u00b6 Initialize the internal data structures.  If given, files must be a sequence of file names which should be used to augment the default type map.  If omitted, the file names to use are taken from knownfiles; on Windows, the current registry settings are loaded.  Each file named in files or knownfiles takes precedence over those named before it.  Calling init() repeatedly is allowed.  Changed in version 2.7: Previously, Windows registry settings were ignored.     mimetypes.read_mime_types(filename)\u00b6 Load the type map given in the file filename, if it exists.  The type map is returned as a dictionary mapping filename extensions, including the leading dot ('.'), to strings of the form 'type\/subtype'.  If the file filename does not exist or cannot be read, None is returned.    mimetypes.add_type(type, ext, strict=True)\u00b6 Add a mapping from the MIME type type to the extension ext. When the extension is already known, the new type will replace the old one. When the type is already known the extension will be added to the list of known extensions. When strict is True (the default), the mapping will added to the official MIME types, otherwise to the non-standard ones.     mimetypes.inited\u00b6 Flag indicating whether or not the global data structures have been initialized. This is set to True by init().    mimetypes.knownfiles\u00b6 List of type map file names commonly installed.  These files are typically named mime.types and are installed in different locations by different packages.     mimetypes.suffix_map\u00b6 Dictionary mapping suffixes to suffixes.  This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension.  For example, the .tgz extension is mapped to .tar.gz to allow the encoding and type to be recognized separately.    mimetypes.encodings_map\u00b6 Dictionary mapping filename extensions to encoding types.    mimetypes.types_map\u00b6 Dictionary mapping filename extensions to MIME types.    mimetypes.common_types\u00b6 Dictionary mapping filename extensions to non-standard, but commonly found MIME types.  An example usage of the module: >>> import mimetypes >>> mimetypes.init() >>> mimetypes.knownfiles [&#39;\/etc\/mime.types&#39;, &#39;\/etc\/httpd\/mime.types&#39;, ... ] >>> mimetypes.suffix_map[&#39;.tgz&#39;] &#39;.tar.gz&#39; >>> mimetypes.encodings_map[&#39;.gz&#39;] &#39;gzip&#39; >>> mimetypes.types_map[&#39;.tgz&#39;] &#39;application\/x-tar-gz&#39;    18.7.1. MimeTypes Objects\u00b6 The MimeTypes class may be useful for applications which may want more than one MIME-type database; it provides an interface similar to the one of the mimetypes module.   class mimetypes.MimeTypes(filenames=(), strict=True)\u00b6 This class represents a MIME-types database.  By default, it provides access to the same database as the rest of this module. The initial database is a copy of that provided by the module, and may be extended by loading additional mime.types-style files into the database using the read() or readfp() methods.  The mapping dictionaries may also be cleared before loading additional data if the default data is not desired. The optional filenames parameter can be used to cause additional files to be loaded &#8220;on top&#8221; of the default database.     MimeTypes.suffix_map\u00b6 Dictionary mapping suffixes to suffixes.  This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension.  For example, the .tgz extension is mapped to .tar.gz to allow the encoding and type to be recognized separately.  This is initially a copy of the global suffix_map defined in the module.    MimeTypes.encodings_map\u00b6 Dictionary mapping filename extensions to encoding types.  This is initially a copy of the global encodings_map defined in the module.    MimeTypes.types_map\u00b6 Tuple containing two dictionaries, mapping filename extensions to MIME types: the first dictionary is for the non-standards types and the second one is for the standard types. They are initialized by common_types and types_map.    MimeTypes.types_map_inv\u00b6 Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types. They are initialized by common_types and types_map.    MimeTypes.guess_extension(type, strict=True)\u00b6 Similar to the guess_extension() function, using the tables stored as part of the object.    MimeTypes.guess_type(url, strict=True)\u00b6 Similar to the guess_type() function, using the tables stored as part of the object.    MimeTypes.guess_all_extensions(type, strict=True)\u00b6 Similar to the guess_all_extensions() function, using the tables stored as part of the object.    MimeTypes.read(filename, strict=True)\u00b6 Load MIME information from a file named filename.  This uses readfp() to parse the file. If strict is True, information will be added to list of standard types, else to the list of non-standard types.     MimeTypes.readfp(fp, strict=True)\u00b6 Load MIME type information from an open file fp.  The file must have the format of the standard mime.types files. If strict is True, information will be added to the list of standard types, else to the list of non-standard types.     MimeTypes.read_windows_registry(strict=True)\u00b6 Load MIME type information from the Windows registry.  Availability: Windows. If strict is True, information will be added to the list of standard types, else to the list of non-standard types.  New in version 2.7."},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.add_type","title":"mimetypes.add_type","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.guess_all_extensions","title":"mimetypes.guess_all_extensions","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.guess_extension","title":"mimetypes.guess_extension","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.guess_type","title":"mimetypes.guess_type","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.init","title":"mimetypes.init","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.MimeTypes","title":"mimetypes.MimeTypes","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.MimeTypes.guess_all_extensions","title":"mimetypes.MimeTypes.guess_all_extensions","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.MimeTypes.guess_extension","title":"mimetypes.MimeTypes.guess_extension","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.MimeTypes.guess_type","title":"mimetypes.MimeTypes.guess_type","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.MimeTypes.read","title":"mimetypes.MimeTypes.read","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.MimeTypes.read_windows_registry","title":"mimetypes.MimeTypes.read_windows_registry","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.MimeTypes.readfp","title":"mimetypes.MimeTypes.readfp","description":""},{"url":"http:\/\/docs.python.org\/library\/mimetypes.html#mimetypes.read_mime_types","title":"mimetypes.read_mime_types","description":""},{"url":"http:\/\/docs.python.org\/library\/mimewriter.html","title":"MimeWriter","description":"18.8. MimeWriter &#8212; Generic MIME file writer\u00b6  Deprecated since version 2.3: The email package should be used in preference to the MimeWriter module.  This module is present only to maintain backward compatibility. This module defines the class MimeWriter.  The MimeWriter class implements a basic formatter for creating MIME multi-part files.  It doesn&#8217;t seek around the output file nor does it use large amounts of buffer space. You must write the parts out in the order that they should occur in the final file. MimeWriter does buffer the headers you add, allowing you to rearrange their order.   class MimeWriter.MimeWriter(fp)\u00b6 Return a new instance of the MimeWriter class.  The only argument passed, fp, is a file object to be used for writing. Note that a StringIO object could also be used.   18.8.1. MimeWriter Objects\u00b6 MimeWriter instances have the following methods:   MimeWriter.addheader(key, value[, prefix])\u00b6 Add a header line to the MIME message. The key is the name of the header, where the value obviously provides the value of the header. The optional argument prefix determines where the header  is inserted; 0 means append at the end, 1 is insert at the start. The default is to append.    MimeWriter.flushheaders()\u00b6 Causes all headers accumulated so far to be written out (and forgotten). This is useful if you don&#8217;t need a body part at all, e.g. for a subpart of type message\/rfc822 that&#8217;s (mis)used to store some header-like information.    MimeWriter.startbody(ctype[, plist[, prefix]])\u00b6 Returns a file-like object which can be used to write to the body of the message.  The content-type is set to the provided ctype, and the optional parameter plist provides additional parameters for the content-type declaration. prefix functions as in addheader() except that the default is to insert at the start.    MimeWriter.startmultipartbody(subtype[, boundary[, plist[, prefix]]])\u00b6 Returns a file-like object which can be used to write to the body of the message.  Additionally, this method initializes the multi-part code, where subtype provides the multipart subtype, boundary may provide a user-defined boundary specification, and plist provides optional parameters for the subtype. prefix functions as in startbody().  Subparts should be created using nextpart().    MimeWriter.nextpart()\u00b6 Returns a new instance of MimeWriter which represents an individual part in a multipart message.  This may be used to write the  part as well as used for creating recursively complex multipart messages. The message must first be initialized with startmultipartbody() before using nextpart().    MimeWriter.lastpart()\u00b6 This is used to designate the last part of a multipart message, and should always be used when writing multipart messages."},{"url":"http:\/\/docs.python.org\/library\/mimewriter.html#MimeWriter.MimeWriter","title":"MimeWriter.MimeWriter","description":""},{"url":"http:\/\/docs.python.org\/library\/mimewriter.html#MimeWriter.MimeWriter.addheader","title":"MimeWriter.MimeWriter.addheader","description":""},{"url":"http:\/\/docs.python.org\/library\/mimewriter.html#MimeWriter.MimeWriter.flushheaders","title":"MimeWriter.MimeWriter.flushheaders","description":""},{"url":"http:\/\/docs.python.org\/library\/mimewriter.html#MimeWriter.MimeWriter.lastpart","title":"MimeWriter.MimeWriter.lastpart","description":""},{"url":"http:\/\/docs.python.org\/library\/mimewriter.html#MimeWriter.MimeWriter.nextpart","title":"MimeWriter.MimeWriter.nextpart","description":""},{"url":"http:\/\/docs.python.org\/library\/mimewriter.html#MimeWriter.MimeWriter.startbody","title":"MimeWriter.MimeWriter.startbody","description":""},{"url":"http:\/\/docs.python.org\/library\/mimewriter.html#MimeWriter.MimeWriter.startmultipartbody","title":"MimeWriter.MimeWriter.startmultipartbody","description":""},{"url":"http:\/\/docs.python.org\/library\/mimify.html","title":"mimify","description":"18.9. mimify &#8212; MIME processing of mail messages\u00b6  Deprecated since version 2.3: The email package should be used in preference to the mimify module.  This module is present only to maintain backward compatibility. The mimify module defines two functions to convert mail messages to and from MIME format.  The mail message can be either a simple message or a so-called multipart message.  Each part is treated separately. Mimifying (a part of) a message entails encoding the message as quoted-printable if it contains any characters that cannot be represented using 7-bit ASCII.  Unmimifying (a part of) a message entails undoing the quoted-printable encoding.  Mimify and unmimify are especially useful when a message has to be edited before being sent.  Typical use would be: unmimify message edit message mimify message send message  The modules defines the following user-callable functions and user-settable variables:   mimify.mimify(infile, outfile)\u00b6 Copy the message in infile to outfile, converting parts to quoted-printable and adding MIME mail headers when necessary. infile and outfile can be file objects (actually, any object that has a readline() method (for infile) or a write() method (for outfile)) or strings naming the files. If infile and outfile are both strings, they may have the same value.    mimify.unmimify(infile, outfile[, decode_base64])\u00b6 Copy the message in infile to outfile, decoding all quoted-printable parts. infile and outfile can be file objects (actually, any object that has a readline() method (for infile) or a write() method (for outfile)) or strings naming the files.  If infile and outfile are both strings, they may have the same value. If the decode_base64 argument is provided and tests true, any parts that are coded in the base64 encoding are decoded as well.    mimify.mime_decode_header(line)\u00b6 Return a decoded version of the encoded header line in line. This only supports the ISO 8859-1 charset (Latin-1).    mimify.mime_encode_header(line)\u00b6 Return a MIME-encoded version of the header line in line.    mimify.MAXLEN\u00b6 By default, a part will be encoded as quoted-printable when it contains any non-ASCII characters (characters with the 8th bit set), or if there are any lines longer than MAXLEN characters (default value 200).    mimify.CHARSET\u00b6 When not specified in the mail headers, a character set must be filled in.  The string used is stored in CHARSET, and the default value is ISO-8859-1 (also known as Latin1 (latin-one)).  This module can also be used from the command line.  Usage is as follows: mimify.py -e [-l length] [infile [outfile]] mimify.py -d [-b] [infile [outfile]]  to encode (mimify) and decode (unmimify) respectively.  infile defaults to standard input, outfile defaults to standard output. The same file can be specified for input and output. If the -l option is given when encoding, if there are any lines longer than the specified length, the containing part will be encoded. If the -b option is given when decoding, any base64 parts will be decoded as well.  See also  Module quopri Encode and decode MIME quoted-printable files."},{"url":"http:\/\/docs.python.org\/library\/mimify.html#mimify.mime_decode_header","title":"mimify.mime_decode_header","description":""},{"url":"http:\/\/docs.python.org\/library\/mimify.html#mimify.mime_encode_header","title":"mimify.mime_encode_header","description":""},{"url":"http:\/\/docs.python.org\/library\/mimify.html#mimify.mimify","title":"mimify.mimify","description":""},{"url":"http:\/\/docs.python.org\/library\/mimify.html#mimify.unmimify","title":"mimify.unmimify","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html","title":"mailbox","description":"18.4. mailbox &#8212; Manipulate mailboxes in various formats\u00b6 This module defines two classes, Mailbox and Message, for accessing and manipulating on-disk mailboxes and the messages they contain. Mailbox offers a dictionary-like mapping from keys to messages. Message extends the email.Message module&#8217;s Message class with format-specific state and behavior. Supported mailbox formats are Maildir, mbox, MH, Babyl, and MMDF.  See also  Module email Represent and manipulate messages.    18.4.1. Mailbox objects\u00b6   class mailbox.Mailbox\u00b6 A mailbox, which may be inspected and modified. The Mailbox class defines an interface and is not intended to be instantiated.  Instead, format-specific subclasses should inherit from Mailbox and your code should instantiate a particular subclass. The Mailbox interface is dictionary-like, with small keys corresponding to messages. Keys are issued by the Mailbox instance with which they will be used and are only meaningful to that Mailbox instance. A key continues to identify a message even if the corresponding message is modified, such as by replacing it with another message. Messages may be added to a Mailbox instance using the set-like method add() and removed using a del statement or the set-like methods remove() and discard(). Mailbox interface semantics differ from dictionary semantics in some noteworthy ways. Each time a message is requested, a new representation (typically a Message instance) is generated based upon the current state of the mailbox. Similarly, when a message is added to a Mailbox instance, the provided message representation&#8217;s contents are copied. In neither case is a reference to the message representation kept by the Mailbox instance. The default Mailbox iterator iterates over message representations, not keys as the default dictionary iterator does. Moreover, modification of a mailbox during iteration is safe and well-defined. Messages added to the mailbox after an iterator is created will not be seen by the iterator. Messages removed from the mailbox before the iterator yields them will be silently skipped, though using a key from an iterator may result in a KeyError exception if the corresponding message is subsequently removed.  Warning Be very cautious when modifying mailboxes that might be simultaneously changed by some other process.  The safest mailbox format to use for such tasks is Maildir; try to avoid using single-file formats such as mbox for concurrent writing.  If you&#8217;re modifying a mailbox, you must lock it by calling the lock() and unlock() methods before reading any messages in the file or making any changes by adding or deleting a message.  Failing to lock the mailbox runs the risk of losing messages or corrupting the entire mailbox.  Mailbox instances have the following methods:   add(message)\u00b6 Add message to the mailbox and return the key that has been assigned to it. Parameter message may be a Message instance, an email.Message.Message instance, a string, or a file-like object (which should be open in text mode). If message is an instance of the appropriate format-specific Message subclass (e.g., if it&#8217;s an mboxMessage instance and this is an mbox instance), its format-specific information is used. Otherwise, reasonable defaults for format-specific information are used.     remove(key)\u00b6  __delitem__(key)\u00b6  discard(key)\u00b6 Delete the message corresponding to key from the mailbox. If no such message exists, a KeyError exception is raised if the method was called as remove() or __delitem__() but no exception is raised if the method was called as discard(). The behavior of discard() may be preferred if the underlying mailbox format supports concurrent modification by other processes.     __setitem__(key, message)\u00b6 Replace the message corresponding to key with message. Raise a KeyError exception if no message already corresponds to key. As with add(), parameter message may be a Message instance, an email.Message.Message instance, a string, or a file-like object (which should be open in text mode). If message is an instance of the appropriate format-specific Message subclass (e.g., if it&#8217;s an mboxMessage instance and this is an mbox instance), its format-specific information is used. Otherwise, the format-specific information of the message that currently corresponds to key is left unchanged.     iterkeys()\u00b6  keys()\u00b6 Return an iterator over all keys if called as iterkeys() or return a list of keys if called as keys().    itervalues()\u00b6  __iter__()\u00b6  values()\u00b6 Return an iterator over representations of all messages if called as itervalues() or __iter__() or return a list of such representations if called as values(). The messages are represented as instances of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized.  Note The behavior of __iter__() is unlike that of dictionaries, which iterate over keys.      iteritems()\u00b6  items()\u00b6 Return an iterator over (key, message) pairs, where key is a key and message is a message representation, if called as iteritems() or return a list of such pairs if called as items(). The messages are represented as instances of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized.    get(key[, default=None])\u00b6  __getitem__(key)\u00b6 Return a representation of the message corresponding to key. If no such message exists, default is returned if the method was called as get() and a KeyError exception is raised if the method was called as __getitem__(). The message is represented as an instance of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized.    get_message(key)\u00b6 Return a representation of the message corresponding to key as an instance of the appropriate format-specific Message subclass, or raise a KeyError exception if no such message exists.    get_string(key)\u00b6 Return a string representation of the message corresponding to key, or raise a KeyError exception if no such message exists.    get_file(key)\u00b6 Return a file-like representation of the message corresponding to key, or raise a KeyError exception if no such message exists. The file-like object behaves as if open in binary mode. This file should be closed once it is no longer needed.  Note Unlike other representations of messages, file-like representations are not necessarily independent of the Mailbox instance that created them or of the underlying mailbox. More specific documentation is provided by each subclass.      has_key(key)\u00b6  __contains__(key)\u00b6 Return True if key corresponds to a message, False otherwise.    __len__()\u00b6 Return a count of messages in the mailbox.    clear()\u00b6 Delete all messages from the mailbox.    pop(key[, default])\u00b6 Return a representation of the message corresponding to key and delete the message. If no such message exists, return default if it was supplied or else raise a KeyError exception. The message is represented as an instance of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized.    popitem()\u00b6 Return an arbitrary (key, message) pair, where key is a key and message is a message representation, and delete the corresponding message. If the mailbox is empty, raise a KeyError exception. The message is represented as an instance of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized.    update(arg)\u00b6 Parameter arg should be a key-to-message mapping or an iterable of (key, message) pairs. Updates the mailbox so that, for each given key and message, the message corresponding to key is set to message as if by using __setitem__(). As with __setitem__(), each key must already correspond to a message in the mailbox or else a KeyError exception will be raised, so in general it is incorrect for arg to be a Mailbox instance.  Note Unlike with dictionaries, keyword arguments are not supported.      flush()\u00b6 Write any pending changes to the filesystem. For some Mailbox subclasses, changes are always written immediately and flush() does nothing, but you should still make a habit of calling this method.    lock()\u00b6 Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it. An ExternalClashError is raised if the lock is not available. The particular locking mechanisms used depend upon the mailbox format.  You should always lock the mailbox before making any modifications to its contents.    unlock()\u00b6 Release the lock on the mailbox, if any.    close()\u00b6 Flush the mailbox, unlock it if necessary, and close any open files. For some Mailbox subclasses, this method does nothing.     18.4.1.1. Maildir\u00b6   class mailbox.Maildir(dirname[, factory=rfc822.Message[, create=True]])\u00b6 A subclass of Mailbox for mailboxes in Maildir format. Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If factory is None, MaildirMessage is used as the default message representation. If create is True, the mailbox is created if it does not exist. It is for historical reasons that factory defaults to rfc822.Message and that dirname is named as such rather than path. For a Maildir instance that behaves like instances of other Mailbox subclasses, set factory to None. Maildir is a directory-based mailbox format invented for the qmail mail transfer agent and now widely supported by other programs. Messages in a Maildir mailbox are stored in separate files within a common directory structure. This design allows Maildir mailboxes to be accessed and modified by multiple unrelated programs without data corruption, so file locking is unnecessary. Maildir mailboxes contain three subdirectories, namely: tmp, new, and cur. Messages are created momentarily in the tmp subdirectory and then moved to the new subdirectory to finalize delivery. A mail user agent may subsequently move the message to the cur subdirectory and store information about the state of the message in a special &#8220;info&#8221; section appended to its file name. Folders of the style introduced by the Courier mail transfer agent are also supported. Any subdirectory of the main mailbox is considered a folder if '.' is the first character in its name. Folder names are represented by Maildir without the leading '.'. Each folder is itself a Maildir mailbox but should not contain other folders. Instead, a logical nesting is indicated using '.' to delimit levels, e.g., &#8220;Archived.2005.07&#8221;.  Note The Maildir specification requires the use of a colon (':') in certain message file names. However, some operating systems do not permit this character in file names, If you wish to use a Maildir-like format on such an operating system, you should specify another character to use instead. The exclamation point ('!') is a popular choice. For example: import mailbox mailbox.Maildir.colon = &#39;!&#39;   The colon attribute may also be set on a per-instance basis.  Maildir instances have all of the methods of Mailbox in addition to the following:   list_folders()\u00b6 Return a list of the names of all folders.    get_folder(folder)\u00b6 Return a Maildir instance representing the folder whose name is folder. A NoSuchMailboxError exception is raised if the folder does not exist.    add_folder(folder)\u00b6 Create a folder whose name is folder and return a Maildir instance representing it.    remove_folder(folder)\u00b6 Delete the folder whose name is folder. If the folder contains any messages, a NotEmptyError exception will be raised and the folder will not be deleted.    clean()\u00b6 Delete temporary files from the mailbox that have not been accessed in the last 36 hours. The Maildir specification says that mail-reading programs should do this occasionally.  Some Mailbox methods implemented by Maildir deserve special remarks:   add(message)\u00b6  __setitem__(key, message)\u00b6  update(arg)\u00b6  Warning These methods generate unique file names based upon the current process ID. When using multiple threads, undetected name clashes may occur and cause corruption of the mailbox unless threads are coordinated to avoid using these methods to manipulate the same mailbox simultaneously.      flush()\u00b6 All changes to Maildir mailboxes are immediately applied, so this method does nothing.    lock()\u00b6  unlock()\u00b6 Maildir mailboxes do not support (or require) locking, so these methods do nothing.    close()\u00b6 Maildir instances do not keep any open files and the underlying mailboxes do not support locking, so this method does nothing.    get_file(key)\u00b6 Depending upon the host platform, it may not be possible to modify or remove the underlying message while the returned file remains open.     See also  maildir man page from qmail The original specification of the format. Using maildir format Notes on Maildir by its inventor. Includes an updated name-creation scheme and details on &#8220;info&#8221; semantics. maildir man page from Courier Another specification of the format. Describes a common extension for supporting folders.     18.4.1.2. mbox\u00b6   class mailbox.mbox(path[, factory=None[, create=True]])\u00b6 A subclass of Mailbox for mailboxes in mbox format. Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If factory is None, mboxMessage is used as the default message representation. If create is True, the mailbox is created if it does not exist. The mbox format is the classic format for storing mail on Unix systems. All messages in an mbox mailbox are stored in a single file with the beginning of each message indicated by a line whose first five characters are &#8220;From &#8220;. Several variations of the mbox format exist to address perceived shortcomings in the original. In the interest of compatibility, mbox implements the original format, which is sometimes referred to as mboxo. This means that the Content-Length header, if present, is ignored and that any occurrences of &#8220;From &#8221; at the beginning of a line in a message body are transformed to &#8220;>From &#8221; when storing the message, although occurrences of &#8220;>From &#8221; are not transformed to &#8220;From &#8221; when reading the message. Some Mailbox methods implemented by mbox deserve special remarks:   get_file(key)\u00b6 Using the file after calling flush() or close() on the mbox instance may yield unpredictable results or raise an exception.    lock()\u00b6  unlock()\u00b6 Three locking mechanisms are used&#8212;dot locking and, if available, the flock() and lockf() system calls.     See also  mbox man page from qmail A specification of the format and its variations. mbox man page from tin Another specification of the format, with details on locking. Configuring Netscape Mail on Unix: Why The Content-Length Format is Bad An argument for using the original mbox format rather than a variation. &#8220;mbox&#8221; is a family of several mutually incompatible mailbox formats A history of mbox variations.     18.4.1.3. MH\u00b6   class mailbox.MH(path[, factory=None[, create=True]])\u00b6 A subclass of Mailbox for mailboxes in MH format. Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If factory is None, MHMessage is used as the default message representation. If create is True, the mailbox is created if it does not exist. MH is a directory-based mailbox format invented for the MH Message Handling System, a mail user agent. Each message in an MH mailbox resides in its own file. An MH mailbox may contain other MH mailboxes (called folders) in addition to messages. Folders may be nested indefinitely. MH mailboxes also support sequences, which are named lists used to logically group messages without moving them to sub-folders. Sequences are defined in a file called .mh_sequences in each folder. The MH class manipulates MH mailboxes, but it does not attempt to emulate all of mh&#8216;s behaviors. In particular, it does not modify and is not affected by the context or .mh_profile files that are used by mh to store its state and configuration. MH instances have all of the methods of Mailbox in addition to the following:   list_folders()\u00b6 Return a list of the names of all folders.    get_folder(folder)\u00b6 Return an MH instance representing the folder whose name is folder. A NoSuchMailboxError exception is raised if the folder does not exist.    add_folder(folder)\u00b6 Create a folder whose name is folder and return an MH instance representing it.    remove_folder(folder)\u00b6 Delete the folder whose name is folder. If the folder contains any messages, a NotEmptyError exception will be raised and the folder will not be deleted.    get_sequences()\u00b6 Return a dictionary of sequence names mapped to key lists. If there are no sequences, the empty dictionary is returned.    set_sequences(sequences)\u00b6 Re-define the sequences that exist in the mailbox based upon sequences, a dictionary of names mapped to key lists, like returned by get_sequences().    pack()\u00b6 Rename messages in the mailbox as necessary to eliminate gaps in numbering.  Entries in the sequences list are updated correspondingly.  Note Already-issued keys are invalidated by this operation and should not be subsequently used.    Some Mailbox methods implemented by MH deserve special remarks:   remove(key)\u00b6  __delitem__(key)\u00b6  discard(key)\u00b6 These methods immediately delete the message. The MH convention of marking a message for deletion by prepending a comma to its name is not used.    lock()\u00b6  unlock()\u00b6 Three locking mechanisms are used&#8212;dot locking and, if available, the flock() and lockf() system calls. For MH mailboxes, locking the mailbox means locking the .mh_sequences file and, only for the duration of any operations that affect them, locking individual message files.    get_file(key)\u00b6 Depending upon the host platform, it may not be possible to remove the underlying message while the returned file remains open.    flush()\u00b6 All changes to MH mailboxes are immediately applied, so this method does nothing.    close()\u00b6 MH instances do not keep any open files, so this method is equivalent to unlock().     See also  nmh - Message Handling System Home page of nmh, an updated version of the original mh. MH & nmh: Email for Users & Programmers A GPL-licensed book on mh and nmh, with some information on the mailbox format.     18.4.1.4. Babyl\u00b6   class mailbox.Babyl(path[, factory=None[, create=True]])\u00b6 A subclass of Mailbox for mailboxes in Babyl format. Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If factory is None, BabylMessage is used as the default message representation. If create is True, the mailbox is created if it does not exist. Babyl is a single-file mailbox format used by the Rmail mail user agent included with Emacs. The beginning of a message is indicated by a line containing the two characters Control-Underscore ('\\037') and Control-L ('\\014'). The end of a message is indicated by the start of the next message or, in the case of the last message, a line containing a Control-Underscore ('\\037') character. Messages in a Babyl mailbox have two sets of headers, original headers and so-called visible headers. Visible headers are typically a subset of the original headers that have been reformatted or abridged to be more attractive. Each message in a Babyl mailbox also has an accompanying list of labels, or short strings that record extra information about the message, and a list of all user-defined labels found in the mailbox is kept in the Babyl options section. Babyl instances have all of the methods of Mailbox in addition to the following:   get_labels()\u00b6 Return a list of the names of all user-defined labels used in the mailbox.  Note The actual messages are inspected to determine which labels exist in the mailbox rather than consulting the list of labels in the Babyl options section, but the Babyl section is updated whenever the mailbox is modified.    Some Mailbox methods implemented by Babyl deserve special remarks:   get_file(key)\u00b6 In Babyl mailboxes, the headers of a message are not stored contiguously with the body of the message. To generate a file-like representation, the headers and body are copied together into a StringIO instance (from the StringIO module), which has an API identical to that of a file. As a result, the file-like object is truly independent of the underlying mailbox but does not save memory compared to a string representation.    lock()\u00b6  unlock()\u00b6 Three locking mechanisms are used&#8212;dot locking and, if available, the flock() and lockf() system calls.     See also  Format of Version 5 Babyl Files A specification of the Babyl format. Reading Mail with Rmail The Rmail manual, with some information on Babyl semantics.     18.4.1.5. MMDF\u00b6   class mailbox.MMDF(path[, factory=None[, create=True]])\u00b6 A subclass of Mailbox for mailboxes in MMDF format. Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If factory is None, MMDFMessage is used as the default message representation. If create is True, the mailbox is created if it does not exist. MMDF is a single-file mailbox format invented for the Multichannel Memorandum Distribution Facility, a mail transfer agent. Each message is in the same form as an mbox message but is bracketed before and after by lines containing four Control-A ('\\001') characters. As with the mbox format, the beginning of each message is indicated by a line whose first five characters are &#8220;From &#8220;, but additional occurrences of &#8220;From &#8221; are not transformed to &#8220;>From &#8221; when storing messages because the extra message separator lines prevent mistaking such occurrences for the starts of subsequent messages. Some Mailbox methods implemented by MMDF deserve special remarks:   get_file(key)\u00b6 Using the file after calling flush() or close() on the MMDF instance may yield unpredictable results or raise an exception.    lock()\u00b6  unlock()\u00b6 Three locking mechanisms are used&#8212;dot locking and, if available, the flock() and lockf() system calls.     See also  mmdf man page from tin A specification of MMDF format from the documentation of tin, a newsreader. MMDF A Wikipedia article describing the Multichannel Memorandum Distribution Facility.      18.4.2. Message objects\u00b6   class mailbox.Message([message])\u00b6 A subclass of the email.Message module&#8217;s Message. Subclasses of mailbox.Message add mailbox-format-specific state and behavior. If message is omitted, the new instance is created in a default, empty state. If message is an email.Message.Message instance, its contents are copied; furthermore, any format-specific information is converted insofar as possible if message is a Message instance. If message is a string or a file, it should contain an RFC 2822-compliant message, which is read and parsed. The format-specific state and behaviors offered by subclasses vary, but in general it is only the properties that are not specific to a particular mailbox that are supported (although presumably the properties are specific to a particular mailbox format). For example, file offsets for single-file mailbox formats and file names for directory-based mailbox formats are not retained, because they are only applicable to the original mailbox. But state such as whether a message has been read by the user or marked as important is retained, because it applies to the message itself. There is no requirement that Message instances be used to represent messages retrieved using Mailbox instances. In some situations, the time and memory required to generate Message representations might not be acceptable. For such situations, Mailbox instances also offer string and file-like representations, and a custom message factory may be specified when a Mailbox instance is initialized.    18.4.2.1. MaildirMessage\u00b6   class mailbox.MaildirMessage([message])\u00b6 A message with Maildir-specific behaviors. Parameter message has the same meaning as with the Message constructor. Typically, a mail user agent application moves all of the messages in the new subdirectory to the cur subdirectory after the first time the user opens and closes the mailbox, recording that the messages are old whether or not they&#8217;ve actually been read. Each message in cur has an &#8220;info&#8221; section added to its file name to store information about its state. (Some mail readers may also add an &#8220;info&#8221; section to messages in new.)  The &#8220;info&#8221; section may take one of two forms: it may contain &#8220;2,&#8221; followed by a list of standardized flags (e.g., &#8220;2,FR&#8221;) or it may contain &#8220;1,&#8221; followed by so-called experimental information. Standard flags for Maildir messages are as follows:        Flag Meaning Explanation    D Draft Under composition  F Flagged Marked as important  P Passed Forwarded, resent, or bounced  R Replied Replied to  S Seen Read  T Trashed Marked for subsequent deletion    MaildirMessage instances offer the following methods:   get_subdir()\u00b6 Return either &#8220;new&#8221; (if the message should be stored in the new subdirectory) or &#8220;cur&#8221; (if the message should be stored in the cur subdirectory).  Note A message is typically moved from new to cur after its mailbox has been accessed, whether or not the message is has been read. A message msg has been read if \"S\" in msg.get_flags() is True.      set_subdir(subdir)\u00b6 Set the subdirectory the message should be stored in. Parameter subdir must be either &#8220;new&#8221; or &#8220;cur&#8221;.    get_flags()\u00b6 Return a string specifying the flags that are currently set. If the message complies with the standard Maildir format, the result is the concatenation in alphabetical order of zero or one occurrence of each of 'D', 'F', 'P', 'R', 'S', and 'T'. The empty string is returned if no flags are set or if &#8220;info&#8221; contains experimental semantics.    set_flags(flags)\u00b6 Set the flags specified by flags and unset all others.    add_flag(flag)\u00b6 Set the flag(s) specified by flag without changing other flags. To add more than one flag at a time, flag may be a string of more than one character. The current &#8220;info&#8221; is overwritten whether or not it contains experimental information rather than flags.    remove_flag(flag)\u00b6 Unset the flag(s) specified by flag without changing other flags. To remove more than one flag at a time, flag maybe a string of more than one character.  If &#8220;info&#8221; contains experimental information rather than flags, the current &#8220;info&#8221; is not modified.    get_date()\u00b6 Return the delivery date of the message as a floating-point number representing seconds since the epoch.    set_date(date)\u00b6 Set the delivery date of the message to date, a floating-point number representing seconds since the epoch.    get_info()\u00b6 Return a string containing the &#8220;info&#8221; for a message. This is useful for accessing and modifying &#8220;info&#8221; that is experimental (i.e., not a list of flags).    set_info(info)\u00b6 Set &#8220;info&#8221; to info, which should be a string.    When a MaildirMessage instance is created based upon an mboxMessage or MMDFMessage instance, the Status and X-Status headers are omitted and the following conversions take place:       Resulting state mboxMessage or MMDFMessage state    &#8220;cur&#8221; subdirectory O flag  F flag F flag  R flag A flag  S flag R flag  T flag D flag    When a MaildirMessage instance is created based upon an MHMessage instance, the following conversions take place:       Resulting state MHMessage state    &#8220;cur&#8221; subdirectory &#8220;unseen&#8221; sequence  &#8220;cur&#8221; subdirectory and S flag no &#8220;unseen&#8221; sequence  F flag &#8220;flagged&#8221; sequence  R flag &#8220;replied&#8221; sequence    When a MaildirMessage instance is created based upon a BabylMessage instance, the following conversions take place:       Resulting state BabylMessage state    &#8220;cur&#8221; subdirectory &#8220;unseen&#8221; label  &#8220;cur&#8221; subdirectory and S flag no &#8220;unseen&#8221; label  P flag &#8220;forwarded&#8221; or &#8220;resent&#8221; label  R flag &#8220;answered&#8221; label  T flag &#8220;deleted&#8221; label      18.4.2.2. mboxMessage\u00b6   class mailbox.mboxMessage([message])\u00b6 A message with mbox-specific behaviors. Parameter message has the same meaning as with the Message constructor. Messages in an mbox mailbox are stored together in a single file. The sender&#8217;s envelope address and the time of delivery are typically stored in a line beginning with &#8220;From &#8221; that is used to indicate the start of a message, though there is considerable variation in the exact format of this data among mbox implementations. Flags that indicate the state of the message, such as whether it has been read or marked as important, are typically stored in Status and X-Status headers. Conventional flags for mbox messages are as follows:        Flag Meaning Explanation    R Read Read  O Old Previously detected by MUA  D Deleted Marked for subsequent deletion  F Flagged Marked as important  A Answered Replied to    The &#8220;R&#8221; and &#8220;O&#8221; flags are stored in the Status header, and the &#8220;D&#8221;, &#8220;F&#8221;, and &#8220;A&#8221; flags are stored in the X-Status header. The flags and headers typically appear in the order mentioned. mboxMessage instances offer the following methods:   get_from()\u00b6 Return a string representing the &#8220;From &#8221; line that marks the start of the message in an mbox mailbox. The leading &#8220;From &#8221; and the trailing newline are excluded.    set_from(from_[, time_=None])\u00b6 Set the &#8220;From &#8221; line to from_, which should be specified without a leading &#8220;From &#8221; or trailing newline. For convenience, time_ may be specified and will be formatted appropriately and appended to from_. If time_ is specified, it should be a struct_time instance, a tuple suitable for passing to time.strftime(), or True (to use time.gmtime()).    get_flags()\u00b6 Return a string specifying the flags that are currently set. If the message complies with the conventional format, the result is the concatenation in the following order of zero or one occurrence of each of 'R', 'O', 'D', 'F', and 'A'.    set_flags(flags)\u00b6 Set the flags specified by flags and unset all others. Parameter flags should be the concatenation in any order of zero or more occurrences of each of 'R', 'O', 'D', 'F', and 'A'.    add_flag(flag)\u00b6 Set the flag(s) specified by flag without changing other flags. To add more than one flag at a time, flag may be a string of more than one character.    remove_flag(flag)\u00b6 Unset the flag(s) specified by flag without changing other flags. To remove more than one flag at a time, flag maybe a string of more than one character.    When an mboxMessage instance is created based upon a MaildirMessage instance, a &#8220;From &#8221; line is generated based upon the MaildirMessage instance&#8217;s delivery date, and the following conversions take place:       Resulting state MaildirMessage state    R flag S flag  O flag &#8220;cur&#8221; subdirectory  D flag T flag  F flag F flag  A flag R flag    When an mboxMessage instance is created based upon an MHMessage instance, the following conversions take place:       Resulting state MHMessage state    R flag and O flag no &#8220;unseen&#8221; sequence  O flag &#8220;unseen&#8221; sequence  F flag &#8220;flagged&#8221; sequence  A flag &#8220;replied&#8221; sequence    When an mboxMessage instance is created based upon a BabylMessage instance, the following conversions take place:       Resulting state BabylMessage state    R flag and O flag no &#8220;unseen&#8221; label  O flag &#8220;unseen&#8221; label  D flag &#8220;deleted&#8221; label  A flag &#8220;answered&#8221; label    When a Message instance is created based upon an MMDFMessage instance, the &#8220;From &#8221; line is copied and all flags directly correspond:       Resulting state MMDFMessage state    R flag R flag  O flag O flag  D flag D flag  F flag F flag  A flag A flag      18.4.2.3. MHMessage\u00b6   class mailbox.MHMessage([message])\u00b6 A message with MH-specific behaviors. Parameter message has the same meaning as with the Message constructor. MH messages do not support marks or flags in the traditional sense, but they do support sequences, which are logical groupings of arbitrary messages. Some mail reading programs (although not the standard mh and nmh) use sequences in much the same way flags are used with other formats, as follows:       Sequence Explanation    unseen Not read, but previously detected by MUA  replied Replied to  flagged Marked as important    MHMessage instances offer the following methods:   get_sequences()\u00b6 Return a list of the names of sequences that include this message.    set_sequences(sequences)\u00b6 Set the list of sequences that include this message.    add_sequence(sequence)\u00b6 Add sequence to the list of sequences that include this message.    remove_sequence(sequence)\u00b6 Remove sequence from the list of sequences that include this message.    When an MHMessage instance is created based upon a MaildirMessage instance, the following conversions take place:       Resulting state MaildirMessage state    &#8220;unseen&#8221; sequence no S flag  &#8220;replied&#8221; sequence R flag  &#8220;flagged&#8221; sequence F flag    When an MHMessage instance is created based upon an mboxMessage or MMDFMessage instance, the Status and X-Status headers are omitted and the following conversions take place:       Resulting state mboxMessage or MMDFMessage state    &#8220;unseen&#8221; sequence no R flag  &#8220;replied&#8221; sequence A flag  &#8220;flagged&#8221; sequence F flag    When an MHMessage instance is created based upon a BabylMessage instance, the following conversions take place:       Resulting state BabylMessage state    &#8220;unseen&#8221; sequence &#8220;unseen&#8221; label  &#8220;replied&#8221; sequence &#8220;answered&#8221; label      18.4.2.4. BabylMessage\u00b6   class mailbox.BabylMessage([message])\u00b6 A message with Babyl-specific behaviors. Parameter message has the same meaning as with the Message constructor. Certain message labels, called attributes, are defined by convention to have special meanings. The attributes are as follows:       Label Explanation    unseen Not read, but previously detected by MUA  deleted Marked for subsequent deletion  filed Copied to another file or mailbox  answered Replied to  forwarded Forwarded  edited Modified by the user  resent Resent    By default, Rmail displays only visible headers. The BabylMessage class, though, uses the original headers because they are more complete. Visible headers may be accessed explicitly if desired. BabylMessage instances offer the following methods:   get_labels()\u00b6 Return a list of labels on the message.    set_labels(labels)\u00b6 Set the list of labels on the message to labels.    add_label(label)\u00b6 Add label to the list of labels on the message.    remove_label(label)\u00b6 Remove label from the list of labels on the message.    get_visible()\u00b6 Return an Message instance whose headers are the message&#8217;s visible headers and whose body is empty.    set_visible(visible)\u00b6 Set the message&#8217;s visible headers to be the same as the headers in message.  Parameter visible should be a Message instance, an email.Message.Message instance, a string, or a file-like object (which should be open in text mode).    update_visible()\u00b6 When a BabylMessage instance&#8217;s original headers are modified, the visible headers are not automatically modified to correspond. This method updates the visible headers as follows: each visible header with a corresponding original header is set to the value of the original header, each visible header without a corresponding original header is removed, and any of Date, From, Reply-To, To, CC, and Subject that are present in the original headers but not the visible headers are added to the visible headers.    When a BabylMessage instance is created based upon a MaildirMessage instance, the following conversions take place:       Resulting state MaildirMessage state    &#8220;unseen&#8221; label no S flag  &#8220;deleted&#8221; label T flag  &#8220;answered&#8221; label R flag  &#8220;forwarded&#8221; label P flag    When a BabylMessage instance is created based upon an mboxMessage or MMDFMessage instance, the Status and X-Status headers are omitted and the following conversions take place:       Resulting state mboxMessage or MMDFMessage state    &#8220;unseen&#8221; label no R flag  &#8220;deleted&#8221; label D flag  &#8220;answered&#8221; label A flag    When a BabylMessage instance is created based upon an MHMessage instance, the following conversions take place:       Resulting state MHMessage state    &#8220;unseen&#8221; label &#8220;unseen&#8221; sequence  &#8220;answered&#8221; label &#8220;replied&#8221; sequence      18.4.2.5. MMDFMessage\u00b6   class mailbox.MMDFMessage([message])\u00b6 A message with MMDF-specific behaviors. Parameter message has the same meaning as with the Message constructor. As with message in an mbox mailbox, MMDF messages are stored with the sender&#8217;s address and the delivery date in an initial line beginning with &#8220;From &#8220;.  Likewise, flags that indicate the state of the message are typically stored in Status and X-Status headers. Conventional flags for MMDF messages are identical to those of mbox message and are as follows:        Flag Meaning Explanation    R Read Read  O Old Previously detected by MUA  D Deleted Marked for subsequent deletion  F Flagged Marked as important  A Answered Replied to    The &#8220;R&#8221; and &#8220;O&#8221; flags are stored in the Status header, and the &#8220;D&#8221;, &#8220;F&#8221;, and &#8220;A&#8221; flags are stored in the X-Status header. The flags and headers typically appear in the order mentioned. MMDFMessage instances offer the following methods, which are identical to those offered by mboxMessage:   get_from()\u00b6 Return a string representing the &#8220;From &#8221; line that marks the start of the message in an mbox mailbox. The leading &#8220;From &#8221; and the trailing newline are excluded.    set_from(from_[, time_=None])\u00b6 Set the &#8220;From &#8221; line to from_, which should be specified without a leading &#8220;From &#8221; or trailing newline. For convenience, time_ may be specified and will be formatted appropriately and appended to from_. If time_ is specified, it should be a struct_time instance, a tuple suitable for passing to time.strftime(), or True (to use time.gmtime()).    get_flags()\u00b6 Return a string specifying the flags that are currently set. If the message complies with the conventional format, the result is the concatenation in the following order of zero or one occurrence of each of 'R', 'O', 'D', 'F', and 'A'.    set_flags(flags)\u00b6 Set the flags specified by flags and unset all others. Parameter flags should be the concatenation in any order of zero or more occurrences of each of 'R', 'O', 'D', 'F', and 'A'.    add_flag(flag)\u00b6 Set the flag(s) specified by flag without changing other flags. To add more than one flag at a time, flag may be a string of more than one character.    remove_flag(flag)\u00b6 Unset the flag(s) specified by flag without changing other flags. To remove more than one flag at a time, flag maybe a string of more than one character.    When an MMDFMessage instance is created based upon a MaildirMessage instance, a &#8220;From &#8221; line is generated based upon the MaildirMessage instance&#8217;s delivery date, and the following conversions take place:       Resulting state MaildirMessage state    R flag S flag  O flag &#8220;cur&#8221; subdirectory  D flag T flag  F flag F flag  A flag R flag    When an MMDFMessage instance is created based upon an MHMessage instance, the following conversions take place:       Resulting state MHMessage state    R flag and O flag no &#8220;unseen&#8221; sequence  O flag &#8220;unseen&#8221; sequence  F flag &#8220;flagged&#8221; sequence  A flag &#8220;replied&#8221; sequence    When an MMDFMessage instance is created based upon a BabylMessage instance, the following conversions take place:       Resulting state BabylMessage state    R flag and O flag no &#8220;unseen&#8221; label  O flag &#8220;unseen&#8221; label  D flag &#8220;deleted&#8221; label  A flag &#8220;answered&#8221; label    When an MMDFMessage instance is created based upon an mboxMessage instance, the &#8220;From &#8221; line is copied and all flags directly correspond:       Resulting state mboxMessage state    R flag R flag  O flag O flag  D flag D flag  F flag F flag  A flag A flag       18.4.3. Exceptions\u00b6 The following exception classes are defined in the mailbox module:   exception mailbox.Error\u00b6 The based class for all other module-specific exceptions.    exception mailbox.NoSuchMailboxError\u00b6 Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist.    exception mailbox.NotEmptyError\u00b6 Raised when a mailbox is not empty but is expected to be, such as when deleting a folder that contains messages.    exception mailbox.ExternalClashError\u00b6 Raised when some mailbox-related condition beyond the control of the program causes it to be unable to proceed, such as when failing to acquire a lock that another program already holds a lock, or when a uniquely-generated file name already exists.    exception mailbox.FormatError\u00b6 Raised when the data in a file cannot be parsed, such as when an MH instance attempts to read a corrupted .mh_sequences file.    18.4.4. Deprecated classes and methods\u00b6  Deprecated since version 2.6. Older versions of the mailbox module do not support modification of mailboxes, such as adding or removing message, and do not provide classes to represent format-specific message properties. For backward compatibility, the older mailbox classes are still available, but the newer classes should be used in preference to them.  The old classes will be removed in Python 3.0. Older mailbox objects support only iteration and provide a single public method:   oldmailbox.next()\u00b6 Return the next message in the mailbox, created with the optional factory argument passed into the mailbox object&#8217;s constructor. By default this is an rfc822.Message object (see the rfc822 module).  Depending on the mailbox implementation the fp attribute of this object may be a true file object or a class instance simulating a file object, taking care of things like message boundaries if multiple mail messages are contained in a single file, etc.  If no more messages are available, this method returns None.  Most of the older mailbox classes have names that differ from the current mailbox class names, except for Maildir. For this reason, the new Maildir class defines a next() method and its constructor differs slightly from those of the other new mailbox classes. The older mailbox classes whose names are not the same as their newer counterparts are as follows:   class mailbox.UnixMailbox(fp[, factory])\u00b6 Access to a classic Unix-style mailbox, where all messages are contained in a single file and separated by From (a.k.a. From_) lines.  The file object fp points to the mailbox file.  The optional factory parameter is a callable that should create new message objects.  factory is called with one argument, fp by the next() method of the mailbox object.  The default is the rfc822.Message class (see the rfc822 module &#8211; and the note below).  Note For reasons of this module&#8217;s internal implementation, you will probably want to open the fp object in binary mode.  This is especially important on Windows.  For maximum portability, messages in a Unix-style mailbox are separated by any line that begins exactly with the string 'From ' (note the trailing space) if preceded by exactly two newlines. Because of the wide-range of variations in practice, nothing else on the From_ line should be considered.  However, the current implementation doesn&#8217;t check for the leading two newlines.  This is usually fine for most applications. The UnixMailbox class implements a more strict version of From_ line checking, using a regular expression that usually correctly matched From_ delimiters.  It considers delimiter line to be separated by From name time lines.  For maximum portability, use the PortableUnixMailbox class instead.  This class is identical to UnixMailbox except that individual messages are separated by only From lines.     class mailbox.PortableUnixMailbox(fp[, factory])\u00b6 A less-strict version of UnixMailbox, which considers only the From at the beginning of the line separating messages.  The &#8220;name time&#8221; portion of the From line is ignored, to protect against some variations that are observed in practice.  This works since lines in the message which begin with 'From ' are quoted by mail handling software at delivery-time.    class mailbox.MmdfMailbox(fp[, factory])\u00b6 Access an MMDF-style mailbox, where all messages are contained in a single file and separated by lines consisting of 4 control-A characters.  The file object fp points to the mailbox file. Optional factory is as with the UnixMailbox class.    class mailbox.MHMailbox(dirname[, factory])\u00b6 Access an MH mailbox, a directory with each message in a separate file with a numeric name. The name of the mailbox directory is passed in dirname. factory is as with the UnixMailbox class.    class mailbox.BabylMailbox(fp[, factory])\u00b6 Access a Babyl mailbox, which is similar to an MMDF mailbox.  In Babyl format, each message has two sets of headers, the original headers and the visible headers.  The original headers appear before a line containing only '*** EOOH ***' (End-Of-Original-Headers) and the visible headers appear after the EOOH line.  Babyl-compliant mail readers will show you only the visible headers, and BabylMailbox objects will return messages containing only the visible headers.  You&#8217;ll have to do your own parsing of the mailbox file to get at the original headers.  Mail messages start with the EOOH line and end with a line containing only '\\037\\014'.  factory is as with the UnixMailbox class.  If you wish to use the older mailbox classes with the email module rather than the deprecated rfc822 module, you can do so as follows: import email import email.Errors import mailbox  def msgfactory(fp):     try:         return email.message_from_file(fp)     except email.Errors.MessageParseError:         # Don&#39;t return None since that will         # stop the mailbox iterator         return &#39;&#39;  mbox = mailbox.UnixMailbox(fp, msgfactory)   Alternatively, if you know your mailbox contains only well-formed MIME messages, you can simplify this to: import email import mailbox  mbox = mailbox.UnixMailbox(fp, email.message_from_file)     18.4.5. Examples\u00b6 A simple example of printing the subjects of all messages in a mailbox that seem interesting: import mailbox for message in mailbox.mbox(&#39;~\/mbox&#39;):     subject = message[&#39;subject&#39;]       # Could possibly be None.     if subject and &#39;python&#39; in subject.lower():         print subject   To copy all mail from a Babyl mailbox to an MH mailbox, converting all of the format-specific information that can be converted: import mailbox destination = mailbox.MH(&#39;~\/Mail&#39;) destination.lock() for message in mailbox.Babyl(&#39;~\/RMAIL&#39;):     destination.add(mailbox.MHMessage(message)) destination.flush() destination.unlock()   This example sorts mail from several mailing lists into different mailboxes, being careful to avoid mail corruption due to concurrent modification by other programs, mail loss due to interruption of the program, or premature termination due to malformed messages in the mailbox: import mailbox import email.Errors  list_names = (&#39;python-list&#39;, &#39;python-dev&#39;, &#39;python-bugs&#39;)  boxes = dict((name, mailbox.mbox(&#39;~\/email\/%s&#39;  name)) for name in list_names) inbox = mailbox.Maildir(&#39;~\/Maildir&#39;, factory=None)  for key in inbox.iterkeys():     try:         message = inbox[key]     except email.Errors.MessageParseError:         continue                # The message is malformed. Just leave it.      for name in list_names:         list_id = message[&#39;list-id&#39;]         if list_id and name in list_id:             # Get mailbox to use             box = boxes[name]              # Write copy to disk before removing original.             # If there&#39;s a crash, you might duplicate a message, but             # that&#39;s better than losing a message completely.             box.lock()             box.add(message)             box.flush()             box.unlock()              # Remove original message             inbox.lock()             inbox.discard(key)             inbox.flush()             inbox.unlock()             break               # Found destination, so stop looking.  for box in boxes.itervalues():     box.close()"},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Babyl","title":"mailbox.Babyl","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Babyl.get_file","title":"mailbox.Babyl.get_file","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Babyl.get_labels","title":"mailbox.Babyl.get_labels","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Babyl.lock","title":"mailbox.Babyl.lock","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMailbox","title":"mailbox.BabylMailbox","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMessage","title":"mailbox.BabylMessage","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMessage.add_label","title":"mailbox.BabylMessage.add_label","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMessage.get_labels","title":"mailbox.BabylMessage.get_labels","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMessage.get_visible","title":"mailbox.BabylMessage.get_visible","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMessage.remove_label","title":"mailbox.BabylMessage.remove_label","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMessage.set_labels","title":"mailbox.BabylMessage.set_labels","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMessage.set_visible","title":"mailbox.BabylMessage.set_visible","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.BabylMessage.update_visible","title":"mailbox.BabylMessage.update_visible","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox","title":"mailbox.Mailbox","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.__len__","title":"mailbox.Mailbox.__len__","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.__setitem__","title":"mailbox.Mailbox.__setitem__","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.add","title":"mailbox.Mailbox.add","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.clear","title":"mailbox.Mailbox.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.close","title":"mailbox.Mailbox.close","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.flush","title":"mailbox.Mailbox.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.get","title":"mailbox.Mailbox.get","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.get_file","title":"mailbox.Mailbox.get_file","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.get_message","title":"mailbox.Mailbox.get_message","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.get_string","title":"mailbox.Mailbox.get_string","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.has_key","title":"mailbox.Mailbox.has_key","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.iteritems","title":"mailbox.Mailbox.iteritems","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.iterkeys","title":"mailbox.Mailbox.iterkeys","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.itervalues","title":"mailbox.Mailbox.itervalues","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.lock","title":"mailbox.Mailbox.lock","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.pop","title":"mailbox.Mailbox.pop","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.popitem","title":"mailbox.Mailbox.popitem","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.remove","title":"mailbox.Mailbox.remove","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.unlock","title":"mailbox.Mailbox.unlock","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Mailbox.update","title":"mailbox.Mailbox.update","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir","title":"mailbox.Maildir","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.add","title":"mailbox.Maildir.add","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.add_folder","title":"mailbox.Maildir.add_folder","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.clean","title":"mailbox.Maildir.clean","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.close","title":"mailbox.Maildir.close","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.flush","title":"mailbox.Maildir.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.get_file","title":"mailbox.Maildir.get_file","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.get_folder","title":"mailbox.Maildir.get_folder","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.list_folders","title":"mailbox.Maildir.list_folders","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.lock","title":"mailbox.Maildir.lock","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Maildir.remove_folder","title":"mailbox.Maildir.remove_folder","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage","title":"mailbox.MaildirMessage","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.add_flag","title":"mailbox.MaildirMessage.add_flag","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.get_date","title":"mailbox.MaildirMessage.get_date","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.get_flags","title":"mailbox.MaildirMessage.get_flags","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.get_info","title":"mailbox.MaildirMessage.get_info","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.get_subdir","title":"mailbox.MaildirMessage.get_subdir","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.remove_flag","title":"mailbox.MaildirMessage.remove_flag","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.set_date","title":"mailbox.MaildirMessage.set_date","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.set_flags","title":"mailbox.MaildirMessage.set_flags","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.set_info","title":"mailbox.MaildirMessage.set_info","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MaildirMessage.set_subdir","title":"mailbox.MaildirMessage.set_subdir","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mbox","title":"mailbox.mbox","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mbox.get_file","title":"mailbox.mbox.get_file","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mbox.lock","title":"mailbox.mbox.lock","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mboxMessage","title":"mailbox.mboxMessage","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mboxMessage.add_flag","title":"mailbox.mboxMessage.add_flag","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mboxMessage.get_flags","title":"mailbox.mboxMessage.get_flags","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mboxMessage.get_from","title":"mailbox.mboxMessage.get_from","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mboxMessage.remove_flag","title":"mailbox.mboxMessage.remove_flag","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mboxMessage.set_flags","title":"mailbox.mboxMessage.set_flags","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.mboxMessage.set_from","title":"mailbox.mboxMessage.set_from","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.Message","title":"mailbox.Message","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH","title":"mailbox.MH","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.add_folder","title":"mailbox.MH.add_folder","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.close","title":"mailbox.MH.close","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.flush","title":"mailbox.MH.flush","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.get_file","title":"mailbox.MH.get_file","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.get_folder","title":"mailbox.MH.get_folder","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.get_sequences","title":"mailbox.MH.get_sequences","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.list_folders","title":"mailbox.MH.list_folders","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.lock","title":"mailbox.MH.lock","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.pack","title":"mailbox.MH.pack","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.remove","title":"mailbox.MH.remove","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.remove_folder","title":"mailbox.MH.remove_folder","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MH.set_sequences","title":"mailbox.MH.set_sequences","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MHMailbox","title":"mailbox.MHMailbox","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MHMessage","title":"mailbox.MHMessage","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MHMessage.add_sequence","title":"mailbox.MHMessage.add_sequence","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MHMessage.get_sequences","title":"mailbox.MHMessage.get_sequences","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MHMessage.remove_sequence","title":"mailbox.MHMessage.remove_sequence","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MHMessage.set_sequences","title":"mailbox.MHMessage.set_sequences","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDF","title":"mailbox.MMDF","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDF.get_file","title":"mailbox.MMDF.get_file","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDF.lock","title":"mailbox.MMDF.lock","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MmdfMailbox","title":"mailbox.MmdfMailbox","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDFMessage","title":"mailbox.MMDFMessage","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDFMessage.add_flag","title":"mailbox.MMDFMessage.add_flag","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDFMessage.get_flags","title":"mailbox.MMDFMessage.get_flags","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDFMessage.get_from","title":"mailbox.MMDFMessage.get_from","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDFMessage.remove_flag","title":"mailbox.MMDFMessage.remove_flag","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDFMessage.set_flags","title":"mailbox.MMDFMessage.set_flags","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.MMDFMessage.set_from","title":"mailbox.MMDFMessage.set_from","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.oldmailbox.next","title":"mailbox.oldmailbox.next","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.PortableUnixMailbox","title":"mailbox.PortableUnixMailbox","description":""},{"url":"http:\/\/docs.python.org\/library\/mailbox.html#mailbox.UnixMailbox","title":"mailbox.UnixMailbox","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html","title":"base64","description":"18.12. base64 &#8212; RFC 3548: Base16, Base32, Base64 Data Encodings\u00b6 This module provides data encoding and decoding as specified in RFC 3548. This standard defines the Base16, Base32, and Base64 algorithms for encoding and decoding arbitrary binary strings into text strings that can be safely sent by email, used as parts of URLs, or included as part of an HTTP POST request.  The encoding algorithm is not the same as the uuencode program. There are two interfaces provided by this module.  The modern interface supports encoding and decoding string objects using all three alphabets.  The legacy interface provides for encoding and decoding to and from file-like objects as well as strings, but only using the Base64 standard alphabet. The modern interface, which was introduced in Python 2.4, provides:   base64.b64encode(s[, altchars])\u00b6 Encode a string use Base64. s is the string to encode.  Optional altchars must be a string of at least length 2 (additional characters are ignored) which specifies an alternative alphabet for the + and \/ characters.  This allows an application to e.g. generate URL or filesystem safe Base64 strings.  The default is None, for which the standard Base64 alphabet is used. The encoded string is returned.     base64.b64decode(s[, altchars])\u00b6 Decode a Base64 encoded string. s is the string to decode.  Optional altchars must be a string of at least length 2 (additional characters are ignored) which specifies the alternative alphabet used instead of the + and \/ characters. The decoded string is returned.  A TypeError is raised if s were incorrectly padded or if there are non-alphabet characters present in the string.     base64.standard_b64encode(s)\u00b6 Encode string s using the standard Base64 alphabet.    base64.standard_b64decode(s)\u00b6 Decode string s using the standard Base64 alphabet.    base64.urlsafe_b64encode(s)\u00b6 Encode string s using a URL-safe alphabet, which substitutes - instead of + and _ instead of \/ in the standard Base64 alphabet.  The result can still contain =.    base64.urlsafe_b64decode(s)\u00b6 Decode string s using a URL-safe alphabet, which substitutes - instead of + and _ instead of \/ in the standard Base64 alphabet.    base64.b32encode(s)\u00b6 Encode a string using Base32.  s is the string to encode.  The encoded string is returned.    base64.b32decode(s[, casefold[, map01]])\u00b6 Decode a Base32 encoded string. s is the string to decode.  Optional casefold is a flag specifying whether a lowercase alphabet is acceptable as input.  For security purposes, the default is False. RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O (oh), and for optional mapping of the digit 1 (one) to either the letter I (eye) or letter L (el).  The optional argument map01 when not None, specifies which letter the digit 1 should be mapped to (when map01 is not None, the digit 0 is always mapped to the letter O).  For security purposes the default is None, so that 0 and 1 are not allowed in the input. The decoded string is returned.  A TypeError is raised if s were incorrectly padded or if there are non-alphabet characters present in the string.     base64.b16encode(s)\u00b6 Encode a string using Base16. s is the string to encode.  The encoded string is returned.     base64.b16decode(s[, casefold])\u00b6 Decode a Base16 encoded string. s is the string to decode.  Optional casefold is a flag specifying whether a lowercase alphabet is acceptable as input.  For security purposes, the default is False. The decoded string is returned.  A TypeError is raised if s were incorrectly padded or if there are non-alphabet characters present in the string.   The legacy interface:   base64.decode(input, output)\u00b6 Decode the contents of the input file and write the resulting binary data to the output file. input and output must either be file objects or objects that mimic the file object interface. input will be read until input.read() returns an empty string.    base64.decodestring(s)\u00b6 Decode the string s, which must contain one or more lines of base64 encoded data, and return a string containing the resulting binary data.    base64.encode(input, output)\u00b6 Encode the contents of the input file and write the resulting base64 encoded data to the output file. input and output must either be file objects or objects that mimic the file object interface. input will be read until input.read() returns an empty string.  encode() returns the encoded data plus a trailing newline character ('\\n').    base64.encodestring(s)\u00b6 Encode the string s, which can contain arbitrary binary data, and return a string containing one or more lines of base64-encoded data. encodestring() returns a string containing one or more lines of base64-encoded data always including an extra trailing newline ('\\n').  An example usage of the module: >>> import base64 >>> encoded = base64.b64encode(&#39;data to be encoded&#39;) >>> encoded &#39;ZGF0YSB0byBiZSBlbmNvZGVk&#39; >>> data = base64.b64decode(encoded) >>> data &#39;data to be encoded&#39;    See also  Module binascii Support module containing ASCII-to-binary and binary-to-ASCII conversions. RFC 1521 - MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies Section 5.2, &#8220;Base64 Content-Transfer-Encoding,&#8221; provides the definition of the base64 encoding."},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.b16decode","title":"base64.b16decode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.b16encode","title":"base64.b16encode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.b32decode","title":"base64.b32decode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.b32encode","title":"base64.b32encode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.b64decode","title":"base64.b64decode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.b64encode","title":"base64.b64encode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.decode","title":"base64.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.decodestring","title":"base64.decodestring","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.encode","title":"base64.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.encodestring","title":"base64.encodestring","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.standard_b64decode","title":"base64.standard_b64decode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.standard_b64encode","title":"base64.standard_b64encode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.urlsafe_b64decode","title":"base64.urlsafe_b64decode","description":""},{"url":"http:\/\/docs.python.org\/library\/base64.html#base64.urlsafe_b64encode","title":"base64.urlsafe_b64encode","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html","title":"rfc822","description":"18.11. rfc822 &#8212; Parse RFC 2822 mail headers\u00b6  Deprecated since version 2.3: The email package should be used in preference to the rfc822 module.  This module is present only to maintain backward compatibility, and has been removed in 3.0. This module defines a class, Message, which represents an &#8220;email message&#8221; as defined by the Internet standard RFC 2822. [1]  Such messages consist of a collection of message headers, and a message body.  This module also defines a helper class AddressList for parsing RFC 2822 addresses.  Please refer to the RFC for information on the specific syntax of RFC 2822 messages. The mailbox module provides classes  to read mailboxes produced by various end-user mail programs.   class rfc822.Message(file[, seekable])\u00b6 A Message instance is instantiated with an input object as parameter. Message relies only on the input object having a readline() method; in particular, ordinary file objects qualify.  Instantiation reads headers from the input object up to a delimiter line (normally a blank line) and stores them in the instance.  The message body, following the headers, is not consumed. This class can work with any input object that supports a readline() method.  If the input object has seek and tell capability, the rewindbody() method will work; also, illegal lines will be pushed back onto the input stream.  If the input object lacks seek but has an unread() method that can push back a line of input, Message will use that to push back illegal lines.  Thus this class can be used to parse messages coming from a buffered stream. The optional seekable argument is provided as a workaround for certain stdio libraries in which tell() discards buffered data before discovering that the lseek() system call doesn&#8217;t work.  For maximum portability, you should set the seekable argument to zero to prevent that initial tell() when passing in an unseekable object such as a file object created from a socket object. Input lines as read from the file may either be terminated by CR-LF or by a single linefeed; a terminating CR-LF is replaced by a single linefeed before the line is stored. All header matching is done independent of upper or lower case; e.g. m['From'], m['from'] and m['FROM'] all yield the same result.     class rfc822.AddressList(field)\u00b6 You may instantiate the AddressList helper class using a single string parameter, a comma-separated list of RFC 2822 addresses to be parsed.  (The parameter None yields an empty list.)    rfc822.quote(str)\u00b6 Return a new string with backslashes in str replaced by two backslashes and double quotes replaced by backslash-double quote.    rfc822.unquote(str)\u00b6 Return a new string which is an unquoted version of str. If str ends and begins with double quotes, they are stripped off.  Likewise if str ends and begins with angle brackets, they are stripped off.    rfc822.parseaddr(address)\u00b6 Parse address, which should be the value of some address-containing field such as To or Cc, into its constituent &#8220;realname&#8221; and &#8220;email address&#8221; parts. Returns a tuple of that information, unless the parse fails, in which case a 2-tuple (None, None) is returned.    rfc822.dump_address_pair(pair)\u00b6 The inverse of parseaddr(), this takes a 2-tuple of the form (realname, email_address) and returns the string value suitable for a To or Cc header.  If the first element of pair is false, then the second element is returned unmodified.    rfc822.parsedate(date)\u00b6 Attempts to parse a date according to the rules in RFC 2822. however, some mailers don&#8217;t follow that format as specified, so parsedate() tries to guess correctly in such cases.  date is a string containing an RFC 2822 date, such as  'Mon, 20 Nov 1995 19:12:08 -0500'.  If it succeeds in parsing the date, parsedate() returns a 9-tuple that can be passed directly to time.mktime(); otherwise None will be returned.  Note that indexes 6, 7, and 8 of the result tuple are not usable.    rfc822.parsedate_tz(date)\u00b6 Performs the same function as parsedate(), but returns either None or a 10-tuple; the first 9 elements make up a tuple that can be passed directly to time.mktime(), and the tenth is the offset of the date&#8217;s timezone from UTC (which is the official term for Greenwich Mean Time).  (Note that the sign of the timezone offset is the opposite of the sign of the time.timezone variable for the same timezone; the latter variable follows the POSIX standard while this module follows RFC 2822.)  If the input string has no timezone, the last element of the tuple returned is None.  Note that indexes 6, 7, and 8 of the result tuple are not usable.    rfc822.mktime_tz(tuple)\u00b6 Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp.  If the timezone item in the tuple is None, assume local time.  Minor deficiency: this first interprets the first 8 elements as a local time and then compensates for the timezone difference; this may yield a slight error around daylight savings time switch dates.  Not enough to worry about for common use.   See also  Module email Comprehensive email handling package; supersedes the rfc822 module. Module mailbox Classes to read various mailbox formats produced  by end-user mail programs. Module mimetools Subclass of rfc822.Message that handles MIME encoded messages.    18.11.1. Message Objects\u00b6 A Message instance has the following methods:   Message.rewindbody()\u00b6 Seek to the start of the message body.  This only works if the file object is seekable.    Message.isheader(line)\u00b6 Returns a line&#8217;s canonicalized fieldname (the dictionary key that will be used to index it) if the line is a legal RFC 2822 header; otherwise returns None (implying that parsing should stop here and the line be pushed back on the input stream).  It is sometimes useful to override this method in a subclass.    Message.islast(line)\u00b6 Return true if the given line is a delimiter on which Message should stop.  The delimiter line is consumed, and the file object&#8217;s read location positioned immediately after it.  By default this method just checks that the line is blank, but you can override it in a subclass.    Message.iscomment(line)\u00b6 Return True if the given line should be ignored entirely, just skipped. By default this is a stub that always returns False, but you can override it in a subclass.    Message.getallmatchingheaders(name)\u00b6 Return a list of lines consisting of all headers matching name, if any.  Each physical line, whether it is a continuation line or not, is a separate list item.  Return the empty list if no header matches name.    Message.getfirstmatchingheader(name)\u00b6 Return a list of lines comprising the first header matching name, and its continuation line(s), if any.  Return None if there is no header matching name.    Message.getrawheader(name)\u00b6 Return a single string consisting of the text after the colon in the first header matching name.  This includes leading whitespace, the trailing linefeed, and internal linefeeds and whitespace if there any continuation line(s) were present.  Return None if there is no header matching name.    Message.getheader(name[, default])\u00b6 Return a single string consisting of the last header matching name, but strip leading and trailing whitespace. Internal whitespace is not stripped.  The optional default argument can be used to specify a different default to be returned when there is no header matching name; it defaults to None. This is the preferred way to get parsed headers.    Message.get(name[, default])\u00b6 An alias for getheader(), to make the interface more compatible  with regular dictionaries.    Message.getaddr(name)\u00b6 Return a pair (full name, email address) parsed from the string returned by getheader(name).  If no header matching name exists, return (None, None); otherwise both the full name and the address are (possibly empty) strings. Example: If m&#8216;s first From header contains the string 'jack@cwi.nl (Jack Jansen)', then m.getaddr('From') will yield the pair ('Jack Jansen', 'jack@cwi.nl'). If the header contained 'Jack Jansen <jack@cwi.nl>' instead, it would yield the exact same result.     Message.getaddrlist(name)\u00b6 This is similar to getaddr(list), but parses a header containing a list of email addresses (e.g. a To header) and returns a list of (full name, email address) pairs (even if there was only one address in the header). If there is no header matching name, return an empty list. If multiple headers exist that match the named header (e.g. if there are several Cc headers), all are parsed for addresses. Any continuation lines the named headers contain are also parsed.     Message.getdate(name)\u00b6 Retrieve a header using getheader() and parse it into a 9-tuple compatible with time.mktime(); note that fields 6, 7, and 8  are not usable.  If there is no header matching name, or it is unparsable, return None. Date parsing appears to be a black art, and not all mailers adhere to the standard.  While it has been tested and found correct on a large collection of email from many sources, it is still possible that this function may occasionally yield an incorrect result.     Message.getdate_tz(name)\u00b6 Retrieve a header using getheader() and parse it into a 10-tuple; the first 9 elements will make a tuple compatible with time.mktime(), and the 10th is a number giving the offset of the date&#8217;s timezone from UTC.  Note that fields 6, 7, and 8  are not usable.  Similarly to getdate(), if there is no header matching name, or it is unparsable, return None.  Message instances also support a limited mapping interface. In particular: m[name] is like m.getheader(name) but raises KeyError if there is no matching header; and len(m), m.get(name[, default]), name in m, m.keys(), m.values() m.items(), and m.setdefault(name[, default]) act as expected, with the one difference that setdefault() uses an empty string as the default value. Message instances also support the mapping writable interface m[name] = value and del m[name].  Message objects do not support the clear(), copy(), popitem(), or update() methods of the mapping interface.  (Support for get() and setdefault() was only added in Python 2.2.) Finally, Message instances have some public instance variables:   Message.headers\u00b6 A list containing the entire set of header lines, in the order in which they were read (except that setitem calls may disturb this order). Each line contains a trailing newline.  The blank line terminating the headers is not contained in the list.    Message.fp\u00b6 The file or file-like object passed at instantiation time.  This can be used to read the message content.    Message.unixfrom\u00b6 The Unix From line, if the message had one, or an empty string.  This is needed to regenerate the message in some contexts, such as an mbox-style mailbox file.    18.11.2. AddressList Objects\u00b6 An AddressList instance has the following methods:   AddressList.__len__()\u00b6 Return the number of addresses in the address list.    AddressList.__str__()\u00b6 Return a canonicalized string representation of the address list. Addresses are rendered in &#8220;name&#8221; <host@domain> form, comma-separated.    AddressList.__add__(alist)\u00b6 Return a new AddressList instance that contains all addresses in both AddressList operands, with duplicates removed (set union).    AddressList.__iadd__(alist)\u00b6 In-place version of __add__(); turns this AddressList instance into the union of itself and the right-hand instance, alist.    AddressList.__sub__(alist)\u00b6 Return a new AddressList instance that contains every address in the left-hand AddressList operand that is not present in the right-hand address operand (set difference).    AddressList.__isub__(alist)\u00b6 In-place version of __sub__(), removing addresses in this list which are also in alist.  Finally, AddressList instances have one public instance variable:   AddressList.addresslist\u00b6 A list of tuple string pairs, one per address.  In each member, the first is the canonicalized name part, the second is the actual route-address ('@'-separated username-host.domain pair).  Footnotes    [1]This module originally conformed to RFC 822, hence the name.  Since then, RFC 2822 has been released as an update to RFC 822.  This module should be considered RFC 2822-conformant, especially in cases where the syntax or semantics have changed since RFC 822."},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.AddressList","title":"rfc822.AddressList","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.AddressList.__add__","title":"rfc822.AddressList.__add__","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.AddressList.__iadd__","title":"rfc822.AddressList.__iadd__","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.AddressList.__isub__","title":"rfc822.AddressList.__isub__","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.AddressList.__len__","title":"rfc822.AddressList.__len__","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.AddressList.__str__","title":"rfc822.AddressList.__str__","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.AddressList.__sub__","title":"rfc822.AddressList.__sub__","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.dump_address_pair","title":"rfc822.dump_address_pair","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message","title":"rfc822.Message","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.get","title":"rfc822.Message.get","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.getaddr","title":"rfc822.Message.getaddr","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.getaddrlist","title":"rfc822.Message.getaddrlist","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.getallmatchingheaders","title":"rfc822.Message.getallmatchingheaders","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.getdate","title":"rfc822.Message.getdate","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.getdate_tz","title":"rfc822.Message.getdate_tz","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.getfirstmatchingheader","title":"rfc822.Message.getfirstmatchingheader","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.getheader","title":"rfc822.Message.getheader","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.getrawheader","title":"rfc822.Message.getrawheader","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.iscomment","title":"rfc822.Message.iscomment","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.isheader","title":"rfc822.Message.isheader","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.islast","title":"rfc822.Message.islast","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.Message.rewindbody","title":"rfc822.Message.rewindbody","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.mktime_tz","title":"rfc822.mktime_tz","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.parseaddr","title":"rfc822.parseaddr","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.parsedate","title":"rfc822.parsedate","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.parsedate_tz","title":"rfc822.parsedate_tz","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.quote","title":"rfc822.quote","description":""},{"url":"http:\/\/docs.python.org\/library\/rfc822.html#rfc822.unquote","title":"rfc822.unquote","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html","title":"multifile","description":"18.10. multifile &#8212; Support for files containing distinct parts\u00b6  Deprecated since version 2.5: The email package should be used in preference to the multifile module. This module is present only to maintain backward compatibility. The MultiFile object enables you to treat sections of a text file as file-like input objects, with '' being returned by readline() when a given delimiter pattern is encountered.  The defaults of this class are designed to make it useful for parsing MIME multipart messages, but by subclassing it and overriding methods  it can be easily adapted for more general use.   class multifile.MultiFile(fp[, seekable])\u00b6 Create a multi-file.  You must instantiate this class with an input object argument for the MultiFile instance to get lines from, such as a file object returned by open(). MultiFile only ever looks at the input object&#8217;s readline(), seek() and tell() methods, and the latter two are only needed if you want random access to the individual MIME parts. To use MultiFile on a non-seekable stream object, set the optional seekable argument to false; this will prevent using the input object&#8217;s seek() and tell() methods.   It will be useful to know that in MultiFile&#8216;s view of the world, text is composed of three kinds of lines: data, section-dividers, and end-markers. MultiFile is designed to support parsing of messages that may have multiple nested message parts, each with its own pattern for section-divider and end-marker lines.  See also  Module email Comprehensive email handling package; supersedes the multifile module.    18.10.1. MultiFile Objects\u00b6 A MultiFile instance has the following methods:   MultiFile.readline(str)\u00b6 Read a line.  If the line is data (not a section-divider or end-marker or real EOF) return it.  If the line matches the most-recently-stacked boundary, return '' and set self.last to 1 or 0 according as the match is or is not an end-marker.  If the line matches any other stacked boundary, raise an error.  On encountering end-of-file on the underlying stream object, the method raises Error unless all boundaries have been popped.    MultiFile.readlines(str)\u00b6 Return all lines remaining in this part as a list of strings.    MultiFile.read()\u00b6 Read all lines, up to the next section.  Return them as a single (multiline) string.  Note that this doesn&#8217;t take a size argument!    MultiFile.seek(pos[, whence])\u00b6 Seek.  Seek indices are relative to the start of the current section. The pos and whence arguments are interpreted as for a file seek.    MultiFile.tell()\u00b6 Return the file position relative to the start of the current section.    MultiFile.next()\u00b6 Skip lines to the next section (that is, read lines until a section-divider or end-marker has been consumed).  Return true if there is such a section, false if an end-marker is seen.  Re-enable the most-recently-pushed boundary.    MultiFile.is_data(str)\u00b6 Return true if str is data and false if it might be a section boundary.  As written, it tests for a prefix other than '--' at start of line (which all MIME boundaries have) but it is declared so it can be overridden in derived classes. Note that this test is used intended as a fast guard for the real boundary tests; if it always returns false it will merely slow processing, not cause it to fail.     MultiFile.push(str)\u00b6 Push a boundary string.  When a decorated version of this boundary  is found as an input line, it will be interpreted as a section-divider  or end-marker (depending on the decoration, see RFC 2045).  All subsequent reads will return the empty string to indicate end-of-file, until a call to pop() removes the boundary a or next() call reenables it. It is possible to push more than one boundary.  Encountering the most-recently-pushed boundary will return EOF; encountering any other boundary will raise an error.     MultiFile.pop()\u00b6 Pop a section boundary.  This boundary will no longer be interpreted as EOF.    MultiFile.section_divider(str)\u00b6 Turn a boundary into a section-divider line.  By default, this method prepends '--' (which MIME section boundaries have) but it is declared so it can be overridden in derived classes.  This method need not append LF or CR-LF, as comparison with the result ignores trailing whitespace.    MultiFile.end_marker(str)\u00b6 Turn a boundary string into an end-marker line.  By default, this method prepends '--' and appends '--' (like a MIME-multipart end-of-message marker) but it is declared so it can be overridden in derived classes.  This method need not append LF or CR-LF, as comparison with the result ignores trailing whitespace.  Finally, MultiFile instances have two public instance variables:   MultiFile.level\u00b6 Nesting depth of the current part.    MultiFile.last\u00b6 True if the last end-of-file was for an end-of-message marker.    18.10.2. MultiFile Example\u00b6 import mimetools import multifile import StringIO  def extract_mime_part_matching(stream, mimetype):     \"\"\"Return the first element in a multipart MIME message on stream     matching mimetype.\"\"\"      msg = mimetools.Message(stream)     msgtype = msg.gettype()     params = msg.getplist()      data = StringIO.StringIO()     if msgtype[:10] == \"multipart\/\":          file = multifile.MultiFile(stream)         file.push(msg.getparam(\"boundary\"))         while file.next():             submsg = mimetools.Message(file)             try:                 data = StringIO.StringIO()                 mimetools.decode(file, data, submsg.getencoding())             except ValueError:                 continue             if submsg.gettype() == mimetype:                 break         file.pop()     return data.getvalue()"},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile","title":"multifile.MultiFile","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.end_marker","title":"multifile.MultiFile.end_marker","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.is_data","title":"multifile.MultiFile.is_data","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.next","title":"multifile.MultiFile.next","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.pop","title":"multifile.MultiFile.pop","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.push","title":"multifile.MultiFile.push","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.read","title":"multifile.MultiFile.read","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.readline","title":"multifile.MultiFile.readline","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.readlines","title":"multifile.MultiFile.readlines","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.section_divider","title":"multifile.MultiFile.section_divider","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.seek","title":"multifile.MultiFile.seek","description":""},{"url":"http:\/\/docs.python.org\/library\/multifile.html#multifile.MultiFile.tell","title":"multifile.MultiFile.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/uu.html","title":"uu","description":"18.16. uu &#8212; Encode and decode uuencode files\u00b6 Source code: Lib\/uu.py  This module encodes and decodes files in uuencode format, allowing arbitrary binary data to be transferred over ASCII-only connections. Wherever a file argument is expected, the methods accept a file-like object.  For backwards compatibility, a string containing a pathname is also accepted, and the corresponding file will be opened for reading and writing; the pathname '-' is understood to mean the standard input or output.  However, this interface is deprecated; it&#8217;s better for the caller to open the file itself, and be sure that, when required, the mode is 'rb' or 'wb' on Windows. This code was contributed by Lance Ellinghouse, and modified by Jack Jansen. The uu module defines the following functions:   uu.encode(in_file, out_file[, name[, mode]])\u00b6 Uuencode file in_file into file out_file.  The uuencoded file will have the header specifying name and mode as the defaults for the results of decoding the file. The default defaults are taken from in_file, or '-' and 0666 respectively.    uu.decode(in_file[, out_file[, mode[, quiet]]])\u00b6 This call decodes uuencoded file in_file placing the result on file out_file. If out_file is a pathname, mode is used to set the permission bits if the file must be created. Defaults for out_file and mode are taken from the uuencode header.  However, if the file specified in the header already exists, a uu.Error is raised. decode() may print a warning to standard error if the input was produced by an incorrect uuencoder and Python could recover from that error.  Setting quiet to a true value silences this warning.     exception uu.Error\u00b6 Subclass of Exception, this can be raised by uu.decode() under various situations, such as described above, but also including a badly formatted header, or truncated input file.   See also  Module binascii Support module containing ASCII-to-binary and binary-to-ASCII conversions."},{"url":"http:\/\/docs.python.org\/library\/uu.html#uu.decode","title":"uu.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/uu.html#uu.encode","title":"uu.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html","title":"binascii","description":"18.14. binascii &#8212; Convert between binary and ASCII\u00b6 The binascii module contains a number of methods to convert between binary and various ASCII-encoded binary representations. Normally, you will not use these functions directly but use wrapper modules like uu, base64, or binhex instead. The binascii module contains low-level functions written in C for greater speed that are used by the higher-level modules. The binascii module defines the following functions:   binascii.a2b_uu(string)\u00b6 Convert a single line of uuencoded data back to binary and return the binary data. Lines normally contain 45 (binary) bytes, except for the last line. Line data may be followed by whitespace.    binascii.b2a_uu(data)\u00b6 Convert binary data to a line of ASCII characters, the return value is the converted line, including a newline char. The length of data should be at most 45.    binascii.a2b_base64(string)\u00b6 Convert a block of base64 data back to binary and return the binary data. More than one line may be passed at a time.    binascii.b2a_base64(data)\u00b6 Convert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a newline char. The length of data should be at most 57 to adhere to the base64 standard.    binascii.a2b_qp(string[, header])\u00b6 Convert a block of quoted-printable data back to binary and return the binary data. More than one line may be passed at a time. If the optional argument header is present and true, underscores will be decoded as spaces.    binascii.b2a_qp(data[, quotetabs, istext, header])\u00b6 Convert binary data to a line(s) of ASCII characters in quoted-printable encoding.  The return value is the converted line(s). If the optional argument quotetabs is present and true, all tabs and spaces will be encoded.   If the optional argument istext is present and true, newlines are not encoded but trailing whitespace will be encoded. If the optional argument header is present and true, spaces will be encoded as underscores per RFC1522. If the optional argument header is present and false, newline characters will be encoded as well; otherwise linefeed conversion might corrupt the binary data stream.    binascii.a2b_hqx(string)\u00b6 Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression. The string should contain a complete number of binary bytes, or (in case of the last portion of the binhex4 data) have the remaining bits zero.    binascii.rledecode_hqx(data)\u00b6 Perform RLE-decompression on the data, as per the binhex4 standard. The algorithm uses 0x90 after a byte as a repeat indicator, followed by a count. A count of 0 specifies a byte value of 0x90. The routine returns the decompressed data, unless data input data ends in an orphaned repeat indicator, in which case the Incomplete exception is raised.    binascii.rlecode_hqx(data)\u00b6 Perform binhex4 style RLE-compression on data and return the result.    binascii.b2a_hqx(data)\u00b6 Perform hexbin4 binary-to-ASCII translation and return the resulting string. The argument should already be RLE-coded, and have a length divisible by 3 (except possibly the last fragment).    binascii.crc_hqx(data, crc)\u00b6 Compute the binhex4 crc value of data, starting with an initial crc and returning the result.    binascii.crc32(data[, crc])\u00b6 Compute CRC-32, the 32-bit checksum of data, starting with an initial crc.  This is consistent with the ZIP file checksum.  Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm.  Use as follows: print binascii.crc32(\"hello world\") # Or, in two pieces: crc = binascii.crc32(\"hello\") crc = binascii.crc32(\" world\", crc) & 0xffffffff print &#39;crc32 = 0x%08x&#39;  crc      Note To generate the same numeric value across all Python versions and platforms use crc32(data) & 0xffffffff.  If you are only using the checksum in packed binary format this is not necessary as the return value is the correct 32bit binary representation regardless of sign.   Changed in version 2.6: The return value is in the range [-2**31, 2**31-1] regardless of platform.  In the past the value would be signed on some platforms and unsigned on others.  Use & 0xffffffff on the value if you want it to match 3.0 behavior.  Changed in version 3.0: The return value is unsigned and in the range [0, 2**32-1] regardless of platform.   binascii.b2a_hex(data)\u00b6  binascii.hexlify(data)\u00b6 Return the hexadecimal representation of the binary data.  Every byte of data is converted into the corresponding 2-digit hex representation.  The resulting string is therefore twice as long as the length of data.    binascii.a2b_hex(hexstr)\u00b6  binascii.unhexlify(hexstr)\u00b6 Return the binary data represented by the hexadecimal string hexstr.  This function is the inverse of b2a_hex(). hexstr must contain an even number of hexadecimal digits (which can be upper or lower case), otherwise a TypeError is raised.    exception binascii.Error\u00b6 Exception raised on errors. These are usually programming errors.    exception binascii.Incomplete\u00b6 Exception raised on incomplete data. These are usually not programming errors, but may be handled by reading a little more data and trying again.   See also  Module base64 Support for base64 encoding used in MIME email messages. Module binhex Support for the binhex format used on the Macintosh. Module uu Support for UU encoding used on Unix. Module quopri Support for quoted-printable encoding used in MIME email messages."},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.a2b_base64","title":"binascii.a2b_base64","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.a2b_hex","title":"binascii.a2b_hex","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.a2b_hqx","title":"binascii.a2b_hqx","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.a2b_qp","title":"binascii.a2b_qp","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.a2b_uu","title":"binascii.a2b_uu","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.b2a_base64","title":"binascii.b2a_base64","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.b2a_hex","title":"binascii.b2a_hex","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.b2a_hqx","title":"binascii.b2a_hqx","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.b2a_qp","title":"binascii.b2a_qp","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.b2a_uu","title":"binascii.b2a_uu","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.crc32","title":"binascii.crc32","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.crc_hqx","title":"binascii.crc_hqx","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.rlecode_hqx","title":"binascii.rlecode_hqx","description":""},{"url":"http:\/\/docs.python.org\/library\/binascii.html#binascii.rledecode_hqx","title":"binascii.rledecode_hqx","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html","title":"HTMLParser","description":"19.1. HTMLParser &#8212; Simple HTML and XHTML parser\u00b6  Note The HTMLParser module has been renamed to html.parser in Python 3.  The 2to3 tool will automatically adapt imports when converting your sources to Python 3.   New in version 2.2. Source code: Lib\/HTMLParser.py  This module defines a class HTMLParser which serves as the basis for parsing text files formatted in HTML (HyperText Mark-up Language) and XHTML. Unlike the parser in htmllib, this parser is not based on the SGML parser in sgmllib.   class HTMLParser.HTMLParser\u00b6 The HTMLParser class is instantiated without arguments. An HTMLParser instance is fed HTML data and calls handler functions when tags begin and end.  The HTMLParser class is meant to be overridden by the user to provide a desired behavior. Unlike the parser in htmllib, this parser does not check that end tags match start tags or call the end-tag handler for elements which are closed implicitly by closing an outer element.   An exception is defined as well:   exception HTMLParser.HTMLParseError\u00b6 Exception raised by the HTMLParser class when it encounters an error while parsing.  This exception provides three attributes: msg is a brief message explaining the error, lineno is the number of the line on which the broken construct was detected, and offset is the number of characters into the line at which the construct starts.  HTMLParser instances have the following methods:   HTMLParser.reset()\u00b6 Reset the instance.  Loses all unprocessed data.  This is called implicitly at instantiation time.    HTMLParser.feed(data)\u00b6 Feed some text to the parser.  It is processed insofar as it consists of complete elements; incomplete data is buffered until more data is fed or close() is called.  data can be either unicode or str, but passing unicode is advised.    HTMLParser.close()\u00b6 Force processing of all buffered data as if it were followed by an end-of-file mark.  This method may be redefined by a derived class to define additional processing at the end of the input, but the redefined version should always call the HTMLParser base class method close().    HTMLParser.getpos()\u00b6 Return current line number and offset.    HTMLParser.get_starttag_text()\u00b6 Return the text of the most recently opened start tag.  This should not normally be needed for structured processing, but may be useful in dealing with HTML &#8220;as deployed&#8221; or for re-generating input with minimal changes (whitespace between attributes can be preserved, etc.).    HTMLParser.handle_starttag(tag, attrs)\u00b6 This method is called to handle the start of a tag.  It is intended to be overridden by a derived class; the base class implementation does nothing. The tag argument is the name of the tag converted to lower case. The attrs argument is a list of (name, value) pairs containing the attributes found inside the tag&#8217;s <> brackets.  The name will be translated to lower case, and quotes in the value have been removed, and character and entity references have been replaced.  For instance, for the tag <A HREF=\"http:\/\/www.cwi.nl\/\">, this method would be called as handle_starttag('a', [('href', 'http:\/\/www.cwi.nl\/')]).  Changed in version 2.6: All entity references from htmlentitydefs are now replaced in the attribute values.     HTMLParser.handle_startendtag(tag, attrs)\u00b6 Similar to handle_starttag(), but called when the parser encounters an XHTML-style empty tag (<img ... \/>).  This method may be overridden by subclasses which require this particular lexical information; the default implementation simply calls handle_starttag() and handle_endtag().    HTMLParser.handle_endtag(tag)\u00b6 This method is called to handle the end tag of an element.  It is intended to be overridden by a derived class; the base class implementation does nothing.  The tag argument is the name of the tag converted to lower case.    HTMLParser.handle_data(data)\u00b6 This method is called to process arbitrary data (e.g. the content of <script>...<\/script> and <style>...<\/style>).  It is intended to be overridden by a derived class; the base class implementation does nothing.    HTMLParser.handle_charref(name)\u00b6 This method is called to process a character reference of the form &#ref;. It is intended to be overridden by a derived class; the base class implementation does nothing.    HTMLParser.handle_entityref(name)\u00b6 This method is called to process a general entity reference of the form &name; where name is an general entity reference.  It is intended to be overridden by a derived class; the base class implementation does nothing.    HTMLParser.handle_comment(data)\u00b6 This method is called when a comment is encountered.  The comment argument is a string containing the text between the -- and -- delimiters, but not the delimiters themselves.  For example, the comment <!--text--> will cause this method to be called with the argument 'text'.  It is intended to be overridden by a derived class; the base class implementation does nothing.    HTMLParser.handle_decl(decl)\u00b6 Method called when an SGML doctype declaration is read by the parser. The decl parameter will be the entire contents of the declaration inside the <!...> markup.  It is intended to be overridden by a derived class; the base class implementation does nothing.    HTMLParser.unknown_decl(data)\u00b6 Method called when an unrecognized SGML declaration is read by the parser. The data parameter will be the entire contents of the declaration inside the <!...> markup.  It is sometimes useful to be overridden by a derived class; the base class implementation throws an HTMLParseError.    HTMLParser.handle_pi(data)\u00b6 Method called when a processing instruction is encountered.  The data parameter will contain the entire processing instruction. For example, for the processing instruction <?proc color='red'>, this method would be called as handle_pi(\"proc color='red'\").  It is intended to be overridden by a derived class; the base class implementation does nothing.  Note The HTMLParser class uses the SGML syntactic rules for processing instructions.  An XHTML processing instruction using the trailing '?' will cause the '?' to be included in data.     19.1.1. Example HTML Parser Application\u00b6 As a basic example, below is a simple HTML parser that uses the HTMLParser class to print out start tags, end tags and data as they are encountered: from HTMLParser import HTMLParser  class MyHTMLParser(HTMLParser):     def handle_starttag(self, tag, attrs):         print \"Encountered a start tag:\", tag     def handle_endtag(self, tag):         print \"Encountered  an end tag:\", tag     def handle_data(self, data):         print \"Encountered   some data:\", data   parser = MyHTMLParser() parser.feed(&#39;<html><head><title>Test<\/title><\/head>&#39;             &#39;<body><h1>Parse me!<\/h1><\/body><\/html>&#39;)"},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser","title":"HTMLParser.HTMLParser","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.close","title":"HTMLParser.HTMLParser.close","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.feed","title":"HTMLParser.HTMLParser.feed","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.get_starttag_text","title":"HTMLParser.HTMLParser.get_starttag_text","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.getpos","title":"HTMLParser.HTMLParser.getpos","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_charref","title":"HTMLParser.HTMLParser.handle_charref","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_comment","title":"HTMLParser.HTMLParser.handle_comment","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_data","title":"HTMLParser.HTMLParser.handle_data","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_decl","title":"HTMLParser.HTMLParser.handle_decl","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_endtag","title":"HTMLParser.HTMLParser.handle_endtag","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_entityref","title":"HTMLParser.HTMLParser.handle_entityref","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_pi","title":"HTMLParser.HTMLParser.handle_pi","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_startendtag","title":"HTMLParser.HTMLParser.handle_startendtag","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.handle_starttag","title":"HTMLParser.HTMLParser.handle_starttag","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.reset","title":"HTMLParser.HTMLParser.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/htmlparser.html#HTMLParser.HTMLParser.unknown_decl","title":"HTMLParser.HTMLParser.unknown_decl","description":""},{"url":"http:\/\/docs.python.org\/library\/binhex.html","title":"binhex","description":"18.13. binhex &#8212; Encode and decode binhex4 files\u00b6 This module encodes and decodes files in binhex4 format, a format allowing representation of Macintosh files in ASCII.  On the Macintosh, both forks of a file and the finder information are encoded (or decoded), on other platforms only the data fork is handled.  Note In Python 3.x, special Macintosh support has been removed.  The binhex module defines the following functions:   binhex.binhex(input, output)\u00b6 Convert a binary file with filename input to binhex file output. The output parameter can either be a filename or a file-like object (any object supporting a write() and close() method).    binhex.hexbin(input[, output])\u00b6 Decode a binhex file input. input may be a filename or a file-like object supporting read() and close() methods. The resulting file is written to a file named output, unless the argument is omitted in which case the output filename is read from the binhex file.  The following exception is also defined:   exception binhex.Error\u00b6 Exception raised when something can&#8217;t be encoded using the binhex format (for example, a filename is too long to fit in the filename field), or when input is not properly encoded binhex data.   See also  Module binascii Support module containing ASCII-to-binary and binary-to-ASCII conversions.    18.13.1. Notes\u00b6 There is an alternative, more powerful interface to the coder and decoder, see the source for details. If you code or decode textfiles on non-Macintosh platforms they will still use the old Macintosh newline convention (carriage-return as end of line). As of this writing, hexbin() appears to not work in all cases."},{"url":"http:\/\/docs.python.org\/library\/binhex.html#binhex.binhex","title":"binhex.binhex","description":""},{"url":"http:\/\/docs.python.org\/library\/binhex.html#binhex.hexbin","title":"binhex.hexbin","description":""},{"url":"http:\/\/docs.python.org\/library\/quopri.html","title":"quopri","description":"18.15. quopri &#8212; Encode and decode MIME quoted-printable data\u00b6 Source code: Lib\/quopri.py  This module performs quoted-printable transport encoding and decoding, as defined in RFC 1521: &#8220;MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies&#8221;. The quoted-printable encoding is designed for data where there are relatively few nonprintable characters; the base64 encoding scheme available via the base64 module is more compact if there are many such characters, as when sending a graphics file.   quopri.decode(input, output[, header])\u00b6 Decode the contents of the input file and write the resulting decoded binary data to the output file. input and output must either be file objects or objects that mimic the file object interface. input will be read until input.readline() returns an empty string. If the optional argument header is present and true, underscore will be decoded as space. This is used to decode &#8220;Q&#8221;-encoded headers as described in RFC 1522: &#8220;MIME (Multipurpose Internet Mail Extensions) Part Two: Message Header Extensions for Non-ASCII Text&#8221;.    quopri.encode(input, output, quotetabs)\u00b6 Encode the contents of the input file and write the resulting quoted-printable data to the output file. input and output must either be file objects or objects that mimic the file object interface. input will be read until input.readline() returns an empty string. quotetabs is a flag which controls whether to encode embedded spaces and tabs; when true it encodes such embedded whitespace, and when false it leaves them unencoded.  Note that spaces and tabs appearing at the end of lines are always encoded, as per RFC 1521.    quopri.decodestring(s[, header])\u00b6 Like decode(), except that it accepts a source string and returns the corresponding decoded string.    quopri.encodestring(s[, quotetabs])\u00b6 Like encode(), except that it accepts a source string and returns the corresponding encoded string.  quotetabs is optional (defaulting to 0), and is passed straight through to encode().   See also  Module mimify General utilities for processing of MIME messages. Module base64 Encode and decode MIME base64 data"},{"url":"http:\/\/docs.python.org\/library\/quopri.html#quopri.decode","title":"quopri.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/quopri.html#quopri.decodestring","title":"quopri.decodestring","description":""},{"url":"http:\/\/docs.python.org\/library\/quopri.html#quopri.encode","title":"quopri.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/quopri.html#quopri.encodestring","title":"quopri.encodestring","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html","title":"sgmllib","description":"19.2. sgmllib &#8212; Simple SGML parser\u00b6  Deprecated since version 2.6: The sgmllib module has been removed in Python 3.0. This module defines a class SGMLParser which serves as the basis for parsing text files formatted in SGML (Standard Generalized Mark-up Language). In fact, it does not provide a full SGML parser &#8212; it only parses SGML insofar as it is used by HTML, and the module only exists as a base for the htmllib module.  Another HTML parser which supports XHTML and offers a somewhat different interface is available in the HTMLParser module.   class sgmllib.SGMLParser\u00b6 The SGMLParser class is instantiated without arguments. The parser is hardcoded to recognize the following constructs:  Opening and closing tags of the form <tag attr=\"value\" ...> and <\/tag>, respectively. Numeric character references of the form &#name;. Entity references of the form &name;. SGML comments of the form <!--text-->.  Note that spaces, tabs, and newlines are allowed between the trailing > and the immediately preceding --.    A single exception is defined as well:   exception sgmllib.SGMLParseError\u00b6 Exception raised by the SGMLParser class when it encounters an error while parsing.  New in version 2.1.   SGMLParser instances have the following methods:   SGMLParser.reset()\u00b6 Reset the instance.  Loses all unprocessed data.  This is called implicitly at instantiation time.    SGMLParser.setnomoretags()\u00b6 Stop processing tags.  Treat all following input as literal input (CDATA). (This is only provided so the HTML tag <PLAINTEXT> can be implemented.)    SGMLParser.setliteral()\u00b6 Enter literal mode (CDATA mode).    SGMLParser.feed(data)\u00b6 Feed some text to the parser.  It is processed insofar as it consists of complete elements; incomplete data is buffered until more data is fed or close() is called.    SGMLParser.close()\u00b6 Force processing of all buffered data as if it were followed by an end-of-file mark.  This method may be redefined by a derived class to define additional processing at the end of the input, but the redefined version should always call close().    SGMLParser.get_starttag_text()\u00b6 Return the text of the most recently opened start tag.  This should not normally be needed for structured processing, but may be useful in dealing with HTML &#8220;as deployed&#8221; or for re-generating input with minimal changes (whitespace between attributes can be preserved, etc.).    SGMLParser.handle_starttag(tag, method, attributes)\u00b6 This method is called to handle start tags for which either a start_tag() or do_tag() method has been defined.  The tag argument is the name of the tag converted to lower case, and the method argument is the bound method which should be used to support semantic interpretation of the start tag. The attributes argument is a list of (name, value) pairs containing the attributes found inside the tag&#8217;s <> brackets. The name has been translated to lower case. Double quotes and backslashes in the value have been interpreted, as well as known character references and known entity references terminated by a semicolon (normally, entity references can be terminated by any non-alphanumerical character, but this would break the very common case of <A HREF=\"url?spam=1&eggs=2\"> when eggs is a valid entity name). For instance, for the tag <A HREF=\"http:\/\/www.cwi.nl\/\">, this method would be called as unknown_starttag('a', [('href', 'http:\/\/www.cwi.nl\/')]).  The base implementation simply calls method with attributes as the only argument.  New in version 2.5: Handling of entity and character references within attribute values.     SGMLParser.handle_endtag(tag, method)\u00b6 This method is called to handle endtags for which an end_tag() method has been defined.  The tag argument is the name of the tag converted to lower case, and the method argument is the bound method which should be used to support semantic interpretation of the end tag.  If no end_tag() method is defined for the closing element, this handler is not called.  The base implementation simply calls method.    SGMLParser.handle_data(data)\u00b6 This method is called to process arbitrary data.  It is intended to be overridden by a derived class; the base class implementation does nothing.    SGMLParser.handle_charref(ref)\u00b6 This method is called to process a character reference of the form &#ref;. The base implementation uses convert_charref() to convert the reference to a string.  If that method returns a string, it is passed to handle_data(), otherwise unknown_charref(ref) is called to handle the error.  Changed in version 2.5: Use convert_charref() instead of hard-coding the conversion.     SGMLParser.convert_charref(ref)\u00b6 Convert a character reference to a string, or None.  ref is the reference passed in as a string.  In the base implementation, ref must be a decimal number in the range 0-255.  It converts the code point found using the convert_codepoint() method. If ref is invalid or out of range, this method returns None.  This method is called by the default handle_charref() implementation and by the attribute value parser.  New in version 2.5.     SGMLParser.convert_codepoint(codepoint)\u00b6 Convert a codepoint to a str value.  Encodings can be handled here if appropriate, though the rest of sgmllib is oblivious on this matter.  New in version 2.5.     SGMLParser.handle_entityref(ref)\u00b6 This method is called to process a general entity reference of the form &ref; where ref is an general entity reference.  It converts ref by passing it to convert_entityref().  If a translation is returned, it calls the method handle_data() with the translation; otherwise, it calls the method unknown_entityref(ref). The default entitydefs defines translations for &amp;, &apos, &gt;, &lt;, and &quot;.  Changed in version 2.5: Use convert_entityref() instead of hard-coding the conversion.     SGMLParser.convert_entityref(ref)\u00b6 Convert a named entity reference to a str value, or None.  The resulting value will not be parsed.  ref will be only the name of the entity. The default implementation looks for ref in the instance (or class) variable entitydefs which should be a mapping from entity names to corresponding translations.  If no translation is available for ref, this method returns None.  This method is called by the default handle_entityref() implementation and by the attribute value parser.  New in version 2.5.     SGMLParser.handle_comment(comment)\u00b6 This method is called when a comment is encountered.  The comment argument is a string containing the text between the <!-- and --> delimiters, but not the delimiters themselves.  For example, the comment <!--text--> will cause this method to be called with the argument 'text'.  The default method does nothing.    SGMLParser.handle_decl(data)\u00b6 Method called when an SGML declaration is read by the parser.  In practice, the DOCTYPE declaration is the only thing observed in HTML, but the parser does not discriminate among different (or broken) declarations.  Internal subsets in a DOCTYPE declaration are not supported.  The data parameter will be the entire contents of the declaration inside the <!...> markup.  The default implementation does nothing.    SGMLParser.report_unbalanced(tag)\u00b6 This method is called when an end tag is found which does not correspond to any open element.    SGMLParser.unknown_starttag(tag, attributes)\u00b6 This method is called to process an unknown start tag.  It is intended to be overridden by a derived class; the base class implementation does nothing.    SGMLParser.unknown_endtag(tag)\u00b6 This method is called to process an unknown end tag.  It is intended to be overridden by a derived class; the base class implementation does nothing.    SGMLParser.unknown_charref(ref)\u00b6 This method is called to process unresolvable numeric character references. Refer to handle_charref() to determine what is handled by default.  It is intended to be overridden by a derived class; the base class implementation does nothing.    SGMLParser.unknown_entityref(ref)\u00b6 This method is called to process an unknown entity reference.  It is intended to be overridden by a derived class; the base class implementation does nothing.  Apart from overriding or extending the methods listed above, derived classes may also define methods of the following form to define processing of specific tags. Tag names in the input stream are case independent; the tag occurring in method names must be in lower case:   SGMLParser.start_tag(attributes) This method is called to process an opening tag tag.  It has preference over do_tag().  The attributes argument has the same meaning as described for handle_starttag() above.    SGMLParser.do_tag(attributes) This method is called to process an opening tag tag  for which no start_tag() method is defined.   The attributes argument has the same meaning as described for handle_starttag() above.    SGMLParser.end_tag() This method is called to process a closing tag tag.  Note that the parser maintains a stack of open elements for which no end tag has been found yet.  Only tags processed by start_tag() are pushed on this stack.  Definition of an end_tag() method is optional for these tags.  For tags processed by do_tag() or by unknown_tag(), no end_tag() method must be defined; if defined, it will not be used.  If both start_tag() and do_tag() methods exist for a tag, the start_tag() method takes precedence."},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser","title":"sgmllib.SGMLParser","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.close","title":"sgmllib.SGMLParser.close","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.convert_charref","title":"sgmllib.SGMLParser.convert_charref","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.convert_codepoint","title":"sgmllib.SGMLParser.convert_codepoint","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.convert_entityref","title":"sgmllib.SGMLParser.convert_entityref","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.feed","title":"sgmllib.SGMLParser.feed","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.get_starttag_text","title":"sgmllib.SGMLParser.get_starttag_text","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.handle_charref","title":"sgmllib.SGMLParser.handle_charref","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.handle_comment","title":"sgmllib.SGMLParser.handle_comment","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.handle_data","title":"sgmllib.SGMLParser.handle_data","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.handle_decl","title":"sgmllib.SGMLParser.handle_decl","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.handle_endtag","title":"sgmllib.SGMLParser.handle_endtag","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.handle_entityref","title":"sgmllib.SGMLParser.handle_entityref","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.handle_starttag","title":"sgmllib.SGMLParser.handle_starttag","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.report_unbalanced","title":"sgmllib.SGMLParser.report_unbalanced","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.reset","title":"sgmllib.SGMLParser.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.setliteral","title":"sgmllib.SGMLParser.setliteral","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.setnomoretags","title":"sgmllib.SGMLParser.setnomoretags","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.unknown_charref","title":"sgmllib.SGMLParser.unknown_charref","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.unknown_endtag","title":"sgmllib.SGMLParser.unknown_endtag","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.unknown_entityref","title":"sgmllib.SGMLParser.unknown_entityref","description":""},{"url":"http:\/\/docs.python.org\/library\/sgmllib.html#sgmllib.SGMLParser.unknown_starttag","title":"sgmllib.SGMLParser.unknown_starttag","description":""},{"url":"http:\/\/docs.python.org\/library\/htmllib.html","title":"htmllib","description":"19.3. htmllib &#8212; A parser for HTML documents\u00b6  Deprecated since version 2.6: The htmllib module has been removed in Python 3.0. This module defines a class which can serve as a base for parsing text files formatted in the HyperText Mark-up Language (HTML).  The class is not directly concerned with I\/O &#8212; it must be provided with input in string form via a method, and makes calls to methods of a &#8220;formatter&#8221; object in order to produce output.  The HTMLParser class is designed to be used as a base class for other classes in order to add functionality, and allows most of its methods to be extended or overridden.  In turn, this class is derived from and extends the SGMLParser class defined in module sgmllib.  The HTMLParser implementation supports the HTML 2.0 language as described in RFC 1866.  Two implementations of formatter objects are provided in the formatter module; refer to the documentation for that module for information on the formatter interface. The following is a summary of the interface defined by sgmllib.SGMLParser:  The interface to feed data to an instance is through the feed() method, which takes a string argument.  This can be called with as little or as much text at a time as desired; p.feed(a); p.feed(b) has the same effect as p.feed(a+b).  When the data contains complete HTML markup constructs, these are processed immediately; incomplete constructs are saved in a buffer.  To force processing of all unprocessed data, call the close() method. For example, to parse the entire contents of a file, use: parser.feed(open(&#39;myfile.html&#39;).read()) parser.close()    The interface to define semantics for HTML tags is very simple: derive a class and define methods called start_tag(), end_tag(), or do_tag(). The parser will call these at appropriate moments: start_tag() or do_tag() is called when an opening tag of the form <tag ...> is encountered; end_tag() is called when a closing tag of the form <tag> is encountered.  If an opening tag requires a corresponding closing tag, like <H1> ... <\/H1>, the class should define the start_tag() method; if a tag requires no closing tag, like <P>, the class should define the do_tag() method.   The module defines a parser class and an exception:   class htmllib.HTMLParser(formatter)\u00b6 This is the basic HTML parser class.  It supports all entity names required by the XHTML 1.0 Recommendation (http:\/\/www.w3.org\/TR\/xhtml1).   It also defines handlers for all HTML 2.0 and many HTML 3.0 and 3.2 elements.    exception htmllib.HTMLParseError\u00b6 Exception raised by the HTMLParser class when it encounters an error while parsing.  New in version 2.4.    See also  Module formatter Interface definition for transforming an abstract flow of formatting events into specific output events on writer objects. Module HTMLParser Alternate HTML parser that offers a slightly lower-level view of the input, but is designed to work with XHTML, and does not implement some of the SGML syntax not used in &#8220;HTML as deployed&#8221; and which isn&#8217;t legal for XHTML. Module htmlentitydefs Definition of replacement text for XHTML 1.0  entities. Module sgmllib Base class for HTMLParser.    19.3.1. HTMLParser Objects\u00b6 In addition to tag methods, the HTMLParser class provides some additional methods and instance variables for use within tag methods.   HTMLParser.formatter\u00b6 This is the formatter instance associated with the parser.    HTMLParser.nofill\u00b6 Boolean flag which should be true when whitespace should not be collapsed, or false when it should be.  In general, this should only be true when character data is to be treated as &#8220;preformatted&#8221; text, as within a <PRE> element. The default value is false.  This affects the operation of handle_data() and save_end().    HTMLParser.anchor_bgn(href, name, type)\u00b6 This method is called at the start of an anchor region.  The arguments correspond to the attributes of the <A> tag with the same names.  The default implementation maintains a list of hyperlinks (defined by the HREF attribute for <A> tags) within the document.  The list of hyperlinks is available as the data attribute anchorlist.    HTMLParser.anchor_end()\u00b6 This method is called at the end of an anchor region.  The default implementation adds a textual footnote marker using an index into the list of hyperlinks created by anchor_bgn().    HTMLParser.handle_image(source, alt[, ismap[, align[, width[, height]]]])\u00b6 This method is called to handle images.  The default implementation simply passes the alt value to the handle_data() method.    HTMLParser.save_bgn()\u00b6 Begins saving character data in a buffer instead of sending it to the formatter object.  Retrieve the stored data via save_end(). Use of the save_bgn() \/ save_end() pair may not be nested.    HTMLParser.save_end()\u00b6 Ends buffering character data and returns all data saved since the preceding call to save_bgn().  If the nofill flag is false, whitespace is collapsed to single spaces.  A call to this method without a preceding call to save_bgn() will raise a TypeError exception.    19.4. htmlentitydefs &#8212; Definitions of HTML general entities\u00b6  Note The htmlentitydefs module has been renamed to html.entities in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  Source code: Lib\/htmlentitydefs.py  This module defines three dictionaries, name2codepoint, codepoint2name, and entitydefs. entitydefs is used by the htmllib module to provide the entitydefs attribute of the HTMLParser class.  The definition provided here contains all the entities defined by XHTML 1.0  that can be handled using simple textual substitution in the Latin-1 character set (ISO-8859-1).   htmlentitydefs.entitydefs\u00b6 A dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1.    htmlentitydefs.name2codepoint\u00b6 A dictionary that maps HTML entity names to the Unicode codepoints.  New in version 2.3.     htmlentitydefs.codepoint2name\u00b6 A dictionary that maps Unicode codepoints to HTML entity names.  New in version 2.3."},{"url":"http:\/\/docs.python.org\/library\/htmllib.html#htmllib.HTMLParser","title":"htmllib.HTMLParser","description":""},{"url":"http:\/\/docs.python.org\/library\/htmllib.html#htmllib.HTMLParser.anchor_bgn","title":"htmllib.HTMLParser.anchor_bgn","description":""},{"url":"http:\/\/docs.python.org\/library\/htmllib.html#htmllib.HTMLParser.anchor_end","title":"htmllib.HTMLParser.anchor_end","description":""},{"url":"http:\/\/docs.python.org\/library\/htmllib.html#htmllib.HTMLParser.handle_image","title":"htmllib.HTMLParser.handle_image","description":""},{"url":"http:\/\/docs.python.org\/library\/htmllib.html#htmllib.HTMLParser.save_bgn","title":"htmllib.HTMLParser.save_bgn","description":""},{"url":"http:\/\/docs.python.org\/library\/htmllib.html#htmllib.HTMLParser.save_end","title":"htmllib.HTMLParser.save_end","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html","title":"xml.dom.pulldom","description":"19.8. xml.dom.pulldom &#8212; Support for building partial DOM trees\u00b6  New in version 2.0. Source code: Lib\/xml\/dom\/pulldom.py  xml.dom.pulldom allows building only selected portions of a Document Object Model representation of a document from SAX events.   class xml.dom.pulldom.PullDOM([documentFactory])\u00b6 xml.sax.handler.ContentHandler implementation that ...    class xml.dom.pulldom.DOMEventStream(stream, parser, bufsize)\u00b6 ...    class xml.dom.pulldom.SAX2DOM([documentFactory])\u00b6 xml.sax.handler.ContentHandler implementation that ...    xml.dom.pulldom.parse(stream_or_string[, parser[, bufsize]])\u00b6 ...    xml.dom.pulldom.parseString(string[, parser])\u00b6 ...    xml.dom.pulldom.default_bufsize\u00b6 Default value for the bufsize parameter to parse().  Changed in version 2.1: The value of this variable can be changed before calling parse() and the new value will take effect.    19.8.1. DOMEventStream Objects\u00b6   DOMEventStream.getEvent()\u00b6 ...    DOMEventStream.expandNode(node)\u00b6 ...    DOMEventStream.reset()\u00b6 ..."},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html#xml.dom.pulldom_xml.dom.pulldom.DOMEventStream","title":"xml.dom.pulldom.DOMEventStream","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html#xml.dom.pulldom_xml.dom.pulldom.DOMEventStream.expandNode","title":"xml.dom.pulldom.DOMEventStream.expandNode","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html#xml.dom.pulldom_xml.dom.pulldom.DOMEventStream.getEvent","title":"xml.dom.pulldom.DOMEventStream.getEvent","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html#xml.dom.pulldom_xml.dom.pulldom.DOMEventStream.reset","title":"xml.dom.pulldom.DOMEventStream.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html#xml.dom.pulldom_xml.dom.pulldom.parse","title":"xml.dom.pulldom.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html#xml.dom.pulldom_xml.dom.pulldom.parseString","title":"xml.dom.pulldom.parseString","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html#xml.dom.pulldom_xml.dom.pulldom.PullDOM","title":"xml.dom.pulldom.PullDOM","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.pulldom.html#xml.dom.pulldom_xml.dom.pulldom.SAX2DOM","title":"xml.dom.pulldom.SAX2DOM","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html","title":"xml.dom","description":"19.6. xml.dom &#8212; The Document Object Model API\u00b6  New in version 2.0. The Document Object Model, or &#8220;DOM,&#8221; is a cross-language API from the World Wide Web Consortium (W3C) for accessing and modifying XML documents.  A DOM implementation presents an XML document as a tree structure, or allows client code to build such a structure from scratch.  It then gives access to the structure through a set of objects which provided well-known interfaces. The DOM is extremely useful for random-access applications.  SAX only allows you a view of one bit of the document at a time.  If you are looking at one SAX element, you have no access to another.  If you are looking at a text node, you have no access to a containing element. When you write a SAX application, you need to keep track of your program&#8217;s position in the document somewhere in your own code.  SAX does not do it for you.  Also, if you need to look ahead in the XML document, you are just out of luck. Some applications are simply impossible in an event driven model with no access to a tree.  Of course you could build some sort of tree yourself in SAX events, but the DOM allows you to avoid writing that code.  The DOM is a standard tree representation for XML data. The Document Object Model is being defined by the W3C in stages, or &#8220;levels&#8221; in their terminology.  The Python mapping of the API is substantially based on the DOM Level 2 recommendation. DOM applications typically start by parsing some XML into a DOM.  How this is accomplished is not covered at all by DOM Level 1, and Level 2 provides only limited improvements: There is a DOMImplementation object class which provides access to Document creation methods, but no way to access an XML reader\/parser\/Document builder in an implementation-independent way. There is also no well-defined way to access these methods without an existing Document object.  In Python, each DOM implementation will provide a function getDOMImplementation(). DOM Level 3 adds a Load\/Store specification, which defines an interface to the reader, but this is not yet available in the Python standard library. Once you have a DOM document object, you can access the parts of your XML document through its properties and methods.  These properties are defined in the DOM specification; this portion of the reference manual describes the interpretation of the specification in Python. The specification provided by the W3C defines the DOM API for Java, ECMAScript, and OMG IDL.  The Python mapping defined here is based in large part on the IDL version of the specification, but strict compliance is not required (though implementations are free to support the strict mapping from IDL).  See section Conformance for a detailed discussion of mapping requirements.  See also  Document Object Model (DOM) Level 2 Specification The W3C recommendation upon which the Python DOM API is based. Document Object Model (DOM) Level 1 Specification The W3C recommendation for the DOM supported by xml.dom.minidom. Python Language Mapping Specification This specifies the mapping from OMG IDL to Python.    19.6.1. Module Contents\u00b6 The xml.dom contains the following functions:   xml.dom.registerDOMImplementation(name, factory)\u00b6 Register the factory function with the name name.  The factory function should return an object which implements the DOMImplementation interface.  The factory function can return the same object every time, or a new one for each call, as appropriate for the specific implementation (e.g. if that implementation supports some customization).    xml.dom.getDOMImplementation([name[, features]])\u00b6 Return a suitable DOM implementation. The name is either well-known, the module name of a DOM implementation, or None. If it is not None, imports the corresponding module and returns a DOMImplementation object if the import succeeds.  If no name is given, and if the environment variable PYTHON_DOM is set, this variable is used to find the implementation. If name is not given, this examines the available implementations to find one with the required feature set.  If no implementation can be found, raise an ImportError.  The features list must be a sequence of (feature, version) pairs which are passed to the hasFeature() method on available DOMImplementation objects.   Some convenience constants are also provided:   xml.dom.EMPTY_NAMESPACE\u00b6 The value used to indicate that no namespace is associated with a node in the DOM.  This is typically found as the namespaceURI of a node, or used as the namespaceURI parameter to a namespaces-specific method.  New in version 2.2.     xml.dom.XML_NAMESPACE\u00b6 The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4).  New in version 2.2.     xml.dom.XMLNS_NAMESPACE\u00b6 The namespace URI for namespace declarations, as defined by Document Object Model (DOM) Level 2 Core Specification (section 1.1.8).  New in version 2.2.     xml.dom.XHTML_NAMESPACE\u00b6 The URI of the XHTML namespace as defined by XHTML 1.0: The Extensible HyperText Markup Language (section 3.1.1).  New in version 2.2.   In addition, xml.dom contains a base Node class and the DOM exception classes.  The Node class provided by this module does not implement any of the methods or attributes defined by the DOM specification; concrete DOM implementations must provide those.  The Node class provided as part of this module does provide the constants used for the nodeType attribute on concrete Node objects; they are located within the class rather than at the module level to conform with the DOM specifications.   19.6.2. Objects in the DOM\u00b6 The definitive documentation for the DOM is the DOM specification from the W3C. Note that DOM attributes may also be manipulated as nodes instead of as simple strings.  It is fairly rare that you must do this, however, so this usage is not yet documented.        Interface Section Purpose    DOMImplementation DOMImplementation Objects Interface to the underlying implementation.  Node Node Objects Base interface for most objects in a document.  NodeList NodeList Objects Interface for a sequence of nodes.  DocumentType DocumentType Objects Information about the declarations needed to process a document.  Document Document Objects Object which represents an entire document.  Element Element Objects Element nodes in the document hierarchy.  Attr Attr Objects Attribute value nodes on element nodes.  Comment Comment Objects Representation of comments in the source document.  Text Text and CDATASection Objects Nodes containing textual content from the document.  ProcessingInstruction ProcessingInstruction Objects Processing instruction representation.    An additional section describes the exceptions defined for working with the DOM in Python.  19.6.2.1. DOMImplementation Objects\u00b6 The DOMImplementation interface provides a way for applications to determine the availability of particular features in the DOM they are using. DOM Level 2 added the ability to create new Document and DocumentType objects using the DOMImplementation as well.   DOMImplementation.hasFeature(feature, version)\u00b6 Return true if the feature identified by the pair of strings feature and version is implemented.    DOMImplementation.createDocument(namespaceUri, qualifiedName, doctype)\u00b6 Return a new Document object (the root of the DOM), with a child Element object having the given namespaceUri and qualifiedName. The doctype must be a DocumentType object created by createDocumentType(), or None. In the Python DOM API, the first two arguments can also be None in order to indicate that no Element child is to be created.    DOMImplementation.createDocumentType(qualifiedName, publicId, systemId)\u00b6 Return a new DocumentType object that encapsulates the given qualifiedName, publicId, and systemId strings, representing the information contained in an XML document type declaration.    19.6.2.2. Node Objects\u00b6 All of the components of an XML document are subclasses of Node.   Node.nodeType\u00b6 An integer representing the node type.  Symbolic constants for the types are on the Node object: ELEMENT_NODE, ATTRIBUTE_NODE, TEXT_NODE, CDATA_SECTION_NODE, ENTITY_NODE, PROCESSING_INSTRUCTION_NODE, COMMENT_NODE, DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE. This is a read-only attribute.    Node.parentNode\u00b6 The parent of the current node, or None for the document node. The value is always a Node object or None.  For Element nodes, this will be the parent element, except for the root element, in which case it will be the Document object. For Attr nodes, this is always None. This is a read-only attribute.    Node.attributes\u00b6 A NamedNodeMap of attribute objects.  Only elements have actual values for this; others provide None for this attribute. This is a read-only attribute.    Node.previousSibling\u00b6 The node that immediately precedes this one with the same parent.  For instance the element with an end-tag that comes just before the self element&#8217;s start-tag.  Of course, XML documents are made up of more than just elements so the previous sibling could be text, a comment, or something else. If this node is the first child of the parent, this attribute will be None. This is a read-only attribute.    Node.nextSibling\u00b6 The node that immediately follows this one with the same parent.  See also previousSibling.  If this is the last child of the parent, this attribute will be None. This is a read-only attribute.    Node.childNodes\u00b6 A list of nodes contained within this node. This is a read-only attribute.    Node.firstChild\u00b6 The first child of the node, if there are any, or None. This is a read-only attribute.    Node.lastChild\u00b6 The last child of the node, if there are any, or None. This is a read-only attribute.    Node.localName\u00b6 The part of the tagName following the colon if there is one, else the entire tagName.  The value is a string.    Node.prefix\u00b6 The part of the tagName preceding the colon if there is one, else the empty string.  The value is a string, or None    Node.namespaceURI\u00b6 The namespace associated with the element name.  This will be a string or None.  This is a read-only attribute.    Node.nodeName\u00b6 This has a different meaning for each node type; see the DOM specification for details.  You can always get the information you would get here from another property such as the tagName property for elements or the name property for attributes. For all node types, the value of this attribute will be either a string or None.  This is a read-only attribute.    Node.nodeValue\u00b6 This has a different meaning for each node type; see the DOM specification for details.  The situation is similar to that with nodeName.  The value is a string or None.    Node.hasAttributes()\u00b6 Returns true if the node has any attributes.    Node.hasChildNodes()\u00b6 Returns true if the node has any child nodes.    Node.isSameNode(other)\u00b6 Returns true if other refers to the same node as this node. This is especially useful for DOM implementations which use any sort of proxy architecture (because more than one object can refer to the same node).  Note This is based on a proposed DOM Level 3 API which is still in the &#8220;working draft&#8221; stage, but this particular interface appears uncontroversial.  Changes from the W3C will not necessarily affect this method in the Python DOM interface (though any new W3C API for this would also be supported).      Node.appendChild(newChild)\u00b6 Add a new child node to this node at the end of the list of children, returning newChild. If the node was already in in the tree, it is removed first.    Node.insertBefore(newChild, refChild)\u00b6 Insert a new child node before an existing child.  It must be the case that refChild is a child of this node; if not, ValueError is raised. newChild is returned. If refChild is None, it inserts newChild at the end of the children&#8217;s list.    Node.removeChild(oldChild)\u00b6 Remove a child node.  oldChild must be a child of this node; if not, ValueError is raised.  oldChild is returned on success.  If oldChild will not be used further, its unlink() method should be called.    Node.replaceChild(newChild, oldChild)\u00b6 Replace an existing node with a new node. It must be the case that  oldChild is a child of this node; if not, ValueError is raised.    Node.normalize()\u00b6 Join adjacent text nodes so that all stretches of text are stored as single Text instances.  This simplifies processing text from a DOM tree for many applications.  New in version 2.1.     Node.cloneNode(deep)\u00b6 Clone this node.  Setting deep means to clone all child nodes as well.  This returns the clone.    19.6.2.3. NodeList Objects\u00b6 A NodeList represents a sequence of nodes.  These objects are used in two ways in the DOM Core recommendation:  the Element objects provides one as its list of child nodes, and the getElementsByTagName() and getElementsByTagNameNS() methods of Node return objects with this interface to represent query results. The DOM Level 2 recommendation defines one method and one attribute for these objects:   NodeList.item(i)\u00b6 Return the i&#8216;th item from the sequence, if there is one, or None.  The index i is not allowed to be less then zero or greater than or equal to the length of the sequence.    NodeList.length\u00b6 The number of nodes in the sequence.  In addition, the Python DOM interface requires that some additional support is provided to allow NodeList objects to be used as Python sequences.  All NodeList implementations must include support for __len__() and __getitem__(); this allows iteration over the NodeList in for statements and proper support for the len() built-in function. If a DOM implementation supports modification of the document, the NodeList implementation must also support the __setitem__() and __delitem__() methods.   19.6.2.4. DocumentType Objects\u00b6 Information about the notations and entities declared by a document (including the external subset if the parser uses it and can provide the information) is available from a DocumentType object.  The DocumentType for a document is available from the Document object&#8217;s doctype attribute; if there is no DOCTYPE declaration for the document, the document&#8217;s doctype attribute will be set to None instead of an instance of this interface. DocumentType is a specialization of Node, and adds the following attributes:   DocumentType.publicId\u00b6 The public identifier for the external subset of the document type definition. This will be a string or None.    DocumentType.systemId\u00b6 The system identifier for the external subset of the document type definition. This will be a URI as a string, or None.    DocumentType.internalSubset\u00b6 A string giving the complete internal subset from the document. This does not include the brackets which enclose the subset.  If the document has no internal subset, this should be None.    DocumentType.name\u00b6 The name of the root element as given in the DOCTYPE declaration, if present.    DocumentType.entities\u00b6 This is a NamedNodeMap giving the definitions of external entities. For entity names defined more than once, only the first definition is provided (others are ignored as required by the XML recommendation).  This may be None if the information is not provided by the parser, or if no entities are defined.    DocumentType.notations\u00b6 This is a NamedNodeMap giving the definitions of notations. For notation names defined more than once, only the first definition is provided (others are ignored as required by the XML recommendation).  This may be None if the information is not provided by the parser, or if no notations are defined.    19.6.2.5. Document Objects\u00b6 A Document represents an entire XML document, including its constituent elements, attributes, processing instructions, comments etc.  Remember that it inherits properties from Node.   Document.documentElement\u00b6 The one and only root element of the document.    Document.createElement(tagName)\u00b6 Create and return a new element node.  The element is not inserted into the document when it is created.  You need to explicitly insert it with one of the other methods such as insertBefore() or appendChild().    Document.createElementNS(namespaceURI, tagName)\u00b6 Create and return a new element with a namespace.  The tagName may have a prefix.  The element is not inserted into the document when it is created.  You need to explicitly insert it with one of the other methods such as insertBefore() or appendChild().    Document.createTextNode(data)\u00b6 Create and return a text node containing the data passed as a parameter.  As with the other creation methods, this one does not insert the node into the tree.    Document.createComment(data)\u00b6 Create and return a comment node containing the data passed as a parameter.  As with the other creation methods, this one does not insert the node into the tree.    Document.createProcessingInstruction(target, data)\u00b6 Create and return a processing instruction node containing the target and data passed as parameters.  As with the other creation methods, this one does not insert the node into the tree.    Document.createAttribute(name)\u00b6 Create and return an attribute node.  This method does not associate the attribute node with any particular element.  You must use setAttributeNode() on the appropriate Element object to use the newly created attribute instance.    Document.createAttributeNS(namespaceURI, qualifiedName)\u00b6 Create and return an attribute node with a namespace.  The tagName may have a prefix.  This method does not associate the attribute node with any particular element.  You must use setAttributeNode() on the appropriate Element object to use the newly created attribute instance.    Document.getElementsByTagName(tagName)\u00b6 Search for all descendants (direct children, children&#8217;s children, etc.) with a particular element type name.    Document.getElementsByTagNameNS(namespaceURI, localName)\u00b6 Search for all descendants (direct children, children&#8217;s children, etc.) with a particular namespace URI and localname.  The localname is the part of the namespace after the prefix.    19.6.2.6. Element Objects\u00b6 Element is a subclass of Node, so inherits all the attributes of that class.   Element.tagName\u00b6 The element type name.  In a namespace-using document it may have colons in it. The value is a string.    Element.getElementsByTagName(tagName)\u00b6 Same as equivalent method in the Document class.    Element.getElementsByTagNameNS(namespaceURI, localName)\u00b6 Same as equivalent method in the Document class.    Element.hasAttribute(name)\u00b6 Returns true if the element has an attribute named by name.    Element.hasAttributeNS(namespaceURI, localName)\u00b6 Returns true if the element has an attribute named by namespaceURI and localName.    Element.getAttribute(name)\u00b6 Return the value of the attribute named by name as a string. If no such attribute exists, an empty string is returned, as if the attribute had no value.    Element.getAttributeNode(attrname)\u00b6 Return the Attr node for the attribute named by attrname.    Element.getAttributeNS(namespaceURI, localName)\u00b6 Return the value of the attribute named by namespaceURI and localName as a string. If no such attribute exists, an empty string is returned, as if the attribute had no value.    Element.getAttributeNodeNS(namespaceURI, localName)\u00b6 Return an attribute value as a node, given a namespaceURI and localName.    Element.removeAttribute(name)\u00b6 Remove an attribute by name.  If there is no matching attribute, a NotFoundErr is raised.    Element.removeAttributeNode(oldAttr)\u00b6 Remove and return oldAttr from the attribute list, if present. If oldAttr is not present, NotFoundErr is raised.    Element.removeAttributeNS(namespaceURI, localName)\u00b6 Remove an attribute by name.  Note that it uses a localName, not a qname.  No exception is raised if there is no matching attribute.    Element.setAttribute(name, value)\u00b6 Set an attribute value from a string.    Element.setAttributeNode(newAttr)\u00b6 Add a new attribute node to the element, replacing an existing attribute if necessary if the name attribute matches.  If a replacement occurs, the old attribute node will be returned.  If newAttr is already in use, InuseAttributeErr will be raised.    Element.setAttributeNodeNS(newAttr)\u00b6 Add a new attribute node to the element, replacing an existing attribute if necessary if the namespaceURI and localName attributes match. If a replacement occurs, the old attribute node will be returned.  If newAttr is already in use, InuseAttributeErr will be raised.    Element.setAttributeNS(namespaceURI, qname, value)\u00b6 Set an attribute value from a string, given a namespaceURI and a qname. Note that a qname is the whole attribute name.  This is different than above.    19.6.2.7. Attr Objects\u00b6 Attr inherits from Node, so inherits all its attributes.   Attr.name\u00b6 The attribute name. In a namespace-using document it may include a colon.    Attr.localName\u00b6 The part of the name following the colon if there is one, else the entire name. This is a read-only attribute.    Attr.prefix\u00b6 The part of the name preceding the colon if there is one, else the empty string.    Attr.value\u00b6 The text value of the attribute.  This is a synonym for the nodeValue attribute.    19.6.2.8. NamedNodeMap Objects\u00b6 NamedNodeMap does not inherit from Node.   NamedNodeMap.length\u00b6 The length of the attribute list.    NamedNodeMap.item(index)\u00b6 Return an attribute with a particular index.  The order you get the attributes in is arbitrary but will be consistent for the life of a DOM.  Each item is an attribute node.  Get its value with the value attribute.  There are also experimental methods that give this class more mapping behavior. You can use them or you can use the standardized getAttribute*() family of methods on the Element objects.   19.6.2.9. Comment Objects\u00b6 Comment represents a comment in the XML document.  It is a subclass of Node, but cannot have child nodes.   Comment.data\u00b6 The content of the comment as a string.  The attribute contains all characters between the leading <!-- and trailing -->, but does not include them.    19.6.2.10. Text and CDATASection Objects\u00b6 The Text interface represents text in the XML document.  If the parser and DOM implementation support the DOM&#8217;s XML extension, portions of the text enclosed in CDATA marked sections are stored in CDATASection objects. These two interfaces are identical, but provide different values for the nodeType attribute. These interfaces extend the Node interface.  They cannot have child nodes.   Text.data\u00b6 The content of the text node as a string.   Note The use of a CDATASection node does not indicate that the node represents a complete CDATA marked section, only that the content of the node was part of a CDATA section.  A single CDATA section may be represented by more than one node in the document tree.  There is no way to determine whether two adjacent CDATASection nodes represent different CDATA marked sections.    19.6.2.11. ProcessingInstruction Objects\u00b6 Represents a processing instruction in the XML document; this inherits from the Node interface and cannot have child nodes.   ProcessingInstruction.target\u00b6 The content of the processing instruction up to the first whitespace character. This is a read-only attribute.    ProcessingInstruction.data\u00b6 The content of the processing instruction following the first whitespace character.    19.6.2.12. Exceptions\u00b6  New in version 2.1. The DOM Level 2 recommendation defines a single exception, DOMException, and a number of constants that allow applications to determine what sort of error occurred. DOMException instances carry a code attribute that provides the appropriate value for the specific exception. The Python DOM interface provides the constants, but also expands the set of exceptions so that a specific exception exists for each of the exception codes defined by the DOM.  The implementations must raise the appropriate specific exception, each of which carries the appropriate value for the code attribute.   exception xml.dom.DOMException\u00b6 Base exception class used for all specific DOM exceptions.  This exception class cannot be directly instantiated.    exception xml.dom.DomstringSizeErr\u00b6 Raised when a specified range of text does not fit into a string. This is not known to be used in the Python DOM implementations, but may be received from DOM implementations not written in Python.    exception xml.dom.HierarchyRequestErr\u00b6 Raised when an attempt is made to insert a node where the node type is not allowed.    exception xml.dom.IndexSizeErr\u00b6 Raised when an index or size parameter to a method is negative or exceeds the allowed values.    exception xml.dom.InuseAttributeErr\u00b6 Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document.    exception xml.dom.InvalidAccessErr\u00b6 Raised if a parameter or an operation is not supported on the underlying object.    exception xml.dom.InvalidCharacterErr\u00b6 This exception is raised when a string parameter contains a character that is not permitted in the context it&#8217;s being used in by the XML 1.0 recommendation. For example, attempting to create an Element node with a space in the element type name will cause this error to be raised.    exception xml.dom.InvalidModificationErr\u00b6 Raised when an attempt is made to modify the type of a node.    exception xml.dom.InvalidStateErr\u00b6 Raised when an attempt is made to use an object that is not defined or is no longer usable.    exception xml.dom.NamespaceErr\u00b6 If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised.    exception xml.dom.NotFoundErr\u00b6 Exception when a node does not exist in the referenced context.  For example, NamedNodeMap.removeNamedItem() will raise this if the node passed in does not exist in the map.    exception xml.dom.NotSupportedErr\u00b6 Raised when the implementation does not support the requested type of object or operation.    exception xml.dom.NoDataAllowedErr\u00b6 This is raised if data is specified for a node which does not support data.    exception xml.dom.NoModificationAllowedErr\u00b6 Raised on attempts to modify an object where modifications are not allowed (such as for read-only nodes).    exception xml.dom.SyntaxErr\u00b6 Raised when an invalid or illegal string is specified.    exception xml.dom.WrongDocumentErr\u00b6 Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other.  The exception codes defined in the DOM recommendation map to the exceptions described above according to this table:       Constant Exception    DOMSTRING_SIZE_ERR DomstringSizeErr  HIERARCHY_REQUEST_ERR HierarchyRequestErr  INDEX_SIZE_ERR IndexSizeErr  INUSE_ATTRIBUTE_ERR InuseAttributeErr  INVALID_ACCESS_ERR InvalidAccessErr  INVALID_CHARACTER_ERR InvalidCharacterErr  INVALID_MODIFICATION_ERR InvalidModificationErr  INVALID_STATE_ERR InvalidStateErr  NAMESPACE_ERR NamespaceErr  NOT_FOUND_ERR NotFoundErr  NOT_SUPPORTED_ERR NotSupportedErr  NO_DATA_ALLOWED_ERR NoDataAllowedErr  NO_MODIFICATION_ALLOWED_ERR NoModificationAllowedErr  SYNTAX_ERR SyntaxErr  WRONG_DOCUMENT_ERR WrongDocumentErr       19.6.3. Conformance\u00b6 This section describes the conformance requirements and relationships between the Python DOM API, the W3C DOM recommendations, and the OMG IDL mapping for Python.  19.6.3.1. Type Mapping\u00b6 The primitive IDL types used in the DOM specification are mapped to Python types according to the following table.       IDL Type Python Type    boolean IntegerType (with a value of 0 or 1)  int IntegerType  long int IntegerType  unsigned int IntegerType    Additionally, the DOMString defined in the recommendation is mapped to a Python string or Unicode string.  Applications should be able to handle Unicode whenever a string is returned from the DOM. The IDL null value is mapped to None, which may be accepted or provided by the implementation whenever null is allowed by the API.   19.6.3.2. Accessor Methods\u00b6 The mapping from OMG IDL to Python defines accessor functions for IDL attribute declarations in much the way the Java mapping does. Mapping the IDL declarations readonly attribute string someValue;          attribute string anotherValue;  yields three accessor functions:  a &#8220;get&#8221; method for someValue (_get_someValue()), and &#8220;get&#8221; and &#8220;set&#8221; methods for anotherValue (_get_anotherValue() and _set_anotherValue()).  The mapping, in particular, does not require that the IDL attributes are accessible as normal Python attributes:  object.someValue is not required to work, and may raise an AttributeError. The Python DOM API, however, does require that normal attribute access work. This means that the typical surrogates generated by Python IDL compilers are not likely to work, and wrapper objects may be needed on the client if the DOM objects are accessed via CORBA. While this does require some additional consideration for CORBA DOM clients, the implementers with experience using DOM over CORBA from Python do not consider this a problem.  Attributes that are declared readonly may not restrict write access in all DOM implementations. In the Python DOM API, accessor functions are not required.  If provided, they should take the form defined by the Python IDL mapping, but these methods are considered unnecessary since the attributes are accessible directly from Python. &#8220;Set&#8221; accessors should never be provided for readonly attributes. The IDL definitions do not fully embody the requirements of the W3C DOM API, such as the notion of certain objects, such as the return value of getElementsByTagName(), being &#8220;live&#8221;.  The Python DOM API does not require implementations to enforce such requirements."},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.createAttribute","title":"xml.dom.Document.createAttribute","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.createAttributeNS","title":"xml.dom.Document.createAttributeNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.createComment","title":"xml.dom.Document.createComment","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.createElement","title":"xml.dom.Document.createElement","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.createElementNS","title":"xml.dom.Document.createElementNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.createProcessingInstruction","title":"xml.dom.Document.createProcessingInstruction","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.createTextNode","title":"xml.dom.Document.createTextNode","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.getElementsByTagName","title":"xml.dom.Document.getElementsByTagName","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Document.getElementsByTagNameNS","title":"xml.dom.Document.getElementsByTagNameNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.DOMImplementation.createDocument","title":"xml.dom.DOMImplementation.createDocument","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.DOMImplementation.createDocumentType","title":"xml.dom.DOMImplementation.createDocumentType","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.DOMImplementation.hasFeature","title":"xml.dom.DOMImplementation.hasFeature","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.getAttribute","title":"xml.dom.Element.getAttribute","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.getAttributeNode","title":"xml.dom.Element.getAttributeNode","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.getAttributeNodeNS","title":"xml.dom.Element.getAttributeNodeNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.getAttributeNS","title":"xml.dom.Element.getAttributeNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.getElementsByTagName","title":"xml.dom.Element.getElementsByTagName","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.getElementsByTagNameNS","title":"xml.dom.Element.getElementsByTagNameNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.hasAttribute","title":"xml.dom.Element.hasAttribute","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.hasAttributeNS","title":"xml.dom.Element.hasAttributeNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.removeAttribute","title":"xml.dom.Element.removeAttribute","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.removeAttributeNode","title":"xml.dom.Element.removeAttributeNode","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.removeAttributeNS","title":"xml.dom.Element.removeAttributeNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.setAttribute","title":"xml.dom.Element.setAttribute","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.setAttributeNode","title":"xml.dom.Element.setAttributeNode","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.setAttributeNodeNS","title":"xml.dom.Element.setAttributeNodeNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Element.setAttributeNS","title":"xml.dom.Element.setAttributeNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.getDOMImplementation","title":"xml.dom.getDOMImplementation","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.NamedNodeMap.item","title":"xml.dom.NamedNodeMap.item","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.appendChild","title":"xml.dom.Node.appendChild","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.cloneNode","title":"xml.dom.Node.cloneNode","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.hasAttributes","title":"xml.dom.Node.hasAttributes","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.hasChildNodes","title":"xml.dom.Node.hasChildNodes","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.insertBefore","title":"xml.dom.Node.insertBefore","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.isSameNode","title":"xml.dom.Node.isSameNode","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.normalize","title":"xml.dom.Node.normalize","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.removeChild","title":"xml.dom.Node.removeChild","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.Node.replaceChild","title":"xml.dom.Node.replaceChild","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.NodeList.item","title":"xml.dom.NodeList.item","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.html#xml.dom_xml.dom.registerDOMImplementation","title":"xml.dom.registerDOMImplementation","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.html","title":"xml.sax","description":"19.9. xml.sax &#8212; Support for SAX2 parsers\u00b6  New in version 2.0. The xml.sax package provides a number of modules which implement the Simple API for XML (SAX) interface for Python.  The package itself provides the SAX exceptions and the convenience functions which will be most used by users of the SAX API. The convenience functions are:   xml.sax.make_parser([parser_list])\u00b6 Create and return a SAX XMLReader object.  The first parser found will be used.  If parser_list is provided, it must be a sequence of strings which name modules that have a function named create_parser().  Modules listed in parser_list will be used before modules in the default list of parsers.    xml.sax.parse(filename_or_stream, handler[, error_handler])\u00b6 Create a SAX parser and use it to parse a document.  The document, passed in as filename_or_stream, can be a filename or a file object.  The handler parameter needs to be a SAX ContentHandler instance.  If error_handler is given, it must be a SAX ErrorHandler instance; if omitted,  SAXParseException will be raised on all errors.  There is no return value; all work must be done by the handler passed in.    xml.sax.parseString(string, handler[, error_handler])\u00b6 Similar to parse(), but parses from a buffer string received as a parameter.  A typical SAX application uses three kinds of objects: readers, handlers and input sources.  &#8220;Reader&#8221; in this context is another term for parser, i.e. some piece of code that reads the bytes or characters from the input source, and produces a sequence of events. The events then get distributed to the handler objects, i.e. the reader invokes a method on the handler.  A SAX application must therefore obtain a reader object, create or open the input sources, create the handlers, and connect these objects all together.  As the final step of preparation, the reader is called to parse the input. During parsing, methods on the handler objects are called based on structural and syntactic events from the input data. For these objects, only the interfaces are relevant; they are normally not instantiated by the application itself.  Since Python does not have an explicit notion of interface, they are formally introduced as classes, but applications may use implementations which do not inherit from the provided classes.  The InputSource, Locator, Attributes, AttributesNS, and XMLReader interfaces are defined in the module xml.sax.xmlreader.  The handler interfaces are defined in xml.sax.handler.  For convenience, InputSource (which is often instantiated directly) and the handler classes are also available from xml.sax.  These interfaces are described below. In addition to these classes, xml.sax provides the following exception classes.   exception xml.sax.SAXException(msg[, exception])\u00b6 Encapsulate an XML error or warning.  This class can contain basic error or warning information from either the XML parser or the application: it can be subclassed to provide additional functionality or to add localization.  Note that although the handlers defined in the ErrorHandler interface receive instances of this exception, it is not required to actually raise the exception &#8212; it is also useful as a container for information. When instantiated, msg should be a human-readable description of the error. The optional exception parameter, if given, should be None or an exception that was caught by the parsing code and is being passed along as information. This is the base class for the other SAX exception classes.     exception xml.sax.SAXParseException(msg, exception, locator)\u00b6 Subclass of SAXException raised on parse errors. Instances of this class are passed to the methods of the SAX ErrorHandler interface to provide information about the parse error.  This class supports the SAX Locator interface as well as the SAXException interface.    exception xml.sax.SAXNotRecognizedException(msg[, exception])\u00b6 Subclass of SAXException raised when a SAX XMLReader is confronted with an unrecognized feature or property.  SAX applications and extensions may use this class for similar purposes.    exception xml.sax.SAXNotSupportedException(msg[, exception])\u00b6 Subclass of SAXException raised when a SAX XMLReader is asked to enable a feature that is not supported, or to set a property to a value that the implementation does not support.  SAX applications and extensions may use this class for similar purposes.   See also  SAX: The Simple API for XML This site is the focal point for the definition of the SAX API.  It provides a Java implementation and online documentation.  Links to implementations and historical information are also available. Module xml.sax.handler Definitions of the interfaces for application-provided objects. Module xml.sax.saxutils Convenience functions for use in SAX applications. Module xml.sax.xmlreader Definitions of the interfaces for parser-provided objects.    19.9.1. SAXException Objects\u00b6 The SAXException exception class supports the following methods:   SAXException.getMessage()\u00b6 Return a human-readable message describing the error condition.    SAXException.getException()\u00b6 Return an encapsulated exception object, or None."},{"url":"http:\/\/docs.python.org\/library\/xml.sax.html#xml.sax_xml.sax.make_parser","title":"xml.sax.make_parser","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.html#xml.sax_xml.sax.parse","title":"xml.sax.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.html#xml.sax_xml.sax.parseString","title":"xml.sax.parseString","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.html#xml.sax_xml.sax.SAXException.getException","title":"xml.sax.SAXException.getException","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.html#xml.sax_xml.sax.SAXException.getMessage","title":"xml.sax.SAXException.getMessage","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.minidom.html","title":"xml.dom.minidom","description":"19.7. xml.dom.minidom &#8212; Lightweight DOM implementation\u00b6  New in version 2.0. Source code: Lib\/xml\/dom\/minidom.py  xml.dom.minidom is a light-weight implementation of the Document Object Model interface.  It is intended to be simpler than the full DOM and also significantly smaller. DOM applications typically start by parsing some XML into a DOM.  With xml.dom.minidom, this is done through the parse functions: from xml.dom.minidom import parse, parseString  dom1 = parse(&#39;c:\\\\temp\\\\mydata.xml&#39;) # parse an XML file by name  datasource = open(&#39;c:\\\\temp\\\\mydata.xml&#39;) dom2 = parse(datasource)   # parse an open file  dom3 = parseString(&#39;<myxml>Some data<empty\/> some more data<\/myxml>&#39;)   The parse() function can take either a filename or an open file object.   xml.dom.minidom.parse(filename_or_file[, parser[, bufsize]])\u00b6 Return a Document from the given input. filename_or_file may be either a file name, or a file-like object. parser, if given, must be a SAX2 parser object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance.  If you have XML in a string, you can use the parseString() function instead:   xml.dom.minidom.parseString(string[, parser])\u00b6 Return a Document that represents the string. This method creates a StringIO object for the string and passes that on to parse().  Both functions return a Document object representing the content of the document. What the parse() and parseString() functions do is connect an XML parser with a &#8220;DOM builder&#8221; that can accept parse events from any SAX parser and convert them into a DOM tree.  The name of the functions are perhaps misleading, but are easy to grasp when learning the interfaces.  The parsing of the document will be completed before these functions return; it&#8217;s simply that these functions do not provide a parser implementation themselves. You can also create a Document by calling a method on a &#8220;DOM Implementation&#8221; object.  You can get this object either by calling the getDOMImplementation() function in the xml.dom package or the xml.dom.minidom module. Using the implementation from the xml.dom.minidom module will always return a Document instance from the minidom implementation, while the version from xml.dom may provide an alternate implementation (this is likely if you have the PyXML package installed).  Once you have a Document, you can add child nodes to it to populate the DOM: from xml.dom.minidom import getDOMImplementation  impl = getDOMImplementation()  newdoc = impl.createDocument(None, \"some_tag\", None) top_element = newdoc.documentElement text = newdoc.createTextNode(&#39;Some textual content.&#39;) top_element.appendChild(text)   Once you have a DOM document object, you can access the parts of your XML document through its properties and methods.  These properties are defined in the DOM specification.  The main property of the document object is the documentElement property.  It gives you the main element in the XML document: the one that holds all others.  Here is an example program: dom3 = parseString(\"<myxml>Some data<\/myxml>\") assert dom3.documentElement.tagName == \"myxml\"   When you are finished with a DOM tree, you may optionally call the unlink() method to encourage early cleanup of the now-unneeded objects.  unlink() is a xml.dom.minidom-specific extension to the DOM API that renders the node and its descendants are essentially useless.  Otherwise, Python&#8217;s garbage collector will eventually take care of the objects in the tree.  See also  Document Object Model (DOM) Level 1 Specification The W3C recommendation for the DOM supported by xml.dom.minidom.    19.7.1. DOM Objects\u00b6 The definition of the DOM API for Python is given as part of the xml.dom module documentation.  This section lists the differences between the API and xml.dom.minidom.   Node.unlink()\u00b6 Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC.  Even when cyclic GC is available, using this can make large amounts of memory available sooner, so calling this on DOM objects as soon as they are no longer needed is good practice.  This only needs to be called on the Document object, but may be called on child nodes to discard children of that node.    Node.writexml(writer[, indent=\"\"[, addindent=\"\"[, newl=\"\"]]])\u00b6 Write XML to the writer object.  The writer should have a write() method which matches that of the file object interface.  The indent parameter is the indentation of the current node.  The addindent parameter is the incremental indentation to use for subnodes of the current one.  The newl parameter specifies the string to use to terminate newlines. For the Document node, an additional keyword argument encoding can be used to specify the encoding field of the XML header.  Changed in version 2.1: The optional keyword parameters indent, addindent, and newl were added to support pretty output.  Changed in version 2.3: For the Document node, an additional keyword argument encoding can be used to specify the encoding field of the XML header.     Node.toxml([encoding])\u00b6 Return the XML that the DOM represents as a string. With no argument, the XML header does not specify an encoding, and the result is Unicode string if the default encoding cannot represent all characters in the document. Encoding this string in an encoding other than UTF-8 is likely incorrect, since UTF-8 is the default encoding of XML. With an explicit encoding [1] argument, the result is a byte string in the specified encoding. It is recommended that this argument is always specified. To avoid UnicodeError exceptions in case of unrepresentable text data, the encoding argument should be specified as &#8220;utf-8&#8221;.  Changed in version 2.3: the encoding argument was introduced; see writexml().     Node.toprettyxml([indent=\"\"[, newl=\"\"[, encoding=\"\"]]])\u00b6 Return a pretty-printed version of the document. indent specifies the indentation string and defaults to a tabulator; newl specifies the string emitted at the end of each line and defaults to \\n.  New in version 2.1.  Changed in version 2.3: the encoding argument was introduced; see writexml().   The following standard DOM methods have special considerations with xml.dom.minidom:   Node.cloneNode(deep)\u00b6 Although this method was present in the version of xml.dom.minidom packaged with Python 2.0, it was seriously broken.  This has been corrected for subsequent releases.    19.7.2. DOM Example\u00b6 This example program is a fairly realistic example of a simple program. In this particular case, we do not take much advantage of the flexibility of the DOM. import xml.dom.minidom  document = \"\"\"\\ <slideshow> <title>Demo slideshow<\/title> <slide><title>Slide title<\/title> <point>This is a demo<\/point> <point>Of a program for processing slides<\/point> <\/slide>  <slide><title>Another demo slide<\/title> <point>It is important<\/point> <point>To have more than<\/point> <point>one slide<\/point> <\/slide> <\/slideshow> \"\"\"  dom = xml.dom.minidom.parseString(document)  def getText(nodelist):     rc = []     for node in nodelist:         if node.nodeType == node.TEXT_NODE:             rc.append(node.data)     return &#39;&#39;.join(rc)  def handleSlideshow(slideshow):     print \"<html>\"     handleSlideshowTitle(slideshow.getElementsByTagName(\"title\")[0])     slides = slideshow.getElementsByTagName(\"slide\")     handleToc(slides)     handleSlides(slides)     print \"<\/html>\"  def handleSlides(slides):     for slide in slides:         handleSlide(slide)  def handleSlide(slide):     handleSlideTitle(slide.getElementsByTagName(\"title\")[0])     handlePoints(slide.getElementsByTagName(\"point\"))  def handleSlideshowTitle(title):     print \"<title>%s<\/title>\"  getText(title.childNodes)  def handleSlideTitle(title):     print \"<h2>%s<\/h2>\"  getText(title.childNodes)  def handlePoints(points):     print \"<ul>\"     for point in points:         handlePoint(point)     print \"<\/ul>\"  def handlePoint(point):     print \"<li>%s<\/li>\"  getText(point.childNodes)  def handleToc(slides):     for slide in slides:         title = slide.getElementsByTagName(\"title\")[0]         print \"<p>%s<\/p>\"  getText(title.childNodes)  handleSlideshow(dom)     19.7.3. minidom and the DOM standard\u00b6 The xml.dom.minidom module is essentially a DOM 1.0-compatible DOM with some DOM 2 features (primarily namespace features). Usage of the DOM interface in Python is straight-forward.  The following mapping rules apply:  Interfaces are accessed through instance objects. Applications should not instantiate the classes themselves; they should use the creator functions available on the Document object. Derived interfaces support all operations (and attributes) from the base interfaces, plus any new operations. Operations are used as methods. Since the DOM uses only in parameters, the arguments are passed in normal order (from left to right). There are no optional arguments. void operations return None. IDL attributes map to instance attributes. For compatibility with the OMG IDL language mapping for Python, an attribute foo can also be accessed through accessor methods _get_foo() and _set_foo().  readonly attributes must not be changed; this is not enforced at runtime. The types short int, unsigned int, unsigned long long, and boolean all map to Python integer objects. The type DOMString maps to Python strings. xml.dom.minidom supports either byte or Unicode strings, but will normally produce Unicode strings. Values of type DOMString may also be None where allowed to have the IDL null value by the DOM specification from the W3C. const declarations map to variables in their respective scope (e.g. xml.dom.minidom.Node.PROCESSING_INSTRUCTION_NODE); they must not be changed. DOMException is currently not supported in xml.dom.minidom. Instead, xml.dom.minidom uses standard Python exceptions such as TypeError and AttributeError. NodeList objects are implemented using Python&#8217;s built-in list type. Starting with Python 2.2, these objects provide the interface defined in the DOM specification, but with earlier versions of Python they do not support the official API.  They are, however, much more &#8220;Pythonic&#8221; than the interface defined in the W3C recommendations.  The following interfaces have no implementation in xml.dom.minidom:  DOMTimeStamp DocumentType (added in Python 2.1) DOMImplementation (added in Python 2.1) CharacterData CDATASection Notation Entity EntityReference DocumentFragment  Most of these reflect information in the XML document that is not of general utility to most DOM users. Footnotes    [1]The encoding string included in XML output should conform to the appropriate standards. For example, &#8220;UTF-8&#8221; is valid, but &#8220;UTF8&#8221; is not. See http:\/\/www.w3.org\/TR\/2006\/REC-xml11-20060816\/#NT-EncodingDecl and http:\/\/www.iana.org\/assignments\/character-sets ."},{"url":"http:\/\/docs.python.org\/library\/xml.dom.minidom.html#xml.dom.minidom_xml.dom.minidom.Node.cloneNode","title":"xml.dom.minidom.Node.cloneNode","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.minidom.html#xml.dom.minidom_xml.dom.minidom.Node.toprettyxml","title":"xml.dom.minidom.Node.toprettyxml","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.minidom.html#xml.dom.minidom_xml.dom.minidom.Node.toxml","title":"xml.dom.minidom.Node.toxml","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.minidom.html#xml.dom.minidom_xml.dom.minidom.Node.unlink","title":"xml.dom.minidom.Node.unlink","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.minidom.html#xml.dom.minidom_xml.dom.minidom.Node.writexml","title":"xml.dom.minidom.Node.writexml","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.minidom.html#xml.dom.minidom_xml.dom.minidom.parse","title":"xml.dom.minidom.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.dom.minidom.html#xml.dom.minidom_xml.dom.minidom.parseString","title":"xml.dom.minidom.parseString","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html","title":"xml.parsers.expat","description":"19.5. xml.parsers.expat &#8212; Fast XML parsing using Expat\u00b6  New in version 2.0. The xml.parsers.expat module is a Python interface to the Expat non-validating XML parser. The module provides a single extension type, xmlparser, that represents the current state of an XML parser.  After an xmlparser object has been created, various attributes of the object can be set to handler functions.  When an XML document is then fed to the parser, the handler functions are called for the character data and markup in the XML document. This module uses the pyexpat module to provide access to the Expat parser.  Direct use of the pyexpat module is deprecated. This module provides one exception and one type object:   exception xml.parsers.expat.ExpatError\u00b6 The exception raised when Expat reports an error.  See section ExpatError Exceptions for more information on interpreting Expat errors.    exception xml.parsers.expat.error\u00b6 Alias for ExpatError.    xml.parsers.expat.XMLParserType\u00b6 The type of the return values from the ParserCreate() function.  The xml.parsers.expat module contains two functions:   xml.parsers.expat.ErrorString(errno)\u00b6 Returns an explanatory string for a given error number errno.    xml.parsers.expat.ParserCreate([encoding[, namespace_separator]])\u00b6 Creates and returns a new xmlparser object.   encoding, if specified, must be a string naming the encoding  used by the XML data.  Expat doesn&#8217;t support as many encodings as Python does, and its repertoire of encodings can&#8217;t be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII.  If encoding [1] is given it will override the implicit or explicit encoding of the document. Expat can optionally do XML namespace processing for you, enabled by providing a value for namespace_separator.  The value must be a one-character string; a ValueError will be raised if the string has an illegal length (None is considered the same as omission).  When namespace processing is enabled, element type names and attribute names that belong to a namespace will be expanded.  The element name passed to the element handlers StartElementHandler and EndElementHandler will be the concatenation of the namespace URI, the namespace separator character, and the local part of the name.  If the namespace separator is a zero byte (chr(0)) then the namespace URI and the local part will be concatenated without any separator. For example, if namespace_separator is set to a space character (' ') and the following document is parsed: <?xml version=\"1.0\"?> <root xmlns    = \"http:\/\/default-namespace.org\/\"       xmlns:py = \"http:\/\/www.python.org\/ns\/\">   <py:elem1 \/>   <elem2 xmlns=\"\" \/> <\/root>  StartElementHandler will receive the following strings for each element: http:\/\/default-namespace.org\/ root http:\/\/www.python.org\/ns\/ elem1 elem2     See also  The Expat XML Parser Home page of the Expat project.    19.5.1. XMLParser Objects\u00b6 xmlparser objects have the following methods:   xmlparser.Parse(data[, isfinal])\u00b6 Parses the contents of the string data, calling the appropriate handler functions to process the parsed data.  isfinal must be true on the final call to this method.  data can be the empty string at any time.    xmlparser.ParseFile(file)\u00b6 Parse XML data reading from the object file.  file only needs to provide the read(nbytes) method, returning the empty string when there&#8217;s no more data.    xmlparser.SetBase(base)\u00b6 Sets the base to be used for resolving relative URIs in system identifiers in declarations.  Resolving relative identifiers is left to the application: this value will be passed through as the base argument to the ExternalEntityRefHandler(), NotationDeclHandler(), and UnparsedEntityDeclHandler() functions.    xmlparser.GetBase()\u00b6 Returns a string containing the base set by a previous call to SetBase(), or None if  SetBase() hasn&#8217;t been called.    xmlparser.GetInputContext()\u00b6 Returns the input data that generated the current event as a string. The data is in the encoding of the entity which contains the text. When called while an event handler is not active, the return value is None.  New in version 2.1.     xmlparser.ExternalEntityParserCreate(context[, encoding])\u00b6 Create a &#8220;child&#8221; parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser.  The context parameter should be the string passed to the ExternalEntityRefHandler() handler function, described below. The child parser is created with the ordered_attributes, returns_unicode and specified_attributes set to the values of this parser.    xmlparser.SetParamEntityParsing(flag)\u00b6 Control parsing of parameter entities (including the external DTD subset). Possible flag values are XML_PARAM_ENTITY_PARSING_NEVER, XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE and XML_PARAM_ENTITY_PARSING_ALWAYS.  Return true if setting the flag was successful.    xmlparser.UseForeignDTD([flag])\u00b6 Calling this with a true value for flag (the default) will cause Expat to call the ExternalEntityRefHandler with None for all arguments to allow an alternate DTD to be loaded.  If the document does not contain a document type declaration, the ExternalEntityRefHandler will still be called, but the StartDoctypeDeclHandler and EndDoctypeDeclHandler will not be called. Passing a false value for flag will cancel a previous call that passed a true value, but otherwise has no effect. This method can only be called before the Parse() or ParseFile() methods are called; calling it after either of those have been called causes ExpatError to be raised with the code attribute set to errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING.  New in version 2.3.   xmlparser objects have the following attributes:   xmlparser.buffer_size\u00b6 The size of the buffer used when buffer_text is true. A new buffer size can be set by assigning a new integer value to this attribute. When the size is changed, the buffer will be flushed.  New in version 2.3.  Changed in version 2.6: The buffer size can now be changed.     xmlparser.buffer_text\u00b6 Setting this to true causes the xmlparser object to buffer textual content returned by Expat to avoid multiple calls to the CharacterDataHandler() callback whenever possible.  This can improve performance substantially since Expat normally breaks character data into chunks at every line ending.  This attribute is false by default, and may be changed at any time.  New in version 2.3.     xmlparser.buffer_used\u00b6 If buffer_text is enabled, the number of bytes stored in the buffer. These bytes represent UTF-8 encoded text.  This attribute has no meaningful interpretation when buffer_text is false.  New in version 2.3.     xmlparser.ordered_attributes\u00b6 Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.  The attributes are presented in the order found in the document text.  For each attribute, two list entries are presented: the attribute name and the attribute value.  (Older versions of this module also used this format.)  By default, this attribute is false; it may be changed at any time.  New in version 2.1.     xmlparser.returns_unicode\u00b6 If this attribute is set to a non-zero integer, the handler functions will be passed Unicode strings.  If returns_unicode is False, 8-bit strings containing UTF-8 encoded data will be passed to the handlers.  This is True by default when Python is built with Unicode support.  Changed in version 1.6: Can be changed at any time to affect the result type.     xmlparser.specified_attributes\u00b6 If set to a non-zero integer, the parser will report only those attributes which were specified in the document instance and not those which were derived from attribute declarations.  Applications which set this need to be especially careful to use what additional information is available from the declarations as needed to comply with the standards for the behavior of XML processors.  By default, this attribute is false; it may be changed at any time.  New in version 2.1.   The following attributes contain values relating to the most recent error encountered by an xmlparser object, and will only have correct values once a call to Parse() or ParseFile() has raised a xml.parsers.expat.ExpatError exception.   xmlparser.ErrorByteIndex\u00b6 Byte index at which an error occurred.    xmlparser.ErrorCode\u00b6 Numeric code specifying the problem.  This value can be passed to the ErrorString() function, or compared to one of the constants defined in the errors object.    xmlparser.ErrorColumnNumber\u00b6 Column number at which an error occurred.    xmlparser.ErrorLineNumber\u00b6 Line number at which an error occurred.  The following attributes contain values relating to the current parse location in an xmlparser object.  During a callback reporting a parse event they indicate the location of the first of the sequence of characters that generated the event.  When called outside of a callback, the position indicated will be just past the last parse event (regardless of whether there was an associated callback).  New in version 2.4.   xmlparser.CurrentByteIndex\u00b6 Current byte index in the parser input.    xmlparser.CurrentColumnNumber\u00b6 Current column number in the parser input.    xmlparser.CurrentLineNumber\u00b6 Current line number in the parser input.  Here is the list of handlers that can be set.  To set a handler on an xmlparser object o, use o.handlername = func.  handlername must be taken from the following list, and func must be a callable object accepting the correct number of arguments.  The arguments are all strings, unless otherwise stated.   xmlparser.XmlDeclHandler(version, encoding, standalone)\u00b6 Called when the XML declaration is parsed.  The XML declaration is the (optional) declaration of the applicable version of the XML recommendation, the encoding of the document text, and an optional &#8220;standalone&#8221; declaration. version and encoding will be strings of the type dictated by the returns_unicode attribute, and standalone will be 1 if the document is declared standalone, 0 if it is declared not to be standalone, or -1 if the standalone clause was omitted. This is only available with Expat version 1.95.0 or newer.  New in version 2.1.     xmlparser.StartDoctypeDeclHandler(doctypeName, systemId, publicId, has_internal_subset)\u00b6 Called when Expat begins parsing the document type declaration (<!DOCTYPE ...).  The doctypeName is provided exactly as presented.  The systemId and publicId parameters give the system and public identifiers if specified, or None if omitted.  has_internal_subset will be true if the document contains and internal document declaration subset. This requires Expat version 1.2 or newer.    xmlparser.EndDoctypeDeclHandler()\u00b6 Called when Expat is done parsing the document type declaration. This requires Expat version 1.2 or newer.    xmlparser.ElementDeclHandler(name, model)\u00b6 Called once for each element type declaration.  name is the name of the element type, and model is a representation of the content model.    xmlparser.AttlistDeclHandler(elname, attname, type, default, required)\u00b6 Called for each declared attribute for an element type.  If an attribute list declaration declares three attributes, this handler is called three times, once for each attribute.  elname is the name of the element to which the declaration applies and attname is the name of the attribute declared.  The attribute type is a string passed as type; the possible values are 'CDATA', 'ID', 'IDREF', ... default gives the default value for the attribute used when the attribute is not specified by the document instance, or None if there is no default value (#IMPLIED values).  If the attribute is required to be given in the document instance, required will be true. This requires Expat version 1.95.0 or newer.    xmlparser.StartElementHandler(name, attributes)\u00b6 Called for the start of every element.  name is a string containing the element name, and attributes is a dictionary mapping attribute names to their values.    xmlparser.EndElementHandler(name)\u00b6 Called for the end of every element.    xmlparser.ProcessingInstructionHandler(target, data)\u00b6 Called for every processing instruction.    xmlparser.CharacterDataHandler(data)\u00b6 Called for character data.  This will be called for normal character data, CDATA marked content, and ignorable whitespace.  Applications which must distinguish these cases can use the StartCdataSectionHandler, EndCdataSectionHandler, and ElementDeclHandler callbacks to collect the required information.    xmlparser.UnparsedEntityDeclHandler(entityName, base, systemId, publicId, notationName)\u00b6 Called for unparsed (NDATA) entity declarations.  This is only present for version 1.2 of the Expat library; for more recent versions, use EntityDeclHandler instead.  (The underlying function in the Expat library has been declared obsolete.)    xmlparser.EntityDeclHandler(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)\u00b6 Called for all entity declarations.  For parameter and internal entities, value will be a string giving the declared contents of the entity; this will be None for external entities.  The notationName parameter will be None for parsed entities, and the name of the notation for unparsed entities. is_parameter_entity will be true if the entity is a parameter entity or false for general entities (most applications only need to be concerned with general entities). This is only available starting with version 1.95.0 of the Expat library.  New in version 2.1.     xmlparser.NotationDeclHandler(notationName, base, systemId, publicId)\u00b6 Called for notation declarations.  notationName, base, and systemId, and publicId are strings if given.  If the public identifier is omitted, publicId will be None.    xmlparser.StartNamespaceDeclHandler(prefix, uri)\u00b6 Called when an element contains a namespace declaration.  Namespace declarations are processed before the StartElementHandler is called for the element on which declarations are placed.    xmlparser.EndNamespaceDeclHandler(prefix)\u00b6 Called when the closing tag is reached for an element  that contained a namespace declaration.  This is called once for each namespace declaration on the element in the reverse of the order for which the StartNamespaceDeclHandler was called to indicate the start of each namespace declaration&#8217;s scope.  Calls to this handler are made after the corresponding EndElementHandler for the end of the element.    xmlparser.CommentHandler(data)\u00b6 Called for comments.  data is the text of the comment, excluding the leading &#8216;<!--&#8216; and trailing &#8216;-->&#8216;.    xmlparser.StartCdataSectionHandler()\u00b6 Called at the start of a CDATA section.  This and EndCdataSectionHandler are needed to be able to identify the syntactical start and end for CDATA sections.    xmlparser.EndCdataSectionHandler()\u00b6 Called at the end of a CDATA section.    xmlparser.DefaultHandler(data)\u00b6 Called for any characters in the XML document for which no applicable handler has been specified.  This means characters that are part of a construct which could be reported, but for which no handler has been supplied.    xmlparser.DefaultHandlerExpand(data)\u00b6 This is the same as the DefaultHandler(),  but doesn&#8217;t inhibit expansion of internal entities. The entity reference will not be passed to the default handler.    xmlparser.NotStandaloneHandler()\u00b6 Called if the XML document hasn&#8217;t been declared as being a standalone document. This happens when there is an external subset or a reference to a parameter entity, but the XML declaration does not set standalone to yes in an XML declaration.  If this handler returns 0, then the parser will raise an XML_ERROR_NOT_STANDALONE error.  If this handler is not set, no exception is raised by the parser for this condition.    xmlparser.ExternalEntityRefHandler(context, base, systemId, publicId)\u00b6 Called for references to external entities.  base is the current base, as set by a previous call to SetBase().  The public and system identifiers, systemId and publicId, are strings if given; if the public identifier is not given, publicId will be None.  The context value is opaque and should only be used as described below. For external entities to be parsed, this handler must be implemented. It is responsible for creating the sub-parser using ExternalEntityParserCreate(context), initializing it with the appropriate callbacks, and parsing the entity.  This handler should return an integer; if it returns 0, the parser will raise an XML_ERROR_EXTERNAL_ENTITY_HANDLING error, otherwise parsing will continue. If this handler is not provided, external entities are reported by the DefaultHandler callback, if provided.     19.5.2. ExpatError Exceptions\u00b6 ExpatError exceptions have a number of interesting attributes:   ExpatError.code\u00b6 Expat&#8217;s internal error number for the specific error.  This will match one of the constants defined in the errors object from this module.  New in version 2.1.     ExpatError.lineno\u00b6 Line number on which the error was detected.  The first line is numbered 1.  New in version 2.1.     ExpatError.offset\u00b6 Character offset into the line where the error occurred.  The first column is numbered 0.  New in version 2.1.     19.5.3. Example\u00b6 The following program defines three handlers that just print out their arguments. import xml.parsers.expat  # 3 handler functions def start_element(name, attrs):     print &#39;Start element:&#39;, name, attrs def end_element(name):     print &#39;End element:&#39;, name def char_data(data):     print &#39;Character data:&#39;, repr(data)  p = xml.parsers.expat.ParserCreate()  p.StartElementHandler = start_element p.EndElementHandler = end_element p.CharacterDataHandler = char_data  p.Parse(\"\"\"<?xml version=\"1.0\"?> <parent id=\"top\"><child1 name=\"paul\">Text goes here<\/child1> <child2 name=\"fred\">More text<\/child2> <\/parent>\"\"\", 1)   The output from this program is: Start element: parent {'id': 'top'} Start element: child1 {'name': 'paul'} Character data: 'Text goes here' End element: child1 Character data: '\\n' Start element: child2 {'name': 'fred'} Character data: 'More text' End element: child2 Character data: '\\n' End element: parent    19.5.4. Content Model Descriptions\u00b6 Content modules are described using nested tuples.  Each tuple contains four values: the type, the quantifier, the name, and a tuple of children.  Children are simply additional content module descriptions. The values of the first two fields are constants defined in the model object of the xml.parsers.expat module.  These constants can be collected in two groups: the model type group and the quantifier group. The constants in the model type group are:   xml.parsers.expat.XML_CTYPE_ANY The element named by the model name was declared to have a content model of ANY.    xml.parsers.expat.XML_CTYPE_CHOICE The named element allows a choice from a number of options; this is used for content models such as (A | B | C).    xml.parsers.expat.XML_CTYPE_EMPTY Elements which are declared to be EMPTY have this model type.    xml.parsers.expat.XML_CTYPE_MIXED     xml.parsers.expat.XML_CTYPE_NAME     xml.parsers.expat.XML_CTYPE_SEQ Models which represent a series of models which follow one after the other are indicated with this model type.  This is used for models such as (A, B, C).  The constants in the quantifier group are:   xml.parsers.expat.XML_CQUANT_NONE No modifier is given, so it can appear exactly once, as for A.    xml.parsers.expat.XML_CQUANT_OPT The model is optional: it can appear once or not at all, as for A?.    xml.parsers.expat.XML_CQUANT_PLUS The model must occur one or more times (like A+).    xml.parsers.expat.XML_CQUANT_REP The model must occur zero or more times, as for A*.    19.5.5. Expat error constants\u00b6 The following constants are provided in the errors object of the xml.parsers.expat module.  These constants are useful in interpreting some of the attributes of the ExpatError exception objects raised when an error has occurred. The errors object has the following attributes:   xml.parsers.expat.XML_ERROR_ASYNC_ENTITY     xml.parsers.expat.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF An entity reference in an attribute value referred to an external entity instead of an internal entity.    xml.parsers.expat.XML_ERROR_BAD_CHAR_REF A character reference referred to a character which is illegal in XML (for example, character 0, or &#8216;&#0;&#8216;).    xml.parsers.expat.XML_ERROR_BINARY_ENTITY_REF An entity reference referred to an entity which was declared with a notation, so cannot be parsed.    xml.parsers.expat.XML_ERROR_DUPLICATE_ATTRIBUTE An attribute was used more than once in a start tag.    xml.parsers.expat.XML_ERROR_INCORRECT_ENCODING     xml.parsers.expat.XML_ERROR_INVALID_TOKEN Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream.    xml.parsers.expat.XML_ERROR_JUNK_AFTER_DOC_ELEMENT Something other than whitespace occurred after the document element.    xml.parsers.expat.XML_ERROR_MISPLACED_XML_PI An XML declaration was found somewhere other than the start of the input data.    xml.parsers.expat.XML_ERROR_NO_ELEMENTS The document contains no elements (XML requires all documents to contain exactly one top-level element)..    xml.parsers.expat.XML_ERROR_NO_MEMORY Expat was not able to allocate memory internally.    xml.parsers.expat.XML_ERROR_PARAM_ENTITY_REF A parameter entity reference was found where it was not allowed.    xml.parsers.expat.XML_ERROR_PARTIAL_CHAR An incomplete character was found in the input.    xml.parsers.expat.XML_ERROR_RECURSIVE_ENTITY_REF An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.    xml.parsers.expat.XML_ERROR_SYNTAX Some unspecified syntax error was encountered.    xml.parsers.expat.XML_ERROR_TAG_MISMATCH An end tag did not match the innermost open start tag.    xml.parsers.expat.XML_ERROR_UNCLOSED_TOKEN Some token (such as a start tag) was not closed before the end of the stream or the next token was encountered.    xml.parsers.expat.XML_ERROR_UNDEFINED_ENTITY A reference was made to a entity which was not defined.    xml.parsers.expat.XML_ERROR_UNKNOWN_ENCODING The document encoding is not supported by Expat.    xml.parsers.expat.XML_ERROR_UNCLOSED_CDATA_SECTION A CDATA marked section was not closed.    xml.parsers.expat.XML_ERROR_EXTERNAL_ENTITY_HANDLING     xml.parsers.expat.XML_ERROR_NOT_STANDALONE The parser determined that the document was not &#8220;standalone&#8221; though it declared itself to be in the XML declaration, and the NotStandaloneHandler was set and returned 0.    xml.parsers.expat.XML_ERROR_UNEXPECTED_STATE     xml.parsers.expat.XML_ERROR_ENTITY_DECLARED_IN_PE     xml.parsers.expat.XML_ERROR_FEATURE_REQUIRES_XML_DTD An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support.  This should never be reported by a standard build of the xml.parsers.expat module.    xml.parsers.expat.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING A behavioral change was requested after parsing started that can only be changed before parsing has started.  This is (currently) only raised by UseForeignDTD().    xml.parsers.expat.XML_ERROR_UNBOUND_PREFIX An undeclared prefix was found when namespace processing was enabled.    xml.parsers.expat.XML_ERROR_UNDECLARING_PREFIX The document attempted to remove the namespace declaration associated with a prefix.    xml.parsers.expat.XML_ERROR_INCOMPLETE_PE A parameter entity contained incomplete markup.    xml.parsers.expat.XML_ERROR_XML_DECL The document contained no document element at all.    xml.parsers.expat.XML_ERROR_TEXT_DECL There was an error parsing a text declaration in an external entity.    xml.parsers.expat.XML_ERROR_PUBLICID Characters were found in the public id that are not allowed.    xml.parsers.expat.XML_ERROR_SUSPENDED The requested operation was made on a suspended parser, but isn&#8217;t allowed.  This includes attempts to provide additional input or to stop the parser.    xml.parsers.expat.XML_ERROR_NOT_SUSPENDED An attempt to resume the parser was made when the parser had not been suspended.    xml.parsers.expat.XML_ERROR_ABORTED This should not be reported to Python applications.    xml.parsers.expat.XML_ERROR_FINISHED The requested operation was made on a parser which was finished parsing input, but isn&#8217;t allowed.  This includes attempts to provide additional input or to stop the parser.    xml.parsers.expat.XML_ERROR_SUSPEND_PE   Footnotes    [1]The encoding string included in XML output should conform to the appropriate standards. For example, &#8220;UTF-8&#8221; is valid, but &#8220;UTF8&#8221; is not. See http:\/\/www.w3.org\/TR\/2006\/REC-xml11-20060816\/#NT-EncodingDecl and http:\/\/www.iana.org\/assignments\/character-sets ."},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.ErrorString","title":"xml.parsers.expat.ErrorString","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.ParserCreate","title":"xml.parsers.expat.ParserCreate","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.AttlistDeclHandler","title":"xml.parsers.expat.xmlparser.AttlistDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.CharacterDataHandler","title":"xml.parsers.expat.xmlparser.CharacterDataHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.CommentHandler","title":"xml.parsers.expat.xmlparser.CommentHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.DefaultHandler","title":"xml.parsers.expat.xmlparser.DefaultHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.DefaultHandlerExpand","title":"xml.parsers.expat.xmlparser.DefaultHandlerExpand","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.ElementDeclHandler","title":"xml.parsers.expat.xmlparser.ElementDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.EndCdataSectionHandler","title":"xml.parsers.expat.xmlparser.EndCdataSectionHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.EndDoctypeDeclHandler","title":"xml.parsers.expat.xmlparser.EndDoctypeDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.EndElementHandler","title":"xml.parsers.expat.xmlparser.EndElementHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.EndNamespaceDeclHandler","title":"xml.parsers.expat.xmlparser.EndNamespaceDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.EntityDeclHandler","title":"xml.parsers.expat.xmlparser.EntityDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.ExternalEntityParserCreate","title":"xml.parsers.expat.xmlparser.ExternalEntityParserCreate","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.ExternalEntityRefHandler","title":"xml.parsers.expat.xmlparser.ExternalEntityRefHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.GetBase","title":"xml.parsers.expat.xmlparser.GetBase","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.GetInputContext","title":"xml.parsers.expat.xmlparser.GetInputContext","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.NotationDeclHandler","title":"xml.parsers.expat.xmlparser.NotationDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.NotStandaloneHandler","title":"xml.parsers.expat.xmlparser.NotStandaloneHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.Parse","title":"xml.parsers.expat.xmlparser.Parse","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.ParseFile","title":"xml.parsers.expat.xmlparser.ParseFile","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.ProcessingInstructionHandler","title":"xml.parsers.expat.xmlparser.ProcessingInstructionHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.SetBase","title":"xml.parsers.expat.xmlparser.SetBase","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.SetParamEntityParsing","title":"xml.parsers.expat.xmlparser.SetParamEntityParsing","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.StartCdataSectionHandler","title":"xml.parsers.expat.xmlparser.StartCdataSectionHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.StartDoctypeDeclHandler","title":"xml.parsers.expat.xmlparser.StartDoctypeDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.StartElementHandler","title":"xml.parsers.expat.xmlparser.StartElementHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.StartNamespaceDeclHandler","title":"xml.parsers.expat.xmlparser.StartNamespaceDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler","title":"xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.UseForeignDTD","title":"xml.parsers.expat.xmlparser.UseForeignDTD","description":""},{"url":"http:\/\/docs.python.org\/library\/pyexpat.html#xml.parsers.expat_xml.parsers.expat.xmlparser.XmlDeclHandler","title":"xml.parsers.expat.xmlparser.XmlDeclHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.utils.html","title":"xml.sax.saxutils","description":"19.11. xml.sax.saxutils &#8212; SAX Utilities\u00b6  New in version 2.0. The module xml.sax.saxutils contains a number of classes and functions that are commonly useful when creating SAX applications, either in direct use, or as base classes.   xml.sax.saxutils.escape(data[, entities])\u00b6 Escape '&', '<', and '>' in a string of data. You can escape other strings of data by passing a dictionary as the optional entities parameter.  The keys and values must all be strings; each key will be replaced with its corresponding value.  The characters '&', '<' and '>' are always escaped, even if entities is provided.     xml.sax.saxutils.unescape(data[, entities])\u00b6 Unescape '&amp;', '&lt;', and '&gt;' in a string of data. You can unescape other strings of data by passing a dictionary as the optional entities parameter.  The keys and values must all be strings; each key will be replaced with its corresponding value.  '&amp', '&lt;', and '&gt;' are always unescaped, even if entities is provided.  New in version 2.3.     xml.sax.saxutils.quoteattr(data[, entities])\u00b6 Similar to escape(), but also prepares data to be used as an attribute value.  The return value is a quoted version of data with any additional required replacements. quoteattr() will select a quote character based on the content of data, attempting to avoid encoding any quote characters in the string.  If both single- and double-quote characters are already in data, the double-quote characters will be encoded and data will be wrapped in double-quotes.  The resulting string can be used directly as an attribute value: >>> print \"<element attr=%s>\"  quoteattr(\"ab &#39; cd \\\" ef\") <element attr=\"ab &#39; cd &quot; ef\">   This function is useful when generating attribute values for HTML or any SGML using the reference concrete syntax.  New in version 2.2.     class xml.sax.saxutils.XMLGenerator([out[, encoding]])\u00b6 This class implements the ContentHandler interface by writing SAX events back into an XML document. In other words, using an XMLGenerator as the content handler will reproduce the original document being parsed. out should be a file-like object which will default to sys.stdout. encoding is the encoding of the output stream which defaults to 'iso-8859-1'.    class xml.sax.saxutils.XMLFilterBase(base)\u00b6 This class is designed to sit between an XMLReader and the client application&#8217;s event handlers.  By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through.    xml.sax.saxutils.prepare_input_source(source[, base])\u00b6 This function takes an input source and an optional base URL and returns a fully resolved InputSource object ready for reading.  The input source can be given as a string, a file-like object, or an InputSource object; parsers will use this function to implement the polymorphic source argument to their parse() method."},{"url":"http:\/\/docs.python.org\/library\/xml.sax.utils.html#xml.sax.saxutils_xml.sax.saxutils.escape","title":"xml.sax.saxutils.escape","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.utils.html#xml.sax.saxutils_xml.sax.saxutils.prepare_input_source","title":"xml.sax.saxutils.prepare_input_source","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.utils.html#xml.sax.saxutils_xml.sax.saxutils.quoteattr","title":"xml.sax.saxutils.quoteattr","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.utils.html#xml.sax.saxutils_xml.sax.saxutils.unescape","title":"xml.sax.saxutils.unescape","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.utils.html#xml.sax.saxutils_xml.sax.saxutils.XMLFilterBase","title":"xml.sax.saxutils.XMLFilterBase","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.utils.html#xml.sax.saxutils_xml.sax.saxutils.XMLGenerator","title":"xml.sax.saxutils.XMLGenerator","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html","title":"xml.sax.handler","description":"19.10. xml.sax.handler &#8212; Base classes for SAX handlers\u00b6  New in version 2.0. The SAX API defines four kinds of handlers: content handlers, DTD handlers, error handlers, and entity resolvers. Applications normally only need to implement those interfaces whose events they are interested in; they can implement the interfaces in a single object or in multiple objects. Handler implementations should inherit from the base classes provided in the module xml.sax.handler, so that all methods get default implementations.   class xml.sax.handler.ContentHandler\u00b6 This is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document.    class xml.sax.handler.DTDHandler\u00b6 Handle DTD events. This interface specifies only those DTD events required for basic parsing (unparsed entities and attributes).     class xml.sax.handler.EntityResolver\u00b6 Basic interface for resolving entities. If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities.    class xml.sax.handler.ErrorHandler\u00b6 Interface used by the parser to present error and warning messages to the application.  The methods of this object control whether errors are immediately converted to exceptions or are handled in some other way.  In addition to these classes, xml.sax.handler provides symbolic constants for the feature and property names.   xml.sax.handler.feature_namespaces\u00b6  value: \"http:\/\/xml.org\/sax\/features\/namespaces\" true: Perform Namespace processing. false: Optionally do not perform Namespace processing (implies namespace-prefixes; default). access: (parsing) read-only; (not parsing) read\/write      xml.sax.handler.feature_namespace_prefixes\u00b6  value: \"http:\/\/xml.org\/sax\/features\/namespace-prefixes\" true: Report the original prefixed names and attributes used for Namespace declarations. false: Do not report attributes used for Namespace declarations, and optionally do not report original prefixed names (default). access: (parsing) read-only; (not parsing) read\/write      xml.sax.handler.feature_string_interning\u00b6  value: \"http:\/\/xml.org\/sax\/features\/string-interning\" true: All element names, prefixes, attribute names, Namespace URIs, and local names are interned using the built-in intern function. false: Names are not necessarily interned, although they may be (default). access: (parsing) read-only; (not parsing) read\/write      xml.sax.handler.feature_validation\u00b6  value: \"http:\/\/xml.org\/sax\/features\/validation\" true: Report all validation errors (implies external-general-entities and external-parameter-entities). false: Do not report validation errors. access: (parsing) read-only; (not parsing) read\/write      xml.sax.handler.feature_external_ges\u00b6  value: \"http:\/\/xml.org\/sax\/features\/external-general-entities\" true: Include all external general (text) entities. false: Do not include external general entities. access: (parsing) read-only; (not parsing) read\/write      xml.sax.handler.feature_external_pes\u00b6  value: \"http:\/\/xml.org\/sax\/features\/external-parameter-entities\" true: Include all external parameter entities, including the external DTD subset. false: Do not include any external parameter entities, even the external DTD subset. access: (parsing) read-only; (not parsing) read\/write      xml.sax.handler.all_features\u00b6 List of all features.    xml.sax.handler.property_lexical_handler\u00b6  value: \"http:\/\/xml.org\/sax\/properties\/lexical-handler\" data type: xml.sax.sax2lib.LexicalHandler (not supported in Python 2) description: An optional extension handler for lexical events like comments. access: read\/write      xml.sax.handler.property_declaration_handler\u00b6  value: \"http:\/\/xml.org\/sax\/properties\/declaration-handler\" data type: xml.sax.sax2lib.DeclHandler (not supported in Python 2) description: An optional extension handler for DTD-related events other than notations and unparsed entities. access: read\/write      xml.sax.handler.property_dom_node\u00b6  value: \"http:\/\/xml.org\/sax\/properties\/dom-node\" data type: org.w3c.dom.Node (not supported in Python 2) description: When parsing, the current DOM node being visited if this is a DOM iterator; when not parsing, the root DOM node for iteration. access: (parsing) read-only; (not parsing) read\/write      xml.sax.handler.property_xml_string\u00b6  value: \"http:\/\/xml.org\/sax\/properties\/xml-string\" data type: String description: The literal string of characters that was the source for the current event. access: read-only      xml.sax.handler.all_properties\u00b6 List of all known property names.   19.10.1. ContentHandler Objects\u00b6 Users are expected to subclass ContentHandler to support their application.  The following methods are called by the parser on the appropriate events in the input document:   ContentHandler.setDocumentLocator(locator)\u00b6 Called by the parser to give the application a locator for locating the origin of document events. SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the DocumentHandler interface. The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application&#8217;s business rules). The information returned by the locator is probably not sufficient for use with a search engine. Note that the locator will return correct information only during the invocation of the events in this interface. The application should not attempt to use it at any other time.     ContentHandler.startDocument()\u00b6 Receive notification of the beginning of a document. The SAX parser will invoke this method only once, before any other methods in this interface or in DTDHandler (except for setDocumentLocator()).     ContentHandler.endDocument()\u00b6 Receive notification of the end of a document. The SAX parser will invoke this method only once, and it will be the last method invoked during the parse. The parser shall not invoke this method until it has either abandoned parsing (because of an unrecoverable error) or reached the end of input.     ContentHandler.startPrefixMapping(prefix, uri)\u00b6 Begin the scope of a prefix-URI Namespace mapping. The information from this event is not necessary for normal Namespace processing: the SAX XML reader will automatically replace prefixes for element and attribute names when the feature_namespaces feature is enabled (the default). There are cases, however, when applications need to use prefixes in character data or in attribute values, where they cannot safely be expanded automatically; the startPrefixMapping() and endPrefixMapping() events supply the information to the application to expand prefixes in those contexts itself, if necessary. Note that startPrefixMapping() and endPrefixMapping() events are not guaranteed to be properly nested relative to each-other: all startPrefixMapping() events will occur before the corresponding startElement() event, and all endPrefixMapping() events will occur after the corresponding endElement() event, but their order is not guaranteed.     ContentHandler.endPrefixMapping(prefix)\u00b6 End the scope of a prefix-URI mapping. See startPrefixMapping() for details. This event will always occur after the corresponding endElement() event, but the order of endPrefixMapping() events is not otherwise guaranteed.     ContentHandler.startElement(name, attrs)\u00b6 Signals the start of an element in non-namespace mode. The name parameter contains the raw XML 1.0 name of the element type as a string and the attrs parameter holds an object of the Attributes interface (see The Attributes Interface) containing the attributes of the element.  The object passed as attrs may be re-used by the parser; holding on to a reference to it is not a reliable way to keep a copy of the attributes. To keep a copy of the attributes, use the copy() method of the attrs object.     ContentHandler.endElement(name)\u00b6 Signals the end of an element in non-namespace mode. The name parameter contains the name of the element type, just as with the startElement() event.     ContentHandler.startElementNS(name, qname, attrs)\u00b6 Signals the start of an element in namespace mode. The name parameter contains the name of the element type as a (uri, localname) tuple, the qname parameter contains the raw XML 1.0 name used in the source document, and the attrs parameter holds an instance of the AttributesNS interface (see The AttributesNS Interface) containing the attributes of the element.  If no namespace is associated with the element, the uri component of name will be None.  The object passed as attrs may be re-used by the parser; holding on to a reference to it is not a reliable way to keep a copy of the attributes.  To keep a copy of the attributes, use the copy() method of the attrs object. Parsers may set the qname parameter to None, unless the feature_namespace_prefixes feature is activated.     ContentHandler.endElementNS(name, qname)\u00b6 Signals the end of an element in namespace mode. The name parameter contains the name of the element type, just as with the startElementNS() method, likewise the qname parameter.     ContentHandler.characters(content)\u00b6 Receive notification of character data. The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information. content may be a Unicode string or a byte string; the expat reader module produces always Unicode strings.  Note The earlier SAX 1 interface provided by the Python XML Special Interest Group used a more Java-like interface for this method.  Since most parsers used from Python did not take advantage of the older interface, the simpler signature was chosen to replace it.  To convert old code to the new interface, use content instead of slicing content with the old offset and length parameters.      ContentHandler.ignorableWhitespace(whitespace)\u00b6 Receive notification of ignorable whitespace in element content. Validating Parsers must use this method to report each chunk of ignorable whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models. SAX parsers may return all contiguous whitespace in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information.     ContentHandler.processingInstruction(target, data)\u00b6 Receive notification of a processing instruction. The Parser will invoke this method once for each processing instruction found: note that processing instructions may occur before or after the main document element. A SAX parser should never report an XML declaration (XML 1.0, section 2.8) or a text declaration (XML 1.0, section 4.3.1) using this method.     ContentHandler.skippedEntity(name)\u00b6 Receive notification of a skipped entity. The Parser will invoke this method once for each entity skipped. Non-validating processors may skip entities if they have not seen the declarations (because, for example, the entity was declared in an external DTD subset). All processors may skip external entities, depending on the values of the feature_external_ges and the feature_external_pes properties.     19.10.2. DTDHandler Objects\u00b6 DTDHandler instances provide the following methods:   DTDHandler.notationDecl(name, publicId, systemId)\u00b6 Handle a notation declaration event.    DTDHandler.unparsedEntityDecl(name, publicId, systemId, ndata)\u00b6 Handle an unparsed entity declaration event.    19.10.3. EntityResolver Objects\u00b6   EntityResolver.resolveEntity(publicId, systemId)\u00b6 Resolve the system identifier of an entity and return either the system identifier to read from as a string, or an InputSource to read from. The default implementation returns systemId.    19.10.4. ErrorHandler Objects\u00b6 Objects with this interface are used to receive error and warning information from the XMLReader.  If you create an object that implements this interface, then register the object with your XMLReader, the parser will call the methods in your object to report all warnings and errors. There are three levels of errors available: warnings, (possibly) recoverable errors, and unrecoverable errors.  All methods take a SAXParseException as the only parameter.  Errors and warnings may be converted to an exception by raising the passed-in exception object.   ErrorHandler.error(exception)\u00b6 Called when the parser encounters a recoverable error.  If this method does not raise an exception, parsing may continue, but further document information should not be expected by the application.  Allowing the parser to continue may allow additional errors to be discovered in the input document.    ErrorHandler.fatalError(exception)\u00b6 Called when the parser encounters an error it cannot recover from; parsing is expected to terminate when this method returns.    ErrorHandler.warning(exception)\u00b6 Called when the parser presents minor warning information to the application. Parsing is expected to continue when this method returns, and document information will continue to be passed to the application. Raising an exception in this method will cause parsing to end."},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler","title":"xml.sax.handler.ContentHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.characters","title":"xml.sax.handler.ContentHandler.characters","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.endDocument","title":"xml.sax.handler.ContentHandler.endDocument","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.endElement","title":"xml.sax.handler.ContentHandler.endElement","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.endElementNS","title":"xml.sax.handler.ContentHandler.endElementNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.endPrefixMapping","title":"xml.sax.handler.ContentHandler.endPrefixMapping","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.ignorableWhitespace","title":"xml.sax.handler.ContentHandler.ignorableWhitespace","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.processingInstruction","title":"xml.sax.handler.ContentHandler.processingInstruction","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.setDocumentLocator","title":"xml.sax.handler.ContentHandler.setDocumentLocator","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.skippedEntity","title":"xml.sax.handler.ContentHandler.skippedEntity","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.startDocument","title":"xml.sax.handler.ContentHandler.startDocument","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.startElement","title":"xml.sax.handler.ContentHandler.startElement","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.startElementNS","title":"xml.sax.handler.ContentHandler.startElementNS","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ContentHandler.startPrefixMapping","title":"xml.sax.handler.ContentHandler.startPrefixMapping","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.DTDHandler","title":"xml.sax.handler.DTDHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.DTDHandler.notationDecl","title":"xml.sax.handler.DTDHandler.notationDecl","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.DTDHandler.unparsedEntityDecl","title":"xml.sax.handler.DTDHandler.unparsedEntityDecl","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.EntityResolver","title":"xml.sax.handler.EntityResolver","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.EntityResolver.resolveEntity","title":"xml.sax.handler.EntityResolver.resolveEntity","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ErrorHandler","title":"xml.sax.handler.ErrorHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ErrorHandler.error","title":"xml.sax.handler.ErrorHandler.error","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ErrorHandler.fatalError","title":"xml.sax.handler.ErrorHandler.fatalError","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.handler.html#xml.sax.handler_xml.sax.handler.ErrorHandler.warning","title":"xml.sax.handler.ErrorHandler.warning","description":""},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html","title":"webbrowser","description":null},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html#webbrowser.controller.open","title":"webbrowser.controller.open","description":""},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html#webbrowser.controller.open_new","title":"webbrowser.controller.open_new","description":""},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html#webbrowser.controller.open_new_tab","title":"webbrowser.controller.open_new_tab","description":""},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html#webbrowser.get","title":"webbrowser.get","description":""},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html#webbrowser.open","title":"webbrowser.open","description":""},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html#webbrowser.open_new","title":"webbrowser.open_new","description":""},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html#webbrowser.open_new_tab","title":"webbrowser.open_new_tab","description":""},{"url":"http:\/\/docs.python.org\/library\/webbrowser.html#webbrowser.register","title":"webbrowser.register","description":""},{"url":"http:\/\/docs.python.org\/library\/cgitb.html","title":"cgitb","description":"20.3. cgitb &#8212; Traceback manager for CGI scripts\u00b6  New in version 2.2. The cgitb module provides a special exception handler for Python scripts. (Its name is a bit misleading.  It was originally designed to display extensive traceback information in HTML for CGI scripts.  It was later generalized to also display this information in plain text.)  After this module is activated, if an uncaught exception occurs, a detailed, formatted report will be displayed.  The report includes a traceback showing excerpts of the source code for each level, as well as the values of the arguments and local variables to currently running functions, to help you debug the problem.  Optionally, you can save this information to a file instead of sending it to the browser. To enable this feature, simply add this to the top of your CGI script: import cgitb cgitb.enable()   The options to the enable() function control whether the report is displayed in the browser and whether the report is logged to a file for later analysis.   cgitb.enable([display[, logdir[, context[, format]]]])\u00b6 This function causes the cgitb module to take over the interpreter&#8217;s default handling for exceptions by setting the value of sys.excepthook. The optional argument display defaults to 1 and can be set to 0 to suppress sending the traceback to the browser. If the argument logdir is present, the traceback reports are written to files.  The value of logdir should be a directory where these files will be placed. The optional argument context is the number of lines of context to display around the current line of source code in the traceback; this defaults to 5. If the optional argument format is \"html\", the output is formatted as HTML.  Any other value forces plain text output.  The default value is \"html\".     cgitb.handler([info])\u00b6 This function handles an exception using the default settings (that is, show a report in the browser, but don&#8217;t log to a file). This can be used when you&#8217;ve caught an exception and want to report it using cgitb.  The optional info argument should be a 3-tuple containing an exception type, exception value, and traceback object, exactly like the tuple returned by sys.exc_info().  If the info argument is not supplied, the current exception is obtained from sys.exc_info()."},{"url":"http:\/\/docs.python.org\/library\/cgitb.html#cgitb.enable","title":"cgitb.enable","description":""},{"url":"http:\/\/docs.python.org\/library\/cgitb.html#cgitb.handler","title":"cgitb.handler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html","title":"xml.sax.xmlreader","description":"19.12. xml.sax.xmlreader &#8212; Interface for XML parsers\u00b6  New in version 2.0. SAX parsers implement the XMLReader interface. They are implemented in a Python module, which must provide a function create_parser(). This function is invoked by  xml.sax.make_parser() with no arguments to create a new  parser object.   class xml.sax.xmlreader.XMLReader\u00b6 Base class which can be inherited by SAX parsers.    class xml.sax.xmlreader.IncrementalParser\u00b6 In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available. Note that the reader will normally not read the entire file, but read it in chunks as well; still parse() won&#8217;t return until the entire document is processed. So these interfaces should be used if the blocking behaviour of parse() is not desirable. When the parser is instantiated it is ready to begin accepting data from the feed method immediately. After parsing has been finished with a call to close the reset method must be called to make the parser ready to accept new data, either from feed or using the parse method. Note that these methods must not be called during parsing, that is, after parse has been called and before it returns. By default, the class also implements the parse method of the XMLReader interface using the feed, close and reset methods of the IncrementalParser interface as a convenience to SAX 2.0 driver writers.     class xml.sax.xmlreader.Locator\u00b6 Interface for associating a SAX event with a document location. A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the results are unpredictable. If information is not available, methods may return None.    class xml.sax.xmlreader.InputSource([systemId])\u00b6 Encapsulation of the information needed by the XMLReader to read entities. This class may include information about the public identifier, system identifier, byte stream (possibly with character encoding information) and\/or the character stream of an entity. Applications will create objects of this class for use in the XMLReader.parse() method and for returning from EntityResolver.resolveEntity. An InputSource belongs to the application, the XMLReader is not allowed to modify InputSource objects passed to it from the application, although it may make copies and modify those.     class xml.sax.xmlreader.AttributesImpl(attrs)\u00b6 This is an implementation of the Attributes interface (see section The Attributes Interface).  This is a dictionary-like object which represents the element attributes in a startElement() call. In addition to the most useful dictionary operations, it supports a number of other methods as described by the interface. Objects of this class should be instantiated by readers; attrs must be a dictionary-like object containing a mapping from attribute names to attribute values.    class xml.sax.xmlreader.AttributesNSImpl(attrs, qnames)\u00b6 Namespace-aware variant of AttributesImpl, which will be passed to startElementNS(). It is derived from AttributesImpl, but understands attribute names as two-tuples of namespaceURI and localname. In addition, it provides a number of methods expecting qualified names as they appear in the original document.  This class implements the AttributesNS interface (see section The AttributesNS Interface).   19.12.1. XMLReader Objects\u00b6 The XMLReader interface supports the following methods:   XMLReader.parse(source)\u00b6 Process an input source, producing SAX events. The source object can be a system identifier (a string identifying the input source &#8211; typically a file name or an URL), a file-like object, or an InputSource object. When parse() returns, the input is completely processed, and the parser object can be discarded or reset. As a limitation, the current implementation only accepts byte streams; processing of character streams is for further study.    XMLReader.getContentHandler()\u00b6 Return the current ContentHandler.    XMLReader.setContentHandler(handler)\u00b6 Set the current ContentHandler.  If no ContentHandler is set, content events will be discarded.    XMLReader.getDTDHandler()\u00b6 Return the current DTDHandler.    XMLReader.setDTDHandler(handler)\u00b6 Set the current DTDHandler.  If no DTDHandler is set, DTD events will be discarded.    XMLReader.getEntityResolver()\u00b6 Return the current EntityResolver.    XMLReader.setEntityResolver(handler)\u00b6 Set the current EntityResolver.  If no EntityResolver is set, attempts to resolve an external entity will result in opening the system identifier for the entity, and fail if it is not available.    XMLReader.getErrorHandler()\u00b6 Return the current ErrorHandler.    XMLReader.setErrorHandler(handler)\u00b6 Set the current error handler.  If no ErrorHandler is set, errors will be raised as exceptions, and warnings will be printed.    XMLReader.setLocale(locale)\u00b6 Allow an application to set the locale for errors and warnings. SAX parsers are not required to provide localization for errors and warnings; if they cannot support the requested locale, however, they must raise a SAX exception.  Applications may request a locale change in the middle of a parse.     XMLReader.getFeature(featurename)\u00b6 Return the current setting for feature featurename.  If the feature is not recognized, SAXNotRecognizedException is raised. The well-known featurenames are listed in the module xml.sax.handler.    XMLReader.setFeature(featurename, value)\u00b6 Set the featurename to value. If the feature is not recognized, SAXNotRecognizedException is raised. If the feature or its setting is not supported by the parser, SAXNotSupportedException is raised.    XMLReader.getProperty(propertyname)\u00b6 Return the current setting for property propertyname. If the property is not recognized, a SAXNotRecognizedException is raised. The well-known propertynames are listed in the module xml.sax.handler.    XMLReader.setProperty(propertyname, value)\u00b6 Set the propertyname to value. If the property is not recognized, SAXNotRecognizedException is raised. If the property or its setting is not supported by the parser, SAXNotSupportedException is raised.    19.12.2. IncrementalParser Objects\u00b6 Instances of IncrementalParser offer the following additional methods:   IncrementalParser.feed(data)\u00b6 Process a chunk of data.    IncrementalParser.close()\u00b6 Assume the end of the document. That will check well-formedness conditions that can be checked only at the end, invoke handlers, and may clean up resources allocated during parsing.    IncrementalParser.reset()\u00b6 This method is called after close has been called to reset the parser so that it is ready to parse new documents. The results of calling parse or feed after close without calling reset are undefined.    19.12.3. Locator Objects\u00b6 Instances of Locator provide these methods:   Locator.getColumnNumber()\u00b6 Return the column number where the current event ends.    Locator.getLineNumber()\u00b6 Return the line number where the current event ends.    Locator.getPublicId()\u00b6 Return the public identifier for the current event.    Locator.getSystemId()\u00b6 Return the system identifier for the current event.    19.12.4. InputSource Objects\u00b6   InputSource.setPublicId(id)\u00b6 Sets the public identifier of this InputSource.    InputSource.getPublicId()\u00b6 Returns the public identifier of this InputSource.    InputSource.setSystemId(id)\u00b6 Sets the system identifier of this InputSource.    InputSource.getSystemId()\u00b6 Returns the system identifier of this InputSource.    InputSource.setEncoding(encoding)\u00b6 Sets the character encoding of this InputSource. The encoding must be a string acceptable for an XML encoding declaration (see section 4.3.3 of the XML recommendation). The encoding attribute of the InputSource is ignored if the InputSource also contains a character stream.     InputSource.getEncoding()\u00b6 Get the character encoding of this InputSource.    InputSource.setByteStream(bytefile)\u00b6 Set the byte stream (a Python file-like object which does not perform byte-to-character conversion) for this input source. The SAX parser will ignore this if there is also a character stream specified, but it will use a byte stream in preference to opening a URI connection itself. If the application knows the character encoding of the byte stream, it should set it with the setEncoding method.     InputSource.getByteStream()\u00b6 Get the byte stream for this input source. The getEncoding method will return the character encoding for this byte stream, or None if unknown.     InputSource.setCharacterStream(charfile)\u00b6 Set the character stream for this input source. (The stream must be a Python 1.6 Unicode-wrapped file-like that performs conversion to Unicode strings.) If there is a character stream specified, the SAX parser will ignore any byte stream and will not attempt to open a URI connection to the system identifier.     InputSource.getCharacterStream()\u00b6 Get the character stream for this input source.    19.12.5. The Attributes Interface\u00b6 Attributes objects implement a portion of the mapping protocol, including the methods copy(), get(), has_key(), items(), keys(), and values().  The following methods are also provided:   Attributes.getLength()\u00b6 Return the number of attributes.    Attributes.getNames()\u00b6 Return the names of the attributes.    Attributes.getType(name)\u00b6 Returns the type of the attribute name, which is normally 'CDATA'.    Attributes.getValue(name)\u00b6 Return the value of attribute name.    19.12.6. The AttributesNS Interface\u00b6 This interface is a subtype of the Attributes interface (see section The Attributes Interface).  All methods supported by that interface are also available on AttributesNS objects. The following methods are also available:   AttributesNS.getValueByQName(name)\u00b6 Return the value for a qualified name.    AttributesNS.getNameByQName(name)\u00b6 Return the (namespace, localname) pair for a qualified name.    AttributesNS.getQNameByName(name)\u00b6 Return the qualified name for a (namespace, localname) pair.    AttributesNS.getQNames()\u00b6 Return the qualified names of all attributes."},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Attributes.getLength","title":"xml.sax.xmlreader.Attributes.getLength","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Attributes.getNames","title":"xml.sax.xmlreader.Attributes.getNames","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Attributes.getType","title":"xml.sax.xmlreader.Attributes.getType","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Attributes.getValue","title":"xml.sax.xmlreader.Attributes.getValue","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.AttributesImpl","title":"xml.sax.xmlreader.AttributesImpl","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.AttributesNS.getNameByQName","title":"xml.sax.xmlreader.AttributesNS.getNameByQName","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.AttributesNS.getQNameByName","title":"xml.sax.xmlreader.AttributesNS.getQNameByName","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.AttributesNS.getQNames","title":"xml.sax.xmlreader.AttributesNS.getQNames","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.AttributesNS.getValueByQName","title":"xml.sax.xmlreader.AttributesNS.getValueByQName","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.AttributesNSImpl","title":"xml.sax.xmlreader.AttributesNSImpl","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.IncrementalParser","title":"xml.sax.xmlreader.IncrementalParser","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.IncrementalParser.close","title":"xml.sax.xmlreader.IncrementalParser.close","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.IncrementalParser.feed","title":"xml.sax.xmlreader.IncrementalParser.feed","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.IncrementalParser.reset","title":"xml.sax.xmlreader.IncrementalParser.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource","title":"xml.sax.xmlreader.InputSource","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.getByteStream","title":"xml.sax.xmlreader.InputSource.getByteStream","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.getCharacterStream","title":"xml.sax.xmlreader.InputSource.getCharacterStream","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.getEncoding","title":"xml.sax.xmlreader.InputSource.getEncoding","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.getPublicId","title":"xml.sax.xmlreader.InputSource.getPublicId","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.getSystemId","title":"xml.sax.xmlreader.InputSource.getSystemId","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.setByteStream","title":"xml.sax.xmlreader.InputSource.setByteStream","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.setCharacterStream","title":"xml.sax.xmlreader.InputSource.setCharacterStream","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.setEncoding","title":"xml.sax.xmlreader.InputSource.setEncoding","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.setPublicId","title":"xml.sax.xmlreader.InputSource.setPublicId","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.InputSource.setSystemId","title":"xml.sax.xmlreader.InputSource.setSystemId","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Locator","title":"xml.sax.xmlreader.Locator","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Locator.getColumnNumber","title":"xml.sax.xmlreader.Locator.getColumnNumber","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Locator.getLineNumber","title":"xml.sax.xmlreader.Locator.getLineNumber","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Locator.getPublicId","title":"xml.sax.xmlreader.Locator.getPublicId","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.Locator.getSystemId","title":"xml.sax.xmlreader.Locator.getSystemId","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader","title":"xml.sax.xmlreader.XMLReader","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.getContentHandler","title":"xml.sax.xmlreader.XMLReader.getContentHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.getDTDHandler","title":"xml.sax.xmlreader.XMLReader.getDTDHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.getEntityResolver","title":"xml.sax.xmlreader.XMLReader.getEntityResolver","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.getErrorHandler","title":"xml.sax.xmlreader.XMLReader.getErrorHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.getFeature","title":"xml.sax.xmlreader.XMLReader.getFeature","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.getProperty","title":"xml.sax.xmlreader.XMLReader.getProperty","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.parse","title":"xml.sax.xmlreader.XMLReader.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.setContentHandler","title":"xml.sax.xmlreader.XMLReader.setContentHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.setDTDHandler","title":"xml.sax.xmlreader.XMLReader.setDTDHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.setEntityResolver","title":"xml.sax.xmlreader.XMLReader.setEntityResolver","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.setErrorHandler","title":"xml.sax.xmlreader.XMLReader.setErrorHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.setFeature","title":"xml.sax.xmlreader.XMLReader.setFeature","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.setLocale","title":"xml.sax.xmlreader.XMLReader.setLocale","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.sax.reader.html#xml.sax.xmlreader_xml.sax.xmlreader.XMLReader.setProperty","title":"xml.sax.xmlreader.XMLReader.setProperty","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html","title":"xml.etree.ElementTree","description":"19.13. xml.etree.ElementTree &#8212; The ElementTree XML API\u00b6  New in version 2.5. Source code: Lib\/xml\/etree\/ElementTree.py  The Element type is a flexible container object, designed to store hierarchical data structures in memory.  The type can be described as a cross between a list and a dictionary. Each element has a number of properties associated with it:  a tag which is a string identifying what kind of data this element represents (the element type, in other words). a number of attributes, stored in a Python dictionary. a text string. an optional tail string. a number of child elements, stored in a Python sequence  To create an element instance, use the Element constructor or the SubElement() factory function. The ElementTree class can be used to wrap an element structure, and convert it from and to XML. A C implementation of this API is available as xml.etree.cElementTree. See http:\/\/effbot.org\/zone\/element-index.htm for tutorials and links to other docs.  Fredrik Lundh&#8217;s page is also the location of the development version of the xml.etree.ElementTree.  Changed in version 2.7: The ElementTree API is updated to 1.3.  For more information, see Introducing ElementTree 1.3.  19.13.1. Functions\u00b6   xml.etree.ElementTree.Comment(text=None)\u00b6 Comment element factory.  This factory function creates a special element that will be serialized as an XML comment by the standard serializer.  The comment string can be either a bytestring or a Unicode string.  text is a string containing the comment string.  Returns an element instance representing a comment.    xml.etree.ElementTree.dump(elem)\u00b6 Writes an element tree or element structure to sys.stdout.  This function should be used for debugging only. The exact output format is implementation dependent.  In this version, it&#8217;s written as an ordinary XML file. elem is an element tree or an individual element.     xml.etree.ElementTree.fromstring(text)\u00b6 Parses an XML section from a string constant.  Same as XML().  text is a string containing XML data.  Returns an Element instance.    xml.etree.ElementTree.fromstringlist(sequence, parser=None)\u00b6 Parses an XML document from a sequence of string fragments.  sequence is a list or other sequence containing XML data fragments.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns an Element instance.  New in version 2.7.     xml.etree.ElementTree.iselement(element)\u00b6 Checks if an object appears to be a valid element object.  element is an element instance.  Returns a true value if this is an element object.    xml.etree.ElementTree.iterparse(source, events=None, parser=None)\u00b6 Parses an XML section into an element tree incrementally, and reports what&#8217;s going on to the user.  source is a filename or file object containing XML data.  events is a list of events to report back.  If omitted, only &#8220;end&#8221; events are reported.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns an iterator providing (event, elem) pairs.  Note iterparse() only guarantees that it has seen the &#8220;>&#8221; character of a starting tag when it emits a &#8220;start&#8221; event, so the attributes are defined, but the contents of the text and tail attributes are undefined at that point.  The same applies to the element children; they may or may not be present. If you need a fully populated element, look for &#8220;end&#8221; events instead.      xml.etree.ElementTree.parse(source, parser=None)\u00b6 Parses an XML section into an element tree.  source is a filename or file object containing XML data.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns an ElementTree instance.    xml.etree.ElementTree.ProcessingInstruction(target, text=None)\u00b6 PI element factory.  This factory function creates a special element that will be serialized as an XML processing instruction.  target is a string containing the PI target.  text is a string containing the PI contents, if given.  Returns an element instance, representing a processing instruction.    xml.etree.ElementTree.register_namespace(prefix, uri)\u00b6 Registers a namespace prefix.  The registry is global, and any existing mapping for either the given prefix or the namespace URI will be removed. prefix is a namespace prefix.  uri is a namespace uri.  Tags and attributes in this namespace will be serialized with the given prefix, if at all possible.  New in version 2.7.     xml.etree.ElementTree.SubElement(parent, tag, attrib={}, **extra)\u00b6 Subelement factory.  This function creates an element instance, and appends it to an existing element. The element name, attribute names, and attribute values can be either bytestrings or Unicode strings.  parent is the parent element.  tag is the subelement name.  attrib is an optional dictionary, containing element attributes.  extra contains additional attributes, given as keyword arguments.  Returns an element instance.     xml.etree.ElementTree.tostring(element, encoding=\"us-ascii\", method=\"xml\")\u00b6 Generates a string representation of an XML element, including all subelements.  element is an Element instance.  encoding [1] is the output encoding (default is US-ASCII).  method is either \"xml\", \"html\" or \"text\" (default is \"xml\").  Returns an encoded string containing the XML data.    xml.etree.ElementTree.tostringlist(element, encoding=\"us-ascii\", method=\"xml\")\u00b6 Generates a string representation of an XML element, including all subelements.  element is an Element instance.  encoding [1] is the output encoding (default is US-ASCII).   method is either \"xml\", \"html\" or \"text\" (default is \"xml\").  Returns a list of encoded strings containing the XML data.  It does not guarantee any specific sequence, except that \"\".join(tostringlist(element)) == tostring(element).  New in version 2.7.     xml.etree.ElementTree.XML(text, parser=None)\u00b6 Parses an XML section from a string constant.  This function can be used to embed &#8220;XML literals&#8221; in Python code.  text is a string containing XML data.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns an Element instance.    xml.etree.ElementTree.XMLID(text, parser=None)\u00b6 Parses an XML section from a string constant, and also returns a dictionary which maps from element id:s to elements.  text is a string containing XML data.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns a tuple containing an Element instance and a dictionary.    19.13.2. Element Objects\u00b6   class xml.etree.ElementTree.Element(tag, attrib={}, **extra)\u00b6 Element class.  This class defines the Element interface, and provides a reference implementation of this interface. The element name, attribute names, and attribute values can be either bytestrings or Unicode strings.  tag is the element name.  attrib is an optional dictionary, containing element attributes.  extra contains additional attributes, given as keyword arguments.   tag\u00b6 A string identifying what kind of data this element represents (the element type, in other words).    text\u00b6 The text attribute can be used to hold additional data associated with the element.  As the name implies this attribute is usually a string but may be any application-specific object.  If the element is created from an XML file the attribute will contain any text found between the element tags.    tail\u00b6 The tail attribute can be used to hold additional data associated with the element.  This attribute is usually a string but may be any application-specific object.  If the element is created from an XML file the attribute will contain any text found after the element&#8217;s end tag and before the next tag.    attrib\u00b6 A dictionary containing the element&#8217;s attributes.  Note that while the attrib value is always a real mutable Python dictionary, an ElementTree implementation may choose to use another internal representation, and create the dictionary only if someone asks for it.  To take advantage of such implementations, use the dictionary methods below whenever possible.  The following dictionary-like methods work on the element attributes.   clear()\u00b6 Resets an element.  This function removes all subelements, clears all attributes, and sets the text and tail attributes to None.    get(key, default=None)\u00b6 Gets the element attribute named key. Returns the attribute value, or default if the attribute was not found.     items()\u00b6 Returns the element attributes as a sequence of (name, value) pairs.  The attributes are returned in an arbitrary order.    keys()\u00b6 Returns the elements attribute names as a list.  The names are returned in an arbitrary order.    set(key, value)\u00b6 Set the attribute key on the element to value.  The following methods work on the element&#8217;s children (subelements).   append(subelement)\u00b6 Adds the element subelement to the end of this elements internal list of subelements.    extend(subelements)\u00b6 Appends subelements from a sequence object with zero or more elements. Raises AssertionError if a subelement is not a valid object.  New in version 2.7.     find(match)\u00b6 Finds the first subelement matching match.  match may be a tag name or path.  Returns an element instance or None.    findall(match)\u00b6 Finds all matching subelements, by tag name or path.  Returns a list containing all matching elements in document order.    findtext(match, default=None)\u00b6 Finds text for the first subelement matching match.  match may be a tag name or path.  Returns the text content of the first matching element, or default if no element was found.  Note that if the matching element has no text content an empty string is returned.    getchildren()\u00b6  Deprecated since version 2.7: Use list(elem) or iteration.     getiterator(tag=None)\u00b6  Deprecated since version 2.7: Use method Element.iter() instead.     insert(index, element)\u00b6 Inserts a subelement at the given position in this element.    iter(tag=None)\u00b6 Creates a tree iterator with the current element as the root. The iterator iterates over this element and all elements below it, in document (depth first) order.  If tag is not None or '*', only elements whose tag equals tag are returned from the iterator.  If the tree structure is modified during iteration, the result is undefined.  New in version 2.7.     iterfind(match)\u00b6 Finds all matching subelements, by tag name or path.  Returns an iterable yielding all matching elements in document order.  New in version 2.7.     itertext()\u00b6 Creates a text iterator.  The iterator loops over this element and all subelements, in document order, and returns all inner text.  New in version 2.7.     makeelement(tag, attrib)\u00b6 Creates a new element object of the same type as this element.  Do not call this method, use the SubElement() factory function instead.    remove(subelement)\u00b6 Removes subelement from the element.  Unlike the find* methods this method compares elements based on the instance identity, not on tag value or contents.  Element objects also support the following sequence type methods for working with subelements: __delitem__(), __getitem__(), __setitem__(), __len__(). Caution: Elements with no subelements will test as False.  This behavior will change in future versions.  Use specific len(elem) or elem is None test instead. element = root.find(&#39;foo&#39;)  if not element:  # careful!     print \"element not found, or element has no subelements\"  if element is None:     print \"element not found\"       19.13.3. ElementTree Objects\u00b6   class xml.etree.ElementTree.ElementTree(element=None, file=None)\u00b6 ElementTree wrapper class.  This class represents an entire element hierarchy, and adds some extra support for serialization to and from standard XML. element is the root element.  The tree is initialized with the contents of the XML file if given.   _setroot(element)\u00b6 Replaces the root element for this tree.  This discards the current contents of the tree, and replaces it with the given element.  Use with care.  element is an element instance.    find(match)\u00b6 Finds the first toplevel element matching match.  match may be a tag name or path.  Same as getroot().find(match).  Returns the first matching element, or None if no element was found.    findall(match)\u00b6 Finds all matching subelements, by tag name or path.  Same as getroot().findall(match).  match may be a tag name or path.  Returns a list containing all matching elements, in document order.    findtext(match, default=None)\u00b6 Finds the element text for the first toplevel element with given tag. Same as getroot().findtext(match).  match may be a tag name or path. default is the value to return if the element was not found.  Returns the text content of the first matching element, or the default value no element was found.  Note that if the element is found, but has no text content, this method returns an empty string.    getiterator(tag=None)\u00b6  Deprecated since version 2.7: Use method ElementTree.iter() instead.     getroot()\u00b6 Returns the root element for this tree.    iter(tag=None)\u00b6 Creates and returns a tree iterator for the root element.  The iterator loops over all elements in this tree, in section order.  tag is the tag to look for (default is to return all elements)    iterfind(match)\u00b6 Finds all matching subelements, by tag name or path.  Same as getroot().iterfind(match). Returns an iterable yielding all matching elements in document order.  New in version 2.7.     parse(source, parser=None)\u00b6 Loads an external XML section into this element tree.  source is a file name or file object.  parser is an optional parser instance.  If not given, the standard XMLParser parser is used.  Returns the section root element.    write(file, encoding=\"us-ascii\", xml_declaration=None, method=\"xml\")\u00b6 Writes the element tree to a file, as XML.  file is a file name, or a file object opened for writing.  encoding [1] is the output encoding (default is US-ASCII).  xml_declaration controls if an XML declaration should be added to the file.  Use False for never, True for always, None for only if not US-ASCII or UTF-8 (default is None).  method is either \"xml\", \"html\" or \"text\" (default is \"xml\").  Returns an encoded string.    This is the XML file that is going to be manipulated: <html>     <head>         <title>Example page<\/title>     <\/head>     <body>         <p>Moved to <a href=\"http:\/\/example.org\/\">example.org<\/a>         or <a href=\"http:\/\/example.com\/\">example.com<\/a>.<\/p>     <\/body> <\/html>  Example of changing the attribute &#8220;target&#8221; of every link in first paragraph: >>> from xml.etree.ElementTree import ElementTree >>> tree = ElementTree() >>> tree.parse(\"index.xhtml\") <Element &#39;html&#39; at 0xb77e6fac> >>> p = tree.find(\"body\/p\")     # Finds first occurrence of tag p in body >>> p <Element &#39;p&#39; at 0xb77ec26c> >>> links = list(p.iter(\"a\"))   # Returns list of all links >>> links [<Element &#39;a&#39; at 0xb77ec2ac>, <Element &#39;a&#39; at 0xb77ec1cc>] >>> for i in links:             # Iterates through all found links ...     i.attrib[\"target\"] = \"blank\" >>> tree.write(\"output.xhtml\")     19.13.4. QName Objects\u00b6   class xml.etree.ElementTree.QName(text_or_uri, tag=None)\u00b6 QName wrapper.  This can be used to wrap a QName attribute value, in order to get proper namespace handling on output.  text_or_uri is a string containing the QName value, in the form {uri}local, or, if the tag argument is given, the URI part of a QName.  If tag is given, the first argument is interpreted as an URI, and this argument is interpreted as a local name. QName instances are opaque.    19.13.5. TreeBuilder Objects\u00b6   class xml.etree.ElementTree.TreeBuilder(element_factory=None)\u00b6 Generic element structure builder.  This builder converts a sequence of start, data, and end method calls to a well-formed element structure.  You can use this class to build an element structure using a custom XML parser, or a parser for some other XML-like format.  The element_factory is called to create new Element instances when given.   close()\u00b6 Flushes the builder buffers, and returns the toplevel document element.  Returns an Element instance.    data(data)\u00b6 Adds text to the current element.  data is a string.  This should be either a bytestring, or a Unicode string.    end(tag)\u00b6 Closes the current element.  tag is the element name.  Returns the closed element.    start(tag, attrs)\u00b6 Opens a new element.  tag is the element name.  attrs is a dictionary containing element attributes.  Returns the opened element.  In addition, a custom TreeBuilder object can provide the following method:   doctype(name, pubid, system)\u00b6 Handles a doctype declaration.  name is the doctype name.  pubid is the public identifier.  system is the system identifier.  This method does not exist on the default TreeBuilder class.  New in version 2.7.       19.13.6. XMLParser Objects\u00b6   class xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)\u00b6 Element structure builder for XML source data, based on the expat parser.  html are predefined HTML entities.  This flag is not supported by the current implementation.  target is the target object.  If omitted, the builder uses an instance of the standard TreeBuilder class.  encoding [1] is optional.  If given, the value overrides the encoding specified in the XML file.   close()\u00b6 Finishes feeding data to the parser.  Returns an element structure.    doctype(name, pubid, system)\u00b6  Deprecated since version 2.7: Define the TreeBuilder.doctype() method on a custom TreeBuilder target.     feed(data)\u00b6 Feeds data to the parser.  data is encoded data.    XMLParser.feed() calls target&#8216;s start() method for each opening tag, its end() method for each closing tag, and data is processed by method data().  XMLParser.close() calls target&#8216;s method close(). XMLParser can be used not only for building a tree structure. This is an example of counting the maximum depth of an XML file: >>> from xml.etree.ElementTree import XMLParser >>> class MaxDepth:                     # The target object of the parser ...     maxDepth = 0 ...     depth = 0 ...     def start(self, tag, attrib):   # Called for each opening tag. ...         self.depth += 1 ...         if self.depth > self.maxDepth: ...             self.maxDepth = self.depth ...     def end(self, tag):             # Called for each closing tag. ...         self.depth -= 1 ...     def data(self, data): ...         pass            # We do not need to do anything with data. ...     def close(self):    # Called when all data has been parsed. ...         return self.maxDepth ... >>> target = MaxDepth() >>> parser = XMLParser(target=target) >>> exampleXml = \"\"\" ... <a> ...   <b> ...   <\/b> ...   <b> ...     <c> ...       <d> ...       <\/d> ...     <\/c> ...   <\/b> ... <\/a>\"\"\" >>> parser.feed(exampleXml) >>> parser.close() 4   Footnotes    [1]The encoding string included in XML output should conform to the appropriate standards.  For example, &#8220;UTF-8&#8221; is valid, but &#8220;UTF8&#8221; is not.  See http:\/\/www.w3.org\/TR\/2006\/REC-xml11-20060816\/#NT-EncodingDecl and http:\/\/www.iana.org\/assignments\/character-sets."},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Comment","title":"xml.etree.ElementTree.Comment","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.dump","title":"xml.etree.ElementTree.dump","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element","title":"xml.etree.ElementTree.Element","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.append","title":"xml.etree.ElementTree.Element.append","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.clear","title":"xml.etree.ElementTree.Element.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.extend","title":"xml.etree.ElementTree.Element.extend","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.find","title":"xml.etree.ElementTree.Element.find","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.findall","title":"xml.etree.ElementTree.Element.findall","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.findtext","title":"xml.etree.ElementTree.Element.findtext","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.get","title":"xml.etree.ElementTree.Element.get","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.getchildren","title":"xml.etree.ElementTree.Element.getchildren","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.getiterator","title":"xml.etree.ElementTree.Element.getiterator","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.insert","title":"xml.etree.ElementTree.Element.insert","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.items","title":"xml.etree.ElementTree.Element.items","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.iter","title":"xml.etree.ElementTree.Element.iter","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.iterfind","title":"xml.etree.ElementTree.Element.iterfind","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.itertext","title":"xml.etree.ElementTree.Element.itertext","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.keys","title":"xml.etree.ElementTree.Element.keys","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.makeelement","title":"xml.etree.ElementTree.Element.makeelement","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.remove","title":"xml.etree.ElementTree.Element.remove","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.Element.set","title":"xml.etree.ElementTree.Element.set","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree","title":"xml.etree.ElementTree.ElementTree","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree._setroot","title":"xml.etree.ElementTree.ElementTree._setroot","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.find","title":"xml.etree.ElementTree.ElementTree.find","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.findall","title":"xml.etree.ElementTree.ElementTree.findall","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.findtext","title":"xml.etree.ElementTree.ElementTree.findtext","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.getiterator","title":"xml.etree.ElementTree.ElementTree.getiterator","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.getroot","title":"xml.etree.ElementTree.ElementTree.getroot","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.iter","title":"xml.etree.ElementTree.ElementTree.iter","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.iterfind","title":"xml.etree.ElementTree.ElementTree.iterfind","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.parse","title":"xml.etree.ElementTree.ElementTree.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ElementTree.write","title":"xml.etree.ElementTree.ElementTree.write","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.fromstring","title":"xml.etree.ElementTree.fromstring","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.fromstringlist","title":"xml.etree.ElementTree.fromstringlist","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.iselement","title":"xml.etree.ElementTree.iselement","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.iterparse","title":"xml.etree.ElementTree.iterparse","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.parse","title":"xml.etree.ElementTree.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.ProcessingInstruction","title":"xml.etree.ElementTree.ProcessingInstruction","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.QName","title":"xml.etree.ElementTree.QName","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.register_namespace","title":"xml.etree.ElementTree.register_namespace","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.SubElement","title":"xml.etree.ElementTree.SubElement","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.tostring","title":"xml.etree.ElementTree.tostring","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.tostringlist","title":"xml.etree.ElementTree.tostringlist","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.TreeBuilder","title":"xml.etree.ElementTree.TreeBuilder","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.TreeBuilder.close","title":"xml.etree.ElementTree.TreeBuilder.close","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.TreeBuilder.data","title":"xml.etree.ElementTree.TreeBuilder.data","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.TreeBuilder.doctype","title":"xml.etree.ElementTree.TreeBuilder.doctype","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.TreeBuilder.end","title":"xml.etree.ElementTree.TreeBuilder.end","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.TreeBuilder.start","title":"xml.etree.ElementTree.TreeBuilder.start","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.XML","title":"xml.etree.ElementTree.XML","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.XMLID","title":"xml.etree.ElementTree.XMLID","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.XMLParser","title":"xml.etree.ElementTree.XMLParser","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.XMLParser.close","title":"xml.etree.ElementTree.XMLParser.close","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.XMLParser.doctype","title":"xml.etree.ElementTree.XMLParser.doctype","description":""},{"url":"http:\/\/docs.python.org\/library\/xml.etree.elementtree.html#xml.etree.ElementTree_xml.etree.ElementTree.XMLParser.feed","title":"xml.etree.ElementTree.XMLParser.feed","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html","title":"cgi","description":"20.2. cgi &#8212; Common Gateway Interface support\u00b6 Source code: Lib\/cgi.py  Support module for Common Gateway Interface (CGI) scripts. This module defines a number of utilities for use by CGI scripts written in Python.  20.2.1. Introduction\u00b6 A CGI script is invoked by an HTTP server, usually to process user input submitted through an HTML <FORM> or <ISINDEX> element. Most often, CGI scripts live in the server&#8217;s special cgi-bin directory. The HTTP server places all sorts of information about the request (such as the client&#8217;s hostname, the requested URL, the query string, and lots of other goodies) in the script&#8217;s shell environment, executes the script, and sends the script&#8217;s output back to the client. The script&#8217;s input is connected to the client too, and sometimes the form data is read this way; at other times the form data is passed via the &#8220;query string&#8221; part of the URL.  This module is intended to take care of the different cases and provide a simpler interface to the Python script.  It also provides a number of utilities that help in debugging scripts, and the latest addition is support for file uploads from a form (if your browser supports it). The output of a CGI script should consist of two sections, separated by a blank line.  The first section contains a number of headers, telling the client what kind of data is following.  Python code to generate a minimal header section looks like this: print \"Content-Type: text\/html\"     # HTML is following print                               # blank line, end of headers   The second section is usually HTML, which allows the client software to display nicely formatted text with header, in-line images, etc. Here&#8217;s Python code that prints a simple piece of HTML: print \"<TITLE>CGI script output<\/TITLE>\" print \"<H1>This is my first CGI script<\/H1>\" print \"Hello, world!\"     20.2.2. Using the cgi module\u00b6 Begin by writing import cgi.  Do not use from cgi import * &#8212; the module defines all sorts of names for its own use or for backward compatibility that you don&#8217;t want in your namespace. When you write a new script, consider adding these lines: import cgitb cgitb.enable()   This activates a special exception handler that will display detailed reports in the Web browser if any errors occur.  If you&#8217;d rather not show the guts of your program to users of your script, you can have the reports saved to files instead, with code like this: import cgitb cgitb.enable(display=0, logdir=\"\/tmp\")   It&#8217;s very helpful to use this feature during script development. The reports produced by cgitb provide information that can save you a lot of time in tracking down bugs.  You can always remove the cgitb line later when you have tested your script and are confident that it works correctly. To get at submitted form data, it&#8217;s best to use the FieldStorage class. The other classes defined in this module are provided mostly for backward compatibility. Instantiate it exactly once, without arguments.  This reads the form contents from standard input or the environment (depending on the value of various environment variables set according to the CGI standard).  Since it may consume standard input, it should be instantiated only once. The FieldStorage instance can be indexed like a Python dictionary. It allows membership testing with the in operator, and also supports the standard dictionary method keys() and the built-in function len().  Form fields containing empty strings are ignored and do not appear in the dictionary; to keep such values, provide a true value for the optional keep_blank_values keyword parameter when creating the FieldStorage instance. For instance, the following code (which assumes that the Content-Type header and blank line have already been printed) checks that the fields name and addr are both set to a non-empty string: form = cgi.FieldStorage() if \"name\" not in form or \"addr\" not in form:     print \"<H1>Error<\/H1>\"     print \"Please fill in the name and addr fields.\"     return print \"<p>name:\", form[\"name\"].value print \"<p>addr:\", form[\"addr\"].value ...further form processing here...   Here the fields, accessed through form[key], are themselves instances of FieldStorage (or MiniFieldStorage, depending on the form encoding). The value attribute of the instance yields the string value of the field.  The getvalue() method returns this string value directly; it also accepts an optional second argument as a default to return if the requested key is not present. If the submitted form data contains more than one field with the same name, the object retrieved by form[key] is not a FieldStorage or MiniFieldStorage instance but a list of such instances.  Similarly, in this situation, form.getvalue(key) would return a list of strings. If you expect this possibility (when your HTML form contains multiple fields with the same name), use the getlist() function, which always returns a list of values (so that you do not need to special-case the single item case).  For example, this code concatenates any number of username fields, separated by commas: value = form.getlist(\"username\") usernames = \",\".join(value)   If a field represents an uploaded file, accessing the value via the value attribute or the getvalue() method reads the entire file in memory as a string.  This may not be what you want. You can test for an uploaded file by testing either the filename attribute or the file attribute.  You can then read the data at leisure from the file attribute: fileitem = form[\"userfile\"] if fileitem.file:     # It&#39;s an uploaded file; count lines     linecount = 0     while 1:         line = fileitem.file.readline()         if not line: break         linecount = linecount + 1   If an error is encountered when obtaining the contents of an uploaded file (for example, when the user interrupts the form submission by clicking on a Back or Cancel button) the done attribute of the object for the field will be set to the value -1. The file upload draft standard entertains the possibility of uploading multiple files from one field (using a recursive multipart\/* encoding). When this occurs, the item will be a dictionary-like FieldStorage item. This can be determined by testing its type attribute, which should be multipart\/form-data (or perhaps another MIME type matching multipart\/*).  In this case, it can be iterated over recursively just like the top-level form object. When a form is submitted in the &#8220;old&#8221; format (as the query string or as a single data part of type application\/x-www-form-urlencoded), the items will actually be instances of the class MiniFieldStorage.  In this case, the list, file, and filename attributes are always None. A form submitted via POST that also has a query string will contain both FieldStorage and MiniFieldStorage items.   20.2.3. Higher Level Interface\u00b6  New in version 2.2. The previous section explains how to read CGI form data using the FieldStorage class.  This section describes a higher level interface which was added to this class to allow one to do it in a more readable and intuitive way.  The interface doesn&#8217;t make the techniques described in previous sections obsolete &#8212; they are still useful to process file uploads efficiently, for example. The interface consists of two simple methods. Using the methods you can process form data in a generic way, without the need to worry whether only one or more values were posted under one name. In the previous section, you learned to write following code anytime you expected a user to post more than one value under one name: item = form.getvalue(\"item\") if isinstance(item, list):     # The user is requesting more than one item. else:     # The user is requesting only one item.  This situation is common for example when a form contains a group of multiple checkboxes with the same name: <input type=\"checkbox\" name=\"item\" value=\"1\" \/> <input type=\"checkbox\" name=\"item\" value=\"2\" \/>  In most situations, however, there&#8217;s only one form control with a particular name in a form and then you expect and need only one value associated with this name.  So you write a script containing for example this code: user = form.getvalue(\"user\").upper()   The problem with the code is that you should never expect that a client will provide valid input to your scripts.  For example, if a curious user appends another user=foo pair to the query string, then the script would crash, because in this situation the getvalue(\"user\") method call returns a list instead of a string.  Calling the upper() method on a list is not valid (since lists do not have a method of this name) and results in an AttributeError exception. Therefore, the appropriate way to read form data values was to always use the code which checks whether the obtained value is a single value or a list of values.  That&#8217;s annoying and leads to less readable scripts. A more convenient approach is to use the methods getfirst() and getlist() provided by this higher level interface.   FieldStorage.getfirst(name[, default])\u00b6 This method always returns only one value associated with form field name. The method returns only the first value in case that more values were posted under such name.  Please note that the order in which the values are received may vary from browser to browser and should not be counted on. [1]  If no such form field or value exists then the method returns the value specified by the optional parameter default.  This parameter defaults to None if not specified.    FieldStorage.getlist(name)\u00b6 This method always returns a list of values associated with form field name. The method returns an empty list if no such form field or value exists for name.  It returns a list consisting of one item if only one such value exists.  Using these methods you can write nice compact code: import cgi form = cgi.FieldStorage() user = form.getfirst(\"user\", \"\").upper()    # This way it&#39;s safe. for item in form.getlist(\"item\"):     do_something(item)     20.2.4. Old classes\u00b6  Deprecated since version 2.6. SvFormContentDict stores single value form content as dictionary; it assumes each field name occurs in the form only once. FormContentDict stores multiple value form content as a dictionary (the form items are lists of values).  Useful if your form contains multiple fields with the same name. Other classes (FormContent, InterpFormContentDict) are present for backwards compatibility with really old applications only.   20.2.5. Functions\u00b6 These are useful if you want more control, or if you want to employ some of the algorithms implemented in this module in other circumstances.   cgi.parse(fp[, keep_blank_values[, strict_parsing]])\u00b6 Parse a query in the environment or from a file (the file defaults to sys.stdin).  The keep_blank_values and strict_parsing parameters are passed to urlparse.parse_qs() unchanged.    cgi.parse_qs(qs[, keep_blank_values[, strict_parsing]])\u00b6 This function is deprecated in this module. Use urlparse.parse_qs() instead. It is maintained here only for backward compatiblity.    cgi.parse_qsl(qs[, keep_blank_values[, strict_parsing]])\u00b6 This function is deprecated in this module. Use urlparse.parse_qsl() instead. It is maintained here only for backward compatiblity.    cgi.parse_multipart(fp, pdict)\u00b6 Parse input of type multipart\/form-data (for  file uploads). Arguments are fp for the input file and pdict for a dictionary containing other parameters in the Content-Type header. Returns a dictionary just like urlparse.parse_qs() keys are the field names, each value is a list of values for that field.  This is easy to use but not much good if you are expecting megabytes to be uploaded &#8212; in that case, use the FieldStorage class instead which is much more flexible. Note that this does not parse nested multipart parts &#8212; use FieldStorage for that.     cgi.parse_header(string)\u00b6 Parse a MIME header (such as Content-Type) into a main value and a dictionary of parameters.    cgi.test()\u00b6 Robust test CGI script, usable as main program. Writes minimal HTTP headers and formats all information provided to the script in HTML form.    cgi.print_environ()\u00b6 Format the shell environment in HTML.    cgi.print_form(form)\u00b6 Format a form in HTML.    cgi.print_directory()\u00b6 Format the current directory in HTML.    cgi.print_environ_usage()\u00b6 Print a list of useful (used by CGI) environment variables in HTML.    cgi.escape(s[, quote])\u00b6 Convert the characters '&', '<' and '>' in string s to HTML-safe sequences.  Use this if you need to display text that might contain such characters in HTML.  If the optional flag quote is true, the quotation mark character (\") is also translated; this helps for inclusion in an HTML attribute value delimited by double quotes, as in <a href=\"...\">.  Note that single quotes are never translated. If the value to be quoted might include single- or double-quote characters, or both, consider using the quoteattr() function in the xml.sax.saxutils module instead.     20.2.6. Caring about security\u00b6 There&#8217;s one important rule: if you invoke an external program (via the os.system() or os.popen() functions. or others with similar functionality), make very sure you don&#8217;t pass arbitrary strings received from the client to the shell.  This is a well-known security hole whereby clever hackers anywhere on the Web can exploit a gullible CGI script to invoke arbitrary shell commands.  Even parts of the URL or field names cannot be trusted, since the request doesn&#8217;t have to come from your form! To be on the safe side, if you must pass a string gotten from a form to a shell command, you should make sure the string contains only alphanumeric characters, dashes, underscores, and periods.   20.2.7. Installing your CGI script on a Unix system\u00b6 Read the documentation for your HTTP server and check with your local system administrator to find the directory where CGI scripts should be installed; usually this is in a directory cgi-bin in the server tree. Make sure that your script is readable and executable by &#8220;others&#8221;; the Unix file mode should be 0755 octal (use chmod 0755 filename).  Make sure that the first line of the script contains #! starting in column 1 followed by the pathname of the Python interpreter, for instance: #!\/usr\/local\/bin\/python   Make sure the Python interpreter exists and is executable by &#8220;others&#8221;. Make sure that any files your script needs to read or write are readable or writable, respectively, by &#8220;others&#8221; &#8212; their mode should be 0644 for readable and 0666 for writable.  This is because, for security reasons, the HTTP server executes your script as user &#8220;nobody&#8221;, without any special privileges.  It can only read (write, execute) files that everybody can read (write, execute).  The current directory at execution time is also different (it is usually the server&#8217;s cgi-bin directory) and the set of environment variables is also different from what you get when you log in.  In particular, don&#8217;t count on the shell&#8217;s search path for executables (PATH) or the Python module search path (PYTHONPATH) to be set to anything interesting. If you need to load modules from a directory which is not on Python&#8217;s default module search path, you can change the path in your script, before importing other modules.  For example: import sys sys.path.insert(0, \"\/usr\/home\/joe\/lib\/python\") sys.path.insert(0, \"\/usr\/local\/lib\/python\")   (This way, the directory inserted last will be searched first!) Instructions for non-Unix systems will vary; check your HTTP server&#8217;s documentation (it will usually have a section on CGI scripts).   20.2.8. Testing your CGI script\u00b6 Unfortunately, a CGI script will generally not run when you try it from the command line, and a script that works perfectly from the command line may fail mysteriously when run from the server.  There&#8217;s one reason why you should still test your script from the command line: if it contains a syntax error, the Python interpreter won&#8217;t execute it at all, and the HTTP server will most likely send a cryptic error to the client. Assuming your script has no syntax errors, yet it does not work, you have no choice but to read the next section.   20.2.9. Debugging CGI scripts\u00b6 First of all, check for trivial installation errors &#8212; reading the section above on installing your CGI script carefully can save you a lot of time.  If you wonder whether you have understood the installation procedure correctly, try installing a copy of this module file (cgi.py) as a CGI script.  When invoked as a script, the file will dump its environment and the contents of the form in HTML form. Give it the right mode etc, and send it a request.  If it&#8217;s installed in the standard cgi-bin directory, it should be possible to send it a request by entering a URL into your browser of the form: http:\/\/yourhostname\/cgi-bin\/cgi.py?name=Joe+Blow&addr=At+Home  If this gives an error of type 404, the server cannot find the script &#8211; perhaps you need to install it in a different directory.  If it gives another error, there&#8217;s an installation problem that you should fix before trying to go any further.  If you get a nicely formatted listing of the environment and form content (in this example, the fields should be listed as &#8220;addr&#8221; with value &#8220;At Home&#8221; and &#8220;name&#8221; with value &#8220;Joe Blow&#8221;), the cgi.py script has been installed correctly.  If you follow the same procedure for your own script, you should now be able to debug it. The next step could be to call the cgi module&#8217;s test() function from your script: replace its main code with the single statement cgi.test()   This should produce the same results as those gotten from installing the cgi.py file itself. When an ordinary Python script raises an unhandled exception (for whatever reason: of a typo in a module name, a file that can&#8217;t be opened, etc.), the Python interpreter prints a nice traceback and exits.  While the Python interpreter will still do this when your CGI script raises an exception, most likely the traceback will end up in one of the HTTP server&#8217;s log files, or be discarded altogether. Fortunately, once you have managed to get your script to execute some code, you can easily send tracebacks to the Web browser using the cgitb module. If you haven&#8217;t done so already, just add the lines: import cgitb cgitb.enable()   to the top of your script.  Then try running it again; when a problem occurs, you should see a detailed report that will likely make apparent the cause of the crash. If you suspect that there may be a problem in importing the cgitb module, you can use an even more robust approach (which only uses built-in modules): import sys sys.stderr = sys.stdout print \"Content-Type: text\/plain\" print ...your code here...   This relies on the Python interpreter to print the traceback.  The content type of the output is set to plain text, which disables all HTML processing.  If your script works, the raw HTML will be displayed by your client.  If it raises an exception, most likely after the first two lines have been printed, a traceback will be displayed. Because no HTML interpretation is going on, the traceback will be readable.   20.2.10. Common problems and solutions\u00b6  Most HTTP servers buffer the output from CGI scripts until the script is completed.  This means that it is not possible to display a progress report on the client&#8217;s display while the script is running. Check the installation instructions above. Check the HTTP server&#8217;s log files.  (tail -f logfile in a separate window may be useful!) Always check a script for syntax errors first, by doing something like python script.py. If your script does not have any syntax errors, try adding import cgitb; cgitb.enable() to the top of the script. When invoking external programs, make sure they can be found. Usually, this means using absolute path names &#8212; PATH is usually not set to a very useful value in a CGI script. When reading or writing external files, make sure they can be read or written by the userid under which your CGI script will be running: this is typically the userid under which the web server is running, or some explicitly specified userid for a web server&#8217;s suexec feature. Don&#8217;t try to give a CGI script a set-uid mode.  This doesn&#8217;t work on most systems, and is a security liability as well.  Footnotes    [1]Note that some recent versions of the HTML specification do state what order the field values should be supplied in, but knowing whether a request was received from a conforming browser, or even from a browser at all, is tedious and error-prone."},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.escape","title":"cgi.escape","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.FieldStorage.getfirst","title":"cgi.FieldStorage.getfirst","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.FieldStorage.getlist","title":"cgi.FieldStorage.getlist","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.parse","title":"cgi.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.parse_header","title":"cgi.parse_header","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.parse_multipart","title":"cgi.parse_multipart","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.parse_qs","title":"cgi.parse_qs","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.parse_qsl","title":"cgi.parse_qsl","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.print_directory","title":"cgi.print_directory","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.print_environ","title":"cgi.print_environ","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.print_environ_usage","title":"cgi.print_environ_usage","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.print_form","title":"cgi.print_form","description":""},{"url":"http:\/\/docs.python.org\/library\/cgi.html#cgi.test","title":"cgi.test","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html","title":"urllib","description":"20.5. urllib &#8212; Open arbitrary resources by URL\u00b6  Note The urllib module has been split into parts and renamed in Python 3.0 to urllib.request, urllib.parse, and urllib.error. The 2to3 tool will automatically adapt imports when converting your sources to 3.0. Also note that the urllib.urlopen() function has been removed in Python 3.0 in favor of urllib2.urlopen().  This module provides a high-level interface for fetching data across the World Wide Web.  In particular, the urlopen() function is similar to the built-in function open(), but accepts Universal Resource Locators (URLs) instead of filenames.  Some restrictions apply &#8212; it can only open URLs for reading, and no seek operations are available.  Warning When opening HTTPS URLs, it does not attempt to validate the server certificate.  Use at your own risk!   20.5.1. High-level interface\u00b6   urllib.urlopen(url[, data[, proxies]])\u00b6 Open a network object denoted by a URL for reading.  If the URL does not have a scheme identifier, or if it has file: as its scheme identifier, this opens a local file (without universal newlines); otherwise it opens a socket to a server somewhere on the network.  If the connection cannot be made the IOError exception is raised.  If all went well, a file-like object is returned.  This supports the following methods: read(), readline(), readlines(), fileno(), close(), info(), getcode() and geturl().  It also has proper support for the iterator protocol. One caveat: the read() method, if the size argument is omitted or negative, may not read until the end of the data stream; there is no good way to determine that the entire stream from a socket has been read in the general case. Except for the info(), getcode() and geturl() methods, these methods have the same interface as for file objects &#8212; see section File Objects in this manual.  (It is not a built-in file object, however, so it can&#8217;t be used at those few places where a true built-in file object is required.) The info() method returns an instance of the class mimetools.Message containing meta-information associated with the URL.  When the method is HTTP, these headers are those returned by the server at the head of the retrieved HTML page (including Content-Length and Content-Type).  When the method is FTP, a Content-Length header will be present if (as is now usual) the server passed back a file length in response to the FTP retrieval request. A Content-Type header will be present if the MIME type can be guessed.  When the method is local-file, returned headers will include a Date representing the file&#8217;s last-modified time, a Content-Length giving file size, and a Content-Type containing a guess at the file&#8217;s type. See also the description of the mimetools module. The geturl() method returns the real URL of the page.  In some cases, the HTTP server redirects a client to another URL.  The urlopen() function handles this transparently, but in some cases the caller needs to know which URL the client was redirected to.  The geturl() method can be used to get at this redirected URL. The getcode() method returns the HTTP status code that was sent with the response, or None if the URL is no HTTP URL. If the url uses the http: scheme identifier, the optional data argument may be given to specify a POST request (normally the request type is GET).  The data argument must be in standard application\/x-www-form-urlencoded format; see the urlencode() function below. The urlopen() function works transparently with proxies which do not require authentication.  In a Unix or Windows environment, set the http_proxy, or ftp_proxy environment variables to a URL that identifies the proxy server before starting the Python interpreter.  For example (the '%' is the command prompt): % http_proxy=\"http:\/\/www.someproxy.com:3128\" % export http_proxy % python ...  The no_proxy environment variable can be used to specify hosts which shouldn&#8217;t be reached via proxy; if set, it should be a comma-separated list of hostname suffixes, optionally with :port appended, for example cern.ch,ncsa.uiuc.edu,some.host:8080. In a Windows environment, if no proxy environment variables are set, proxy settings are obtained from the registry&#8217;s Internet Settings section. In a Mac OS X  environment, urlopen() will retrieve proxy information from the OS X System Configuration Framework, which can be managed with Network System Preferences panel. Alternatively, the optional proxies argument may be used to explicitly specify proxies.  It must be a dictionary mapping scheme names to proxy URLs, where an empty dictionary causes no proxies to be used, and None (the default value) causes environmental proxy settings to be used as discussed above.  For example: # Use http:\/\/www.someproxy.com:3128 for http proxying proxies = {&#39;http&#39;: &#39;http:\/\/www.someproxy.com:3128&#39;} filehandle = urllib.urlopen(some_url, proxies=proxies) # Don&#39;t use any proxies filehandle = urllib.urlopen(some_url, proxies={}) # Use proxies from environment - both versions are equivalent filehandle = urllib.urlopen(some_url, proxies=None) filehandle = urllib.urlopen(some_url)   Proxies which require authentication for use are not currently supported; this is considered an implementation limitation.  Changed in version 2.3: Added the proxies support.  Changed in version 2.6: Added getcode() to returned object and support for the no_proxy environment variable.  Deprecated since version 2.6: The urlopen() function has been removed in Python 3.0 in favor of urllib2.urlopen().     urllib.urlretrieve(url[, filename[, reporthook[, data]]])\u00b6 Copy a network object denoted by a URL to a local file, if necessary. If the URL points to a local file, or a valid cached copy of the object exists, the object is not copied.  Return a tuple (filename, headers) where filename is the local file name under which the object can be found, and headers is whatever the info() method of the object returned by urlopen() returned (for a remote object, possibly cached). Exceptions are the same as for urlopen(). The second argument, if present, specifies the file location to copy to (if absent, the location will be a tempfile with a generated name). The third argument, if present, is a hook function that will be called once on establishment of the network connection and once after each block read thereafter.  The hook will be passed three arguments; a count of blocks transferred so far, a block size in bytes, and the total size of the file.  The third argument may be -1 on older FTP servers which do not return a file size in response to a retrieval request. If the url uses the http: scheme identifier, the optional data argument may be given to specify a POST request (normally the request type is GET).  The data argument must in standard application\/x-www-form-urlencoded format; see the urlencode() function below.  Changed in version 2.5: urlretrieve() will raise ContentTooShortError when it detects that the amount of data available  was less than the expected amount (which is the size reported by a  Content-Length header). This can occur, for example, when the  download is interrupted.The Content-Length is treated as a lower bound: if there&#8217;s more data  to read, urlretrieve() reads more data, but if less data is available,  it raises the exception. You can still retrieve the downloaded data in this case, it is stored  in the content attribute of the exception instance. If no Content-Length header was supplied, urlretrieve() can not check the size of the data it has downloaded, and just returns it.  In this case you just have to assume that the download was successful.      urllib._urlopener\u00b6 The public functions urlopen() and urlretrieve() create an instance of the FancyURLopener class and use it to perform their requested actions.  To override this functionality, programmers can create a subclass of URLopener or FancyURLopener, then assign an instance of that class to the urllib._urlopener variable before calling the desired function. For example, applications may want to specify a different User-Agent header than URLopener defines.  This can be accomplished with the following code: import urllib  class AppURLopener(urllib.FancyURLopener):     version = \"App\/1.7\"  urllib._urlopener = AppURLopener()       urllib.urlcleanup()\u00b6 Clear the cache that may have been built up by previous calls to urlretrieve().    20.5.2. Utility functions\u00b6   urllib.quote(string[, safe])\u00b6 Replace special characters in string using the %xx escape. Letters, digits, and the characters '_.-' are never quoted. By default, this function is intended for quoting the path section of the URL. The optional safe parameter specifies additional characters that should not be quoted &#8212; its default value is '\/'. Example: quote('\/~connolly\/') yields '\/%7econnolly\/'.     urllib.quote_plus(string[, safe])\u00b6 Like quote(), but also replaces spaces by plus signs, as required for quoting HTML form values when building up a query string to go into a URL. Plus signs in the original string are escaped unless they are included in safe.  It also does not have safe default to '\/'.    urllib.unquote(string)\u00b6 Replace %xx escapes by their single-character equivalent. Example: unquote('\/%7Econnolly\/') yields '\/~connolly\/'.     urllib.unquote_plus(string)\u00b6 Like unquote(), but also replaces plus signs by spaces, as required for unquoting HTML form values.    urllib.urlencode(query[, doseq])\u00b6 Convert a mapping object or a sequence of two-element tuples to a &#8220;percent-encoded&#8221; string, suitable to pass to urlopen() above as the optional data argument.  This is useful to pass a dictionary of form fields to a POST request.  The resulting string is a series of key=value pairs separated by '&' characters, where both key and value are quoted using quote_plus() above.  When a sequence of two-element tuples is used as the query argument, the first element of each tuple is a key and the second is a value. The value element in itself can be a sequence and in that case, if the optional parameter doseq is evaluates to True, individual key=value pairs separated by '&' are generated for each element of the value sequence for the key.  The order of parameters in the encoded string will match the order of parameter tuples in the sequence. The urlparse module provides the functions parse_qs() and parse_qsl() which are used to parse query strings into Python data structures.    urllib.pathname2url(path)\u00b6 Convert the pathname path from the local syntax for a path to the form used in the path component of a URL.  This does not produce a complete URL.  The return value will already be quoted using the quote() function.    urllib.url2pathname(path)\u00b6 Convert the path component path from an percent-encoded URL to the local syntax for a path.  This does not accept a complete URL.  This function uses unquote() to decode path.    urllib.getproxies()\u00b6 This helper function returns a dictionary of scheme to proxy server URL mappings. It scans the environment for variables named <scheme>_proxy, in case insensitive way, for all operating systems first, and when it cannot find it, looks for proxy information from Mac OSX System Configuration for Mac OS X and Windows Systems Registry for Windows.    20.5.3. URL Opener objects\u00b6   class urllib.URLopener([proxies[, **x509]])\u00b6 Base class for opening and reading URLs.  Unless you need to support opening objects using schemes other than http:, ftp:, or file:, you probably want to use FancyURLopener. By default, the URLopener class sends a User-Agent header of urllib\/VVV, where VVV is the urllib version number. Applications can define their own User-Agent header by subclassing URLopener or FancyURLopener and setting the class attribute version to an appropriate string value in the subclass definition. The optional proxies parameter should be a dictionary mapping scheme names to proxy URLs, where an empty dictionary turns proxies off completely.  Its default value is None, in which case environmental proxy settings will be used if present, as discussed in the definition of urlopen(), above. Additional keyword parameters, collected in x509, may be used for authentication of the client when using the https: scheme.  The keywords key_file and cert_file are supported to provide an  SSL key and certificate; both are needed to support client authentication. URLopener objects will raise an IOError exception if the server returns an error code.    open(fullurl[, data])\u00b6 Open fullurl using the appropriate protocol.  This method sets up cache and proxy information, then calls the appropriate open method with its input arguments.  If the scheme is not recognized, open_unknown() is called. The data argument has the same meaning as the data argument of urlopen().    open_unknown(fullurl[, data])\u00b6 Overridable interface to open unknown URL types.    retrieve(url[, filename[, reporthook[, data]]])\u00b6 Retrieves the contents of url and places it in filename.  The return value is a tuple consisting of a local filename and either a mimetools.Message object containing the response headers (for remote URLs) or None (for local URLs).  The caller must then open and read the contents of filename.  If filename is not given and the URL refers to a local file, the input filename is returned.  If the URL is non-local and filename is not given, the filename is the output of tempfile.mktemp() with a suffix that matches the suffix of the last path component of the input URL.  If reporthook is given, it must be a function accepting three numeric parameters.  It will be called after each chunk of data is read from the network.  reporthook is ignored for local URLs. If the url uses the http: scheme identifier, the optional data argument may be given to specify a POST request (normally the request type is GET).  The data argument must in standard application\/x-www-form-urlencoded format; see the urlencode() function below.     version\u00b6 Variable that specifies the user agent of the opener object.  To get urllib to tell servers that it is a particular user agent, set this in a subclass as a class variable or in the constructor before calling the base constructor.       class urllib.FancyURLopener(...)\u00b6 FancyURLopener subclasses URLopener providing default handling for the following HTTP response codes: 301, 302, 303, 307 and 401.  For the 30x response codes listed above, the Location header is used to fetch the actual URL.  For 401 response codes (authentication required), basic HTTP authentication is performed.  For the 30x response codes, recursion is bounded by the value of the maxtries attribute, which defaults to 10. For all other response codes, the method http_error_default() is called which you can override in subclasses to handle the error appropriately.  Note According to the letter of RFC 2616, 301 and 302 responses to POST requests must not be automatically redirected without confirmation by the user.  In reality, browsers do allow automatic redirection of these responses, changing the POST to a GET, and urllib reproduces this behaviour.  The parameters to the constructor are the same as those for URLopener.  Note  When performing basic authentication, a FancyURLopener instance calls its prompt_user_passwd() method.  The default implementation asks the users for the required information on the controlling terminal.  A subclass may override this method to support more appropriate behavior if needed. The FancyURLopener class offers one additional method that should be overloaded to provide the appropriate behavior:   prompt_user_passwd(host, realm)\u00b6 Return information needed to authenticate the user at the given host in the specified security realm.  The return value should be a tuple, (user, password), which can be used for basic authentication. The implementation prompts for this information on the terminal; an application should override this method to use an appropriate interaction model in the local environment.        exception urllib.ContentTooShortError(msg[, content])\u00b6 This exception is raised when the urlretrieve() function detects that the amount of the downloaded data is less than the  expected amount (given by the Content-Length header). The content attribute stores the downloaded (and supposedly truncated) data.  New in version 2.5.     20.5.4. urllib Restrictions\u00b6    Currently, only the following protocols are supported: HTTP, (versions 0.9 and 1.0),  FTP, and local files.  The caching feature of urlretrieve() has been disabled until I find the time to hack proper processing of Expiration time headers.  There should be a function to query whether a particular URL is in the cache.  For backward compatibility, if a URL appears to point to a local file but the file can&#8217;t be opened, the URL is re-interpreted using the FTP protocol.  This can sometimes cause confusing error messages.  The urlopen() and urlretrieve() functions can cause arbitrarily long delays while waiting for a network connection to be set up.  This means that it is difficult to build an interactive Web client using these functions without using threads.  The data returned by urlopen() or urlretrieve() is the raw data returned by the server.  This may be binary data (such as an image), plain text or (for example) HTML.  The HTTP protocol provides type information in the reply header, which can be inspected by looking at the Content-Type header.  If the returned data is HTML, you can use the module htmllib to parse it.  The code handling the FTP protocol cannot differentiate between a file and a directory.  This can lead to unexpected behavior when attempting to read a URL that points to a file that is not accessible.  If the URL ends in a \/, it is assumed to refer to a directory and will be handled accordingly.  But if an attempt to read a file leads to a 550 error (meaning the URL cannot be found or is not accessible, often for permission reasons), then the path is treated as a directory in order to handle the case when a directory is specified by a URL but the trailing \/ has been left off.  This can cause misleading results when you try to fetch a file whose read permissions make it inaccessible; the FTP code will try to read it, fail with a 550 error, and then perform a directory listing for the unreadable file. If fine-grained control is needed, consider using the ftplib module, subclassing FancyURLopener, or changing _urlopener to meet your needs.  This module does not support the use of proxies which require authentication. This may be implemented in the future.  Although the urllib module contains (undocumented) routines to parse and unparse URL strings, the recommended interface for URL manipulation is in module urlparse.     20.5.5. Examples\u00b6 Here is an example session that uses the GET method to retrieve a URL containing parameters: >>> import urllib >>> params = urllib.urlencode({&#39;spam&#39;: 1, &#39;eggs&#39;: 2, &#39;bacon&#39;: 0}) >>> f = urllib.urlopen(\"http:\/\/www.musi-cal.com\/cgi-bin\/query?%s\"  params) >>> print f.read()   The following example uses the POST method instead: >>> import urllib >>> params = urllib.urlencode({&#39;spam&#39;: 1, &#39;eggs&#39;: 2, &#39;bacon&#39;: 0}) >>> f = urllib.urlopen(\"http:\/\/www.musi-cal.com\/cgi-bin\/query\", params) >>> print f.read()   The following example uses an explicitly specified HTTP proxy, overriding environment settings: >>> import urllib >>> proxies = {&#39;http&#39;: &#39;http:\/\/proxy.example.com:8080\/&#39;} >>> opener = urllib.FancyURLopener(proxies) >>> f = opener.open(\"http:\/\/www.python.org\") >>> f.read()   The following example uses no proxies at all, overriding environment settings: >>> import urllib >>> opener = urllib.FancyURLopener({}) >>> f = opener.open(\"http:\/\/www.python.org\/\") >>> f.read()"},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.FancyURLopener","title":"urllib.FancyURLopener","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.FancyURLopener.prompt_user_passwd","title":"urllib.FancyURLopener.prompt_user_passwd","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.getproxies","title":"urllib.getproxies","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.pathname2url","title":"urllib.pathname2url","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.quote","title":"urllib.quote","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.quote_plus","title":"urllib.quote_plus","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.unquote","title":"urllib.unquote","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.unquote_plus","title":"urllib.unquote_plus","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.url2pathname","title":"urllib.url2pathname","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.urlcleanup","title":"urllib.urlcleanup","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.urlencode","title":"urllib.urlencode","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.urlopen","title":"urllib.urlopen","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.URLopener","title":"urllib.URLopener","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.URLopener.open","title":"urllib.URLopener.open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.URLopener.open_unknown","title":"urllib.URLopener.open_unknown","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.URLopener.retrieve","title":"urllib.URLopener.retrieve","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib.html#urllib.urlretrieve","title":"urllib.urlretrieve","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html","title":"wsgiref","description":"20.4. wsgiref &#8212; WSGI Utilities and Reference Implementation\u00b6  New in version 2.5. The Web Server Gateway Interface (WSGI) is a standard interface between web server software and web applications written in Python. Having a standard interface makes it easy to use an application that supports WSGI with a number of different web servers. Only authors of web servers and programming frameworks need to know every detail and corner case of the WSGI design.  You don&#8217;t need to understand every detail of WSGI just to install a WSGI application or to write a web application using an existing framework. wsgiref is a reference implementation of the WSGI specification that can be used to add WSGI support to a web server or framework.  It provides utilities for manipulating WSGI environment variables and response headers, base classes for implementing WSGI servers, a demo HTTP server that serves WSGI applications, and a validation tool that checks WSGI servers and applications for conformance to the WSGI specification (PEP 333). See http:\/\/www.wsgi.org for more information about WSGI, and links to tutorials and other resources.  20.4.1. wsgiref.util &#8211; WSGI environment utilities\u00b6 This module provides a variety of utility functions for working with WSGI environments.  A WSGI environment is a dictionary containing HTTP request variables as described in PEP 333.  All of the functions taking an environ parameter expect a WSGI-compliant dictionary to be supplied; please see PEP 333 for a detailed specification.   wsgiref.util.guess_scheme(environ)\u00b6 Return a guess for whether wsgi.url_scheme should be &#8220;http&#8221; or &#8220;https&#8221;, by checking for a HTTPS environment variable in the environ dictionary.  The return value is a string. This function is useful when creating a gateway that wraps CGI or a CGI-like protocol such as FastCGI.  Typically, servers providing such protocols will include a HTTPS variable with a value of &#8220;1&#8221; &#8220;yes&#8221;, or &#8220;on&#8221; when a request is received via SSL.  So, this function returns &#8220;https&#8221; if such a value is found, and &#8220;http&#8221; otherwise.     wsgiref.util.request_uri(environ[, include_query=1])\u00b6 Return the full request URI, optionally including the query string, using the algorithm found in the &#8220;URL Reconstruction&#8221; section of PEP 333.  If include_query is false, the query string is not included in the resulting URI.    wsgiref.util.application_uri(environ)\u00b6 Similar to request_uri(), except that the PATH_INFO and QUERY_STRING variables are ignored.  The result is the base URI of the application object addressed by the request.    wsgiref.util.shift_path_info(environ)\u00b6 Shift a single name from PATH_INFO to SCRIPT_NAME and return the name. The environ dictionary is modified in-place; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact. If there are no remaining path segments in PATH_INFO, None is returned. Typically, this routine is used to process each portion of a request URI path, for example to treat the path as a series of dictionary keys. This routine modifies the passed-in environment to make it suitable for invoking another WSGI application that is located at the target URI. For example, if there is a WSGI application at \/foo, and the request URI path is \/foo\/bar\/baz, and the WSGI application at \/foo calls shift_path_info(), it will receive the string &#8220;bar&#8221;, and the environment will be updated to be suitable for passing to a WSGI application at \/foo\/bar.  That is, SCRIPT_NAME will change from \/foo to \/foo\/bar, and PATH_INFO will change from \/bar\/baz to \/baz. When PATH_INFO is just a &#8220;\/&#8221;, this routine returns an empty string and appends a trailing slash to SCRIPT_NAME, even though empty path segments are normally ignored, and SCRIPT_NAME doesn&#8217;t normally end in a slash.  This is intentional behavior, to ensure that an application can tell the difference between URIs ending in \/x from ones ending in \/x\/ when using this routine to do object traversal.     wsgiref.util.setup_testing_defaults(environ)\u00b6 Update environ with trivial defaults for testing purposes. This routine adds various parameters required for WSGI, including HTTP_HOST, SERVER_NAME, SERVER_PORT, REQUEST_METHOD, SCRIPT_NAME, PATH_INFO, and all of the PEP 333-defined wsgi.* variables.  It only supplies default values, and does not replace any existing settings for these variables. This routine is intended to make it easier for unit tests of WSGI servers and applications to set up dummy environments.  It should NOT be used by actual WSGI servers or applications, since the data is fake! Example usage: from wsgiref.util import setup_testing_defaults from wsgiref.simple_server import make_server  # A relatively simple WSGI application. It&#39;s going to print out the # environment dictionary after being updated by setup_testing_defaults def simple_app(environ, start_response):     setup_testing_defaults(environ)      status = &#39;200 OK&#39;     headers = [(&#39;Content-type&#39;, &#39;text\/plain&#39;)]      start_response(status, headers)      ret = [\"%s: %s\\n\"  (key, value)            for key, value in environ.iteritems()]     return ret  httpd = make_server(&#39;&#39;, 8000, simple_app) print \"Serving on port 8000...\" httpd.serve_forever()     In addition to the environment functions above, the wsgiref.util module also provides these miscellaneous utilities:   wsgiref.util.is_hop_by_hop(header_name)\u00b6 Return true if &#8216;header_name&#8217; is an HTTP\/1.1 &#8220;Hop-by-Hop&#8221; header, as defined by RFC 2616.    class wsgiref.util.FileWrapper(filelike[, blksize=8192])\u00b6 A wrapper to convert a file-like object to an iterator.  The resulting objects support both __getitem__() and __iter__() iteration styles, for compatibility with Python 2.1 and Jython. As the object is iterated over, the optional blksize parameter will be repeatedly passed to the filelike object&#8217;s read() method to obtain strings to yield.  When read() returns an empty string, iteration is ended and is not resumable. If filelike has a close() method, the returned object will also have a close() method, and it will invoke the filelike object&#8217;s close() method when called. Example usage: from StringIO import StringIO from wsgiref.util import FileWrapper  # We&#39;re using a StringIO-buffer for as the file-like object filelike = StringIO(\"This is an example file-like object\"*10) wrapper = FileWrapper(filelike, blksize=5)  for chunk in wrapper:     print chunk       20.4.2. wsgiref.headers &#8211; WSGI response header tools\u00b6 This module provides a single class, Headers, for convenient manipulation of WSGI response headers using a mapping-like interface.   class wsgiref.headers.Headers(headers)\u00b6 Create a mapping-like object wrapping headers, which must be a list of header name\/value tuples as described in PEP 333.  Any changes made to the new Headers object will directly update the headers list it was created with. Headers objects support typical mapping operations including __getitem__(), get(), __setitem__(), setdefault(), __delitem__(), __contains__() and has_key().  For each of these methods, the key is the header name (treated case-insensitively), and the value is the first value associated with that header name.  Setting a header deletes any existing values for that header, then adds a new value at the end of the wrapped header list.  Headers&#8217; existing order is generally maintained, with new headers added to the end of the wrapped list. Unlike a dictionary, Headers objects do not raise an error when you try to get or delete a key that isn&#8217;t in the wrapped header list. Getting a nonexistent header just returns None, and deleting a nonexistent header does nothing. Headers objects also support keys(), values(), and items() methods.  The lists returned by keys() and items() can include the same key more than once if there is a multi-valued header.  The len() of a Headers object is the same as the length of its items(), which is the same as the length of the wrapped header list.  In fact, the items() method just returns a copy of the wrapped header list. Calling str() on a Headers object returns a formatted string suitable for transmission as HTTP response headers.  Each header is placed on a line with its value, separated by a colon and a space. Each line is terminated by a carriage return and line feed, and the string is terminated with a blank line. In addition to their mapping interface and formatting features, Headers objects also have the following methods for querying and adding multi-valued headers, and for adding headers with MIME parameters:   get_all(name)\u00b6 Return a list of all the values for the named header. The returned list will be sorted in the order they appeared in the original header list or were added to this instance, and may contain duplicates.  Any fields deleted and re-inserted are always appended to the header list.  If no fields exist with the given name, returns an empty list.     add_header(name, value, **_params)\u00b6 Add a (possibly multi-valued) header, with optional MIME parameters specified via keyword arguments. name is the header field to add.  Keyword arguments can be used to set MIME parameters for the header field.  Each parameter must be a string or None. Underscores in parameter names are converted to dashes, since dashes are illegal in Python identifiers, but many MIME parameter names include dashes.  If the parameter value is a string, it is added to the header value parameters in the form name=\"value\". If it is None, only the parameter name is added. (This is used for MIME parameters without a value.)  Example usage: h.add_header(&#39;content-disposition&#39;, &#39;attachment&#39;, filename=&#39;bud.gif&#39;)   The above will add a header that looks like this: Content-Disposition: attachment; filename=\"bud.gif\"        20.4.3. wsgiref.simple_server &#8211; a simple WSGI HTTP server\u00b6 This module implements a simple HTTP server (based on BaseHTTPServer) that serves WSGI applications.  Each server instance serves a single WSGI application on a given host and port.  If you want to serve multiple applications on a single host and port, you should create a WSGI application that parses PATH_INFO to select which application to invoke for each request.  (E.g., using the shift_path_info() function from wsgiref.util.)   wsgiref.simple_server.make_server(host, port, app[, server_class=WSGIServer[, handler_class=WSGIRequestHandler]])\u00b6 Create a new WSGI server listening on host and port, accepting connections for app.  The return value is an instance of the supplied server_class, and will process requests using the specified handler_class.  app must be a WSGI application object, as defined by PEP 333. Example usage: from wsgiref.simple_server import make_server, demo_app  httpd = make_server(&#39;&#39;, 8000, demo_app) print \"Serving HTTP on port 8000...\"  # Respond to requests until process is killed httpd.serve_forever()  # Alternative: serve one request, then exit httpd.handle_request()       wsgiref.simple_server.demo_app(environ, start_response)\u00b6 This function is a small but complete WSGI application that returns a text page containing the message &#8220;Hello world!&#8221; and a list of the key\/value pairs provided in the environ parameter.  It&#8217;s useful for verifying that a WSGI server (such as wsgiref.simple_server) is able to run a simple WSGI application correctly.    class wsgiref.simple_server.WSGIServer(server_address, RequestHandlerClass)\u00b6 Create a WSGIServer instance.  server_address should be a (host,port) tuple, and RequestHandlerClass should be the subclass of BaseHTTPServer.BaseHTTPRequestHandler that will be used to process requests. You do not normally need to call this constructor, as the make_server() function can handle all the details for you. WSGIServer is a subclass of BaseHTTPServer.HTTPServer, so all of its methods (such as serve_forever() and handle_request()) are available. WSGIServer also provides these WSGI-specific methods:   set_app(application)\u00b6 Sets the callable application as the WSGI application that will receive requests.    get_app()\u00b6 Returns the currently-set application callable.  Normally, however, you do not need to use these additional methods, as set_app() is normally called by make_server(), and the get_app() exists mainly for the benefit of request handler instances.     class wsgiref.simple_server.WSGIRequestHandler(request, client_address, server)\u00b6 Create an HTTP handler for the given request (i.e. a socket), client_address (a (host,port) tuple), and server (WSGIServer instance). You do not need to create instances of this class directly; they are automatically created as needed by WSGIServer objects.  You can, however, subclass this class and supply it as a handler_class to the make_server() function.  Some possibly relevant methods for overriding in subclasses:   get_environ()\u00b6 Returns a dictionary containing the WSGI environment for a request.  The default implementation copies the contents of the WSGIServer object&#8217;s base_environ dictionary attribute and then adds various headers derived from the HTTP request.  Each call to this method should return a new dictionary containing all of the relevant CGI environment variables as specified in PEP 333.    get_stderr()\u00b6 Return the object that should be used as the wsgi.errors stream. The default implementation just returns sys.stderr.    handle()\u00b6 Process the HTTP request.  The default implementation creates a handler instance using a wsgiref.handlers class to implement the actual WSGI application interface.      20.4.4. wsgiref.validate &#8212; WSGI conformance checker\u00b6 When creating new WSGI application objects, frameworks, servers, or middleware, it can be useful to validate the new code&#8217;s conformance using wsgiref.validate.  This module provides a function that creates WSGI application objects that validate communications between a WSGI server or gateway and a WSGI application object, to check both sides for protocol conformance. Note that this utility does not guarantee complete PEP 333 compliance; an absence of errors from this module does not necessarily mean that errors do not exist.  However, if this module does produce an error, then it is virtually certain that either the server or application is not 100% compliant. This module is based on the paste.lint module from Ian Bicking&#8217;s &#8220;Python Paste&#8221; library.   wsgiref.validate.validator(application)\u00b6 Wrap application and return a new WSGI application object.  The returned application will forward all requests to the original application, and will check that both the application and the server invoking it are conforming to the WSGI specification and to RFC 2616. Any detected nonconformance results in an AssertionError being raised; note, however, that how these errors are handled is server-dependent.  For example, wsgiref.simple_server and other servers based on wsgiref.handlers (that don&#8217;t override the error handling methods to do something else) will simply output a message that an error has occurred, and dump the traceback to sys.stderr or some other error stream. This wrapper may also generate output using the warnings module to indicate behaviors that are questionable but which may not actually be prohibited by PEP 333.  Unless they are suppressed using Python command-line options or the warnings API, any such warnings will be written to sys.stderr (not wsgi.errors, unless they happen to be the same object). Example usage: from wsgiref.validate import validator from wsgiref.simple_server import make_server  # Our callable object which is intentionally not compliant to the # standard, so the validator is going to break def simple_app(environ, start_response):     status = &#39;200 OK&#39; # HTTP Status     headers = [(&#39;Content-type&#39;, &#39;text\/plain&#39;)] # HTTP Headers     start_response(status, headers)      # This is going to break because we need to return a list, and     # the validator is going to inform us     return \"Hello World\"  # This is the application wrapped in a validator validator_app = validator(simple_app)  httpd = make_server(&#39;&#39;, 8000, validator_app) print \"Listening on port 8000....\" httpd.serve_forever()       20.4.5. wsgiref.handlers &#8211; server\/gateway base classes\u00b6 This module provides base handler classes for implementing WSGI servers and gateways.  These base classes handle most of the work of communicating with a WSGI application, as long as they are given a CGI-like environment, along with input, output, and error streams.   class wsgiref.handlers.CGIHandler\u00b6 CGI-based invocation via sys.stdin, sys.stdout, sys.stderr and os.environ.  This is useful when you have a WSGI application and want to run it as a CGI script.  Simply invoke CGIHandler().run(app), where app is the WSGI application object you wish to invoke. This class is a subclass of BaseCGIHandler that sets wsgi.run_once to true, wsgi.multithread to false, and wsgi.multiprocess to true, and always uses sys and os to obtain the necessary CGI streams and environment.     class wsgiref.handlers.BaseCGIHandler(stdin, stdout, stderr, environ[, multithread=True[, multiprocess=False]])\u00b6 Similar to CGIHandler, but instead of using the sys and os modules, the CGI environment and I\/O streams are specified explicitly. The multithread and multiprocess values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance. This class is a subclass of SimpleHandler intended for use with software other than HTTP &#8220;origin servers&#8221;.  If you are writing a gateway protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a Status: header to send an HTTP status, you probably want to subclass this instead of SimpleHandler.     class wsgiref.handlers.SimpleHandler(stdin, stdout, stderr, environ[, multithread=True[, multiprocess=False]])\u00b6 Similar to BaseCGIHandler, but designed for use with HTTP origin servers.  If you are writing an HTTP server implementation, you will probably want to subclass this instead of BaseCGIHandler This class is a subclass of BaseHandler.  It overrides the __init__(), get_stdin(), get_stderr(), add_cgi_vars(), _write(), and _flush() methods to support explicitly setting the environment and streams via the constructor.  The supplied environment and streams are stored in the stdin, stdout, stderr, and environ attributes.     class wsgiref.handlers.BaseHandler\u00b6 This is an abstract base class for running WSGI applications.  Each instance will handle a single HTTP request, although in principle you could create a subclass that was reusable for multiple requests. BaseHandler instances have only one method intended for external use:   run(app)\u00b6 Run the specified WSGI application, app.  All of the other BaseHandler methods are invoked by this method in the process of running the application, and thus exist primarily to allow customizing the process. The following methods MUST be overridden in a subclass:   _write(data)\u00b6 Buffer the string data for transmission to the client.  It&#8217;s okay if this method actually transmits the data; BaseHandler just separates write and flush operations for greater efficiency when the underlying system actually has such a distinction.    _flush()\u00b6 Force buffered data to be transmitted to the client.  It&#8217;s okay if this method is a no-op (i.e., if _write() actually sends the data).    get_stdin()\u00b6 Return an input stream object suitable for use as the wsgi.input of the request currently being processed.    get_stderr()\u00b6 Return an output stream object suitable for use as the wsgi.errors of the request currently being processed.    add_cgi_vars()\u00b6 Insert CGI variables for the current request into the environ attribute.  Here are some other methods and attributes you may wish to override. This list is only a summary, however, and does not include every method that can be overridden.  You should consult the docstrings and source code for additional information before attempting to create a customized BaseHandler subclass. Attributes and methods for customizing the WSGI environment:   wsgi_multithread\u00b6 The value to be used for the wsgi.multithread environment variable.  It defaults to true in BaseHandler, but may have a different default (or be set by the constructor) in the other subclasses.    wsgi_multiprocess\u00b6 The value to be used for the wsgi.multiprocess environment variable.  It defaults to true in BaseHandler, but may have a different default (or be set by the constructor) in the other subclasses.    wsgi_run_once\u00b6 The value to be used for the wsgi.run_once environment variable.  It defaults to false in BaseHandler, but CGIHandler sets it to true by default.    os_environ\u00b6 The default environment variables to be included in every request&#8217;s WSGI environment.  By default, this is a copy of os.environ at the time that wsgiref.handlers was imported, but subclasses can either create their own at the class or instance level.  Note that the dictionary should be considered read-only, since the default value is shared between multiple classes and instances.    server_software\u00b6 If the origin_server attribute is set, this attribute&#8217;s value is used to set the default SERVER_SOFTWARE WSGI environment variable, and also to set a default Server: header in HTTP responses.  It is ignored for handlers (such as BaseCGIHandler and CGIHandler) that are not HTTP origin servers.    get_scheme()\u00b6 Return the URL scheme being used for the current request.  The default implementation uses the guess_scheme() function from wsgiref.util to guess whether the scheme should be &#8220;http&#8221; or &#8220;https&#8221;, based on the current request&#8217;s environ variables.    setup_environ()\u00b6 Set the environ attribute to a fully-populated WSGI environment.  The default implementation uses all of the above methods and attributes, plus the get_stdin(), get_stderr(), and add_cgi_vars() methods and the wsgi_file_wrapper attribute.  It also inserts a SERVER_SOFTWARE key if not present, as long as the origin_server attribute is a true value and the server_software attribute is set.  Methods and attributes for customizing exception handling:   log_exception(exc_info)\u00b6 Log the exc_info tuple in the server log.  exc_info is a (type, value, traceback) tuple.  The default implementation simply writes the traceback to the request&#8217;s wsgi.errors stream and flushes it.  Subclasses can override this method to change the format or retarget the output, mail the traceback to an administrator, or whatever other action may be deemed suitable.    traceback_limit\u00b6 The maximum number of frames to include in tracebacks output by the default log_exception() method.  If None, all frames are included.    error_output(environ, start_response)\u00b6 This method is a WSGI application to generate an error page for the user.  It is only invoked if an error occurs before headers are sent to the client. This method can access the current error information using sys.exc_info(), and should pass that information to start_response when calling it (as described in the &#8220;Error Handling&#8221; section of PEP 333). The default implementation just uses the error_status, error_headers, and error_body attributes to generate an output page.  Subclasses can override this to produce more dynamic error output. Note, however, that it&#8217;s not recommended from a security perspective to spit out diagnostics to any old user; ideally, you should have to do something special to enable diagnostic output, which is why the default implementation doesn&#8217;t include any.     error_status\u00b6 The HTTP status used for error responses.  This should be a status string as defined in PEP 333; it defaults to a 500 code and message.    error_headers\u00b6 The HTTP headers used for error responses.  This should be a list of WSGI response headers ((name, value) tuples), as described in PEP 333.  The default list just sets the content type to text\/plain.    error_body\u00b6 The error response body.  This should be an HTTP response body string. It defaults to the plain text, &#8220;A server error occurred.  Please contact the administrator.&#8221;  Methods and attributes for PEP 333&#8216;s &#8220;Optional Platform-Specific File Handling&#8221; feature:   wsgi_file_wrapper\u00b6 A wsgi.file_wrapper factory, or None.  The default value of this attribute is the FileWrapper class from wsgiref.util.    sendfile()\u00b6 Override to implement platform-specific file transmission.  This method is called only if the application&#8217;s return value is an instance of the class specified by the wsgi_file_wrapper attribute.  It should return a true value if it was able to successfully transmit the file, so that the default transmission code will not be executed. The default implementation of this method just returns a false value.  Miscellaneous methods and attributes:   origin_server\u00b6 This attribute should be set to a true value if the handler&#8217;s _write() and _flush() are being used to communicate directly to the client, rather than via a CGI-like gateway protocol that wants the HTTP status in a special Status: header. This attribute&#8217;s default value is true in BaseHandler, but false in BaseCGIHandler and CGIHandler.     http_version\u00b6 If origin_server is true, this string attribute is used to set the HTTP version of the response set to the client.  It defaults to \"1.0\".      20.4.6. Examples\u00b6 This is a working &#8220;Hello World&#8221; WSGI application: from wsgiref.simple_server import make_server  # Every WSGI application must have an application object - a callable # object that accepts two arguments. For that purpose, we&#39;re going to # use a function (note that you&#39;re not limited to a function, you can # use a class for example). The first argument passed to the function # is a dictionary containing CGI-style envrironment variables and the # second variable is the callable object (see PEP 333). def hello_world_app(environ, start_response):     status = &#39;200 OK&#39; # HTTP Status     headers = [(&#39;Content-type&#39;, &#39;text\/plain&#39;)] # HTTP Headers     start_response(status, headers)      # The returned object is going to be printed     return [\"Hello World\"]  httpd = make_server(&#39;&#39;, 8000, hello_world_app) print \"Serving on port 8000...\"  # Serve until process is killed httpd.serve_forever()"},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseCGIHandler","title":"wsgiref.handlers.BaseCGIHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler","title":"wsgiref.handlers.BaseHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler._flush","title":"wsgiref.handlers.BaseHandler._flush","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler._write","title":"wsgiref.handlers.BaseHandler._write","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.add_cgi_vars","title":"wsgiref.handlers.BaseHandler.add_cgi_vars","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.error_output","title":"wsgiref.handlers.BaseHandler.error_output","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.get_scheme","title":"wsgiref.handlers.BaseHandler.get_scheme","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.get_stderr","title":"wsgiref.handlers.BaseHandler.get_stderr","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.get_stdin","title":"wsgiref.handlers.BaseHandler.get_stdin","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.log_exception","title":"wsgiref.handlers.BaseHandler.log_exception","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.run","title":"wsgiref.handlers.BaseHandler.run","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.sendfile","title":"wsgiref.handlers.BaseHandler.sendfile","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.BaseHandler.setup_environ","title":"wsgiref.handlers.BaseHandler.setup_environ","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.CGIHandler","title":"wsgiref.handlers.CGIHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.handlers.SimpleHandler","title":"wsgiref.handlers.SimpleHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.headers.Headers","title":"wsgiref.headers.Headers","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.headers.Headers.add_header","title":"wsgiref.headers.Headers.add_header","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.headers.Headers.get_all","title":"wsgiref.headers.Headers.get_all","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.demo_app","title":"wsgiref.simple_server.demo_app","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.make_server","title":"wsgiref.simple_server.make_server","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler","title":"wsgiref.simple_server.WSGIRequestHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler.get_environ","title":"wsgiref.simple_server.WSGIRequestHandler.get_environ","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler.get_stderr","title":"wsgiref.simple_server.WSGIRequestHandler.get_stderr","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler.handle","title":"wsgiref.simple_server.WSGIRequestHandler.handle","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.WSGIServer","title":"wsgiref.simple_server.WSGIServer","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.WSGIServer.get_app","title":"wsgiref.simple_server.WSGIServer.get_app","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.simple_server.WSGIServer.set_app","title":"wsgiref.simple_server.WSGIServer.set_app","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.util.application_uri","title":"wsgiref.util.application_uri","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.util.FileWrapper","title":"wsgiref.util.FileWrapper","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.util.guess_scheme","title":"wsgiref.util.guess_scheme","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.util.is_hop_by_hop","title":"wsgiref.util.is_hop_by_hop","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.util.request_uri","title":"wsgiref.util.request_uri","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.util.setup_testing_defaults","title":"wsgiref.util.setup_testing_defaults","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.util.shift_path_info","title":"wsgiref.util.shift_path_info","description":""},{"url":"http:\/\/docs.python.org\/library\/wsgiref.html#wsgiref.validate.validator","title":"wsgiref.validate.validator","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html","title":"ftplib","description":"20.8. ftplib &#8212; FTP protocol client\u00b6 Source code: Lib\/ftplib.py  This module defines the class FTP and a few related items. The FTP class implements the client side of the FTP protocol.  You can use this to write Python programs that perform a variety of automated FTP jobs, such as mirroring other ftp servers.  It is also used by the module urllib to handle URLs that use FTP.  For more information on FTP (File Transfer Protocol), see Internet RFC 959. Here&#8217;s a sample session using the ftplib module: >>> from ftplib import FTP >>> ftp = FTP(&#39;ftp.cwi.nl&#39;)   # connect to host, default port >>> ftp.login()               # user anonymous, passwd anonymous@ >>> ftp.retrlines(&#39;LIST&#39;)     # list directory contents total 24418 drwxrwsr-x   5 ftp-usr  pdmaint     1536 Mar 20 09:48 . dr-xr-srwt 105 ftp-usr  pdmaint     1536 Mar 21 14:32 .. -rw-r--r--   1 ftp-usr  pdmaint     5305 Mar 20 09:48 INDEX  .  .  . >>> ftp.retrbinary(&#39;RETR README&#39;, open(&#39;README&#39;, &#39;wb&#39;).write) &#39;226 Transfer complete.&#39; >>> ftp.quit()   The module defines the following items:   class ftplib.FTP([host[, user[, passwd[, acct[, timeout]]]]])\u00b6 Return a new instance of the FTP class.  When host is given, the method call connect(host) is made.  When user is given, additionally the method call login(user, passwd, acct) is made (where passwd and acct default to the empty string when not given).  The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if is not specified, the global default timeout setting will be used).  Changed in version 2.6: timeout was added.     class ftplib.FTP_TLS([host[, user[, passwd[, acct[, keyfile[, certfile[, timeout]]]]]]])\u00b6 A FTP subclass which adds TLS support to FTP as described in RFC 4217. Connect as usual to port 21 implicitly securing the FTP control connection before authenticating. Securing the data connection requires the user to explicitly ask for it by calling the prot_p() method. keyfile and certfile are optional &#8211; they can contain a PEM formatted private key and certificate chain file name for the SSL connection.  New in version 2.7. Here&#8217;s a sample session using the FTP_TLS class: >>> from ftplib import FTP_TLS >>> ftps = FTP_TLS(&#39;ftp.python.org&#39;) >>> ftps.login()           # login anonymously before securing control channel >>> ftps.prot_p()          # switch to secure data connection >>> ftps.retrlines(&#39;LIST&#39;) # list directory content securely total 9 drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 . drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .. drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc d-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming drwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib drwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub drwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr -rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg &#39;226 Transfer complete.&#39; >>> ftps.quit() >>>       exception ftplib.error_reply\u00b6 Exception raised when an unexpected reply is received from the server.    exception ftplib.error_temp\u00b6 Exception raised when an error code signifying a temporary error (response codes in the range 400&#8211;499) is received.    exception ftplib.error_perm\u00b6 Exception raised when an error code signifying a permanent error (response codes in the range 500&#8211;599) is received.    exception ftplib.error_proto\u00b6 Exception raised when a reply is received from the server that does not fit the response specifications of the File Transfer Protocol, i.e. begin with a digit in the range 1&#8211;5.    ftplib.all_errors\u00b6 The set of all exceptions (as a tuple) that methods of FTP instances may raise as a result of problems with the FTP connection (as opposed to programming errors made by the caller).  This set includes the four exceptions listed above as well as socket.error and IOError.   See also  Module netrc Parser for the .netrc file format.  The file .netrc is typically used by FTP clients to load user authentication information before prompting the user.  The file Tools\/scripts\/ftpmirror.py in the Python source distribution is a script that can mirror FTP sites, or portions thereof, using the ftplib module. It can be used as an extended example that applies this module.   20.8.1. FTP Objects\u00b6 Several methods are available in two flavors: one for handling text files and another for binary files.  These are named for the command which is used followed by lines for the text version or binary for the binary version. FTP instances have the following methods:   FTP.set_debuglevel(level)\u00b6 Set the instance&#8217;s debugging level.  This controls the amount of debugging output printed.  The default, 0, produces no debugging output.  A value of 1 produces a moderate amount of debugging output, generally a single line per request.  A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection.    FTP.connect(host[, port[, timeout]])\u00b6 Connect to the given host and port.  The default port number is 21, as specified by the FTP protocol specification.  It is rarely needed to specify a different port number.  This function should be called only once for each instance; it should not be called at all if a host was given when the instance was created.  All other methods can only be used after a connection has been made. The optional timeout parameter specifies a timeout in seconds for the connection attempt. If no timeout is passed, the global default timeout setting will be used.  Changed in version 2.6: timeout was added.     FTP.getwelcome()\u00b6 Return the welcome message sent by the server in reply to the initial connection.  (This message sometimes contains disclaimers or help information that may be relevant to the user.)    FTP.login([user[, passwd[, acct]]])\u00b6 Log in as the given user.  The passwd and acct parameters are optional and default to the empty string.  If no user is specified, it defaults to 'anonymous'.  If user is 'anonymous', the default passwd is 'anonymous@'.  This function should be called only once for each instance, after a connection has been established; it should not be called at all if a host and user were given when the instance was created.  Most FTP commands are only allowed after the client has logged in.  The acct parameter supplies &#8220;accounting information&#8221;; few systems implement this.    FTP.abort()\u00b6 Abort a file transfer that is in progress.  Using this does not always work, but it&#8217;s worth a try.    FTP.sendcmd(command)\u00b6 Send a simple command string to the server and return the response string.    FTP.voidcmd(command)\u00b6 Send a simple command string to the server and handle the response.  Return nothing if a response code corresponding to success (codes in the range 200&#8211;299) is received.  Raise error_reply otherwise.    FTP.retrbinary(command, callback[, maxblocksize[, rest]])\u00b6 Retrieve a file in binary transfer mode.  command should be an appropriate RETR command: 'RETR filename'. The callback function is called for each block of data received, with a single string argument giving the data block. The optional maxblocksize argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer (which will also be the largest size of the data blocks passed to callback).  A reasonable default is chosen. rest means the same thing as in the transfercmd() method.    FTP.retrlines(command[, callback])\u00b6 Retrieve a file or directory listing in ASCII transfer mode.  command should be an appropriate RETR command (see retrbinary()) or a command such as LIST, NLST or MLSD (usually just the string 'LIST').  LIST retrieves a list of files and information about those files. NLST retrieves a list of file names.  On some servers, MLSD retrieves a machine readable list of files and information about those files.  The callback function is called for each line with a string argument containing the line with the trailing CRLF stripped.  The default callback prints the line to sys.stdout.    FTP.set_pasv(boolean)\u00b6 Enable &#8220;passive&#8221; mode if boolean is true, other disable passive mode.  (In Python 2.0 and before, passive mode was off by default; in Python 2.1 and later, it is on by default.)    FTP.storbinary(command, file[, blocksize, callback, rest])\u00b6 Store a file in binary transfer mode.  command should be an appropriate STOR command: \"STOR filename\". file is an open file object which is read until EOF using its read() method in blocks of size blocksize to provide the data to be stored.  The blocksize argument defaults to 8192. callback is an optional single parameter callable that is called on each block of data after it is sent. rest means the same thing as in the transfercmd() method.  Changed in version 2.1: default for blocksize added.  Changed in version 2.6: callback parameter added.  Changed in version 2.7: rest parameter added.     FTP.storlines(command, file[, callback])\u00b6 Store a file in ASCII transfer mode.  command should be an appropriate STOR command (see storbinary()).  Lines are read until EOF from the open file object file using its readline() method to provide the data to be stored.  callback is an optional single parameter callable that is called on each line after it is sent.  Changed in version 2.6: callback parameter added.     FTP.transfercmd(cmd[, rest])\u00b6 Initiate a transfer over the data connection.  If the transfer is active, send a EPRT or  PORT command and the transfer command specified by cmd, and accept the connection.  If the server is passive, send a EPSV or PASV command, connect to it, and start the transfer command.  Either way, return the socket for the connection. If optional rest is given, a REST command is sent to the server, passing rest as an argument.  rest is usually a byte offset into the requested file, telling the server to restart sending the file&#8217;s bytes at the requested offset, skipping over the initial bytes.  Note however that RFC 959 requires only that rest be a string containing characters in the printable range from ASCII code 33 to ASCII code 126.  The transfercmd() method, therefore, converts rest to a string, but no check is performed on the string&#8217;s contents.  If the server does not recognize the REST command, an error_reply exception will be raised.  If this happens, simply call transfercmd() without a rest argument.     FTP.ntransfercmd(cmd[, rest])\u00b6 Like transfercmd(), but returns a tuple of the data connection and the expected size of the data.  If the expected size could not be computed, None will be returned as the expected size.  cmd and rest means the same thing as in transfercmd().    FTP.nlst(argument[, ...])\u00b6 Return a list of file names as returned by the NLST command.  The optional argument is a directory to list (default is the current server directory).  Multiple arguments can be used to pass non-standard options to the NLST command.    FTP.dir(argument[, ...])\u00b6 Produce a directory listing as returned by the LIST command, printing it to standard output.  The optional argument is a directory to list (default is the current server directory).  Multiple arguments can be used to pass non-standard options to the LIST command.  If the last argument is a function, it is used as a callback function as for retrlines(); the default prints to sys.stdout.  This method returns None.    FTP.rename(fromname, toname)\u00b6 Rename file fromname on the server to toname.    FTP.delete(filename)\u00b6 Remove the file named filename from the server.  If successful, returns the text of the response, otherwise raises error_perm on permission errors or error_reply on other errors.    FTP.cwd(pathname)\u00b6 Set the current directory on the server.    FTP.mkd(pathname)\u00b6 Create a new directory on the server.    FTP.pwd()\u00b6 Return the pathname of the current directory on the server.    FTP.rmd(dirname)\u00b6 Remove the directory named dirname on the server.    FTP.size(filename)\u00b6 Request the size of the file named filename on the server.  On success, the size of the file is returned as an integer, otherwise None is returned. Note that the SIZE command is not  standardized, but is supported by many common server implementations.    FTP.quit()\u00b6 Send a QUIT command to the server and close the connection. This is the &#8220;polite&#8221; way to close a connection, but it may raise an exception if the server responds with an error to the QUIT command.  This implies a call to the close() method which renders the FTP instance useless for subsequent calls (see below).    FTP.close()\u00b6 Close the connection unilaterally.  This should not be applied to an already closed connection such as after a successful call to quit().  After this call the FTP instance should not be used any more (after a call to close() or quit() you cannot reopen the connection by issuing another login() method).    20.8.2. FTP_TLS Objects\u00b6 FTP_TLS class inherits from FTP, defining these additional objects:   FTP_TLS.ssl_version\u00b6 The SSL version to use (defaults to TLSv1).    FTP_TLS.auth()\u00b6 Set up secure control connection by using TLS or SSL, depending on what specified in ssl_version() attribute.    FTP_TLS.prot_p()\u00b6 Set up secure data connection.    FTP_TLS.prot_c()\u00b6 Set up clear text data connection."},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP","title":"ftplib.FTP","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.abort","title":"ftplib.FTP.abort","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.close","title":"ftplib.FTP.close","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.connect","title":"ftplib.FTP.connect","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.cwd","title":"ftplib.FTP.cwd","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.delete","title":"ftplib.FTP.delete","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.dir","title":"ftplib.FTP.dir","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.getwelcome","title":"ftplib.FTP.getwelcome","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.login","title":"ftplib.FTP.login","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.mkd","title":"ftplib.FTP.mkd","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.nlst","title":"ftplib.FTP.nlst","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.ntransfercmd","title":"ftplib.FTP.ntransfercmd","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.pwd","title":"ftplib.FTP.pwd","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.quit","title":"ftplib.FTP.quit","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.rename","title":"ftplib.FTP.rename","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.retrbinary","title":"ftplib.FTP.retrbinary","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.retrlines","title":"ftplib.FTP.retrlines","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.rmd","title":"ftplib.FTP.rmd","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.sendcmd","title":"ftplib.FTP.sendcmd","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.set_debuglevel","title":"ftplib.FTP.set_debuglevel","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.set_pasv","title":"ftplib.FTP.set_pasv","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.size","title":"ftplib.FTP.size","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.storbinary","title":"ftplib.FTP.storbinary","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.storlines","title":"ftplib.FTP.storlines","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.transfercmd","title":"ftplib.FTP.transfercmd","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP.voidcmd","title":"ftplib.FTP.voidcmd","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP_TLS","title":"ftplib.FTP_TLS","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP_TLS.auth","title":"ftplib.FTP_TLS.auth","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP_TLS.prot_c","title":"ftplib.FTP_TLS.prot_c","description":""},{"url":"http:\/\/docs.python.org\/library\/ftplib.html#ftplib.FTP_TLS.prot_p","title":"ftplib.FTP_TLS.prot_p","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html","title":"httplib","description":"20.7. httplib &#8212; HTTP protocol client\u00b6  Note The httplib module has been renamed to http.client in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  Source code: Lib\/httplib.py  This module defines classes which implement the client side of the HTTP and HTTPS protocols.  It is normally not used directly &#8212; the module urllib uses it to handle URLs that use HTTP and HTTPS.  Note HTTPS support is only available if the socket module was compiled with SSL support.   Note The public interface for this module changed substantially in Python 2.0.  The HTTP class is retained only for backward compatibility with 1.5.2.  It should not be used in new code.  Refer to the online docstrings for usage.  The module provides the following classes:   class httplib.HTTPConnection(host[, port[, strict[, timeout[, source_address]]]])\u00b6 An HTTPConnection instance represents one transaction with an HTTP server.  It should be instantiated passing it a host and optional port number.  If no port number is passed, the port is extracted from the host string if it has the form host:port, else the default HTTP port (80) is used.  When True, the optional parameter strict (which defaults to a false value) causes BadStatusLine to be raised if the status line can&#8217;t be parsed as a valid HTTP\/1.0 or 1.1 status line.  If the optional timeout parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional source_address parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from. For example, the following calls all create instances that connect to the server at the same host and port: >>> h1 = httplib.HTTPConnection(&#39;www.cwi.nl&#39;) >>> h2 = httplib.HTTPConnection(&#39;www.cwi.nl:80&#39;) >>> h3 = httplib.HTTPConnection(&#39;www.cwi.nl&#39;, 80) >>> h3 = httplib.HTTPConnection(&#39;www.cwi.nl&#39;, 80, timeout=10)    New in version 2.0.  Changed in version 2.6: timeout was added.  Changed in version 2.7: source_address was added.     class httplib.HTTPSConnection(host[, port[, key_file[, cert_file[, strict[, timeout[, source_address]]]]]])\u00b6 A subclass of HTTPConnection that uses SSL for communication with secure servers.  Default port is 443. key_file is the name of a PEM formatted file that contains your private key. cert_file is a PEM formatted certificate chain file.  Warning This does not do any verification of the server&#8217;s certificate.   New in version 2.0.  Changed in version 2.6: timeout was added.  Changed in version 2.7: source_address was added.     class httplib.HTTPResponse(sock[, debuglevel=0][, strict=0])\u00b6 Class whose instances are returned upon successful connection.  Not instantiated directly by user.  New in version 2.0.     class httplib.HTTPMessage\u00b6 An HTTPMessage instance is used to hold the headers from an HTTP response. It is implemented using the mimetools.Message class and provides utility functions to deal with HTTP Headers. It is not directly instantiated by the users.  The following exceptions are raised as appropriate:   exception httplib.HTTPException\u00b6 The base class of the other exceptions in this module.  It is a subclass of Exception.  New in version 2.0.     exception httplib.NotConnected\u00b6 A subclass of HTTPException.  New in version 2.0.     exception httplib.InvalidURL\u00b6 A subclass of HTTPException, raised if a port is given and is either non-numeric or empty.  New in version 2.3.     exception httplib.UnknownProtocol\u00b6 A subclass of HTTPException.  New in version 2.0.     exception httplib.UnknownTransferEncoding\u00b6 A subclass of HTTPException.  New in version 2.0.     exception httplib.UnimplementedFileMode\u00b6 A subclass of HTTPException.  New in version 2.0.     exception httplib.IncompleteRead\u00b6 A subclass of HTTPException.  New in version 2.0.     exception httplib.ImproperConnectionState\u00b6 A subclass of HTTPException.  New in version 2.0.     exception httplib.CannotSendRequest\u00b6 A subclass of ImproperConnectionState.  New in version 2.0.     exception httplib.CannotSendHeader\u00b6 A subclass of ImproperConnectionState.  New in version 2.0.     exception httplib.ResponseNotReady\u00b6 A subclass of ImproperConnectionState.  New in version 2.0.     exception httplib.BadStatusLine\u00b6 A subclass of HTTPException.  Raised if a server responds with a HTTP status code that we don&#8217;t understand.  New in version 2.0.   The constants defined in this module are:   httplib.HTTP_PORT\u00b6 The default port for the HTTP protocol (always 80).    httplib.HTTPS_PORT\u00b6 The default port for the HTTPS protocol (always 443).  and also the following constants for integer status codes:        Constant Value Definition    CONTINUE 100 HTTP\/1.1, RFC 2616, Section 10.1.1  SWITCHING_PROTOCOLS 101 HTTP\/1.1, RFC 2616, Section 10.1.2  PROCESSING 102 WEBDAV, RFC 2518, Section 10.1  OK 200 HTTP\/1.1, RFC 2616, Section 10.2.1  CREATED 201 HTTP\/1.1, RFC 2616, Section 10.2.2  ACCEPTED 202 HTTP\/1.1, RFC 2616, Section 10.2.3  NON_AUTHORITATIVE_INFORMATION 203 HTTP\/1.1, RFC 2616, Section 10.2.4  NO_CONTENT 204 HTTP\/1.1, RFC 2616, Section 10.2.5  RESET_CONTENT 205 HTTP\/1.1, RFC 2616, Section 10.2.6  PARTIAL_CONTENT 206 HTTP\/1.1, RFC 2616, Section 10.2.7  MULTI_STATUS 207 WEBDAV RFC 2518, Section 10.2  IM_USED 226 Delta encoding in HTTP, RFC 3229, Section 10.4.1  MULTIPLE_CHOICES 300 HTTP\/1.1, RFC 2616, Section 10.3.1  MOVED_PERMANENTLY 301 HTTP\/1.1, RFC 2616, Section 10.3.2  FOUND 302 HTTP\/1.1, RFC 2616, Section 10.3.3  SEE_OTHER 303 HTTP\/1.1, RFC 2616, Section 10.3.4  NOT_MODIFIED 304 HTTP\/1.1, RFC 2616, Section 10.3.5  USE_PROXY 305 HTTP\/1.1, RFC 2616, Section 10.3.6  TEMPORARY_REDIRECT 307 HTTP\/1.1, RFC 2616, Section 10.3.8  BAD_REQUEST 400 HTTP\/1.1, RFC 2616, Section 10.4.1  UNAUTHORIZED 401 HTTP\/1.1, RFC 2616, Section 10.4.2  PAYMENT_REQUIRED 402 HTTP\/1.1, RFC 2616, Section 10.4.3  FORBIDDEN 403 HTTP\/1.1, RFC 2616, Section 10.4.4  NOT_FOUND 404 HTTP\/1.1, RFC 2616, Section 10.4.5  METHOD_NOT_ALLOWED 405 HTTP\/1.1, RFC 2616, Section 10.4.6  NOT_ACCEPTABLE 406 HTTP\/1.1, RFC 2616, Section 10.4.7  PROXY_AUTHENTICATION_REQUIRED 407 HTTP\/1.1, RFC 2616, Section 10.4.8  REQUEST_TIMEOUT 408 HTTP\/1.1, RFC 2616, Section 10.4.9  CONFLICT 409 HTTP\/1.1, RFC 2616, Section 10.4.10  GONE 410 HTTP\/1.1, RFC 2616, Section 10.4.11  LENGTH_REQUIRED 411 HTTP\/1.1, RFC 2616, Section 10.4.12  PRECONDITION_FAILED 412 HTTP\/1.1, RFC 2616, Section 10.4.13  REQUEST_ENTITY_TOO_LARGE 413 HTTP\/1.1, RFC 2616, Section 10.4.14  REQUEST_URI_TOO_LONG 414 HTTP\/1.1, RFC 2616, Section 10.4.15  UNSUPPORTED_MEDIA_TYPE 415 HTTP\/1.1, RFC 2616, Section 10.4.16  REQUESTED_RANGE_NOT_SATISFIABLE 416 HTTP\/1.1, RFC 2616, Section 10.4.17  EXPECTATION_FAILED 417 HTTP\/1.1, RFC 2616, Section 10.4.18  UNPROCESSABLE_ENTITY 422 WEBDAV, RFC 2518, Section 10.3  LOCKED 423 WEBDAV RFC 2518, Section 10.4  FAILED_DEPENDENCY 424 WEBDAV, RFC 2518, Section 10.5  UPGRADE_REQUIRED 426 HTTP Upgrade to TLS, RFC 2817, Section 6  INTERNAL_SERVER_ERROR 500 HTTP\/1.1, RFC 2616, Section 10.5.1  NOT_IMPLEMENTED 501 HTTP\/1.1, RFC 2616, Section 10.5.2  BAD_GATEWAY 502 HTTP\/1.1 RFC 2616, Section 10.5.3  SERVICE_UNAVAILABLE 503 HTTP\/1.1, RFC 2616, Section 10.5.4  GATEWAY_TIMEOUT 504 HTTP\/1.1 RFC 2616, Section 10.5.5  HTTP_VERSION_NOT_SUPPORTED 505 HTTP\/1.1, RFC 2616, Section 10.5.6  INSUFFICIENT_STORAGE 507 WEBDAV, RFC 2518, Section 10.6  NOT_EXTENDED 510 An HTTP Extension Framework, RFC 2774, Section 7      httplib.responses\u00b6 This dictionary maps the HTTP 1.1 status codes to the W3C names. Example: httplib.responses[httplib.NOT_FOUND] is 'Not Found'.  New in version 2.5.    20.7.1. HTTPConnection Objects\u00b6 HTTPConnection instances have the following methods:   HTTPConnection.request(method, url[, body[, headers]])\u00b6 This will send a request to the server using the HTTP request method method and the selector url.  If the body argument is present, it should be a string of data to send after the headers are finished. Alternatively, it may be an open file object, in which case the contents of the file is sent; this file object should support fileno() and read() methods. The header Content-Length is automatically set to the correct value. The headers argument should be a mapping of extra HTTP headers to send with the request.  Changed in version 2.6: body can be a file object.     HTTPConnection.getresponse()\u00b6 Should be called after a request is sent to get the response from the server. Returns an HTTPResponse instance.  Note Note that you must have read the whole response before you can send a new request to the server.      HTTPConnection.set_debuglevel(level)\u00b6 Set the debugging level (the amount of debugging output printed). The default debug level is 0, meaning no debugging output is printed.    HTTPConnection.set_tunnel(host, port=None, headers=None)\u00b6 Set the host and the port for HTTP Connect Tunnelling. Normally used when it is required to do HTTPS Conection through a proxy server. The headers argument should be a mapping of extra HTTP headers to send with the CONNECT request.  New in version 2.7.     HTTPConnection.connect()\u00b6 Connect to the server specified when the object was created.    HTTPConnection.close()\u00b6 Close the connection to the server.  As an alternative to using the request() method described above, you can also send your request step by step, by using the four functions below.   HTTPConnection.putrequest(request, selector[, skip_host[, skip_accept_encoding]])\u00b6 This should be the first call after the connection to the server has been made. It sends a line to the server consisting of the request string, the selector string, and the HTTP version (HTTP\/1.1).  To disable automatic sending of Host: or Accept-Encoding: headers (for example to accept additional content encodings), specify skip_host or skip_accept_encoding with non-False values.  Changed in version 2.4: skip_accept_encoding argument added.     HTTPConnection.putheader(header, argument[, ...])\u00b6 Send an RFC 822-style header to the server.  It sends a line to the server consisting of the header, a colon and a space, and the first argument.  If more arguments are given, continuation lines are sent, each consisting of a tab and an argument.    HTTPConnection.endheaders(message_body=None)\u00b6 Send a blank line to the server, signalling the end of the headers. The optional message_body argument can be used to pass a message body associated with the request.  The message body will be sent in the same packet as the message headers if it is string, otherwise it is sent in a separate packet.  Changed in version 2.7: message_body was added.     HTTPConnection.send(data)\u00b6 Send data to the server.  This should be used directly only after the endheaders() method has been called and before getresponse() is called.    20.7.2. HTTPResponse Objects\u00b6 HTTPResponse instances have the following methods and attributes:   HTTPResponse.read([amt])\u00b6 Reads and returns the response body, or up to the next amt bytes.    HTTPResponse.getheader(name[, default])\u00b6 Get the contents of the header name, or default if there is no matching header.    HTTPResponse.getheaders()\u00b6 Return a list of (header, value) tuples.  New in version 2.4.     HTTPResponse.fileno()\u00b6 Returns the fileno of the underlying socket.    HTTPResponse.msg\u00b6 A mimetools.Message instance containing the response headers.    HTTPResponse.version\u00b6 HTTP protocol version used by server.  10 for HTTP\/1.0, 11 for HTTP\/1.1.    HTTPResponse.status\u00b6 Status code returned by server.    HTTPResponse.reason\u00b6 Reason phrase returned by server.    20.7.3. Examples\u00b6 Here is an example session that uses the GET method: >>> import httplib >>> conn = httplib.HTTPConnection(\"www.python.org\") >>> conn.request(\"GET\", \"\/index.html\") >>> r1 = conn.getresponse() >>> print r1.status, r1.reason 200 OK >>> data1 = r1.read() >>> conn.request(\"GET\", \"\/parrot.spam\") >>> r2 = conn.getresponse() >>> print r2.status, r2.reason 404 Not Found >>> data2 = r2.read() >>> conn.close()   Here is an example session that uses the HEAD method.  Note that the HEAD method never returns any data. >>> import httplib >>> conn = httplib.HTTPConnection(\"www.python.org\") >>> conn.request(\"HEAD\",\"\/index.html\") >>> res = conn.getresponse() >>> print res.status, res.reason 200 OK >>> data = res.read() >>> print len(data) 0 >>> data == &#39;&#39; True   Here is an example session that shows how to POST requests: >>> import httplib, urllib >>> params = urllib.urlencode({&#39;@number&#39;: 12524, &#39;@type&#39;: &#39;issue&#39;, &#39;@action&#39;: &#39;show&#39;}) >>> headers = {\"Content-type\": \"application\/x-www-form-urlencoded\", ...            \"Accept\": \"text\/plain\"} >>> conn = httplib.HTTPConnection(\"bugs.python.org\") >>> conn.request(\"POST\", \"\", params, headers) >>> response = conn.getresponse() >>> print response.status, response.reason 302 Found >>> data = response.read() >>> data &#39;Redirecting to <a href=\"http:\/\/bugs.python.org\/issue12524\">http:\/\/bugs.python.org\/issue12524<\/a>&#39; >>> conn.close()"},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection","title":"httplib.HTTPConnection","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.close","title":"httplib.HTTPConnection.close","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.connect","title":"httplib.HTTPConnection.connect","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.endheaders","title":"httplib.HTTPConnection.endheaders","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.getresponse","title":"httplib.HTTPConnection.getresponse","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.putheader","title":"httplib.HTTPConnection.putheader","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.putrequest","title":"httplib.HTTPConnection.putrequest","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.request","title":"httplib.HTTPConnection.request","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.send","title":"httplib.HTTPConnection.send","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.set_debuglevel","title":"httplib.HTTPConnection.set_debuglevel","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPConnection.set_tunnel","title":"httplib.HTTPConnection.set_tunnel","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPMessage","title":"httplib.HTTPMessage","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPResponse","title":"httplib.HTTPResponse","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPResponse.fileno","title":"httplib.HTTPResponse.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPResponse.getheader","title":"httplib.HTTPResponse.getheader","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPResponse.getheaders","title":"httplib.HTTPResponse.getheaders","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPResponse.read","title":"httplib.HTTPResponse.read","description":""},{"url":"http:\/\/docs.python.org\/library\/httplib.html#httplib.HTTPSConnection","title":"httplib.HTTPSConnection","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html","title":"urllib2","description":"20.6. urllib2 &#8212; extensible library for opening URLs\u00b6  Note The urllib2 module has been split across several modules in Python 3.0 named urllib.request and urllib.error. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  The urllib2 module defines functions and classes which help in opening URLs (mostly HTTP) in a complex world &#8212; basic and digest authentication, redirections, cookies and more. The urllib2 module defines the following functions:   urllib2.urlopen(url[, data][, timeout])\u00b6 Open the URL url, which can be either a string or a Request object.  Warning HTTPS requests do not do any verification of the server&#8217;s certificate.  data may be a string specifying additional data to send to the server, or None if no such data is needed.  Currently HTTP requests are the only ones that use data; the HTTP request will be a POST instead of a GET when the data parameter is provided.  data should be a buffer in the standard application\/x-www-form-urlencoded format.  The urllib.urlencode() function takes a mapping or sequence of 2-tuples and returns a string in this format. urllib2 module sends HTTP\/1.1 requests with Connection:close header included. The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).  This actually only works for HTTP, HTTPS and FTP connections. This function returns a file-like object with two additional methods:  geturl() &#8212; return the URL of the resource retrieved, commonly used to determine if a redirect was followed info() &#8212; return the meta-information of the page, such as headers, in the form of an mimetools.Message instance (see Quick Reference to HTTP Headers)  Raises URLError on errors. Note that None may be returned if no handler handles the request (though the default installed global OpenerDirector uses UnknownHandler to ensure this never happens). In addition, default installed ProxyHandler makes sure the requests are handled through the proxy when they are set.  Changed in version 2.6: timeout was added.     urllib2.install_opener(opener)\u00b6 Install an OpenerDirector instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call OpenerDirector.open() instead of urlopen(). The code does not check for a real OpenerDirector, and any class with the appropriate interface will work.    urllib2.build_opener([handler, ...])\u00b6 Return an OpenerDirector instance, which chains the handlers in the order given. handlers can be either instances of BaseHandler, or subclasses of BaseHandler (in which case it must be possible to call the constructor without any parameters).  Instances of the following classes will be in front of the handlers, unless the handlers contain them, instances of them or subclasses of them: ProxyHandler, UnknownHandler, HTTPHandler, HTTPDefaultErrorHandler, HTTPRedirectHandler, FTPHandler, FileHandler, HTTPErrorProcessor. If the Python installation has SSL support (i.e., if the ssl module can be imported), HTTPSHandler will also be added. Beginning in Python 2.3, a BaseHandler subclass may also change its handler_order attribute to modify its position in the handlers list.   The following exceptions are raised as appropriate:   exception urllib2.URLError\u00b6 The handlers raise this exception (or derived exceptions) when they run into a problem.  It is a subclass of IOError.   reason\u00b6 The reason for this error.  It can be a message string or another exception instance (socket.error for remote URLs, OSError for local URLs).      exception urllib2.HTTPError\u00b6 Though being an exception (a subclass of URLError), an HTTPError can also function as a non-exceptional file-like return value (the same thing that urlopen() returns).  This is useful when handling exotic HTTP errors, such as requests for authentication.   code\u00b6 An HTTP status code as defined in RFC 2616. This numeric value corresponds to a value found in the dictionary of codes as found in BaseHTTPServer.BaseHTTPRequestHandler.responses.    The following classes are provided:   class urllib2.Request(url[, data][, headers][, origin_req_host][, unverifiable])\u00b6 This class is an abstraction of a URL request. url should be a string containing a valid URL. data may be a string specifying additional data to send to the server, or None if no such data is needed.  Currently HTTP requests are the only ones that use data; the HTTP request will be a POST instead of a GET when the data parameter is provided.  data should be a buffer in the standard application\/x-www-form-urlencoded format.  The urllib.urlencode() function takes a mapping or sequence of 2-tuples and returns a string in this format. headers should be a dictionary, and will be treated as if add_header() was called with each key and value as arguments.  This is often used to &#8220;spoof&#8221; the User-Agent header, which is used by a browser to identify itself &#8211; some HTTP servers only allow requests coming from common browsers as opposed to scripts.  For example, Mozilla Firefox may identify itself as \"Mozilla\/5.0 (X11; U; Linux i686) Gecko\/20071127 Firefox\/2.0.0.11\", while urllib2&#8216;s default user agent string is \"Python-urllib\/2.6\" (on Python 2.6). The final two arguments are only of interest for correct handling of third-party HTTP cookies: origin_req_host should be the request-host of the origin transaction, as defined by RFC 2965.  It defaults to cookielib.request_host(self).  This is the host name or IP address of the original request that was initiated by the user.  For example, if the request is for an image in an HTML document, this should be the request-host of the request for the page containing the image. unverifiable should indicate whether the request is unverifiable, as defined by RFC 2965.  It defaults to False.  An unverifiable request is one whose URL the user did not have the option to approve.  For example, if the request is for an image in an HTML document, and the user had no option to approve the automatic fetching of the image, this should be true.     class urllib2.OpenerDirector\u00b6 The OpenerDirector class opens URLs via BaseHandlers chained together. It manages the chaining of handlers, and recovery from errors.    class urllib2.BaseHandler\u00b6 This is the base class for all registered handlers &#8212; and handles only the simple mechanics of registration.    class urllib2.HTTPDefaultErrorHandler\u00b6 A class which defines a default handler for HTTP error responses; all responses are turned into HTTPError exceptions.    class urllib2.HTTPRedirectHandler\u00b6 A class to handle redirections.    class urllib2.HTTPCookieProcessor([cookiejar])\u00b6 A class to handle HTTP Cookies.    class urllib2.ProxyHandler([proxies])\u00b6 Cause requests to go through a proxy. If proxies is given, it must be a dictionary mapping protocol names to URLs of proxies. The default is to read the list of proxies from the environment variables .  If no proxy environment variables are set, in a Windows environment, proxy settings are obtained from the registry&#8217;s Internet Settings section and in a Mac OS X  environment, proxy information is retrieved from the OS X System Configuration Framework. To disable autodetected proxy pass an empty dictionary.     class urllib2.HTTPPasswordMgr\u00b6 Keep a database of  (realm, uri) -> (user, password) mappings.    class urllib2.HTTPPasswordMgrWithDefaultRealm\u00b6 Keep a database of  (realm, uri) -> (user, password) mappings. A realm of None is considered a catch-all realm, which is searched if no other realm fits.    class urllib2.AbstractBasicAuthHandler([password_mgr])\u00b6 This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.    class urllib2.HTTPBasicAuthHandler([password_mgr])\u00b6 Handle authentication with the remote host. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.    class urllib2.ProxyBasicAuthHandler([password_mgr])\u00b6 Handle authentication with the proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.    class urllib2.AbstractDigestAuthHandler([password_mgr])\u00b6 This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.    class urllib2.HTTPDigestAuthHandler([password_mgr])\u00b6 Handle authentication with the remote host. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.    class urllib2.ProxyDigestAuthHandler([password_mgr])\u00b6 Handle authentication with the proxy. password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.    class urllib2.HTTPHandler\u00b6 A class to handle opening of HTTP URLs.    class urllib2.HTTPSHandler\u00b6 A class to handle opening of HTTPS URLs.    class urllib2.FileHandler\u00b6 Open local files.    class urllib2.FTPHandler\u00b6 Open FTP URLs.    class urllib2.CacheFTPHandler\u00b6 Open FTP URLs, keeping a cache of open FTP connections to minimize delays.    class urllib2.UnknownHandler\u00b6 A catch-all class to handle unknown URLs.    class urllib2.HTTPErrorProcessor\u00b6 Process HTTP error responses.   20.6.1. Request Objects\u00b6 The following methods describe all of Request&#8216;s public interface, and so all must be overridden in subclasses.   Request.add_data(data)\u00b6 Set the Request data to data.  This is ignored by all handlers except HTTP handlers &#8212; and there it should be a byte string, and will change the request to be POST rather than GET.    Request.get_method()\u00b6 Return a string indicating the HTTP request method.  This is only meaningful for HTTP requests, and currently always returns 'GET' or 'POST'.    Request.has_data()\u00b6 Return whether the instance has a non-None data.    Request.get_data()\u00b6 Return the instance&#8217;s data.    Request.add_header(key, val)\u00b6 Add another header to the request.  Headers are currently ignored by all handlers except HTTP handlers, where they are added to the list of headers sent to the server.  Note that there cannot be more than one header with the same name, and later calls will overwrite previous calls in case the key collides. Currently, this is no loss of HTTP functionality, since all headers which have meaning when used more than once have a (header-specific) way of gaining the same functionality using only one header.    Request.add_unredirected_header(key, header)\u00b6 Add a header that will not be added to a redirected request.  New in version 2.4.     Request.has_header(header)\u00b6 Return whether the instance has the named header (checks both regular and unredirected).  New in version 2.4.     Request.get_full_url()\u00b6 Return the URL given in the constructor.    Request.get_type()\u00b6 Return the type of the URL &#8212; also known as the scheme.    Request.get_host()\u00b6 Return the host to which a connection will be made.    Request.get_selector()\u00b6 Return the selector &#8212; the part of the URL that is sent to the server.    Request.set_proxy(host, type)\u00b6 Prepare the request by connecting to a proxy server. The host and type will replace those of the instance, and the instance&#8217;s selector will be the original URL given in the constructor.    Request.get_origin_req_host()\u00b6 Return the request-host of the origin transaction, as defined by RFC 2965. See the documentation for the Request constructor.    Request.is_unverifiable()\u00b6 Return whether the request is unverifiable, as defined by RFC 2965. See the documentation for the Request constructor.    20.6.2. OpenerDirector Objects\u00b6 OpenerDirector instances have the following methods:   OpenerDirector.add_handler(handler)\u00b6 handler should be an instance of BaseHandler.  The following methods are searched, and added to the possible chains (note that HTTP errors are a special case).  protocol_open &#8212; signal that the handler knows how to open protocol URLs. http_error_type &#8212; signal that the handler knows how to handle HTTP errors with HTTP error code type. protocol_error &#8212; signal that the handler knows how to handle errors from (non-http) protocol. protocol_request &#8212; signal that the handler knows how to pre-process protocol requests. protocol_response &#8212; signal that the handler knows how to post-process protocol responses.      OpenerDirector.open(url[, data][, timeout])\u00b6 Open the given url (which can be a request object or a string), optionally passing the given data. Arguments, return values and exceptions raised are the same as those of urlopen() (which simply calls the open() method on the currently installed global OpenerDirector).  The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). The timeout feature actually works only for HTTP, HTTPS and FTP connections).  Changed in version 2.6: timeout was added.     OpenerDirector.error(proto[, arg[, ...]])\u00b6 Handle an error of the given protocol.  This will call the registered error handlers for the given protocol with the given arguments (which are protocol specific).  The HTTP protocol is a special case which uses the HTTP response code to determine the specific error handler; refer to the http_error_*() methods of the handler classes. Return values and exceptions raised are the same as those of urlopen().   OpenerDirector objects open URLs in three stages: The order in which these methods are called within each stage is determined by sorting the handler instances.  Every handler with a method named like protocol_request has that method called to pre-process the request.  Handlers with a method named like protocol_open are called to handle the request. This stage ends when a handler either returns a non-None value (ie. a response), or raises an exception (usually URLError). Exceptions are allowed to propagate. In fact, the above algorithm is first tried for methods named default_open().  If all such methods return None, the algorithm is repeated for methods named like protocol_open.  If all such methods return None, the algorithm is repeated for methods named unknown_open(). Note that the implementation of these methods may involve calls of the parent OpenerDirector instance&#8217;s open() and error() methods.  Every handler with a method named like protocol_response has that method called to post-process the response.     20.6.3. BaseHandler Objects\u00b6 BaseHandler objects provide a couple of methods that are directly useful, and others that are meant to be used by derived classes.  These are intended for direct use:   BaseHandler.add_parent(director)\u00b6 Add a director as parent.    BaseHandler.close()\u00b6 Remove any parents.  The following attributes and methods should only be used by classes derived from BaseHandler.  Note The convention has been adopted that subclasses defining protocol_request() or protocol_response() methods are named *Processor; all others are named *Handler.    BaseHandler.parent\u00b6 A valid OpenerDirector, which can be used to open using a different protocol, or handle errors.    BaseHandler.default_open(req)\u00b6 This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs. This method, if implemented, will be called by the parent OpenerDirector.  It should return a file-like object as described in the return value of the open() of OpenerDirector, or None. It should raise URLError, unless a truly exceptional thing happens (for example, MemoryError should not be mapped to URLError). This method will be called before any protocol-specific open method.     BaseHandler.protocol_open(req) (&#8220;protocol&#8221; is to be replaced by the protocol name.) This method is not defined in BaseHandler, but subclasses should define it if they want to handle URLs with the given protocol. This method, if defined, will be called by the parent OpenerDirector. Return values should be the same as for  default_open().     BaseHandler.unknown_open(req)\u00b6 This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs with no specific registered handler to open it. This method, if implemented, will be called by the parent OpenerDirector.  Return values should be the same as for default_open().     BaseHandler.http_error_default(req, fp, code, msg, hdrs)\u00b6 This method is not defined in BaseHandler, but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors.  It will be called automatically by the  OpenerDirector getting the error, and should not normally be called in other circumstances. req will be a Request object, fp will be a file-like object with the HTTP error body, code will be the three-digit code of the error, msg will be the user-visible explanation of the code and hdrs will be a mapping object with the headers of the error. Return values and exceptions raised should be the same as those of urlopen().     BaseHandler.http_error_nnn(req, fp, code, msg, hdrs)\u00b6 nnn should be a three-digit HTTP error code.  This method is also not defined in BaseHandler, but will be called, if it exists, on an instance of a subclass, when an HTTP error with code nnn occurs. Subclasses should override this method to handle specific HTTP errors. Arguments, return values and exceptions raised should be the same as for http_error_default().     BaseHandler.protocol_request(req) (&#8220;protocol&#8221; is to be replaced by the protocol name.) This method is not defined in BaseHandler, but subclasses should define it if they want to pre-process requests of the given protocol. This method, if defined, will be called by the parent OpenerDirector. req will be a Request object. The return value should be a Request object.     BaseHandler.protocol_response(req, response) (&#8220;protocol&#8221; is to be replaced by the protocol name.) This method is not defined in BaseHandler, but subclasses should define it if they want to post-process responses of the given protocol. This method, if defined, will be called by the parent OpenerDirector. req will be a Request object. response will be an object implementing the same interface as the return value of urlopen().  The return value should implement the same interface as the return value of urlopen().     20.6.4. HTTPRedirectHandler Objects\u00b6  Note Some HTTP redirections require action from this module&#8217;s client code.  If this is the case, HTTPError is raised.  See RFC 2616 for details of the precise meanings of the various redirection codes.    HTTPRedirectHandler.redirect_request(req, fp, code, msg, hdrs, newurl)\u00b6 Return a Request or None in response to a redirect. This is called by the default implementations of the http_error_30*() methods when a redirection is received from the server.  If a redirection should take place, return a new Request to allow http_error_30*() to perform the redirect to newurl.  Otherwise, raise HTTPError if no other handler should try to handle this URL, or return None if you can&#8217;t but another handler might.  Note The default implementation of this method does not strictly follow RFC 2616, which says that 301 and 302 responses to POST requests must not be automatically redirected without confirmation by the user.  In reality, browsers do allow automatic redirection of these responses, changing the POST to a GET, and the default implementation reproduces this behavior.      HTTPRedirectHandler.http_error_301(req, fp, code, msg, hdrs)\u00b6 Redirect to the Location: or URI: URL.  This method is called by the parent OpenerDirector when getting an HTTP &#8216;moved permanently&#8217; response.    HTTPRedirectHandler.http_error_302(req, fp, code, msg, hdrs)\u00b6 The same as http_error_301(), but called for the &#8216;found&#8217; response.    HTTPRedirectHandler.http_error_303(req, fp, code, msg, hdrs)\u00b6 The same as http_error_301(), but called for the &#8216;see other&#8217; response.    HTTPRedirectHandler.http_error_307(req, fp, code, msg, hdrs)\u00b6 The same as http_error_301(), but called for the &#8216;temporary redirect&#8217; response.    20.6.5. HTTPCookieProcessor Objects\u00b6  New in version 2.4. HTTPCookieProcessor instances have one attribute:   HTTPCookieProcessor.cookiejar\u00b6 The cookielib.CookieJar in which cookies are stored.    20.6.6. ProxyHandler Objects\u00b6   ProxyHandler.protocol_open(request) (&#8220;protocol&#8221; is to be replaced by the protocol name.) The ProxyHandler will have a method protocol_open for every protocol which has a proxy in the proxies dictionary given in the constructor.  The method will modify requests to go through the proxy, by calling request.set_proxy(), and call the next handler in the chain to actually execute the protocol.     20.6.7. HTTPPasswordMgr Objects\u00b6 These methods are available on HTTPPasswordMgr and HTTPPasswordMgrWithDefaultRealm objects.   HTTPPasswordMgr.add_password(realm, uri, user, passwd)\u00b6 uri can be either a single URI, or a sequence of URIs. realm, user and passwd must be strings. This causes (user, passwd) to be used as authentication tokens when authentication for realm and a super-URI of any of the given URIs is given.    HTTPPasswordMgr.find_user_password(realm, authuri)\u00b6 Get user\/password for given realm and URI, if any.  This method will return (None, None) if there is no matching user\/password. For HTTPPasswordMgrWithDefaultRealm objects, the realm None will be searched if the given realm has no matching user\/password.     20.6.8. AbstractBasicAuthHandler Objects\u00b6   AbstractBasicAuthHandler.http_error_auth_reqed(authreq, host, req, headers)\u00b6 Handle an authentication request by getting a user\/password pair, and re-trying the request.  authreq should be the name of the header where the information about the realm is included in the request, host specifies the URL and path to authenticate for, req should be the (failed) Request object, and headers should be the error headers. host is either an authority (e.g. \"python.org\") or a URL containing an authority component (e.g. \"http:\/\/python.org\/\"). In either case, the authority must not contain a userinfo component (so, \"python.org\" and \"python.org:80\" are fine, \"joe:password@python.org\" is not).     20.6.9. HTTPBasicAuthHandler Objects\u00b6   HTTPBasicAuthHandler.http_error_401(req, fp, code, msg, hdrs)\u00b6 Retry the request with authentication information, if available.    20.6.10. ProxyBasicAuthHandler Objects\u00b6   ProxyBasicAuthHandler.http_error_407(req, fp, code, msg, hdrs)\u00b6 Retry the request with authentication information, if available.    20.6.11. AbstractDigestAuthHandler Objects\u00b6   AbstractDigestAuthHandler.http_error_auth_reqed(authreq, host, req, headers)\u00b6 authreq should be the name of the header where the information about the realm is included in the request, host should be the host to authenticate to, req should be the (failed) Request object, and headers should be the error headers.    20.6.12. HTTPDigestAuthHandler Objects\u00b6   HTTPDigestAuthHandler.http_error_401(req, fp, code, msg, hdrs)\u00b6 Retry the request with authentication information, if available.    20.6.13. ProxyDigestAuthHandler Objects\u00b6   ProxyDigestAuthHandler.http_error_407(req, fp, code, msg, hdrs)\u00b6 Retry the request with authentication information, if available.    20.6.14. HTTPHandler Objects\u00b6   HTTPHandler.http_open(req)\u00b6 Send an HTTP request, which can be either GET or POST, depending on req.has_data().    20.6.15. HTTPSHandler Objects\u00b6   HTTPSHandler.https_open(req)\u00b6 Send an HTTPS request, which can be either GET or POST, depending on req.has_data().    20.6.16. FileHandler Objects\u00b6   FileHandler.file_open(req)\u00b6 Open the file locally, if there is no host name, or the host name is 'localhost'. Change the protocol to ftp otherwise, and retry opening it using parent.    20.6.17. FTPHandler Objects\u00b6   FTPHandler.ftp_open(req)\u00b6 Open the FTP file indicated by req. The login is always done with empty username and password.    20.6.18. CacheFTPHandler Objects\u00b6 CacheFTPHandler objects are FTPHandler objects with the following additional methods:   CacheFTPHandler.setTimeout(t)\u00b6 Set timeout of connections to t seconds.    CacheFTPHandler.setMaxConns(m)\u00b6 Set maximum number of cached connections to m.    20.6.19. UnknownHandler Objects\u00b6   UnknownHandler.unknown_open()\u00b6 Raise a URLError exception.    20.6.20. HTTPErrorProcessor Objects\u00b6  New in version 2.4.   HTTPErrorProcessor.http_response()\u00b6 Process HTTP error responses. For 200 error codes, the response object is returned immediately. For non-200 error codes, this simply passes the job on to the protocol_error_code handler methods, via OpenerDirector.error().  Eventually, urllib2.HTTPDefaultErrorHandler will raise an HTTPError if no other handler handles the error.     HTTPErrorProcessor.https_response()\u00b6 Process HTTPS error responses. The behavior is same as http_response().     20.6.21. Examples\u00b6 This example gets the python.org main page and displays the first 100 bytes of it: >>> import urllib2 >>> f = urllib2.urlopen(&#39;http:\/\/www.python.org\/&#39;) >>> print f.read(100) <!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01 Transitional\/\/EN\"> <?xml-stylesheet href=\".\/css\/ht2html   Here we are sending a data-stream to the stdin of a CGI and reading the data it returns to us. Note that this example will only work when the Python installation supports SSL. >>> import urllib2 >>> req = urllib2.Request(url=&#39;https:\/\/localhost\/cgi-bin\/test.cgi&#39;, ...                       data=&#39;This data is passed to stdin of the CGI&#39;) >>> f = urllib2.urlopen(req) >>> print f.read() Got Data: \"This data is passed to stdin of the CGI\"   The code for the sample CGI used in the above example is: #!\/usr\/bin\/env python import sys data = sys.stdin.read() print &#39;Content-type: text-plain\\n\\nGot Data: \"%s\"&#39;  data   Use of Basic HTTP Authentication: import urllib2 # Create an OpenerDirector with support for Basic HTTP Authentication... auth_handler = urllib2.HTTPBasicAuthHandler() auth_handler.add_password(realm=&#39;PDQ Application&#39;,                           uri=&#39;https:\/\/mahler:8092\/site-updates.py&#39;,                           user=&#39;klem&#39;,                           passwd=&#39;kadidd!ehopper&#39;) opener = urllib2.build_opener(auth_handler) # ...and install it globally so it can be used with urlopen. urllib2.install_opener(opener) urllib2.urlopen(&#39;http:\/\/www.example.com\/login.html&#39;)   build_opener() provides many handlers by default, including a ProxyHandler.  By default, ProxyHandler uses the environment variables named <scheme>_proxy, where <scheme> is the URL scheme involved.  For example, the http_proxy environment variable is read to obtain the HTTP proxy&#8217;s URL. This example replaces the default ProxyHandler with one that uses programmatically-supplied proxy URLs, and adds proxy authorization support with ProxyBasicAuthHandler. proxy_handler = urllib2.ProxyHandler({&#39;http&#39;: &#39;http:\/\/www.example.com:3128\/&#39;}) proxy_auth_handler = urllib2.ProxyBasicAuthHandler() proxy_auth_handler.add_password(&#39;realm&#39;, &#39;host&#39;, &#39;username&#39;, &#39;password&#39;)  opener = urllib2.build_opener(proxy_handler, proxy_auth_handler) # This time, rather than install the OpenerDirector, we use it directly: opener.open(&#39;http:\/\/www.example.com\/login.html&#39;)   Adding HTTP headers: Use the headers argument to the Request constructor, or: import urllib2 req = urllib2.Request(&#39;http:\/\/www.example.com\/&#39;) req.add_header(&#39;Referer&#39;, &#39;http:\/\/www.python.org\/&#39;) r = urllib2.urlopen(req)   OpenerDirector automatically adds a User-Agent header to every Request.  To change this: import urllib2 opener = urllib2.build_opener() opener.addheaders = [(&#39;User-agent&#39;, &#39;Mozilla\/5.0&#39;)] opener.open(&#39;http:\/\/www.example.com\/&#39;)   Also, remember that a few standard headers (Content-Length, Content-Type and Host) are added when the Request is passed to urlopen() (or OpenerDirector.open())."},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.AbstractBasicAuthHandler","title":"urllib2.AbstractBasicAuthHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.AbstractBasicAuthHandler.http_error_auth_reqed","title":"urllib2.AbstractBasicAuthHandler.http_error_auth_reqed","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.AbstractDigestAuthHandler","title":"urllib2.AbstractDigestAuthHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.AbstractDigestAuthHandler.http_error_auth_reqed","title":"urllib2.AbstractDigestAuthHandler.http_error_auth_reqed","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.BaseHandler","title":"urllib2.BaseHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.BaseHandler.add_parent","title":"urllib2.BaseHandler.add_parent","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.BaseHandler.close","title":"urllib2.BaseHandler.close","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.BaseHandler.default_open","title":"urllib2.BaseHandler.default_open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.BaseHandler.http_error_default","title":"urllib2.BaseHandler.http_error_default","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.BaseHandler.http_error_nnn","title":"urllib2.BaseHandler.http_error_nnn","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.BaseHandler.unknown_open","title":"urllib2.BaseHandler.unknown_open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.build_opener","title":"urllib2.build_opener","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.CacheFTPHandler","title":"urllib2.CacheFTPHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.CacheFTPHandler.setMaxConns","title":"urllib2.CacheFTPHandler.setMaxConns","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.CacheFTPHandler.setTimeout","title":"urllib2.CacheFTPHandler.setTimeout","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.FileHandler","title":"urllib2.FileHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.FileHandler.file_open","title":"urllib2.FileHandler.file_open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.FTPHandler","title":"urllib2.FTPHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.FTPHandler.ftp_open","title":"urllib2.FTPHandler.ftp_open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPBasicAuthHandler","title":"urllib2.HTTPBasicAuthHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPBasicAuthHandler.http_error_401","title":"urllib2.HTTPBasicAuthHandler.http_error_401","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPCookieProcessor","title":"urllib2.HTTPCookieProcessor","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPDefaultErrorHandler","title":"urllib2.HTTPDefaultErrorHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPDigestAuthHandler","title":"urllib2.HTTPDigestAuthHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPDigestAuthHandler.http_error_401","title":"urllib2.HTTPDigestAuthHandler.http_error_401","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPErrorProcessor","title":"urllib2.HTTPErrorProcessor","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPErrorProcessor.http_response","title":"urllib2.HTTPErrorProcessor.http_response","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPErrorProcessor.https_response","title":"urllib2.HTTPErrorProcessor.https_response","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPHandler","title":"urllib2.HTTPHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPHandler.http_open","title":"urllib2.HTTPHandler.http_open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPPasswordMgr","title":"urllib2.HTTPPasswordMgr","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPPasswordMgr.add_password","title":"urllib2.HTTPPasswordMgr.add_password","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPPasswordMgr.find_user_password","title":"urllib2.HTTPPasswordMgr.find_user_password","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPPasswordMgrWithDefaultRealm","title":"urllib2.HTTPPasswordMgrWithDefaultRealm","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPRedirectHandler","title":"urllib2.HTTPRedirectHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPRedirectHandler.http_error_301","title":"urllib2.HTTPRedirectHandler.http_error_301","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPRedirectHandler.http_error_302","title":"urllib2.HTTPRedirectHandler.http_error_302","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPRedirectHandler.http_error_303","title":"urllib2.HTTPRedirectHandler.http_error_303","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPRedirectHandler.http_error_307","title":"urllib2.HTTPRedirectHandler.http_error_307","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPRedirectHandler.redirect_request","title":"urllib2.HTTPRedirectHandler.redirect_request","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPSHandler","title":"urllib2.HTTPSHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.HTTPSHandler.https_open","title":"urllib2.HTTPSHandler.https_open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.install_opener","title":"urllib2.install_opener","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.OpenerDirector","title":"urllib2.OpenerDirector","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.OpenerDirector.add_handler","title":"urllib2.OpenerDirector.add_handler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.OpenerDirector.error","title":"urllib2.OpenerDirector.error","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.OpenerDirector.open","title":"urllib2.OpenerDirector.open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.ProxyBasicAuthHandler","title":"urllib2.ProxyBasicAuthHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.ProxyBasicAuthHandler.http_error_407","title":"urllib2.ProxyBasicAuthHandler.http_error_407","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.ProxyDigestAuthHandler","title":"urllib2.ProxyDigestAuthHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.ProxyDigestAuthHandler.http_error_407","title":"urllib2.ProxyDigestAuthHandler.http_error_407","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.ProxyHandler","title":"urllib2.ProxyHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request","title":"urllib2.Request","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.add_data","title":"urllib2.Request.add_data","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.add_header","title":"urllib2.Request.add_header","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.add_unredirected_header","title":"urllib2.Request.add_unredirected_header","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.get_data","title":"urllib2.Request.get_data","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.get_full_url","title":"urllib2.Request.get_full_url","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.get_host","title":"urllib2.Request.get_host","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.get_method","title":"urllib2.Request.get_method","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.get_origin_req_host","title":"urllib2.Request.get_origin_req_host","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.get_selector","title":"urllib2.Request.get_selector","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.get_type","title":"urllib2.Request.get_type","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.has_data","title":"urllib2.Request.has_data","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.has_header","title":"urllib2.Request.has_header","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.is_unverifiable","title":"urllib2.Request.is_unverifiable","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.Request.set_proxy","title":"urllib2.Request.set_proxy","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.UnknownHandler","title":"urllib2.UnknownHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.UnknownHandler.unknown_open","title":"urllib2.UnknownHandler.unknown_open","description":""},{"url":"http:\/\/docs.python.org\/library\/urllib2.html#urllib2.urlopen","title":"urllib2.urlopen","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html","title":"poplib","description":"20.9. poplib &#8212; POP3 protocol client\u00b6 Source code: Lib\/poplib.py  This module defines a class, POP3, which encapsulates a connection to a POP3 server and implements the protocol as defined in RFC 1725.  The POP3 class supports both the minimal and optional command sets. Additionally, this module provides a class POP3_SSL, which provides support for connecting to POP3 servers that use SSL as an underlying protocol layer. Note that POP3, though widely supported, is obsolescent.  The implementation quality of POP3 servers varies widely, and too many are quite poor. If your mailserver supports IMAP, you would be better off using the imaplib.IMAP4 class, as IMAP servers tend to be better implemented. A single class is provided by the poplib module:   class poplib.POP3(host[, port[, timeout]])\u00b6 This class implements the actual POP3 protocol.  The connection is created when the instance is initialized. If port is omitted, the standard POP3 port (110) is used. The optional timeout parameter specifies a timeout in seconds for the connection attempt (if not specified, the global default timeout setting will be used).  Changed in version 2.6: timeout was added.     class poplib.POP3_SSL(host[, port[, keyfile[, certfile]]])\u00b6 This is a subclass of POP3 that connects to the server over an SSL encrypted socket.  If port is not specified, 995, the standard POP3-over-SSL port is used.  keyfile and certfile are also optional - they can contain a PEM formatted private key and certificate chain file for the SSL connection.  New in version 2.4.   One exception is defined as an attribute of the poplib module:   exception poplib.error_proto\u00b6 Exception raised on any errors from this module (errors from socket module are not caught). The reason for the exception is passed to the constructor as a string.   See also  Module imaplib The standard Python IMAP module. Frequently Asked Questions About Fetchmail The FAQ for the fetchmail POP\/IMAP client collects information on POP3 server variations and RFC noncompliance that may be useful if you need to write an application based on the POP protocol.    20.9.1. POP3 Objects\u00b6 All POP3 commands are represented by methods of the same name, in lower-case; most return the response text sent by the server. An POP3 instance has the following methods:   POP3.set_debuglevel(level)\u00b6 Set the instance&#8217;s debugging level.  This controls the amount of debugging output printed.  The default, 0, produces no debugging output.  A value of 1 produces a moderate amount of debugging output, generally a single line per request.  A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection.    POP3.getwelcome()\u00b6 Returns the greeting string sent by the POP3 server.    POP3.user(username)\u00b6 Send user command, response should indicate that a password is required.    POP3.pass_(password)\u00b6 Send password, response includes message count and mailbox size. Note: the mailbox on the server is locked until quit() is called.    POP3.apop(user, secret)\u00b6 Use the more secure APOP authentication to log into the POP3 server.    POP3.rpop(user)\u00b6 Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server.    POP3.stat()\u00b6 Get mailbox status.  The result is a tuple of 2 integers: (message count, mailbox size).    POP3.list([which])\u00b6 Request message list, result is in the form (response, ['mesg_num octets', ...], octets). If which is set, it is the message to list.    POP3.retr(which)\u00b6 Retrieve whole message number which, and set its seen flag. Result is in form (response, ['line', ...], octets).    POP3.dele(which)\u00b6 Flag message number which for deletion.  On most servers deletions are not actually performed until QUIT (the major exception is Eudora QPOP, which deliberately violates the RFCs by doing pending deletes on any disconnect).    POP3.rset()\u00b6 Remove any deletion marks for the mailbox.    POP3.noop()\u00b6 Do nothing.  Might be used as a keep-alive.    POP3.quit()\u00b6 Signoff:  commit changes, unlock mailbox, drop connection.    POP3.top(which, howmuch)\u00b6 Retrieves the message header plus howmuch lines of the message after the header of message number which. Result is in form (response, ['line', ...], octets). The POP3 TOP command this method uses, unlike the RETR command, doesn&#8217;t set the message&#8217;s seen flag; unfortunately, TOP is poorly specified in the RFCs and is frequently broken in off-brand servers. Test this method by hand against the POP3 servers you will use before trusting it.     POP3.uidl([which])\u00b6 Return message digest (unique id) list. If which is specified, result contains the unique id for that message in the form 'response mesgnum uid, otherwise result is list (response, ['mesgnum uid', ...], octets).  Instances of POP3_SSL have no additional methods. The interface of this subclass is identical to its parent.   20.9.2. POP3 Example\u00b6 Here is a minimal example (without error checking) that opens a mailbox and retrieves and prints all messages: import getpass, poplib  M = poplib.POP3(&#39;localhost&#39;) M.user(getpass.getuser()) M.pass_(getpass.getpass()) numMessages = len(M.list()[1]) for i in range(numMessages):     for j in M.retr(i+1)[1]:         print j   At the end of the module, there is a test section that contains a more extensive example of usage."},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3","title":"poplib.POP3","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.apop","title":"poplib.POP3.apop","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.dele","title":"poplib.POP3.dele","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.getwelcome","title":"poplib.POP3.getwelcome","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.list","title":"poplib.POP3.list","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.noop","title":"poplib.POP3.noop","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.pass_","title":"poplib.POP3.pass_","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.quit","title":"poplib.POP3.quit","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.retr","title":"poplib.POP3.retr","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.rpop","title":"poplib.POP3.rpop","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.rset","title":"poplib.POP3.rset","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.set_debuglevel","title":"poplib.POP3.set_debuglevel","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.stat","title":"poplib.POP3.stat","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.top","title":"poplib.POP3.top","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.uidl","title":"poplib.POP3.uidl","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3.user","title":"poplib.POP3.user","description":""},{"url":"http:\/\/docs.python.org\/library\/poplib.html#poplib.POP3_SSL","title":"poplib.POP3_SSL","description":""},{"url":"http:\/\/docs.python.org\/library\/smtpd.html","title":"smtpd","description":"20.13. smtpd &#8212; SMTP Server\u00b6 Source code: Lib\/smtpd.py  This module offers several classes to implement SMTP servers.  One is a generic do-nothing implementation, which can be overridden, while the other two offer specific mail-sending strategies.  20.13.1. SMTPServer Objects\u00b6   class smtpd.SMTPServer(localaddr, remoteaddr)\u00b6 Create a new SMTPServer object, which binds to local address localaddr.  It will treat remoteaddr as an upstream SMTP relayer.  It inherits from asyncore.dispatcher, and so will insert itself into asyncore&#8216;s event loop on instantiation.   process_message(peer, mailfrom, rcpttos, data)\u00b6 Raise NotImplementedError exception. Override this in subclasses to do something useful with this message. Whatever was passed in the constructor as remoteaddr will be available as the _remoteaddr attribute. peer is the remote host&#8217;s address, mailfrom is the envelope originator, rcpttos are the envelope recipients and data is a string containing the contents of the e-mail (which should be in RFC 2822 format).      20.13.2. DebuggingServer Objects\u00b6   class smtpd.DebuggingServer(localaddr, remoteaddr)\u00b6 Create a new debugging server.  Arguments are as per SMTPServer. Messages will be discarded, and printed on stdout.    20.13.3. PureProxy Objects\u00b6   class smtpd.PureProxy(localaddr, remoteaddr)\u00b6 Create a new pure proxy server. Arguments are as per SMTPServer. Everything will be relayed to remoteaddr.  Note that running this has a good chance to make you into an open relay, so please be careful.    20.13.4. MailmanProxy Objects\u00b6   class smtpd.MailmanProxy(localaddr, remoteaddr)\u00b6 Create a new pure proxy server. Arguments are as per SMTPServer. Everything will be relayed to remoteaddr, unless local mailman configurations knows about an address, in which case it will be handled via mailman.  Note that running this has a good chance to make you into an open relay, so please be careful."},{"url":"http:\/\/docs.python.org\/library\/smtpd.html#smtpd.DebuggingServer","title":"smtpd.DebuggingServer","description":""},{"url":"http:\/\/docs.python.org\/library\/smtpd.html#smtpd.MailmanProxy","title":"smtpd.MailmanProxy","description":""},{"url":"http:\/\/docs.python.org\/library\/smtpd.html#smtpd.PureProxy","title":"smtpd.PureProxy","description":""},{"url":"http:\/\/docs.python.org\/library\/smtpd.html#smtpd.SMTPServer","title":"smtpd.SMTPServer","description":""},{"url":"http:\/\/docs.python.org\/library\/smtpd.html#smtpd.SMTPServer.process_message","title":"smtpd.SMTPServer.process_message","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html","title":"telnetlib","description":"20.14. telnetlib &#8212; Telnet client\u00b6 Source code: Lib\/telnetlib.py  The telnetlib module provides a Telnet class that implements the Telnet protocol.  See RFC 854 for details about the protocol. In addition, it provides symbolic constants for the protocol characters (see below), and for the telnet options. The symbolic names of the telnet options follow the definitions in arpa\/telnet.h, with the leading TELOPT_ removed. For symbolic names of options which are traditionally not included in arpa\/telnet.h, see the module source itself. The symbolic constants for the telnet commands are: IAC, DONT, DO, WONT, WILL, SE (Subnegotiation End), NOP (No Operation), DM (Data Mark), BRK (Break), IP (Interrupt process), AO (Abort output), AYT (Are You There), EC (Erase Character), EL (Erase Line), GA (Go Ahead), SB (Subnegotiation Begin).   class telnetlib.Telnet([host[, port[, timeout]]])\u00b6 Telnet represents a connection to a Telnet server. The instance is initially not connected by default; the open() method must be used to establish a connection.  Alternatively, the host name and optional port number can be passed to the constructor, to, in which case the connection to the server will be established before the constructor returns.  The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). Do not reopen an already connected instance. This class has many read_*() methods.  Note that some of them  raise EOFError when the end of the connection is read, because they can return an empty string for other reasons.  See the individual descriptions below.  Changed in version 2.6: timeout was added.    See also  RFC 854 - Telnet Protocol Specification Definition of the Telnet protocol.    20.14.1. Telnet Objects\u00b6 Telnet instances have the following methods:   Telnet.read_until(expected[, timeout])\u00b6 Read until a given string, expected, is encountered or until timeout seconds have passed. When no match is found, return whatever is available instead, possibly the empty string.  Raise EOFError if the connection is closed and no cooked data is available.     Telnet.read_all()\u00b6 Read all data until EOF; block until connection closed.    Telnet.read_some()\u00b6 Read at least one byte of cooked data unless EOF is hit. Return '' if EOF is hit.  Block if no data is immediately available.    Telnet.read_very_eager()\u00b6 Read everything that can be without blocking in I\/O (eager). Raise EOFError if connection closed and no cooked data available.  Return '' if no cooked data available otherwise. Do not block unless in the midst of an IAC sequence.     Telnet.read_eager()\u00b6 Read readily available data. Raise EOFError if connection closed and no cooked data available.  Return '' if no cooked data available otherwise. Do not block unless in the midst of an IAC sequence.     Telnet.read_lazy()\u00b6 Process and return data already in the queues (lazy). Raise EOFError if connection closed and no data available. Return '' if no cooked data available otherwise.  Do not block unless in the midst of an IAC sequence.     Telnet.read_very_lazy()\u00b6 Return any data available in the cooked queue (very lazy). Raise EOFError if connection closed and no data available. Return '' if no cooked data available otherwise.  This method never blocks.     Telnet.read_sb_data()\u00b6 Return the data collected between a SB\/SE pair (suboption begin\/end). The callback should access these data when it was invoked with a SE command. This method never blocks.  New in version 2.3.     Telnet.open(host[, port[, timeout]])\u00b6 Connect to a host. The optional second argument is the port number, which defaults to the standard Telnet port (23). The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). Do not try to reopen an already connected instance.  Changed in version 2.6: timeout was added.     Telnet.msg(msg[, *args])\u00b6 Print a debug message when the debug level is > 0. If extra arguments are present, they are substituted in the message using the standard string formatting operator.    Telnet.set_debuglevel(debuglevel)\u00b6 Set the debug level.  The higher the value of debuglevel, the more debug output you get (on sys.stdout).    Telnet.close()\u00b6 Close the connection.    Telnet.get_socket()\u00b6 Return the socket object used internally.    Telnet.fileno()\u00b6 Return the file descriptor of the socket object used internally.    Telnet.write(buffer)\u00b6 Write a string to the socket, doubling any IAC characters. This can block if the connection is blocked.  May raise socket.error if the connection is closed.    Telnet.interact()\u00b6 Interaction function, emulates a very dumb Telnet client.    Telnet.mt_interact()\u00b6 Multithreaded version of interact().    Telnet.expect(list[, timeout])\u00b6 Read until one from a list of a regular expressions matches. The first argument is a list of regular expressions, either compiled (re.RegexObject instances) or uncompiled (strings). The optional second argument is a timeout, in seconds; the default is to block indefinitely. Return a tuple of three items: the index in the list of the first regular expression that matches; the match object returned; and the text read up till and including the match. If end of file is found and no text was read, raise EOFError.  Otherwise, when nothing matches, return (-1, None, text) where text is the text received so far (may be the empty string if a timeout happened). If a regular expression ends with a greedy match (such as .*) or if more than one expression can match the same input, the results are non-deterministic, and may depend on the I\/O timing.     Telnet.set_option_negotiation_callback(callback)\u00b6 Each time a telnet option is read on the input flow, this callback (if set) is called with the following parameters : callback(telnet socket, command (DO\/DONT\/WILL\/WONT), option).  No other action is done afterwards by telnetlib.    20.14.2. Telnet Example\u00b6 A simple example illustrating typical use: import getpass import sys import telnetlib  HOST = \"localhost\" user = raw_input(\"Enter your remote account: \") password = getpass.getpass()  tn = telnetlib.Telnet(HOST)  tn.read_until(\"login: \") tn.write(user + \"\\n\") if password:     tn.read_until(\"Password: \")     tn.write(password + \"\\n\")  tn.write(\"ls\\n\") tn.write(\"exit\\n\")  print tn.read_all()"},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet","title":"telnetlib.Telnet","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.close","title":"telnetlib.Telnet.close","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.expect","title":"telnetlib.Telnet.expect","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.fileno","title":"telnetlib.Telnet.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.get_socket","title":"telnetlib.Telnet.get_socket","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.interact","title":"telnetlib.Telnet.interact","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.msg","title":"telnetlib.Telnet.msg","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.mt_interact","title":"telnetlib.Telnet.mt_interact","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.open","title":"telnetlib.Telnet.open","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.read_all","title":"telnetlib.Telnet.read_all","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.read_eager","title":"telnetlib.Telnet.read_eager","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.read_lazy","title":"telnetlib.Telnet.read_lazy","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.read_sb_data","title":"telnetlib.Telnet.read_sb_data","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.read_some","title":"telnetlib.Telnet.read_some","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.read_until","title":"telnetlib.Telnet.read_until","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.read_very_eager","title":"telnetlib.Telnet.read_very_eager","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.read_very_lazy","title":"telnetlib.Telnet.read_very_lazy","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.set_debuglevel","title":"telnetlib.Telnet.set_debuglevel","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.set_option_negotiation_callback","title":"telnetlib.Telnet.set_option_negotiation_callback","description":""},{"url":"http:\/\/docs.python.org\/library\/telnetlib.html#telnetlib.Telnet.write","title":"telnetlib.Telnet.write","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html","title":"imaplib","description":"20.10. imaplib &#8212; IMAP4 protocol client\u00b6 Source code: Lib\/imaplib.py  This module defines three classes, IMAP4, IMAP4_SSL and IMAP4_stream, which encapsulate a connection to an IMAP4 server and implement a large subset of the IMAP4rev1 client protocol as defined in RFC 2060. It is backward compatible with IMAP4 (RFC 1730) servers, but note that the STATUS command is not supported in IMAP4. Three classes are provided by the imaplib module, IMAP4 is the base class:   class imaplib.IMAP4([host[, port]])\u00b6 This class implements the actual IMAP4 protocol.  The connection is created and protocol version (IMAP4 or IMAP4rev1) is determined when the instance is initialized. If host is not specified, '' (the local host) is used. If port is omitted, the standard IMAP4 port (143) is used.  Three exceptions are defined as attributes of the IMAP4 class:   exception IMAP4.error\u00b6 Exception raised on any errors.  The reason for the exception is passed to the constructor as a string.    exception IMAP4.abort\u00b6 IMAP4 server errors cause this exception to be raised.  This is a sub-class of IMAP4.error.  Note that closing the instance and instantiating a new one will usually allow recovery from this exception.    exception IMAP4.readonly\u00b6 This exception is raised when a writable mailbox has its status changed by the server.  This is a sub-class of IMAP4.error.  Some other client now has write permission, and the mailbox will need to be re-opened to re-obtain write permission.  There&#8217;s also a subclass for secure connections:   class imaplib.IMAP4_SSL([host[, port[, keyfile[, certfile]]]])\u00b6 This is a subclass derived from IMAP4 that connects over an SSL encrypted socket (to use this class you need a socket module that was compiled with SSL support).  If host is not specified, '' (the local host) is used. If port is omitted, the standard IMAP4-over-SSL port (993) is used.  keyfile and certfile are also optional - they can contain a PEM formatted private key and certificate chain file for the SSL connection.  The second subclass allows for connections created by a child process:   class imaplib.IMAP4_stream(command)\u00b6 This is a subclass derived from IMAP4 that connects to the stdin\/stdout file descriptors created by passing command to os.popen2().  New in version 2.3.   The following utility functions are defined:   imaplib.Internaldate2tuple(datestr)\u00b6 Parse an IMAP4 INTERNALDATE string and return corresponding local time.  The return value is a time.struct_time instance or None if the string has wrong format.    imaplib.Int2AP(num)\u00b6 Converts an integer into a string representation using characters from the set [A .. P].    imaplib.ParseFlags(flagstr)\u00b6 Converts an IMAP4 FLAGS response to a tuple of individual flags.    imaplib.Time2Internaldate(date_time)\u00b6 Convert date_time to an IMAP4 INTERNALDATE representation.  The return value is a string in the form: \"DD-Mmm-YYYY HH:MM:SS +HHMM\" (including double-quotes).  The date_time argument can be a number (int or float) representing seconds since epoch (as returned by time.time()), a 9-tuple representing local time (as returned by time.localtime()), or a double-quoted string.  In the last case, it is assumed to already be in the correct format.  Note that IMAP4 message numbers change as the mailbox changes; in particular, after an EXPUNGE command performs deletions the remaining messages are renumbered. So it is highly advisable to use UIDs instead, with the UID command. At the end of the module, there is a test section that contains a more extensive example of usage.  See also Documents describing the protocol, and sources and binaries  for servers implementing it, can all be found at the University of Washington&#8217;s IMAP Information Center (http:\/\/www.washington.edu\/imap\/).   20.10.1. IMAP4 Objects\u00b6 All IMAP4rev1 commands are represented by methods of the same name, either upper-case or lower-case. All arguments to commands are converted to strings, except for AUTHENTICATE, and the last argument to APPEND which is passed as an IMAP4 literal.  If necessary (the string contains IMAP4 protocol-sensitive characters and isn&#8217;t enclosed with either parentheses or double quotes) each string is quoted. However, the password argument to the LOGIN command is always quoted. If you want to avoid having an argument string quoted (eg: the flags argument to STORE) then enclose the string in parentheses (eg: r'(\\Deleted)'). Each command returns a tuple: (type, [data, ...]) where type is usually 'OK' or 'NO', and data is either the text from the command response, or mandated results from the command. Each data is either a string, or a tuple. If a tuple, then the first part is the header of the response, and the second part contains the data (ie: &#8216;literal&#8217; value). The message_set options to commands below is a string specifying one or more messages to be acted upon.  It may be a simple message number ('1'), a range of message numbers ('2:4'), or a group of non-contiguous ranges separated by commas ('1:3,6:9').  A range can contain an asterisk to indicate an infinite upper bound ('3:*'). An IMAP4 instance has the following methods:   IMAP4.append(mailbox, flags, date_time, message)\u00b6 Append message to named mailbox.    IMAP4.authenticate(mechanism, authobject)\u00b6 Authenticate command &#8212; requires response processing. mechanism specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism. authobject must be a callable object: data = authobject(response)   It will be called to process server continuation responses. It should return data that will be encoded and sent to server. It should return None if the client abort response * should be sent instead.     IMAP4.check()\u00b6 Checkpoint mailbox on server.    IMAP4.close()\u00b6 Close currently selected mailbox. Deleted messages are removed from writable mailbox. This is the recommended command before LOGOUT.    IMAP4.copy(message_set, new_mailbox)\u00b6 Copy message_set messages onto end of new_mailbox.    IMAP4.create(mailbox)\u00b6 Create new mailbox named mailbox.    IMAP4.delete(mailbox)\u00b6 Delete old mailbox named mailbox.    IMAP4.deleteacl(mailbox, who)\u00b6 Delete the ACLs (remove any rights) set for who on mailbox.  New in version 2.4.     IMAP4.expunge()\u00b6 Permanently remove deleted items from selected mailbox. Generates an EXPUNGE response for each deleted message. Returned data contains a list of EXPUNGE message numbers in order received.    IMAP4.fetch(message_set, message_parts)\u00b6 Fetch (parts of) messages.  message_parts should be a string of message part names enclosed within parentheses, eg: \"(UID BODY[TEXT])\".  Returned data are tuples of message part envelope and data.    IMAP4.getacl(mailbox)\u00b6 Get the ACLs for mailbox. The method is non-standard, but is supported by the Cyrus server.    IMAP4.getannotation(mailbox, entry, attribute)\u00b6 Retrieve the specified ANNOTATIONs for mailbox. The method is non-standard, but is supported by the Cyrus server.  New in version 2.5.     IMAP4.getquota(root)\u00b6 Get the quota root&#8216;s resource usage and limits. This method is part of the IMAP4 QUOTA extension defined in rfc2087.  New in version 2.3.     IMAP4.getquotaroot(mailbox)\u00b6 Get the list of quota roots for the named mailbox. This method is part of the IMAP4 QUOTA extension defined in rfc2087.  New in version 2.3.     IMAP4.list([directory[, pattern]])\u00b6 List mailbox names in directory matching pattern.  directory defaults to the top-level mail folder, and pattern defaults to match anything.  Returned data contains a list of LIST responses.    IMAP4.login(user, password)\u00b6 Identify the client using a plaintext password. The password will be quoted.    IMAP4.login_cram_md5(user, password)\u00b6 Force use of CRAM-MD5 authentication when identifying the client to protect the password.  Will only work if the server CAPABILITY response includes the phrase AUTH=CRAM-MD5.  New in version 2.3.     IMAP4.logout()\u00b6 Shutdown connection to server. Returns server BYE response.    IMAP4.lsub([directory[, pattern]])\u00b6 List subscribed mailbox names in directory matching pattern. directory defaults to the top level directory and pattern defaults to match any mailbox. Returned data are tuples of message part envelope and data.    IMAP4.myrights(mailbox)\u00b6 Show my ACLs for a mailbox (i.e. the rights that I have on mailbox).  New in version 2.4.     IMAP4.namespace()\u00b6 Returns IMAP namespaces as defined in RFC2342.  New in version 2.3.     IMAP4.noop()\u00b6 Send NOOP to server.    IMAP4.open(host, port)\u00b6 Opens socket to port at host.  This method is implicitly called by the IMAP4 constructor.  The connection objects established by this method will be used in the read, readline, send, and shutdown methods.  You may override this method.    IMAP4.partial(message_num, message_part, start, length)\u00b6 Fetch truncated part of a message. Returned data is a tuple of message part envelope and data.    IMAP4.proxyauth(user)\u00b6 Assume authentication as user. Allows an authorised administrator to proxy into any user&#8217;s mailbox.  New in version 2.3.     IMAP4.read(size)\u00b6 Reads size bytes from the remote server. You may override this method.    IMAP4.readline()\u00b6 Reads one line from the remote server. You may override this method.    IMAP4.recent()\u00b6 Prompt server for an update. Returned data is None if no new messages, else value of RECENT response.    IMAP4.rename(oldmailbox, newmailbox)\u00b6 Rename mailbox named oldmailbox to newmailbox.    IMAP4.response(code)\u00b6 Return data for response code if received, or None. Returns the given code, instead of the usual type.    IMAP4.search(charset, criterion[, ...])\u00b6 Search mailbox for matching messages.  charset may be None, in which case no CHARSET will be specified in the request to the server.  The IMAP protocol requires that at least one criterion be specified; an exception will be raised when the server returns an error. Example: # M is a connected IMAP4 instance... typ, msgnums = M.search(None, &#39;FROM&#39;, &#39;\"LDJ\"&#39;)  # or: typ, msgnums = M.search(None, &#39;(FROM \"LDJ\")&#39;)       IMAP4.select([mailbox[, readonly]])\u00b6 Select a mailbox. Returned data is the count of messages in mailbox (EXISTS response).  The default mailbox is 'INBOX'.  If the readonly flag is set, modifications to the mailbox are not allowed.    IMAP4.send(data)\u00b6 Sends data to the remote server. You may override this method.    IMAP4.setacl(mailbox, who, what)\u00b6 Set an ACL for mailbox. The method is non-standard, but is supported by the Cyrus server.    IMAP4.setannotation(mailbox, entry, attribute[, ...])\u00b6 Set ANNOTATIONs for mailbox. The method is non-standard, but is supported by the Cyrus server.  New in version 2.5.     IMAP4.setquota(root, limits)\u00b6 Set the quota root&#8216;s resource limits. This method is part of the IMAP4 QUOTA extension defined in rfc2087.  New in version 2.3.     IMAP4.shutdown()\u00b6 Close connection established in open.  This method is implicitly called by IMAP4.logout().  You may override this method.    IMAP4.socket()\u00b6 Returns socket instance used to connect to server.    IMAP4.sort(sort_criteria, charset, search_criterion[, ...])\u00b6 The sort command is a variant of search with sorting semantics for the results.  Returned data contains a space separated list of matching message numbers. Sort has two arguments before the search_criterion argument(s); a parenthesized list of sort_criteria, and the searching charset.  Note that unlike search, the searching charset argument is mandatory.  There is also a uid sort command which corresponds to sort the way that uid search corresponds to search.  The sort command first searches the mailbox for messages that match the given searching criteria using the charset argument for the interpretation of strings in the searching criteria.  It then returns the numbers of matching messages. This is an IMAP4rev1 extension command.     IMAP4.status(mailbox, names)\u00b6 Request named status conditions for mailbox.    IMAP4.store(message_set, command, flag_list)\u00b6 Alters flag dispositions for messages in mailbox.  command is specified by section 6.4.6 of RFC 2060 as being one of &#8220;FLAGS&#8221;, &#8220;+FLAGS&#8221;, or &#8220;-FLAGS&#8221;, optionally with a suffix of &#8220;.SILENT&#8221;. For example, to set the delete flag on all messages: typ, data = M.search(None, &#39;ALL&#39;) for num in data[0].split():    M.store(num, &#39;+FLAGS&#39;, &#39;\\\\Deleted&#39;) M.expunge()       IMAP4.subscribe(mailbox)\u00b6 Subscribe to new mailbox.    IMAP4.thread(threading_algorithm, charset, search_criterion[, ...])\u00b6 The thread command is a variant of search with threading semantics for the results.  Returned data contains a space separated list of thread members. Thread members consist of zero or more messages numbers, delimited by spaces, indicating successive parent and child. Thread has two arguments before the search_criterion argument(s); a threading_algorithm, and the searching charset.  Note that unlike search, the searching charset argument is mandatory.  There is also a uid thread command which corresponds to thread the way that uid search corresponds to search.  The thread command first searches the mailbox for messages that match the given searching criteria using the charset argument for the interpretation of strings in the searching criteria. It then returns the matching messages threaded according to the specified threading algorithm. This is an IMAP4rev1 extension command.  New in version 2.4.     IMAP4.uid(command, arg[, ...])\u00b6 Execute command args with messages identified by UID, rather than message number.  Returns response appropriate to command.  At least one argument must be supplied; if none are provided, the server will return an error and an exception will be raised.    IMAP4.unsubscribe(mailbox)\u00b6 Unsubscribe from old mailbox.    IMAP4.xatom(name[, arg[, ...]])\u00b6 Allow simple extension commands notified by server in CAPABILITY response.  Instances of IMAP4_SSL have just one additional method:   IMAP4_SSL.ssl()\u00b6 Returns SSLObject instance used for the secure connection with the server.  The following attributes are defined on instances of IMAP4:   IMAP4.PROTOCOL_VERSION\u00b6 The most recent supported protocol in the CAPABILITY response from the server.    IMAP4.debug\u00b6 Integer value to control debugging output.  The initialize value is taken from the module variable Debug.  Values greater than three trace each command.    20.10.2. IMAP4 Example\u00b6 Here is a minimal example (without error checking) that opens a mailbox and retrieves and prints all messages: import getpass, imaplib  M = imaplib.IMAP4() M.login(getpass.getuser(), getpass.getpass()) M.select() typ, data = M.search(None, &#39;ALL&#39;) for num in data[0].split():     typ, data = M.fetch(num, &#39;(RFC822)&#39;)     print &#39;Message %s\\n%s\\n&#39;  (num, data[0][1]) M.close() M.logout()"},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4","title":"imaplib.IMAP4","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.append","title":"imaplib.IMAP4.append","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.authenticate","title":"imaplib.IMAP4.authenticate","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.check","title":"imaplib.IMAP4.check","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.close","title":"imaplib.IMAP4.close","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.copy","title":"imaplib.IMAP4.copy","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.create","title":"imaplib.IMAP4.create","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.delete","title":"imaplib.IMAP4.delete","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.deleteacl","title":"imaplib.IMAP4.deleteacl","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.expunge","title":"imaplib.IMAP4.expunge","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.fetch","title":"imaplib.IMAP4.fetch","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.getacl","title":"imaplib.IMAP4.getacl","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.getannotation","title":"imaplib.IMAP4.getannotation","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.getquota","title":"imaplib.IMAP4.getquota","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.getquotaroot","title":"imaplib.IMAP4.getquotaroot","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.list","title":"imaplib.IMAP4.list","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.login","title":"imaplib.IMAP4.login","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.login_cram_md5","title":"imaplib.IMAP4.login_cram_md5","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.logout","title":"imaplib.IMAP4.logout","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.lsub","title":"imaplib.IMAP4.lsub","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.myrights","title":"imaplib.IMAP4.myrights","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.namespace","title":"imaplib.IMAP4.namespace","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.noop","title":"imaplib.IMAP4.noop","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.open","title":"imaplib.IMAP4.open","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.partial","title":"imaplib.IMAP4.partial","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.proxyauth","title":"imaplib.IMAP4.proxyauth","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.read","title":"imaplib.IMAP4.read","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.readline","title":"imaplib.IMAP4.readline","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.recent","title":"imaplib.IMAP4.recent","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.rename","title":"imaplib.IMAP4.rename","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.response","title":"imaplib.IMAP4.response","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.search","title":"imaplib.IMAP4.search","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.select","title":"imaplib.IMAP4.select","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.send","title":"imaplib.IMAP4.send","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.setacl","title":"imaplib.IMAP4.setacl","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.setannotation","title":"imaplib.IMAP4.setannotation","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.setquota","title":"imaplib.IMAP4.setquota","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.shutdown","title":"imaplib.IMAP4.shutdown","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.socket","title":"imaplib.IMAP4.socket","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.sort","title":"imaplib.IMAP4.sort","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.status","title":"imaplib.IMAP4.status","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.store","title":"imaplib.IMAP4.store","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.subscribe","title":"imaplib.IMAP4.subscribe","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.thread","title":"imaplib.IMAP4.thread","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.uid","title":"imaplib.IMAP4.uid","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.unsubscribe","title":"imaplib.IMAP4.unsubscribe","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4.xatom","title":"imaplib.IMAP4.xatom","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4_SSL","title":"imaplib.IMAP4_SSL","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4_SSL.ssl","title":"imaplib.IMAP4_SSL.ssl","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.IMAP4_stream","title":"imaplib.IMAP4_stream","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.Int2AP","title":"imaplib.Int2AP","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.Internaldate2tuple","title":"imaplib.Internaldate2tuple","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.ParseFlags","title":"imaplib.ParseFlags","description":""},{"url":"http:\/\/docs.python.org\/library\/imaplib.html#imaplib.Time2Internaldate","title":"imaplib.Time2Internaldate","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html","title":"nntplib","description":"20.11. nntplib &#8212; NNTP protocol client\u00b6 Source code: Lib\/nntplib.py  This module defines the class NNTP which implements the client side of the NNTP protocol.  It can be used to implement a news reader or poster, or automated news processors.  For more information on NNTP (Network News Transfer Protocol), see Internet RFC 977. Here are two small examples of how it can be used.  To list some statistics about a newsgroup and print the subjects of the last 10 articles: >>> s = NNTP(&#39;news.gmane.org&#39;) >>> resp, count, first, last, name = s.group(&#39;gmane.comp.python.committers&#39;) >>> print &#39;Group&#39;, name, &#39;has&#39;, count, &#39;articles, range&#39;, first, &#39;to&#39;, last Group gmane.comp.python.committers has 1071 articles, range 1 to 1071 >>> resp, subs = s.xhdr(&#39;subject&#39;, first + &#39;-&#39; + last) >>> for id, sub in subs[-10:]: print id, sub ... 1062 Re: Mercurial Status? 1063 Re: [python-committers]  (Windows) buildbots on 3.x 1064 Re: Mercurial Status? 1065 Re: Mercurial Status? 1066 Python 2.6.6 status 1067 Commit Privileges for Ask Solem 1068 Re: Commit Privileges for Ask Solem 1069 Re: Commit Privileges for Ask Solem 1070 Re: Commit Privileges for Ask Solem 1071 2.6.6 rc 2 >>> s.quit() &#39;205 Bye!&#39;   To post an article from a file (this assumes that the article has valid headers, and that you have right to post on the particular newsgroup): >>> s = NNTP(&#39;news.gmane.org&#39;) >>> f = open(&#39;\/tmp\/article&#39;) >>> s.post(f) &#39;240 Article posted successfully.&#39; >>> s.quit() &#39;205 Bye!&#39;   The module itself defines the following items:   class nntplib.NNTP(host[, port[, user[, password[, readermode][, usenetrc]]]])\u00b6 Return a new instance of the NNTP class, representing a connection to the NNTP server running on host host, listening at port port.  The default port is 119.  If the optional user and password are provided, or if suitable credentials are present in \/.netrc and the optional flag usenetrc is true (the default), the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server. If the optional flag readermode is true, then a mode reader command is sent before authentication is performed.  Reader mode is sometimes necessary if you are connecting to an NNTP server on the local machine and intend to call reader-specific commands, such as group.  If you get unexpected NNTPPermanentErrors, you might need to set readermode. readermode defaults to None. usenetrc defaults to True.  Changed in version 2.4: usenetrc argument added.     exception nntplib.NNTPError\u00b6 Derived from the standard exception Exception, this is the base class for all exceptions raised by the nntplib module.    exception nntplib.NNTPReplyError\u00b6 Exception raised when an unexpected reply is received from the server.  For backwards compatibility, the exception error_reply is equivalent to this class.    exception nntplib.NNTPTemporaryError\u00b6 Exception raised when an error code in the range 400&#8211;499 is received.  For backwards compatibility, the exception error_temp is equivalent to this class.    exception nntplib.NNTPPermanentError\u00b6 Exception raised when an error code in the range 500&#8211;599 is received.  For backwards compatibility, the exception error_perm is equivalent to this class.    exception nntplib.NNTPProtocolError\u00b6 Exception raised when a reply is received from the server that does not begin with a digit in the range 1&#8211;5.  For backwards compatibility, the exception error_proto is equivalent to this class.    exception nntplib.NNTPDataError\u00b6 Exception raised when there is some error in the response data.  For backwards compatibility, the exception error_data is equivalent to this class.   20.11.1. NNTP Objects\u00b6 NNTP instances have the following methods.  The response that is returned as the first item in the return tuple of almost all methods is the server&#8217;s response: a string beginning with a three-digit code. If the server&#8217;s response indicates an error, the method raises one of the above exceptions.   NNTP.getwelcome()\u00b6 Return the welcome message sent by the server in reply to the initial connection.  (This message sometimes contains disclaimers or help information that may be relevant to the user.)    NNTP.set_debuglevel(level)\u00b6 Set the instance&#8217;s debugging level.  This controls the amount of debugging output printed.  The default, 0, produces no debugging output.  A value of 1 produces a moderate amount of debugging output, generally a single line per request or response.  A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the connection (including message text).    NNTP.newgroups(date, time[, file])\u00b6 Send a NEWGROUPS command.  The date argument should be a string of the form 'yymmdd' indicating the date, and time should be a string of the form 'hhmmss' indicating the time.  Return a pair (response, groups) where groups is a list of group names that are new since the given date and time. If the file parameter is supplied, then the output of the  NEWGROUPS command is stored in a file.  If file is a string,  then the method will open a file object with that name, write to it  then close it.  If file is a file object, then it will start calling write() on it to store the lines of the command output. If file is supplied, then the returned list is an empty list.    NNTP.newnews(group, date, time[, file])\u00b6 Send a NEWNEWS command.  Here, group is a group name or '*', and date and time have the same meaning as for newgroups().  Return a pair (response, articles) where articles is a list of message ids. If the file parameter is supplied, then the output of the  NEWNEWS command is stored in a file.  If file is a string,  then the method will open a file object with that name, write to it  then close it.  If file is a file object, then it will start calling write() on it to store the lines of the command output. If file is supplied, then the returned list is an empty list.    NNTP.list([file])\u00b6 Send a LIST command.  Return a pair (response, list) where list is a list of tuples.  Each tuple has the form (group, last, first, flag), where group is a group name, last and first are the last and first article numbers (as strings), and flag is 'y' if posting is allowed, 'n' if not, and 'm' if the newsgroup is moderated.  (Note the ordering: last, first.) If the file parameter is supplied, then the output of the  LIST command is stored in a file.  If file is a string,  then the method will open a file object with that name, write to it  then close it.  If file is a file object, then it will start calling write() on it to store the lines of the command output. If file is supplied, then the returned list is an empty list.    NNTP.descriptions(grouppattern)\u00b6 Send a LIST NEWSGROUPS command, where grouppattern is a wildmat string as specified in RFC2980 (it&#8217;s essentially the same as DOS or UNIX shell wildcard strings).  Return a pair (response, list), where list is a list of tuples containing (name, title).  New in version 2.4.     NNTP.description(group)\u00b6 Get a description for a single group group.  If more than one group matches (if &#8216;group&#8217; is a real wildmat string), return the first match.   If no group matches, return an empty string. This elides the response code from the server.  If the response code is needed, use descriptions().  New in version 2.4.     NNTP.group(name)\u00b6 Send a GROUP command, where name is the group name. Return a tuple (response, count, first, last, name) where count is the (estimated) number of articles in the group, first is the first article number in the group, last is the last article number in the group, and name is the group name. The numbers are returned as strings.    NNTP.help([file])\u00b6 Send a HELP command.  Return a pair (response, list) where list is a list of help strings. If the file parameter is supplied, then the output of the  HELP command is stored in a file.  If file is a string,  then the method will open a file object with that name, write to it  then close it.  If file is a file object, then it will start calling write() on it to store the lines of the command output. If file is supplied, then the returned list is an empty list.    NNTP.stat(id)\u00b6 Send a STAT command, where id is the message id (enclosed in '<' and '>') or an article number (as a string). Return a triple (response, number, id) where number is the article number (as a string) and id is the message id  (enclosed in '<' and '>').    NNTP.next()\u00b6 Send a NEXT command.  Return as for stat().    NNTP.last()\u00b6 Send a LAST command.  Return as for stat().    NNTP.head(id)\u00b6 Send a HEAD command, where id has the same meaning as for stat(). Return a tuple (response, number, id, list) where the first three are the same as for stat(), and list is a list of the article&#8217;s headers (an uninterpreted list of lines, without trailing newlines).    NNTP.body(id[, file])\u00b6 Send a BODY command, where id has the same meaning as for stat(). If the file parameter is supplied, then the body is stored in a file.  If file is a string, then the method will open a file object with that name, write to it then close it. If file is a file object, then it will start calling write() on it to store the lines of the body. Return as for head().  If file is supplied, then the returned list is an empty list.    NNTP.article(id)\u00b6 Send an ARTICLE command, where id has the same meaning as for stat().  Return as for head().    NNTP.slave()\u00b6 Send a SLAVE command.  Return the server&#8217;s response.    NNTP.xhdr(header, string[, file])\u00b6 Send an XHDR command.  This command is not defined in the RFC but is a common extension.  The header argument is a header keyword, e.g. 'subject'.  The string argument should have the form 'first-last' where first and last are the first and last article numbers to search. Return a pair (response, list), where list is a list of pairs (id, text), where id is an article number (as a string) and text is the text of the requested header for that article. If the file parameter is supplied, then the output of the  XHDR command is stored in a file.  If file is a string, then the method will open a file object with that name, write to it  then close it.  If file is a file object, then it will start calling write() on it to store the lines of the command output. If file is supplied, then the returned list is an empty list.    NNTP.post(file)\u00b6 Post an article using the POST command.  The file argument is an open file object which is read until EOF using its readline() method.  It should be a well-formed news article, including the required headers.  The post() method automatically escapes lines beginning with ..    NNTP.ihave(id, file)\u00b6 Send an IHAVE command. id is a message id (enclosed in  '<' and '>'). If the response is not an error, treat file exactly as for the post() method.    NNTP.date()\u00b6 Return a triple (response, date, time), containing the current date and time in a form suitable for the newnews() and newgroups() methods. This is an optional NNTP extension, and may not be supported by all servers.    NNTP.xgtitle(name[, file])\u00b6 Process an XGTITLE command, returning a pair (response, list), where list is a list of tuples containing (name, title). If the file parameter is supplied, then the output of the  XGTITLE command is stored in a file. If file is a string,  then the method will open a file object with that name, write to it  then close it.  If file is a file object, then it will start calling write() on it to store the lines of the command output. If file is supplied, then the returned list is an empty list. This is an optional NNTP extension, and may not be supported by all servers. RFC2980 says &#8220;It is suggested that this extension be deprecated&#8221;.  Use descriptions() or description() instead.     NNTP.xover(start, end[, file])\u00b6 Return a pair (resp, list).  list is a list of tuples, one for each article in the range delimited by the start and end article numbers.  Each tuple is of the form (article number, subject, poster, date, id, references, size, lines). If the file parameter is supplied, then the output of the XOVER command is stored in a file.  If file is a string,  then the method will open a file object with that name, write to it  then close it.  If file is a file object, then it will start calling write() on it to store the lines of the command output. If file is supplied, then the returned list is an empty list. This is an optional NNTP extension, and may not be supported by all servers.    NNTP.xpath(id)\u00b6 Return a pair (resp, path), where path is the directory path to the article with message ID id.  This is an optional NNTP extension, and may not be supported by all servers.    NNTP.quit()\u00b6 Send a QUIT command and close the connection.  Once this method has been called, no other methods of the NNTP object should be called."},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP","title":"nntplib.NNTP","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.article","title":"nntplib.NNTP.article","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.body","title":"nntplib.NNTP.body","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.date","title":"nntplib.NNTP.date","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.description","title":"nntplib.NNTP.description","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.descriptions","title":"nntplib.NNTP.descriptions","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.getwelcome","title":"nntplib.NNTP.getwelcome","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.group","title":"nntplib.NNTP.group","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.head","title":"nntplib.NNTP.head","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.help","title":"nntplib.NNTP.help","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.ihave","title":"nntplib.NNTP.ihave","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.last","title":"nntplib.NNTP.last","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.list","title":"nntplib.NNTP.list","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.newgroups","title":"nntplib.NNTP.newgroups","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.newnews","title":"nntplib.NNTP.newnews","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.next","title":"nntplib.NNTP.next","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.post","title":"nntplib.NNTP.post","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.quit","title":"nntplib.NNTP.quit","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.set_debuglevel","title":"nntplib.NNTP.set_debuglevel","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.slave","title":"nntplib.NNTP.slave","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.stat","title":"nntplib.NNTP.stat","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.xgtitle","title":"nntplib.NNTP.xgtitle","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.xhdr","title":"nntplib.NNTP.xhdr","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.xover","title":"nntplib.NNTP.xover","description":""},{"url":"http:\/\/docs.python.org\/library\/nntplib.html#nntplib.NNTP.xpath","title":"nntplib.NNTP.xpath","description":""},{"url":"http:\/\/docs.python.org\/library\/uuid.html","title":"uuid","description":"20.15. uuid &#8212; UUID objects according to RFC 4122\u00b6  New in version 2.5. This module provides immutable UUID objects (the UUID class) and the functions uuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5 UUIDs as specified in RFC 4122. If all you want is a unique ID, you should probably call uuid1() or uuid4().  Note that uuid1() may compromise privacy since it creates a UUID containing the computer&#8217;s network address.  uuid4() creates a random UUID.   class uuid.UUID([hex[, bytes[, bytes_le[, fields[, int[, version]]]]]])\u00b6 Create a UUID from either a string of 32 hexadecimal digits, a string of 16 bytes as the bytes argument, a string of 16 bytes in little-endian order as the bytes_le argument, a tuple of six integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version, 8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as the fields argument, or a single 128-bit integer as the int argument.  When a string of hex digits is given, curly braces, hyphens, and a URN prefix are all optional.  For example, these expressions all yield the same UUID: UUID(&#39;{12345678-1234-5678-1234-567812345678}&#39;) UUID(&#39;12345678123456781234567812345678&#39;) UUID(&#39;urn:uuid:12345678-1234-5678-1234-567812345678&#39;) UUID(bytes=&#39;\\x12\\x34\\x56\\x78&#39;*4) UUID(bytes_le=&#39;\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56&#39; +               &#39;\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78&#39;) UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678)) UUID(int=0x12345678123456781234567812345678)   Exactly one of hex, bytes, bytes_le, fields, or int must be given. The version argument is optional; if given, the resulting UUID will have its variant and version number set according to RFC 4122, overriding bits in the given hex, bytes, bytes_le, fields, or int.   UUID instances have these read-only attributes:   UUID.bytes\u00b6 The UUID as a 16-byte string (containing the six integer fields in big-endian byte order).    UUID.bytes_le\u00b6 The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order).    UUID.fields\u00b6 A tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes:       Field Meaning    time_low the first 32 bits of the UUID  time_mid the next 16 bits of the UUID  time_hi_version the next 16 bits of the UUID  clock_seq_hi_variant the next 8 bits of the UUID  clock_seq_low the next 8 bits of the UUID  node the last 48 bits of the UUID  time the 60-bit timestamp  clock_seq the 14-bit sequence number        UUID.hex\u00b6 The UUID as a 32-character hexadecimal string.    UUID.int\u00b6 The UUID as a 128-bit integer.    UUID.urn\u00b6 The UUID as a URN as specified in RFC 4122.    UUID.variant\u00b6 The UUID variant, which determines the internal layout of the UUID. This will be one of the integer constants RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE.    UUID.version\u00b6 The UUID version number (1 through 5, meaningful only when the variant is RFC_4122).  The uuid module defines the following functions:   uuid.getnode()\u00b6 Get the hardware address as a 48-bit positive integer.  The first time this runs, it may launch a separate program, which could be quite slow.  If all attempts to obtain the hardware address fail, we choose a random 48-bit number with its eighth bit set to 1 as recommended in RFC 4122.  &#8220;Hardware address&#8221; means the MAC address of a network interface, and on a machine with multiple network interfaces the MAC address of any one of them may be returned.    uuid.uuid1([node[, clock_seq]])\u00b6 Generate a UUID from a host ID, sequence number, and the current time. If node is not given, getnode() is used to obtain the hardware address. If clock_seq is given, it is used as the sequence number; otherwise a random 14-bit sequence number is chosen.    uuid.uuid3(namespace, name)\u00b6 Generate a UUID based on the MD5 hash of a namespace identifier (which is a UUID) and a name (which is a string).    uuid.uuid4()\u00b6 Generate a random UUID.    uuid.uuid5(namespace, name)\u00b6 Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a UUID) and a name (which is a string).  The uuid module defines the following namespace identifiers for use with uuid3() or uuid5().   uuid.NAMESPACE_DNS\u00b6 When this namespace is specified, the name string is a fully-qualified domain name.    uuid.NAMESPACE_URL\u00b6 When this namespace is specified, the name string is a URL.    uuid.NAMESPACE_OID\u00b6 When this namespace is specified, the name string is an ISO OID.    uuid.NAMESPACE_X500\u00b6 When this namespace is specified, the name string is an X.500 DN in DER or a text output format.  The uuid module defines the following constants for the possible values of the variant attribute:   uuid.RESERVED_NCS\u00b6 Reserved for NCS compatibility.    uuid.RFC_4122\u00b6 Specifies the UUID layout given in RFC 4122.    uuid.RESERVED_MICROSOFT\u00b6 Reserved for Microsoft compatibility.    uuid.RESERVED_FUTURE\u00b6 Reserved for future definition.   See also  RFC 4122 - A Universally Unique IDentifier (UUID) URN Namespace This specification defines a Uniform Resource Name namespace for UUIDs, the internal format of UUIDs, and methods of generating UUIDs.    20.15.1. Example\u00b6 Here are some examples of typical usage of the uuid module: >>> import uuid  >>> # make a UUID based on the host ID and current time >>> uuid.uuid1() UUID(&#39;a8098c1a-f86e-11da-bd1a-00112444be1e&#39;)  >>> # make a UUID using an MD5 hash of a namespace UUID and a name >>> uuid.uuid3(uuid.NAMESPACE_DNS, &#39;python.org&#39;) UUID(&#39;6fa459ea-ee8a-3ca4-894e-db77e160355e&#39;)  >>> # make a random UUID >>> uuid.uuid4() UUID(&#39;16fd2706-8baf-433b-82eb-8c7fada847da&#39;)  >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name >>> uuid.uuid5(uuid.NAMESPACE_DNS, &#39;python.org&#39;) UUID(&#39;886313e1-3b8a-5372-9b90-0c9aee199e5d&#39;)  >>> # make a UUID from a string of hex digits (braces and hyphens ignored) >>> x = uuid.UUID(&#39;{00010203-0405-0607-0809-0a0b0c0d0e0f}&#39;)  >>> # convert a UUID to a string of hex digits in standard form >>> str(x) &#39;00010203-0405-0607-0809-0a0b0c0d0e0f&#39;  >>> # get the raw 16 bytes of the UUID >>> x.bytes &#39;\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f&#39;  >>> # make a UUID from a 16-byte string >>> uuid.UUID(bytes=x.bytes) UUID(&#39;00010203-0405-0607-0809-0a0b0c0d0e0f&#39;)"},{"url":"http:\/\/docs.python.org\/library\/uuid.html#uuid.getnode","title":"uuid.getnode","description":""},{"url":"http:\/\/docs.python.org\/library\/uuid.html#uuid.UUID","title":"uuid.UUID","description":""},{"url":"http:\/\/docs.python.org\/library\/uuid.html#uuid.uuid1","title":"uuid.uuid1","description":""},{"url":"http:\/\/docs.python.org\/library\/uuid.html#uuid.uuid3","title":"uuid.uuid3","description":""},{"url":"http:\/\/docs.python.org\/library\/uuid.html#uuid.uuid4","title":"uuid.uuid4","description":""},{"url":"http:\/\/docs.python.org\/library\/uuid.html#uuid.uuid5","title":"uuid.uuid5","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html","title":"urlparse","description":null},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.BaseResult","title":"urlparse.BaseResult","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.parse_qs","title":"urlparse.parse_qs","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.parse_qsl","title":"urlparse.parse_qsl","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.ParseResult","title":"urlparse.ParseResult","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.ParseResult.geturl","title":"urlparse.ParseResult.geturl","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.SplitResult","title":"urlparse.SplitResult","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.urldefrag","title":"urlparse.urldefrag","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.urljoin","title":"urlparse.urljoin","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.urlparse","title":"urlparse.urlparse","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.urlsplit","title":"urlparse.urlsplit","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.urlunparse","title":"urlparse.urlunparse","description":""},{"url":"http:\/\/docs.python.org\/library\/urlparse.html#urlparse.urlunsplit","title":"urlparse.urlunsplit","description":""},{"url":"http:\/\/docs.python.org\/library\/simplehttpserver.html","title":"SimpleHTTPServer","description":"20.19. SimpleHTTPServer &#8212; Simple HTTP request handler\u00b6  Note The SimpleHTTPServer module has been merged into http.server in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  The SimpleHTTPServer module defines a single class, SimpleHTTPRequestHandler, which is interface-compatible with BaseHTTPServer.BaseHTTPRequestHandler. The SimpleHTTPServer module defines the following class:   class SimpleHTTPServer.SimpleHTTPRequestHandler(request, client_address, server)\u00b6 This class serves files from the current directory and below, directly mapping the directory structure to HTTP requests. A lot of the work, such as parsing the request, is done by the base class BaseHTTPServer.BaseHTTPRequestHandler.  This class implements the do_GET() and do_HEAD() functions. The following are defined as class-level attributes of SimpleHTTPRequestHandler:   server_version\u00b6   This will be \"SimpleHTTP\/\" + __version__, where __version__ is defined at the module level.   extensions_map\u00b6 A dictionary mapping suffixes into MIME types. The default is signified by an empty string, and is considered to be application\/octet-stream. The mapping is used case-insensitively, and so should contain only lower-cased keys.  The SimpleHTTPRequestHandler class defines the following methods:   do_HEAD()\u00b6 This method serves the 'HEAD' request type: it sends the headers it would send for the equivalent GET request. See the do_GET() method for a more complete explanation of the possible headers.    do_GET()\u00b6 The request is mapped to a local file by interpreting the request as a path relative to the current working directory. If the request was mapped to a directory, the directory is checked for a file named index.html or index.htm (in that order). If found, the file&#8217;s contents are returned; otherwise a directory listing is generated by calling the list_directory() method. This method uses os.listdir() to scan the directory, and returns a 404 error response if the listdir() fails. If the request was mapped to a file, it is opened and the contents are returned.  Any IOError exception in opening the requested file is mapped to a 404, 'File not found' error. Otherwise, the content type is guessed by calling the guess_type() method, which in turn uses the extensions_map variable. A 'Content-type:' header with the guessed content type is output, followed by a 'Content-Length:' header with the file&#8217;s size and a 'Last-Modified:' header with the file&#8217;s modification time. Then follows a blank line signifying the end of the headers, and then the contents of the file are output. If the file&#8217;s MIME type starts with text\/ the file is opened in text mode; otherwise binary mode is used. The test() function in the SimpleHTTPServer module is an example which creates a server using the SimpleHTTPRequestHandler as the Handler.  New in version 2.5: The 'Last-Modified' header.     The SimpleHTTPServer module can be used in the following manner in order to set up a very basic web server serving files relative to the current directory. import SimpleHTTPServer import SocketServer  PORT = 8000  Handler = SimpleHTTPServer.SimpleHTTPRequestHandler  httpd = SocketServer.TCPServer((\"\", PORT), Handler)  print \"serving at port\", PORT httpd.serve_forever()   The SimpleHTTPServer module can also be invoked directly using the -m switch of the interpreter with a port number argument. Similar to the previous example, this serves the files relative to the current directory. python -m SimpleHTTPServer 8000   See also  Module BaseHTTPServer Base class implementation for Web server and request handler."},{"url":"http:\/\/docs.python.org\/library\/simplehttpserver.html#SimpleHTTPServer.SimpleHTTPRequestHandler","title":"SimpleHTTPServer.SimpleHTTPRequestHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/simplehttpserver.html#SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET","title":"SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET","description":""},{"url":"http:\/\/docs.python.org\/library\/simplehttpserver.html#SimpleHTTPServer.SimpleHTTPRequestHandler.do_HEAD","title":"SimpleHTTPServer.SimpleHTTPRequestHandler.do_HEAD","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html","title":"smtplib","description":"20.12. smtplib &#8212; SMTP protocol client\u00b6 Source code: Lib\/smtplib.py  The smtplib module defines an SMTP client session object that can be used to send mail to any Internet machine with an SMTP or ESMTP listener daemon.  For details of SMTP and ESMTP operation, consult RFC 821 (Simple Mail Transfer Protocol) and RFC 1869 (SMTP Service Extensions).   class smtplib.SMTP([host[, port[, local_hostname[, timeout]]]])\u00b6 A SMTP instance encapsulates an SMTP connection.  It has methods that support a full repertoire of SMTP and ESMTP operations. If the optional host and port parameters are given, the SMTP connect() method is called with those parameters during initialization.  An SMTPConnectError is raised if the specified host doesn&#8217;t respond correctly. The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). For normal use, you should only require the initialization\/connect, sendmail(), and quit() methods.  An example is included below.  Changed in version 2.6: timeout was added.     class smtplib.SMTP_SSL([host[, port[, local_hostname[, keyfile[, certfile[, timeout]]]]]])\u00b6 A SMTP_SSL instance behaves exactly the same as instances of SMTP. SMTP_SSL should be used for situations where SSL is required from the beginning of the connection and using starttls() is not appropriate. If host is not specified, the local host is used. If port is omitted, the standard SMTP-over-SSL port (465) is used. keyfile and certfile are also optional, and can contain a PEM formatted private key and certificate chain file for the SSL connection. The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).  New in version 2.6.     class smtplib.LMTP([host[, port[, local_hostname]]])\u00b6 The LMTP protocol, which is very similar to ESMTP, is heavily based on the standard SMTP client. It&#8217;s common to use Unix sockets for LMTP, so our connect() method must support that as well as a regular host:port server. To specify a Unix socket, you must use an absolute path for host, starting with a &#8216;\/&#8217;. Authentication is supported, using the regular SMTP mechanism. When using a Unix socket, LMTP generally don&#8217;t support or require any authentication, but your mileage might vary.  New in version 2.6.   A nice selection of exceptions is defined as well:   exception smtplib.SMTPException\u00b6 Base exception class for all exceptions raised by this module.    exception smtplib.SMTPServerDisconnected\u00b6 This exception is raised when the server unexpectedly disconnects, or when an attempt is made to use the SMTP instance before connecting it to a server.    exception smtplib.SMTPResponseException\u00b6 Base class for all exceptions that include an SMTP error code. These exceptions are generated in some instances when the SMTP server returns an error code.  The error code is stored in the smtp_code attribute of the error, and the smtp_error attribute is set to the error message.    exception smtplib.SMTPSenderRefused\u00b6 Sender address refused.  In addition to the attributes set by on all SMTPResponseException exceptions, this sets &#8216;sender&#8217; to the string that the SMTP server refused.    exception smtplib.SMTPRecipientsRefused\u00b6 All recipient addresses refused.  The errors for each recipient are accessible through the attribute recipients, which is a dictionary of exactly the same sort as SMTP.sendmail() returns.    exception smtplib.SMTPDataError\u00b6 The SMTP server refused to accept the message data.    exception smtplib.SMTPConnectError\u00b6 Error occurred during establishment of a connection  with the server.    exception smtplib.SMTPHeloError\u00b6 The server refused our HELO message.    exception smtplib.SMTPAuthenticationError\u00b6 SMTP authentication went wrong.  Most probably the server didn&#8217;t accept the username\/password combination provided.   See also  RFC 821 - Simple Mail Transfer Protocol Protocol definition for SMTP.  This document covers the model, operating procedure, and protocol details for SMTP. RFC 1869 - SMTP Service Extensions Definition of the ESMTP extensions for SMTP.  This describes a framework for extending SMTP with new commands, supporting dynamic discovery of the commands provided by the server, and defines a few additional commands.    20.12.1. SMTP Objects\u00b6 An SMTP instance has the following methods:   SMTP.set_debuglevel(level)\u00b6 Set the debug output level.  A true value for level results in debug messages for connection and for all messages sent to and received from the server.    SMTP.connect([host[, port]])\u00b6 Connect to a host on a given port.  The defaults are to connect to the local host at the standard SMTP port (25). If the hostname ends with a colon (':') followed by a number, that suffix will be stripped off and the number interpreted as the port number to use. This method is automatically invoked by the constructor if a host is specified during instantiation.    SMTP.docmd(cmd[, argstring])\u00b6 Send a command cmd to the server.  The optional argument argstring is simply concatenated to the command, separated by a space. This returns a 2-tuple composed of a numeric response code and the actual response line (multiline responses are joined into one long line.) In normal operation it should not be necessary to call this method explicitly. It is used to implement other methods and may be useful for testing private extensions. If the connection to the server is lost while waiting for the reply, SMTPServerDisconnected will be raised.     SMTP.helo([hostname])\u00b6 Identify yourself to the SMTP server using HELO.  The hostname argument defaults to the fully qualified domain name of the local host. The message returned by the server is stored as the helo_resp attribute of the object. In normal operation it should not be necessary to call this method explicitly. It will be implicitly called by the sendmail() when necessary.     SMTP.ehlo([hostname])\u00b6 Identify yourself to an ESMTP server using EHLO.  The hostname argument defaults to the fully qualified domain name of the local host.  Examine the response for ESMTP option and store them for use by has_extn(). Also sets several informational attributes: the message returned by the server is stored as the ehlo_resp attribute, does_esmtp is set to true or false depending on whether the server supports ESMTP, and esmtp_features will be a dictionary containing the names of the SMTP service extensions this server supports, and their parameters (if any). Unless you wish to use has_extn() before sending mail, it should not be necessary to call this method explicitly.  It will be implicitly called by sendmail() when necessary.     SMTP.ehlo_or_helo_if_needed()\u00b6 This method call ehlo() and or helo() if there has been no previous EHLO or HELO command this session.  It tries ESMTP EHLO first.  SMTPHeloError The server didn&#8217;t reply properly to the HELO greeting.   New in version 2.6.     SMTP.has_extn(name)\u00b6 Return True if name is in the set of SMTP service extensions returned by the server, False otherwise. Case is ignored.    SMTP.verify(address)\u00b6 Check the validity of an address on this server using SMTP VRFY. Returns a tuple consisting of code 250 and a full RFC 822 address (including human name) if the user address is valid. Otherwise returns an SMTP error code of 400 or greater and an error string.  Note Many sites disable SMTP VRFY in order to foil spammers.      SMTP.login(user, password)\u00b6 Log in on an SMTP server that requires authentication. The arguments are the username and the password to authenticate with. If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first. This method will return normally if the authentication was successful, or may raise the following exceptions:  SMTPHeloError The server didn&#8217;t reply properly to the HELO greeting. SMTPAuthenticationError The server didn&#8217;t accept the username\/password combination. SMTPException No suitable authentication method was found.      SMTP.starttls([keyfile[, certfile]])\u00b6 Put the SMTP connection in TLS (Transport Layer Security) mode.  All SMTP commands that follow will be encrypted.  You should then call ehlo() again. If keyfile and certfile are provided, these are passed to the socket module&#8217;s ssl() function. If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first.  Changed in version 2.6.  SMTPHeloError The server didn&#8217;t reply properly to the HELO greeting. SMTPException The server does not support the STARTTLS extension.   Changed in version 2.6.  RuntimeError SSL\/TLS support is not available to your Python interpreter.      SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options])\u00b6 Send mail.  The required arguments are an RFC 822 from-address string, a list of RFC 822 to-address strings (a bare string will be treated as a list with 1 address), and a message string.  The caller may pass a list of ESMTP options (such as 8bitmime) to be used in MAIL FROM commands as mail_options. ESMTP options (such as DSN commands) that should be used with all RCPT commands can be passed as rcpt_options.  (If you need to use different ESMTP options to different recipients you have to use the low-level methods such as mail(), rcpt() and data() to send the message.)  Note The from_addr and to_addrs parameters are used to construct the message envelope used by the transport agents. The SMTP does not modify the message headers in any way.  If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first. If the server does ESMTP, message size and each of the specified options will be passed to it (if the option is in the feature set the server advertises).  If EHLO fails, HELO will be tried and ESMTP options suppressed. This method will return normally if the mail is accepted for at least one recipient. Otherwise it will raise an exception.  That is, if this method does not raise an exception, then someone should get your mail. If this method does not raise an exception, it returns a dictionary, with one entry for each recipient that was refused.  Each entry contains a tuple of the SMTP error code and the accompanying error message sent by the server. This method may raise the following exceptions:  SMTPRecipientsRefused All recipients were refused.  Nobody got the mail.  The recipients attribute of the exception object is a dictionary with information about the refused recipients (like the one returned when at least one recipient was accepted). SMTPHeloError The server didn&#8217;t reply properly to the HELO greeting. SMTPSenderRefused The server didn&#8217;t accept the from_addr. SMTPDataError The server replied with an unexpected error code (other than a refusal of a recipient).  Unless otherwise noted, the connection will be open even after an exception is raised.     SMTP.quit()\u00b6 Terminate the SMTP session and close the connection.  Return the result of the SMTP QUIT command.  Changed in version 2.6: Return a value.   Low-level methods corresponding to the standard SMTP\/ESMTP commands HELP, RSET, NOOP, MAIL, RCPT, and DATA are also supported. Normally these do not need to be called directly, so they are not documented here.  For details, consult the module code.   20.12.2. SMTP Example\u00b6 This example prompts the user for addresses needed in the message envelope (&#8216;To&#8217; and &#8216;From&#8217; addresses), and the message to be delivered.  Note that the headers to be included with the message must be included in the message as entered; this example doesn&#8217;t do any processing of the RFC 822 headers.  In particular, the &#8216;To&#8217; and &#8216;From&#8217; addresses must be included in the message headers explicitly. import smtplib  def prompt(prompt):     return raw_input(prompt).strip()  fromaddr = prompt(\"From: \") toaddrs  = prompt(\"To: \").split() print \"Enter message, end with ^D (Unix) or ^Z (Windows):\"  # Add the From: and To: headers at the start! msg = (\"From: %s\\r\\nTo: %s\\r\\n\\r\\n\"         (fromaddr, \", \".join(toaddrs))) while 1:     try:         line = raw_input()     except EOFError:         break     if not line:         break     msg = msg + line  print \"Message length is \" + repr(len(msg))  server = smtplib.SMTP(&#39;localhost&#39;) server.set_debuglevel(1) server.sendmail(fromaddr, toaddrs, msg) server.quit()    Note In general, you will want to use the email package&#8217;s features to construct an email message, which you can then convert to a string and send via sendmail(); see email: Examples."},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.LMTP","title":"smtplib.LMTP","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP","title":"smtplib.SMTP","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.connect","title":"smtplib.SMTP.connect","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.docmd","title":"smtplib.SMTP.docmd","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.ehlo","title":"smtplib.SMTP.ehlo","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.ehlo_or_helo_if_needed","title":"smtplib.SMTP.ehlo_or_helo_if_needed","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.has_extn","title":"smtplib.SMTP.has_extn","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.helo","title":"smtplib.SMTP.helo","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.login","title":"smtplib.SMTP.login","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.quit","title":"smtplib.SMTP.quit","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.sendmail","title":"smtplib.SMTP.sendmail","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.set_debuglevel","title":"smtplib.SMTP.set_debuglevel","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.starttls","title":"smtplib.SMTP.starttls","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP.verify","title":"smtplib.SMTP.verify","description":""},{"url":"http:\/\/docs.python.org\/library\/smtplib.html#smtplib.SMTP_SSL","title":"smtplib.SMTP_SSL","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html","title":"BaseHTTPServer","description":"20.18. BaseHTTPServer &#8212; Basic HTTP server\u00b6  Note The BaseHTTPServer module has been merged into http.server in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  Source code: Lib\/BaseHTTPServer.py  This module defines two classes for implementing HTTP servers (Web servers). Usually, this module isn&#8217;t used directly, but is used as a basis for building functioning Web servers. See the SimpleHTTPServer and CGIHTTPServer modules. The first class, HTTPServer, is a SocketServer.TCPServer subclass, and therefore implements the SocketServer.BaseServer interface.  It creates and listens at the HTTP socket, dispatching the requests to a handler.  Code to create and run the server looks like this: def run(server_class=BaseHTTPServer.HTTPServer,         handler_class=BaseHTTPServer.BaseHTTPRequestHandler):     server_address = (&#39;&#39;, 8000)     httpd = server_class(server_address, handler_class)     httpd.serve_forever()     class BaseHTTPServer.HTTPServer(server_address, RequestHandlerClass)\u00b6 This class builds on the TCPServer class by storing the server address as instance variables named server_name and server_port. The server is accessible by the handler, typically through the handler&#8217;s server instance variable.    class BaseHTTPServer.BaseHTTPRequestHandler(request, client_address, server)\u00b6 This class is used to handle the HTTP requests that arrive at the server. By itself, it cannot respond to any actual HTTP requests; it must be subclassed to handle each request method (e.g. GET or POST). BaseHTTPRequestHandler provides a number of class and instance variables, and methods for use by subclasses. The handler will parse the request and the headers, then call a method specific to the request type. The method name is constructed from the request. For example, for the request method SPAM, the do_SPAM() method will be called with no arguments. All of the relevant information is stored in instance variables of the handler.  Subclasses should not need to override or extend the __init__() method. BaseHTTPRequestHandler has the following instance variables:   client_address\u00b6 Contains a tuple of the form (host, port) referring to the client&#8217;s address.    server\u00b6 Contains the server instance.    command\u00b6 Contains the command (request type). For example, 'GET'.    path\u00b6 Contains the request path.    request_version\u00b6 Contains the version string from the request. For example, 'HTTP\/1.0'.    headers\u00b6 Holds an instance of the class specified by the MessageClass class variable. This instance parses and manages the headers in the HTTP request.    rfile\u00b6 Contains an input stream, positioned at the start of the optional input data.    wfile\u00b6 Contains the output stream for writing a response back to the client. Proper adherence to the HTTP protocol must be used when writing to this stream.  BaseHTTPRequestHandler has the following class variables:   server_version\u00b6 Specifies the server software version.  You may want to override this. The format is multiple whitespace-separated strings, where each string is of the form name[\/version]. For example, 'BaseHTTP\/0.2'.    sys_version\u00b6 Contains the Python system version, in a form usable by the version_string method and the server_version class variable. For example, 'Python\/1.4'.    error_message_format\u00b6 Specifies a format string for building an error response to the client. It uses parenthesized, keyed format specifiers, so the format operand must be a dictionary. The code key should be an integer, specifying the numeric HTTP error code value. message should be a string containing a (detailed) error message of what occurred, and explain should be an explanation of the error code number. Default message and explain values can found in the responses class variable.    error_content_type\u00b6 Specifies the Content-Type HTTP header of error responses sent to the client.  The default value is 'text\/html'.  New in version 2.6: Previously, the content type was always 'text\/html'.     protocol_version\u00b6 This specifies the HTTP protocol version used in responses.  If set to 'HTTP\/1.1', the server will permit HTTP persistent connections; however, your server must then include an accurate Content-Length header (using send_header()) in all of its responses to clients. For backwards compatibility, the setting defaults to 'HTTP\/1.0'.    MessageClass\u00b6 Specifies a rfc822.Message-like class to parse HTTP headers. Typically, this is not overridden, and it defaults to mimetools.Message.     responses\u00b6 This variable contains a mapping of error code integers to two-element tuples containing a short and long message. For example, {code: (shortmessage, longmessage)}. The shortmessage is usually used as the message key in an error response, and longmessage as the explain key (see the error_message_format class variable).  A BaseHTTPRequestHandler instance has the following methods:   handle()\u00b6 Calls handle_one_request() once (or, if persistent connections are enabled, multiple times) to handle incoming HTTP requests. You should never need to override it; instead, implement appropriate do_*() methods.    handle_one_request()\u00b6 This method will parse and dispatch the request to the appropriate do_*() method.  You should never need to override it.    send_error(code[, message])\u00b6 Sends and logs a complete error reply to the client. The numeric code specifies the HTTP error code, with message as optional, more specific text. A complete set of headers is sent, followed by text composed using the error_message_format class variable.    send_response(code[, message])\u00b6 Sends a response header and logs the accepted request. The HTTP response line is sent, followed by Server and Date headers. The values for these two headers are picked up from the version_string() and date_time_string() methods, respectively.    send_header(keyword, value)\u00b6 Writes a specific HTTP header to the output stream. keyword should specify the header keyword, with value specifying its value.    end_headers()\u00b6 Sends a blank line, indicating the end of the HTTP headers in the response.    log_request([code[, size]])\u00b6 Logs an accepted (successful) request. code should specify the numeric HTTP code associated with the response. If a size of the response is available, then it should be passed as the size parameter.    log_error(...)\u00b6 Logs an error when a request cannot be fulfilled. By default, it passes the message to log_message(), so it takes the same arguments (format and additional values).    log_message(format, ...)\u00b6 Logs an arbitrary message to sys.stderr. This is typically overridden to create custom error logging mechanisms. The format argument is a standard printf-style format string, where the additional arguments to log_message() are applied as inputs to the formatting. The client address and current date and time are prefixed to every message logged.    version_string()\u00b6 Returns the server software&#8217;s version string. This is a combination of the server_version and sys_version class variables.    date_time_string([timestamp])\u00b6 Returns the date and time given by timestamp (which must be in the format returned by time.time()), formatted for a message header. If timestamp is omitted, it uses the current date and time. The result looks like 'Sun, 06 Nov 1994 08:49:37 GMT'.  New in version 2.5: The timestamp parameter.     log_date_time_string()\u00b6 Returns the current date and time, formatted for logging.    address_string()\u00b6 Returns the client address, formatted for logging. A name lookup is performed on the client&#8217;s IP address.     20.18.1. More examples\u00b6 To create a server that doesn&#8217;t run forever, but until some condition is fulfilled: def run_while_true(server_class=BaseHTTPServer.HTTPServer,                    handler_class=BaseHTTPServer.BaseHTTPRequestHandler):     \"\"\"     This assumes that keep_running() is a function of no arguments which     is tested initially and after each request.  If its return value     is true, the server continues.     \"\"\"     server_address = (&#39;&#39;, 8000)     httpd = server_class(server_address, handler_class)     while keep_running():         httpd.handle_request()    See also  Module CGIHTTPServer Extended request handler that supports CGI scripts. Module SimpleHTTPServer Basic request handler that limits response to files actually under the document root."},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler","title":"BaseHTTPServer.BaseHTTPRequestHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.address_string","title":"BaseHTTPServer.BaseHTTPRequestHandler.address_string","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.date_time_string","title":"BaseHTTPServer.BaseHTTPRequestHandler.date_time_string","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.end_headers","title":"BaseHTTPServer.BaseHTTPRequestHandler.end_headers","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.handle","title":"BaseHTTPServer.BaseHTTPRequestHandler.handle","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.handle_one_request","title":"BaseHTTPServer.BaseHTTPRequestHandler.handle_one_request","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.log_date_time_string","title":"BaseHTTPServer.BaseHTTPRequestHandler.log_date_time_string","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.log_error","title":"BaseHTTPServer.BaseHTTPRequestHandler.log_error","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.log_message","title":"BaseHTTPServer.BaseHTTPRequestHandler.log_message","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.log_request","title":"BaseHTTPServer.BaseHTTPRequestHandler.log_request","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.send_error","title":"BaseHTTPServer.BaseHTTPRequestHandler.send_error","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.send_header","title":"BaseHTTPServer.BaseHTTPRequestHandler.send_header","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.send_response","title":"BaseHTTPServer.BaseHTTPRequestHandler.send_response","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.BaseHTTPRequestHandler.version_string","title":"BaseHTTPServer.BaseHTTPRequestHandler.version_string","description":""},{"url":"http:\/\/docs.python.org\/library\/basehttpserver.html#BaseHTTPServer.HTTPServer","title":"BaseHTTPServer.HTTPServer","description":""},{"url":"http:\/\/docs.python.org\/library\/cgihttpserver.html","title":"CGIHTTPServer","description":"20.20. CGIHTTPServer &#8212; CGI-capable HTTP request handler\u00b6  Note The CGIHTTPServer module has been merged into http.server in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  The CGIHTTPServer module defines a request-handler class, interface compatible with BaseHTTPServer.BaseHTTPRequestHandler and inherits behavior from SimpleHTTPServer.SimpleHTTPRequestHandler but can also run CGI scripts.  Note This module can run CGI scripts on Unix and Windows systems.   Note CGI scripts run by the CGIHTTPRequestHandler class cannot execute redirects (HTTP code 302), because code 200 (script output follows) is sent prior to execution of the CGI script.  This pre-empts the status code.  The CGIHTTPServer module defines the following class:   class CGIHTTPServer.CGIHTTPRequestHandler(request, client_address, server)\u00b6 This class is used to serve either files or output of CGI scripts from  the current directory and below. Note that mapping HTTP hierarchic structure to local directory structure is exactly as in SimpleHTTPServer.SimpleHTTPRequestHandler. The class will however, run the CGI script, instead of serving it as a file, if it guesses it to be a CGI script. Only directory-based CGI are used &#8212; the other common server configuration is to treat special extensions as denoting CGI scripts. The do_GET() and do_HEAD() functions are modified to run CGI scripts and serve the output, instead of serving files, if the request leads to somewhere below the cgi_directories path. The CGIHTTPRequestHandler defines the following data member:   cgi_directories\u00b6 This defaults to ['\/cgi-bin', '\/htbin'] and describes directories to treat as containing CGI scripts.  The CGIHTTPRequestHandler defines the following methods:   do_POST()\u00b6 This method serves the 'POST' request type, only allowed for CGI scripts.  Error 501, &#8220;Can only POST to CGI scripts&#8221;, is output when trying to POST to a non-CGI url.    Note that CGI scripts will be run with UID of user nobody, for security reasons. Problems with the CGI script will be translated to error 403. For example usage, see the implementation of the test() function.  See also  Module BaseHTTPServer Base class implementation for Web server and request handler."},{"url":"http:\/\/docs.python.org\/library\/cgihttpserver.html#CGIHTTPServer.CGIHTTPRequestHandler","title":"CGIHTTPServer.CGIHTTPRequestHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/cgihttpserver.html#CGIHTTPServer.CGIHTTPRequestHandler.do_POST","title":"CGIHTTPServer.CGIHTTPRequestHandler.do_POST","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html","title":"SocketServer","description":"20.17. SocketServer &#8212; A framework for network servers\u00b6  Note The SocketServer module has been renamed to socketserver in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  Source code: Lib\/SocketServer.py  The SocketServer module simplifies the task of writing network servers. There are four basic server classes: TCPServer uses the Internet TCP protocol, which provides for continuous streams of data between the client and server.  UDPServer uses datagrams, which are discrete packets of information that may arrive out of order or be lost while in transit.  The more infrequently used UnixStreamServer and UnixDatagramServer classes are similar, but use Unix domain sockets; they&#8217;re not available on non-Unix platforms.  For more details on network programming, consult a book such as W. Richard Steven&#8217;s UNIX Network Programming or Ralph Davis&#8217;s Win32 Network Programming. These four classes process requests synchronously; each request must be completed before the next request can be started.  This isn&#8217;t suitable if each request takes a long time to complete, because it requires a lot of computation, or because it returns a lot of data which the client is slow to process.  The solution is to create a separate process or thread to handle each request; the ForkingMixIn and ThreadingMixIn mix-in classes can be used to support asynchronous behaviour. Creating a server requires several steps.  First, you must create a request handler class by subclassing the BaseRequestHandler class and overriding its handle() method; this method will process incoming requests.  Second, you must instantiate one of the server classes, passing it the server&#8217;s address and the request handler class.  Finally, call the handle_request() or serve_forever() method of the server object to process one or many requests. When inheriting from ThreadingMixIn for threaded connection behavior, you should explicitly declare how you want your threads to behave on an abrupt shutdown. The ThreadingMixIn class defines an attribute daemon_threads, which indicates whether or not the server should wait for thread termination. You should set the flag explicitly if you would like threads to behave autonomously; the default is False, meaning that Python will not exit until all threads created by ThreadingMixIn have exited. Server classes have the same external methods and attributes, no matter what network protocol they use.  20.17.1. Server Creation Notes\u00b6 There are five classes in an inheritance diagram, four of which represent synchronous servers of four types: +------------+ | BaseServer | +------------+       |       v +-----------+        +------------------+ | TCPServer |------->| UnixStreamServer | +-----------+        +------------------+       |       v +-----------+        +--------------------+ | UDPServer |------->| UnixDatagramServer | +-----------+        +--------------------+  Note that UnixDatagramServer derives from UDPServer, not from UnixStreamServer &#8212; the only difference between an IP and a Unix stream server is the address family, which is simply repeated in both Unix server classes. Forking and threading versions of each type of server can be created using the ForkingMixIn and ThreadingMixIn mix-in classes.  For instance, a threading UDP server class is created as follows: class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass   The mix-in class must come first, since it overrides a method defined in UDPServer.  Setting the various attributes also change the behavior of the underlying server mechanism. To implement a service, you must derive a class from BaseRequestHandler and redefine its handle() method.  You can then run various versions of the service by combining one of the server classes with your request handler class.  The request handler class must be different for datagram or stream services.  This can be hidden by using the handler subclasses StreamRequestHandler or DatagramRequestHandler. Of course, you still have to use your head!  For instance, it makes no sense to use a forking server if the service contains state in memory that can be modified by different requests, since the modifications in the child process would never reach the initial state kept in the parent process and passed to each child.  In this case, you can use a threading server, but you will probably have to use locks to protect the integrity of the shared data. On the other hand, if you are building an HTTP server where all data is stored externally (for instance, in the file system), a synchronous class will essentially render the service &#8220;deaf&#8221; while one request is being handled &#8211; which may be for a very long time if a client is slow to receive all the data it has requested.  Here a threading or forking server is appropriate. In some cases, it may be appropriate to process part of a request synchronously, but to finish processing in a forked child depending on the request data.  This can be implemented by using a synchronous server and doing an explicit fork in the request handler class handle() method. Another approach to handling multiple simultaneous requests in an environment that supports neither threads nor fork() (or where these are too expensive or inappropriate for the service) is to maintain an explicit table of partially finished requests and to use select() to decide which request to work on next (or whether to handle a new incoming request).  This is particularly important for stream services where each client can potentially be connected for a long time (if threads or subprocesses cannot be used). See asyncore for another way to manage this.   20.17.2. Server Objects\u00b6   class SocketServer.BaseServer\u00b6 This is the superclass of all Server objects in the module.  It defines the interface, given below, but does not implement most of the methods, which is done in subclasses.    BaseServer.fileno()\u00b6 Return an integer file descriptor for the socket on which the server is listening.  This function is most commonly passed to select.select(), to allow monitoring multiple servers in the same process.    BaseServer.handle_request()\u00b6 Process a single request.  This function calls the following methods in order: get_request(), verify_request(), and process_request().  If the user-provided handle() method of the handler class raises an exception, the server&#8217;s handle_error() method will be called.  If no request is received within self.timeout seconds, handle_timeout() will be called and handle_request() will return.    BaseServer.serve_forever(poll_interval=0.5)\u00b6 Handle requests until an explicit shutdown() request. Poll for shutdown every poll_interval seconds. Ignores self.timeout. If you need to do periodic tasks, do them in another thread.    BaseServer.shutdown()\u00b6 Tell the serve_forever() loop to stop and wait until it does.  New in version 2.6.     BaseServer.address_family\u00b6 The family of protocols to which the server&#8217;s socket belongs. Common examples are socket.AF_INET and socket.AF_UNIX.    BaseServer.RequestHandlerClass\u00b6 The user-provided request handler class; an instance of this class is created for each request.    BaseServer.server_address\u00b6 The address on which the server is listening.  The format of addresses varies depending on the protocol family; see the documentation for the socket module for details.  For Internet protocols, this is a tuple containing a string giving the address, and an integer port number: ('127.0.0.1', 80), for example.    BaseServer.socket\u00b6 The socket object on which the server will listen for incoming requests.  The server classes support the following class variables:   BaseServer.allow_reuse_address\u00b6 Whether the server will allow the reuse of an address. This defaults to False, and can be set in subclasses to change the policy.    BaseServer.request_queue_size\u00b6 The size of the request queue.  If it takes a long time to process a single request, any requests that arrive while the server is busy are placed into a queue, up to request_queue_size requests.  Once the queue is full, further requests from clients will get a &#8220;Connection denied&#8221; error.  The default value is usually 5, but this can be overridden by subclasses.    BaseServer.socket_type\u00b6 The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values.    BaseServer.timeout\u00b6 Timeout duration, measured in seconds, or None if no timeout is desired.  If handle_request() receives no incoming requests within the timeout period, the handle_timeout() method is called.  There are various server methods that can be overridden by subclasses of base server classes like TCPServer; these methods aren&#8217;t useful to external users of the server object.   BaseServer.finish_request()\u00b6 Actually processes the request by instantiating RequestHandlerClass and calling its handle() method.    BaseServer.get_request()\u00b6 Must accept a request from the socket, and return a 2-tuple containing the new socket object to be used to communicate with the client, and the client&#8217;s address.    BaseServer.handle_error(request, client_address)\u00b6 This function is called if the RequestHandlerClass&#8216;s handle() method raises an exception.  The default action is to print the traceback to standard output and continue handling further requests.    BaseServer.handle_timeout()\u00b6 This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received.  The default action for forking servers is to collect the status of any child processes that have exited, while in threading servers this method does nothing.    BaseServer.process_request(request, client_address)\u00b6 Calls finish_request() to create an instance of the RequestHandlerClass.  If desired, this function can create a new process or thread to handle the request; the ForkingMixIn and ThreadingMixIn classes do this.    BaseServer.server_activate()\u00b6 Called by the server&#8217;s constructor to activate the server.  The default behavior just listen()s to the server&#8217;s socket. May be overridden.    BaseServer.server_bind()\u00b6 Called by the server&#8217;s constructor to bind the socket to the desired address. May be overridden.    BaseServer.verify_request(request, client_address)\u00b6 Must return a Boolean value; if the value is True, the request will be processed, and if it&#8217;s False, the request will be denied. This function can be overridden to implement access controls for a server. The default implementation always returns True.    20.17.3. RequestHandler Objects\u00b6 The request handler class must define a new handle() method, and can override any of the following methods.  A new instance is created for each request.   RequestHandler.finish()\u00b6 Called after the handle() method to perform any clean-up actions required.  The default implementation does nothing.  If setup() or handle() raise an exception, this function will not be called.    RequestHandler.handle()\u00b6 This function must do all the work required to service a request.  The default implementation does nothing.  Several instance attributes are available to it; the request is available as self.request; the client address as self.client_address; and the server instance as self.server, in case it needs access to per-server information. The type of self.request is different for datagram or stream services.  For stream services, self.request is a socket object; for datagram services, self.request is a pair of string and socket. However, this can be hidden by using the request handler subclasses StreamRequestHandler or DatagramRequestHandler, which override the setup() and finish() methods, and provide self.rfile and self.wfile attributes.  self.rfile and self.wfile can be read or written, respectively, to get the request data or return data to the client.     RequestHandler.setup()\u00b6 Called before the handle() method to perform any initialization actions required.  The default implementation does nothing.    20.17.4. Examples\u00b6  20.17.4.1. SocketServer.TCPServer Example\u00b6 This is the server side: import SocketServer  class MyTCPHandler(SocketServer.BaseRequestHandler):     \"\"\"     The RequestHandler class for our server.      It is instantiated once per connection to the server, and must     override the handle() method to implement communication to the     client.     \"\"\"      def handle(self):         # self.request is the TCP socket connected to the client         self.data = self.request.recv(1024).strip()         print \"{} wrote:\".format(self.client_address[0])         print self.data         # just send back the same data, but upper-cased         self.request.send(self.data.upper())  if __name__ == \"__main__\":     HOST, PORT = \"localhost\", 9999      # Create the server, binding to localhost on port 9999     server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)      # Activate the server; this will keep running until you     # interrupt the program with Ctrl-C     server.serve_forever()   An alternative request handler class that makes use of streams (file-like objects that simplify communication by providing the standard file interface): class MyTCPHandler(SocketServer.StreamRequestHandler):      def handle(self):         # self.rfile is a file-like object created by the handler;         # we can now use e.g. readline() instead of raw recv() calls         self.data = self.rfile.readline().strip()         print \"{} wrote:\".format(self.client_address[0])         print self.data         # Likewise, self.wfile is a file-like object used to write back         # to the client         self.wfile.write(self.data.upper())   The difference is that the readline() call in the second handler will call recv() multiple times until it encounters a newline character, while the single recv() call in the first handler will just return what has been sent from the client in one send() call. This is the client side: import socket import sys  HOST, PORT = \"localhost\", 9999 data = \" \".join(sys.argv[1:])  # Create a socket (SOCK_STREAM means a TCP socket) sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  try:     # Connect to server and send data     sock.connect((HOST, PORT))     sock.send(data + \"\\n\")      # Receive data from the server and shut down     received = sock.recv(1024) finally:     sock.close()  print \"Sent:     {}\".format(data) print \"Received: {}\".format(received)   The output of the example should look something like this: Server: $ python TCPServer.py 127.0.0.1 wrote: hello world with TCP 127.0.0.1 wrote: python is nice  Client: $ python TCPClient.py hello world with TCP Sent:     hello world with TCP Received: HELLO WORLD WITH TCP $ python TCPClient.py python is nice Sent:     python is nice Received: PYTHON IS NICE    20.17.4.2. SocketServer.UDPServer Example\u00b6 This is the server side: import SocketServer  class MyUDPHandler(SocketServer.BaseRequestHandler):     \"\"\"     This class works similar to the TCP handler class, except that     self.request consists of a pair of data and client socket, and since     there is no connection the client address must be given explicitly     when sending data back via sendto().     \"\"\"      def handle(self):         data = self.request[0].strip()         socket = self.request[1]         print \"{} wrote:\".format(self.client_address[0])         print data         socket.sendto(data.upper(), self.client_address)  if __name__ == \"__main__\":     HOST, PORT = \"localhost\", 9999     server = SocketServer.UDPServer((HOST, PORT), MyUDPHandler)     server.serve_forever()   This is the client side: import socket import sys  HOST, PORT = \"localhost\", 9999 data = \" \".join(sys.argv[1:])  # SOCK_DGRAM is the socket type to use for UDP sockets sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # As you can see, there is no connect() call; UDP has no connections. # Instead, data is directly sent to the recipient via sendto(). sock.sendto(data + \"\\n\", (HOST, PORT)) received = sock.recv(1024)  print \"Sent:     {}\".format(data) print \"Received: {}\".format(received)   The output of the example should look exactly like for the TCP server example.   20.17.4.3. Asynchronous Mixins\u00b6 To build asynchronous handlers, use the ThreadingMixIn and ForkingMixIn classes. An example for the ThreadingMixIn class: import socket import threading import SocketServer  class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):      def handle(self):         data = self.request.recv(1024)         cur_thread = threading.current_thread()         response = \"{}: {}\".format(cur_thread.name, data)         self.request.send(response)  class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):     pass  def client(ip, port, message):     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)     sock.connect((ip, port))     try:         sock.send(message)         response = sock.recv(1024)         print \"Received: {}\".format(response)     finally:         sock.close()  if __name__ == \"__main__\":     # Port 0 means to select an arbitrary unused port     HOST, PORT = \"localhost\", 0      server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)     ip, port = server.server_address      # Start a thread with the server -- that thread will then start one     # more thread for each request     server_thread = threading.Thread(target=server.serve_forever)     # Exit the server thread when the main thread terminates     server_thread.daemon = True     server_thread.start()     print \"Server loop running in thread:\", server_thread.name      client(ip, port, \"Hello World 1\")     client(ip, port, \"Hello World 2\")     client(ip, port, \"Hello World 3\")      server.shutdown()   The output of the example should look something like this: $ python ThreadedTCPServer.py Server loop running in thread: Thread-1 Received: Thread-2: Hello World 1 Received: Thread-3: Hello World 2 Received: Thread-4: Hello World 3  The ForkingMixIn class is used in the same way, except that the server will spawn a new process for each request."},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer","title":"SocketServer.BaseServer","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.fileno","title":"SocketServer.BaseServer.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.finish_request","title":"SocketServer.BaseServer.finish_request","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.get_request","title":"SocketServer.BaseServer.get_request","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.handle_error","title":"SocketServer.BaseServer.handle_error","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.handle_request","title":"SocketServer.BaseServer.handle_request","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.handle_timeout","title":"SocketServer.BaseServer.handle_timeout","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.process_request","title":"SocketServer.BaseServer.process_request","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.serve_forever","title":"SocketServer.BaseServer.serve_forever","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.server_activate","title":"SocketServer.BaseServer.server_activate","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.server_bind","title":"SocketServer.BaseServer.server_bind","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.shutdown","title":"SocketServer.BaseServer.shutdown","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.BaseServer.verify_request","title":"SocketServer.BaseServer.verify_request","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.RequestHandler.finish","title":"SocketServer.RequestHandler.finish","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.RequestHandler.handle","title":"SocketServer.RequestHandler.handle","description":""},{"url":"http:\/\/docs.python.org\/library\/socketserver.html#SocketServer.RequestHandler.setup","title":"SocketServer.RequestHandler.setup","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html","title":"DocXMLRPCServer","description":"20.25. DocXMLRPCServer &#8212; Self-documenting XML-RPC server\u00b6  Note The DocXMLRPCServer module has been merged into xmlrpc.server in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.   New in version 2.3. The DocXMLRPCServer module extends the classes found in SimpleXMLRPCServer to serve HTML documentation in response to HTTP GET requests. Servers can either be free standing, using DocXMLRPCServer, or embedded in a CGI environment, using DocCGIXMLRPCRequestHandler.   class DocXMLRPCServer.DocXMLRPCServer(addr[, requestHandler[, logRequests[, allow_none[, encoding[, bind_and_activate]]]]])\u00b6 Create a new server instance. All parameters have the same meaning as for SimpleXMLRPCServer.SimpleXMLRPCServer; requestHandler defaults to DocXMLRPCRequestHandler.    class DocXMLRPCServer.DocCGIXMLRPCRequestHandler\u00b6 Create a new instance to handle XML-RPC requests in a CGI environment.    class DocXMLRPCServer.DocXMLRPCRequestHandler\u00b6 Create a new request handler instance. This request handler supports XML-RPC POST requests, documentation GET requests, and modifies logging so that the logRequests parameter to the DocXMLRPCServer constructor parameter is honored.   20.25.1. DocXMLRPCServer Objects\u00b6 The DocXMLRPCServer class is derived from SimpleXMLRPCServer.SimpleXMLRPCServer and provides a means of creating self-documenting, stand alone XML-RPC servers. HTTP POST requests are handled as XML-RPC method calls. HTTP GET requests are handled by generating pydoc-style HTML documentation. This allows a server to provide its own web-based documentation.   DocXMLRPCServer.set_server_title(server_title)\u00b6 Set the title used in the generated HTML documentation. This title will be used inside the HTML &#8220;title&#8221; element.    DocXMLRPCServer.set_server_name(server_name)\u00b6 Set the name used in the generated HTML documentation. This name will appear at the top of the generated documentation inside a &#8220;h1&#8221; element.    DocXMLRPCServer.set_server_documentation(server_documentation)\u00b6 Set the description used in the generated HTML documentation. This description will appear as a paragraph, below the server name, in the documentation.    20.25.2. DocCGIXMLRPCRequestHandler\u00b6 The DocCGIXMLRPCRequestHandler class is derived from SimpleXMLRPCServer.CGIXMLRPCRequestHandler and provides a means of creating self-documenting, XML-RPC CGI scripts. HTTP POST requests are handled as XML-RPC method calls. HTTP GET requests are handled by generating pydoc-style HTML documentation. This allows a server to provide its own web-based documentation.   DocCGIXMLRPCRequestHandler.set_server_title(server_title)\u00b6 Set the title used in the generated HTML documentation. This title will be used inside the HTML &#8220;title&#8221; element.    DocCGIXMLRPCRequestHandler.set_server_name(server_name)\u00b6 Set the name used in the generated HTML documentation. This name will appear at the top of the generated documentation inside a &#8220;h1&#8221; element.    DocCGIXMLRPCRequestHandler.set_server_documentation(server_documentation)\u00b6 Set the description used in the generated HTML documentation. This description will appear as a paragraph, below the server name, in the documentation."},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocCGIXMLRPCRequestHandler","title":"DocXMLRPCServer.DocCGIXMLRPCRequestHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocCGIXMLRPCRequestHandler.set_server_documentation","title":"DocXMLRPCServer.DocCGIXMLRPCRequestHandler.set_server_documentation","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocCGIXMLRPCRequestHandler.set_server_name","title":"DocXMLRPCServer.DocCGIXMLRPCRequestHandler.set_server_name","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocCGIXMLRPCRequestHandler.set_server_title","title":"DocXMLRPCServer.DocCGIXMLRPCRequestHandler.set_server_title","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocXMLRPCRequestHandler","title":"DocXMLRPCServer.DocXMLRPCRequestHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocXMLRPCServer","title":"DocXMLRPCServer.DocXMLRPCServer","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocXMLRPCServer.set_server_documentation","title":"DocXMLRPCServer.DocXMLRPCServer.set_server_documentation","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocXMLRPCServer.set_server_name","title":"DocXMLRPCServer.DocXMLRPCServer.set_server_name","description":""},{"url":"http:\/\/docs.python.org\/library\/docxmlrpcserver.html#DocXMLRPCServer.DocXMLRPCServer.set_server_title","title":"DocXMLRPCServer.DocXMLRPCServer.set_server_title","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html","title":"SimpleXMLRPCServer","description":"20.24. SimpleXMLRPCServer &#8212; Basic XML-RPC server\u00b6  Note The SimpleXMLRPCServer module has been merged into xmlrpc.server in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.   New in version 2.2. Source code: Lib\/SimpleXMLRPCServer.py  The SimpleXMLRPCServer module provides a basic server framework for XML-RPC servers written in Python.  Servers can either be free standing, using SimpleXMLRPCServer, or embedded in a CGI environment, using CGIXMLRPCRequestHandler.   SimpleXMLRPCServer(addr[, requestHandler[, logRequests[, allow_none[, encoding[, bind_and_activate]]]]) Create a new server instance.  This class provides methods for registration of functions that can be called by the XML-RPC protocol.  The requestHandler parameter should be a factory for request handler instances; it defaults to SimpleXMLRPCRequestHandler.  The addr and requestHandler parameters are passed to the SocketServer.TCPServer constructor.  If logRequests is true (the default), requests will be logged; setting this parameter to false will turn off logging.   The allow_none and encoding parameters are passed on to  xmlrpclib and control the XML-RPC responses that will be returned from the server. The bind_and_activate parameter controls whether server_bind() and server_activate() are called immediately by the constructor; it defaults to true. Setting it to false allows code to manipulate the allow_reuse_address class variable before the address is bound.  Changed in version 2.5: The allow_none and encoding parameters were added.  Changed in version 2.6: The bind_and_activate parameter was added.     class SimpleXMLRPCServer.CGIXMLRPCRequestHandler([allow_none[, encoding]])\u00b6 Create a new instance to handle XML-RPC requests in a CGI environment.  The allow_none and encoding parameters are passed on to  xmlrpclib and control the XML-RPC responses that will be returned  from the server.  New in version 2.3.  Changed in version 2.5: The allow_none and encoding parameters were added.     class SimpleXMLRPCServer.SimpleXMLRPCRequestHandler\u00b6 Create a new request handler instance.  This request handler supports POST requests and modifies logging so that the logRequests parameter to the SimpleXMLRPCServer constructor parameter is honored.   20.24.1. SimpleXMLRPCServer Objects\u00b6 The SimpleXMLRPCServer class is based on SocketServer.TCPServer and provides a means of creating simple, stand alone XML-RPC servers.   SimpleXMLRPCServer.register_function(function[, name])\u00b6 Register a function that can respond to XML-RPC requests.  If name is given, it will be the method name associated with function, otherwise function.__name__ will be used.  name can be either a normal or Unicode string, and may contain characters not legal in Python identifiers, including the period character.    SimpleXMLRPCServer.register_instance(instance[, allow_dotted_names])\u00b6 Register an object which is used to expose method names which have not been registered using register_function().  If instance contains a _dispatch() method, it is called with the requested method name and the parameters from the request.  Its API is def _dispatch(self, method, params) (note that params does not represent a variable argument list).  If it calls an underlying function to perform its task, that function is called as func(*params), expanding the parameter list. The return value from _dispatch() is returned to the client as the result.  If instance does not have a _dispatch() method, it is searched for an attribute matching the name of the requested method. If the optional allow_dotted_names argument is true and the instance does not have a _dispatch() method, then if the requested method name contains periods, each component of the method name is searched for individually, with the effect that a simple hierarchical search is performed.  The value found from this search is then called with the parameters from the request, and the return value is passed back to the client.  Warning Enabling the allow_dotted_names option allows intruders to access your module&#8217;s global variables and may allow intruders to execute arbitrary code on your machine.  Only use this option on a secure, closed network.   Changed in version 2.3.5,: 2.4.1 allow_dotted_names was added to plug a security hole; prior versions are insecure.     SimpleXMLRPCServer.register_introspection_functions()\u00b6 Registers the XML-RPC introspection functions system.listMethods, system.methodHelp and system.methodSignature.  New in version 2.3.     SimpleXMLRPCServer.register_multicall_functions()\u00b6 Registers the XML-RPC multicall function system.multicall.    SimpleXMLRPCRequestHandler.rpc_paths\u00b6 An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.  Requests posted to other paths will result in a 404 &#8220;no such page&#8221; HTTP error.  If this tuple is empty, all paths will be considered valid. The default value is ('\/', '\/RPC2').  New in version 2.5.     SimpleXMLRPCRequestHandler.encode_threshold\u00b6 If this attribute is not None, responses larger than this value will be encoded using the gzip transfer encoding, if permitted by the client.  The default is 1400 which corresponds roughly to a single TCP packet.  New in version 2.7.    20.24.1.1. SimpleXMLRPCServer Example\u00b6 Server code: from SimpleXMLRPCServer import SimpleXMLRPCServer from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler  # Restrict to a particular path. class RequestHandler(SimpleXMLRPCRequestHandler):     rpc_paths = (&#39;\/RPC2&#39;,)  # Create server server = SimpleXMLRPCServer((\"localhost\", 8000),                             requestHandler=RequestHandler) server.register_introspection_functions()  # Register pow() function; this will use the value of # pow.__name__ as the name, which is just &#39;pow&#39;. server.register_function(pow)  # Register a function under a different name def adder_function(x,y):     return x + y server.register_function(adder_function, &#39;add&#39;)  # Register an instance; all the methods of the instance are # published as XML-RPC methods (in this case, just &#39;div&#39;). class MyFuncs:     def div(self, x, y):         return x \/\/ y  server.register_instance(MyFuncs())  # Run the server&#39;s main loop server.serve_forever()   The following client code will call the methods made available by the preceding server: import xmlrpclib  s = xmlrpclib.ServerProxy(&#39;http:\/\/localhost:8000&#39;) print s.pow(2,3)  # Returns 2**3 = 8 print s.add(2,3)  # Returns 5 print s.div(5,2)  # Returns 5\/\/2 = 2  # Print list of available methods print s.system.listMethods()      20.24.2. CGIXMLRPCRequestHandler\u00b6 The CGIXMLRPCRequestHandler class can be used to  handle XML-RPC requests sent to Python CGI scripts.   CGIXMLRPCRequestHandler.register_function(function[, name])\u00b6 Register a function that can respond to XML-RPC requests. If  name is given, it will be the method name associated with  function, otherwise function.__name__ will be used. name can be either a normal or Unicode string, and may contain  characters not legal in Python identifiers, including the period character.    CGIXMLRPCRequestHandler.register_instance(instance)\u00b6 Register an object which is used to expose method names  which have not been registered using register_function(). If  instance contains a _dispatch() method, it is called with the  requested method name and the parameters from the  request; the return value is returned to the client as the result. If instance does not have a _dispatch() method, it is searched for an attribute matching the name of the requested method; if  the requested method name contains periods, each  component of the method name is searched for individually,  with the effect that a simple hierarchical search is performed. The value found from this search is then called with the  parameters from the request, and the return value is passed  back to the client.    CGIXMLRPCRequestHandler.register_introspection_functions()\u00b6 Register the XML-RPC introspection functions  system.listMethods, system.methodHelp and  system.methodSignature.    CGIXMLRPCRequestHandler.register_multicall_functions()\u00b6 Register the XML-RPC multicall function system.multicall.    CGIXMLRPCRequestHandler.handle_request([request_text = None])\u00b6 Handle a XML-RPC request. If request_text is given, it  should be the POST data provided by the HTTP server,  otherwise the contents of stdin will be used.  Example: class MyFuncs:     def div(self, x, y) : return x \/\/ y   handler = CGIXMLRPCRequestHandler() handler.register_function(pow) handler.register_function(lambda x,y: x+y, &#39;add&#39;) handler.register_introspection_functions() handler.register_instance(MyFuncs()) handler.handle_request()"},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.CGIXMLRPCRequestHandler","title":"SimpleXMLRPCServer.CGIXMLRPCRequestHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.CGIXMLRPCRequestHandler.handle_request","title":"SimpleXMLRPCServer.CGIXMLRPCRequestHandler.handle_request","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.CGIXMLRPCRequestHandler.register_function","title":"SimpleXMLRPCServer.CGIXMLRPCRequestHandler.register_function","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.CGIXMLRPCRequestHandler.register_instance","title":"SimpleXMLRPCServer.CGIXMLRPCRequestHandler.register_instance","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.CGIXMLRPCRequestHandler.register_introspection_functions","title":"SimpleXMLRPCServer.CGIXMLRPCRequestHandler.register_introspection_functions","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.CGIXMLRPCRequestHandler.register_multicall_functions","title":"SimpleXMLRPCServer.CGIXMLRPCRequestHandler.register_multicall_functions","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.SimpleXMLRPCRequestHandler","title":"SimpleXMLRPCServer.SimpleXMLRPCRequestHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.SimpleXMLRPCServer.register_function","title":"SimpleXMLRPCServer.SimpleXMLRPCServer.register_function","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.SimpleXMLRPCServer.register_instance","title":"SimpleXMLRPCServer.SimpleXMLRPCServer.register_instance","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.SimpleXMLRPCServer.register_introspection_functions","title":"SimpleXMLRPCServer.SimpleXMLRPCServer.register_introspection_functions","description":""},{"url":"http:\/\/docs.python.org\/library\/simplexmlrpcserver.html#SimpleXMLRPCServer.SimpleXMLRPCServer.register_multicall_functions","title":"SimpleXMLRPCServer.SimpleXMLRPCServer.register_multicall_functions","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html","title":"xmlrpclib","description":"20.23. xmlrpclib &#8212; XML-RPC client access\u00b6  Note The xmlrpclib module has been renamed to xmlrpc.client in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.   New in version 2.2. Source code: Lib\/xmlrpclib.py  XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP as a transport.  With it, a client can call methods with parameters on a remote server (the server is named by a URI) and get back structured data.  This module supports writing XML-RPC client code; it handles all the details of translating between conformable Python objects and XML on the wire.   class xmlrpclib.ServerProxy(uri[, transport[, encoding[, verbose[, allow_none[, use_datetime]]]]])\u00b6 A ServerProxy instance is an object that manages communication with a remote XML-RPC server.  The required first argument is a URI (Uniform Resource Indicator), and will normally be the URL of the server.  The optional second argument is a transport factory instance; by default it is an internal SafeTransport instance for https: URLs and an internal HTTP Transport instance otherwise.  The optional third argument is an encoding, by default UTF-8. The optional fourth argument is a debugging flag. If allow_none is true,  the Python constant None will be translated into XML; the default behaviour is for None to raise a TypeError. This is a commonly-used extension to the XML-RPC specification, but isn&#8217;t supported by all clients and servers; see http:\/\/ontosys.com\/xml-rpc\/extensions.php for a description.  The use_datetime flag can be used to cause date\/time values to be presented as datetime.datetime objects; this is false by default. datetime.datetime objects may be passed to calls. Both the HTTP and HTTPS transports support the URL syntax extension for HTTP Basic Authentication: http:\/\/user:pass@host:port\/path.  The  user:pass portion will be base64-encoded as an HTTP &#8216;Authorization&#8217; header, and sent to the remote server as part of the connection process when invoking an XML-RPC method.  You only need to use this if the remote server requires a Basic Authentication user and password. The returned instance is a proxy object with methods that can be used to invoke corresponding RPC calls on the remote server.  If the remote server supports the introspection API, the proxy can also be used to query the remote server for the methods it supports (service discovery) and fetch other server-associated metadata. ServerProxy instance methods take Python basic types and objects as arguments and return Python basic types and classes.  Types that are conformable (e.g. that can be marshalled through XML), include the following (and except where noted, they are unmarshalled as the same Python type):       Name Meaning    boolean The True and False constants  integers Pass in directly  floating-point numbers Pass in directly  strings Pass in directly  arrays Any Python sequence type containing conformable elements. Arrays are returned as lists  structures A Python dictionary. Keys must be strings, values may be any conformable type. Objects of user-defined classes can be passed in; only their __dict__ attribute is transmitted.  dates in seconds since the epoch (pass in an instance of the DateTime class) or a datetime.datetime instance.  binary data pass in an instance of the Binary wrapper class    This is the full set of data types supported by XML-RPC.  Method calls may also raise a special Fault instance, used to signal XML-RPC server errors, or ProtocolError used to signal an error in the HTTP\/HTTPS transport layer. Both Fault and ProtocolError derive from a base class called Error.  Note that even though starting with Python 2.2 you can subclass built-in types, the xmlrpclib module currently does not marshal instances of such subclasses. When passing strings, characters special to XML such as <, >, and & will be automatically escaped.  However, it&#8217;s the caller&#8217;s responsibility to ensure that the string is free of characters that aren&#8217;t allowed in XML, such as the control characters with ASCII values between 0 and 31 (except, of course, tab, newline and carriage return); failing to do this will result in an XML-RPC request that isn&#8217;t well-formed XML.  If you have to pass arbitrary strings via XML-RPC, use the Binary wrapper class described below. Server is retained as an alias for ServerProxy for backwards compatibility.  New code should use ServerProxy.  Changed in version 2.5: The use_datetime flag was added.  Changed in version 2.6: Instances of new-style classes can be passed in if they have an __dict__ attribute and don&#8217;t have a base class that is marshalled in a special way.    See also  XML-RPC HOWTO A good description of XML-RPC operation and client software in several languages. Contains pretty much everything an XML-RPC client developer needs to know. XML-RPC Introspection Describes the XML-RPC protocol extension for introspection. XML-RPC Specification The official specification. Unofficial XML-RPC Errata Fredrik Lundh&#8217;s &#8220;unofficial errata, intended to clarify certain details in the XML-RPC specification, as well as hint at &#8216;best practices&#8217; to use when designing your own XML-RPC implementations.&#8221;    20.23.1. ServerProxy Objects\u00b6 A ServerProxy instance has a method corresponding to each remote procedure call accepted by the XML-RPC server.  Calling the method performs an RPC, dispatched by both name and argument signature (e.g. the same method name can be overloaded with multiple argument signatures).  The RPC finishes by returning a value, which may be either returned data in a conformant type or a Fault or ProtocolError object indicating an error. Servers that support the XML introspection API support some common methods grouped under the reserved system attribute:   ServerProxy.system.listMethods()\u00b6 This method returns a list of strings, one for each (non-system) method supported by the XML-RPC server.    ServerProxy.system.methodSignature(name)\u00b6 This method takes one parameter, the name of a method implemented by the XML-RPC server. It returns an array of possible signatures for this method. A signature is an array of types. The first of these types is the return type of the method, the rest are parameters. Because multiple signatures (ie. overloading) is permitted, this method returns a list of signatures rather than a singleton. Signatures themselves are restricted to the top level parameters expected by a method. For instance if a method expects one array of structs as a parameter, and it returns a string, its signature is simply &#8220;string, array&#8221;. If it expects three integers and returns a string, its signature is &#8220;string, int, int, int&#8221;. If no signature is defined for the method, a non-array value is returned. In Python this means that the type of the returned  value will be something other than list.     ServerProxy.system.methodHelp(name)\u00b6 This method takes one parameter, the name of a method implemented by the XML-RPC server.  It returns a documentation string describing the use of that method. If no such string is available, an empty string is returned. The documentation string may contain HTML markup.    20.23.2. Boolean Objects\u00b6 This class may be initialized from any Python value; the instance returned depends only on its truth value.  It supports various Python operators through __cmp__(), __repr__(), __int__(), and __nonzero__() methods, all implemented in the obvious ways. It also has the following method, supported mainly for internal use by the unmarshalling code:   Boolean.encode(out)\u00b6 Write the XML-RPC encoding of this Boolean item to the out stream object.  A working example follows. The server code: import xmlrpclib from SimpleXMLRPCServer import SimpleXMLRPCServer  def is_even(n):     return n2 == 0  server = SimpleXMLRPCServer((\"localhost\", 8000)) print \"Listening on port 8000...\" server.register_function(is_even, \"is_even\") server.serve_forever()   The client code for the preceding server: import xmlrpclib  proxy = xmlrpclib.ServerProxy(\"http:\/\/localhost:8000\/\") print \"3 is even: %s\"  str(proxy.is_even(3)) print \"100 is even: %s\"  str(proxy.is_even(100))     20.23.3. DateTime Objects\u00b6 This class may be initialized with seconds since the epoch, a time tuple, an ISO 8601 time\/date string, or a datetime.datetime instance.  It has the following methods, supported mainly for internal use by the marshalling\/unmarshalling code:   DateTime.decode(string)\u00b6 Accept a string as the instance&#8217;s new time value.    DateTime.encode(out)\u00b6 Write the XML-RPC encoding of this DateTime item to the out stream object.  It also supports certain of Python&#8217;s built-in operators through  __cmp__() and __repr__() methods. A working example follows. The server code: import datetime from SimpleXMLRPCServer import SimpleXMLRPCServer import xmlrpclib  def today():     today = datetime.datetime.today()     return xmlrpclib.DateTime(today)  server = SimpleXMLRPCServer((\"localhost\", 8000)) print \"Listening on port 8000...\" server.register_function(today, \"today\") server.serve_forever()   The client code for the preceding server: import xmlrpclib import datetime  proxy = xmlrpclib.ServerProxy(\"http:\/\/localhost:8000\/\")  today = proxy.today() # convert the ISO8601 string to a datetime object converted = datetime.datetime.strptime(today.value, \"%Y%m%dT%H:%M:%S\") print \"Today: %s\"  converted.strftime(\"%d.%m.%Y, %H:%M\")     20.23.4. Binary Objects\u00b6 This class may be initialized from string data (which may include NULs). The primary access to the content of a Binary object is provided by an attribute:   Binary.data\u00b6 The binary data encapsulated by the Binary instance.  The data is provided as an 8-bit string.  Binary objects have the following methods, supported mainly for internal use by the marshalling\/unmarshalling code:   Binary.decode(string)\u00b6 Accept a base64 string and decode it as the instance&#8217;s new data.    Binary.encode(out)\u00b6 Write the XML-RPC base 64 encoding of this binary item to the out stream object. The encoded data will have newlines every 76 characters as per RFC 2045 section 6.8, which was the de facto standard base64 specification when the XML-RPC spec was written.   It also supports certain of Python&#8217;s built-in operators through a __cmp__() method. Example usage of the binary objects.  We&#8217;re going to transfer an image over XMLRPC: from SimpleXMLRPCServer import SimpleXMLRPCServer import xmlrpclib  def python_logo():      with open(\"python_logo.jpg\", \"rb\") as handle:          return xmlrpclib.Binary(handle.read())  server = SimpleXMLRPCServer((\"localhost\", 8000)) print \"Listening on port 8000...\" server.register_function(python_logo, &#39;python_logo&#39;)  server.serve_forever()   The client gets the image and saves it to a file: import xmlrpclib  proxy = xmlrpclib.ServerProxy(\"http:\/\/localhost:8000\/\") with open(\"fetched_python_logo.jpg\", \"wb\") as handle:     handle.write(proxy.python_logo().data)     20.23.5. Fault Objects\u00b6 A Fault object encapsulates the content of an XML-RPC fault tag. Fault objects have the following attributes:   Fault.faultCode\u00b6 A string indicating the fault type.    Fault.faultString\u00b6 A string containing a diagnostic message associated with the fault.  In the following example we&#8217;re going to intentionally cause a Fault by returning a complex type object.  The server code: from SimpleXMLRPCServer import SimpleXMLRPCServer  # A marshalling error is going to occur because we&#39;re returning a # complex number def add(x,y):     return x+y+0j  server = SimpleXMLRPCServer((\"localhost\", 8000)) print \"Listening on port 8000...\" server.register_function(add, &#39;add&#39;)  server.serve_forever()   The client code for the preceding server: import xmlrpclib  proxy = xmlrpclib.ServerProxy(\"http:\/\/localhost:8000\/\") try:     proxy.add(2, 5) except xmlrpclib.Fault, err:     print \"A fault occurred\"     print \"Fault code: %d\"  err.faultCode     print \"Fault string: %s\"  err.faultString     20.23.6. ProtocolError Objects\u00b6 A ProtocolError object describes a protocol error in the underlying transport layer (such as a 404 &#8216;not found&#8217; error if the server named by the URI does not exist).  It has the following attributes:   ProtocolError.url\u00b6 The URI or URL that triggered the error.    ProtocolError.errcode\u00b6 The error code.    ProtocolError.errmsg\u00b6 The error message or diagnostic string.    ProtocolError.headers\u00b6 A string containing the headers of the HTTP\/HTTPS request that triggered the error.  In the following example we&#8217;re going to intentionally cause a ProtocolError by providing an URI that doesn&#8217;t point to an XMLRPC server: import xmlrpclib  # create a ServerProxy with an URI that doesn&#39;t respond to XMLRPC requests proxy = xmlrpclib.ServerProxy(\"http:\/\/www.google.com\/\")  try:     proxy.some_method() except xmlrpclib.ProtocolError, err:     print \"A protocol error occurred\"     print \"URL: %s\"  err.url     print \"HTTP\/HTTPS headers: %s\"  err.headers     print \"Error code: %d\"  err.errcode     print \"Error message: %s\"  err.errmsg     20.23.7. MultiCall Objects\u00b6  New in version 2.4. The MultiCall object provides a way to encapsulate multiple calls to a remote server into a single request [1].   class xmlrpclib.MultiCall(server)\u00b6 Create an object used to boxcar method calls. server is the eventual target of the call. Calls can be made to the result object, but they will immediately return None, and only store the call name and parameters in the MultiCall object. Calling the object itself causes all stored calls to be transmitted as a single system.multicall request. The result of this call is a generator; iterating over this generator yields the individual results.  A usage example of this class follows.  The server code from SimpleXMLRPCServer import SimpleXMLRPCServer  def add(x,y):     return x+y  def subtract(x, y):     return x-y  def multiply(x, y):     return x*y  def divide(x, y):     return x\/y  # A simple server with simple arithmetic functions server = SimpleXMLRPCServer((\"localhost\", 8000)) print \"Listening on port 8000...\" server.register_multicall_functions() server.register_function(add, &#39;add&#39;) server.register_function(subtract, &#39;subtract&#39;) server.register_function(multiply, &#39;multiply&#39;) server.register_function(divide, &#39;divide&#39;) server.serve_forever()   The client code for the preceding server: import xmlrpclib  proxy = xmlrpclib.ServerProxy(\"http:\/\/localhost:8000\/\") multicall = xmlrpclib.MultiCall(proxy) multicall.add(7,3) multicall.subtract(7,3) multicall.multiply(7,3) multicall.divide(7,3) result = multicall()  print \"7+3=%d, 7-3=%d, 7*3=%d, 7\/3=%d\"  tuple(result)     20.23.8. Convenience Functions\u00b6   xmlrpclib.boolean(value)\u00b6 Convert any Python value to one of the XML-RPC Boolean constants, True or False.    xmlrpclib.dumps(params[, methodname[, methodresponse[, encoding[, allow_none]]]])\u00b6 Convert params into an XML-RPC request. or into a response if methodresponse is true. params can be either a tuple of arguments or an instance of the Fault exception class.  If methodresponse is true, only a single value can be returned, meaning that params must be of length 1. encoding, if supplied, is the encoding to use in the generated XML; the default is UTF-8. Python&#8217;s None value cannot be used in standard XML-RPC; to allow using it via an extension,  provide a true value for allow_none.    xmlrpclib.loads(data[, use_datetime])\u00b6 Convert an XML-RPC request or response into Python objects, a (params, methodname).  params is a tuple of argument; methodname is a string, or None if no method name is present in the packet. If the XML-RPC packet represents a fault condition, this function will raise a Fault exception. The use_datetime flag can be used to cause date\/time values to be presented as datetime.datetime objects; this is false by default.  Changed in version 2.5: The use_datetime flag was added.     20.23.9. Example of Client Usage\u00b6 # simple test program (from the XML-RPC specification) from xmlrpclib import ServerProxy, Error  # server = ServerProxy(\"http:\/\/localhost:8000\") # local server server = ServerProxy(\"http:\/\/betty.userland.com\")  print server  try:     print server.examples.getStateName(41) except Error, v:     print \"ERROR\", v   To access an XML-RPC server through a proxy, you need to define  a custom transport.  The following example shows how: import xmlrpclib, httplib  class ProxiedTransport(xmlrpclib.Transport):     def set_proxy(self, proxy):         self.proxy = proxy     def make_connection(self, host):         self.realhost = host         h = httplib.HTTP(self.proxy)         return h     def send_request(self, connection, handler, request_body):         connection.putrequest(\"POST\", &#39;http:\/\/%s%s&#39;  (self.realhost, handler))     def send_host(self, connection, host):         connection.putheader(&#39;Host&#39;, self.realhost)  p = ProxiedTransport() p.set_proxy(&#39;proxy-server:8080&#39;) server = xmlrpclib.Server(&#39;http:\/\/time.xmlrpc.com\/RPC2&#39;, transport=p) print server.currentTime.getCurrentTime()     20.23.10. Example of Client and Server Usage\u00b6 See SimpleXMLRPCServer Example. Footnotes    [1]This approach has been first presented in a discussion on xmlrpc.com."},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.Binary.decode","title":"xmlrpclib.Binary.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.Binary.encode","title":"xmlrpclib.Binary.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.boolean","title":"xmlrpclib.boolean","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.Boolean.encode","title":"xmlrpclib.Boolean.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.DateTime.decode","title":"xmlrpclib.DateTime.decode","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.DateTime.encode","title":"xmlrpclib.DateTime.encode","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.dumps","title":"xmlrpclib.dumps","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.loads","title":"xmlrpclib.loads","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.MultiCall","title":"xmlrpclib.MultiCall","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.ServerProxy","title":"xmlrpclib.ServerProxy","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.ServerProxy.system.listMethods","title":"xmlrpclib.ServerProxy.system.listMethods","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.ServerProxy.system.methodHelp","title":"xmlrpclib.ServerProxy.system.methodHelp","description":""},{"url":"http:\/\/docs.python.org\/library\/xmlrpclib.html#xmlrpclib.ServerProxy.system.methodSignature","title":"xmlrpclib.ServerProxy.system.methodSignature","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html","title":"audioop","description":"21.1. audioop &#8212; Manipulate raw audio data\u00b6 The audioop module contains some useful operations on sound fragments. It operates on sound fragments consisting of signed integer samples 8, 16 or 32 bits wide, stored in Python strings.  This is the same format as used by the al and sunaudiodev modules.  All scalar items are integers, unless specified otherwise. This module provides support for a-LAW, u-LAW and Intel\/DVI ADPCM encodings. A few of the more complicated operations only take 16-bit samples, otherwise the sample size (in bytes) is always a parameter of the operation. The module defines the following variables and functions:   exception audioop.error\u00b6 This exception is raised on all errors, such as unknown number of bytes per sample, etc.    audioop.add(fragment1, fragment2, width)\u00b6 Return a fragment which is the addition of the two samples passed as parameters. width is the sample width in bytes, either 1, 2 or 4.  Both fragments should have the same length.    audioop.adpcm2lin(adpcmfragment, width, state)\u00b6 Decode an Intel\/DVI ADPCM coded fragment to a linear fragment.  See the description of lin2adpcm() for details on ADPCM coding. Return a tuple (sample, newstate) where the sample has the width specified in width.    audioop.alaw2lin(fragment, width)\u00b6 Convert sound fragments in a-LAW encoding to linearly encoded sound fragments. a-LAW encoding always uses 8 bits samples, so width refers only to the sample width of the output fragment here.  New in version 2.5.     audioop.avg(fragment, width)\u00b6 Return the average over all samples in the fragment.    audioop.avgpp(fragment, width)\u00b6 Return the average peak-peak value over all samples in the fragment. No filtering is done, so the usefulness of this routine is questionable.    audioop.bias(fragment, width, bias)\u00b6 Return a fragment that is the original fragment with a bias added to each sample.    audioop.cross(fragment, width)\u00b6 Return the number of zero crossings in the fragment passed as an argument.    audioop.findfactor(fragment, reference)\u00b6 Return a factor F such that rms(add(fragment, mul(reference, -F))) is minimal, i.e., return the factor with which you should multiply reference to make it match as well as possible to fragment.  The fragments should both contain 2-byte samples. The time taken by this routine is proportional to len(fragment).     audioop.findfit(fragment, reference)\u00b6 Try to match reference as well as possible to a portion of fragment (which should be the longer fragment).  This is (conceptually) done by taking slices out of fragment, using findfactor() to compute the best match, and minimizing the result.  The fragments should both contain 2-byte samples. Return a tuple (offset, factor) where offset is the (integer) offset into fragment where the optimal match started and factor is the (floating-point) factor as per findfactor().    audioop.findmax(fragment, length)\u00b6 Search fragment for a slice of length length samples (not bytes!) with maximum energy, i.e., return i for which rms(fragment[i*2:(i+length)*2]) is maximal.  The fragments should both contain 2-byte samples. The routine takes time proportional to len(fragment).     audioop.getsample(fragment, width, index)\u00b6 Return the value of sample index from the fragment.    audioop.lin2adpcm(fragment, width, state)\u00b6 Convert samples to 4 bit Intel\/DVI ADPCM encoding.  ADPCM coding is an adaptive coding scheme, whereby each 4 bit number is the difference between one sample and the next, divided by a (varying) step.  The Intel\/DVI ADPCM algorithm has been selected for use by the IMA, so it may well become a standard. state is a tuple containing the state of the coder.  The coder returns a tuple (adpcmfrag, newstate), and the newstate should be passed to the next call of lin2adpcm().  In the initial call, None can be passed as the state. adpcmfrag is the ADPCM coded fragment packed 2 4-bit values per byte.     audioop.lin2alaw(fragment, width)\u00b6 Convert samples in the audio fragment to a-LAW encoding and return this as a Python string.  a-LAW is an audio encoding format whereby you get a dynamic range of about 13 bits using only 8 bit samples.  It is used by the Sun audio hardware, among others.  New in version 2.5.     audioop.lin2lin(fragment, width, newwidth)\u00b6 Convert samples between 1-, 2- and 4-byte formats.  Note In some audio formats, such as .WAV files, 16 and 32 bit samples are signed, but 8 bit samples are unsigned.  So when converting to 8 bit wide samples for these formats, you need to also add 128 to the result: new_frames = audioop.lin2lin(frames, old_width, 1) new_frames = audioop.bias(new_frames, 1, 128)   The same, in reverse, has to be applied when converting from 8 to 16 or 32 bit width samples.      audioop.lin2ulaw(fragment, width)\u00b6 Convert samples in the audio fragment to u-LAW encoding and return this as a Python string.  u-LAW is an audio encoding format whereby you get a dynamic range of about 14 bits using only 8 bit samples.  It is used by the Sun audio hardware, among others.    audioop.minmax(fragment, width)\u00b6 Return a tuple consisting of the minimum and maximum values of all samples in the sound fragment.    audioop.max(fragment, width)\u00b6 Return the maximum of the absolute value of all samples in a fragment.    audioop.maxpp(fragment, width)\u00b6 Return the maximum peak-peak value in the sound fragment.    audioop.mul(fragment, width, factor)\u00b6 Return a fragment that has all samples in the original fragment multiplied by the floating-point value factor.  Overflow is silently ignored.    audioop.ratecv(fragment, width, nchannels, inrate, outrate, state[, weightA[, weightB]])\u00b6 Convert the frame rate of the input fragment. state is a tuple containing the state of the converter.  The converter returns a tuple (newfragment, newstate), and newstate should be passed to the next call of ratecv().  The initial call should pass None as the state. The weightA and weightB arguments are parameters for a simple digital filter and default to 1 and 0 respectively.     audioop.reverse(fragment, width)\u00b6 Reverse the samples in a fragment and returns the modified fragment.    audioop.rms(fragment, width)\u00b6 Return the root-mean-square of the fragment, i.e. sqrt(sum(S_i^2)\/n). This is a measure of the power in an audio signal.     audioop.tomono(fragment, width, lfactor, rfactor)\u00b6 Convert a stereo fragment to a mono fragment.  The left channel is multiplied by lfactor and the right channel by rfactor before adding the two channels to give a mono signal.    audioop.tostereo(fragment, width, lfactor, rfactor)\u00b6 Generate a stereo fragment from a mono fragment.  Each pair of samples in the stereo fragment are computed from the mono sample, whereby left channel samples are multiplied by lfactor and right channel samples by rfactor.    audioop.ulaw2lin(fragment, width)\u00b6 Convert sound fragments in u-LAW encoding to linearly encoded sound fragments. u-LAW encoding always uses 8 bits samples, so width refers only to the sample width of the output fragment here.  Note that operations such as mul() or max() make no distinction between mono and stereo fragments, i.e. all samples are treated equal.  If this is a problem the stereo fragment should be split into two mono fragments first and recombined later.  Here is an example of how to do that: def mul_stereo(sample, width, lfactor, rfactor):     lsample = audioop.tomono(sample, width, 1, 0)     rsample = audioop.tomono(sample, width, 0, 1)     lsample = audioop.mul(lsample, width, lfactor)     rsample = audioop.mul(rsample, width, rfactor)     lsample = audioop.tostereo(lsample, width, 1, 0)     rsample = audioop.tostereo(rsample, width, 0, 1)     return audioop.add(lsample, rsample, width)   If you use the ADPCM coder to build network packets and you want your protocol to be stateless (i.e. to be able to tolerate packet loss) you should not only transmit the data but also the state.  Note that you should send the initial state (the one you passed to lin2adpcm()) along to the decoder, not the final state (as returned by the coder).  If you want to use struct.struct() to store the state in binary you can code the first element (the predicted value) in 16 bits and the second (the delta index) in 8. The ADPCM coders have never been tried against other ADPCM coders, only against themselves.  It could well be that I misinterpreted the standards in which case they will not be interoperable with the respective standards. The find*() routines might look a bit funny at first sight. They are primarily meant to do echo cancellation.  A reasonably fast way to do this is to pick the most energetic piece of the output sample, locate that in the input sample and subtract the whole output sample from the input sample: def echocancel(outputdata, inputdata):     pos = audioop.findmax(outputdata, 800)    # one tenth second     out_test = outputdata[pos*2:]     in_test = inputdata[pos*2:]     ipos, factor = audioop.findfit(in_test, out_test)     # Optional (for better cancellation):     # factor = audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)],     #              out_test)     prefill = &#39;\\0&#39;*(pos+ipos)*2     postfill = &#39;\\0&#39;*(len(inputdata)-len(prefill)-len(outputdata))     outputdata = prefill + audioop.mul(outputdata,2,-factor) + postfill     return audioop.add(inputdata, outputdata, 2)"},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.add","title":"audioop.add","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.adpcm2lin","title":"audioop.adpcm2lin","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.alaw2lin","title":"audioop.alaw2lin","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.avg","title":"audioop.avg","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.avgpp","title":"audioop.avgpp","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.bias","title":"audioop.bias","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.cross","title":"audioop.cross","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.findfactor","title":"audioop.findfactor","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.findfit","title":"audioop.findfit","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.findmax","title":"audioop.findmax","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.getsample","title":"audioop.getsample","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.lin2adpcm","title":"audioop.lin2adpcm","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.lin2alaw","title":"audioop.lin2alaw","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.lin2lin","title":"audioop.lin2lin","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.lin2ulaw","title":"audioop.lin2ulaw","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.max","title":"audioop.max","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.maxpp","title":"audioop.maxpp","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.minmax","title":"audioop.minmax","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.mul","title":"audioop.mul","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.ratecv","title":"audioop.ratecv","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.reverse","title":"audioop.reverse","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.rms","title":"audioop.rms","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.tomono","title":"audioop.tomono","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.tostereo","title":"audioop.tostereo","description":""},{"url":"http:\/\/docs.python.org\/library\/audioop.html#audioop.ulaw2lin","title":"audioop.ulaw2lin","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html","title":"imageop","description":"21.2. imageop &#8212; Manipulate raw image data\u00b6  Deprecated since version 2.6: The imageop module has been removed in Python 3.0. The imageop module contains some useful operations on images. It operates on images consisting of 8 or 32 bit pixels stored in Python strings.  This is the same format as used by gl.lrectwrite() and the imgfile module. The module defines the following variables and functions:   exception imageop.error\u00b6 This exception is raised on all errors, such as unknown number of bits per pixel, etc.    imageop.crop(image, psize, width, height, x0, y0, x1, y1)\u00b6 Return the selected part of image, which should be width by height in size and consist of pixels of psize bytes. x0, y0, x1 and y1 are like the gl.lrectread() parameters, i.e. the boundary is included in the new image. The new boundaries need not be inside the picture.  Pixels that fall outside the old image will have their value set to zero.  If x0 is bigger than x1 the new image is mirrored.  The same holds for the y coordinates.    imageop.scale(image, psize, width, height, newwidth, newheight)\u00b6 Return image scaled to size newwidth by newheight. No interpolation is done, scaling is done by simple-minded pixel duplication or removal.  Therefore, computer-generated images or dithered images will not look nice after scaling.    imageop.tovideo(image, psize, width, height)\u00b6 Run a vertical low-pass filter over an image.  It does so by computing each destination pixel as the average of two vertically-aligned source pixels.  The main use of this routine is to forestall excessive flicker if the image is displayed on a video device that uses interlacing, hence the name.    imageop.grey2mono(image, width, height, threshold)\u00b6 Convert a 8-bit deep greyscale image to a 1-bit deep image by thresholding all the pixels.  The resulting image is tightly packed and is probably only useful as an argument to mono2grey().    imageop.dither2mono(image, width, height)\u00b6 Convert an 8-bit greyscale image to a 1-bit monochrome image using a (simple-minded) dithering algorithm.    imageop.mono2grey(image, width, height, p0, p1)\u00b6 Convert a 1-bit monochrome image to an 8 bit greyscale or color image. All pixels that are zero-valued on input get value p0 on output and all one-value input pixels get value p1 on output.  To convert a monochrome black-and-white image to greyscale pass the values 0 and 255 respectively.    imageop.grey2grey4(image, width, height)\u00b6 Convert an 8-bit greyscale image to a 4-bit greyscale image without dithering.    imageop.grey2grey2(image, width, height)\u00b6 Convert an 8-bit greyscale image to a 2-bit greyscale image without dithering.    imageop.dither2grey2(image, width, height)\u00b6 Convert an 8-bit greyscale image to a 2-bit greyscale image with dithering.  As for dither2mono(), the dithering algorithm is currently very simple.    imageop.grey42grey(image, width, height)\u00b6 Convert a 4-bit greyscale image to an 8-bit greyscale image.    imageop.grey22grey(image, width, height)\u00b6 Convert a 2-bit greyscale image to an 8-bit greyscale image.    imageop.backward_compatible\u00b6 If set to 0, the functions in this module use a non-backward compatible way of representing multi-byte pixels on little-endian systems.  The SGI for which this module was originally written is a big-endian system, so setting this variable will have no effect. However, the code wasn&#8217;t originally intended to run on anything else, so it made assumptions about byte order which are not universal.  Setting this variable to 0 will cause the byte order to be reversed on little-endian systems, so that it then is the same as on big-endian systems."},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.crop","title":"imageop.crop","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.dither2grey2","title":"imageop.dither2grey2","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.dither2mono","title":"imageop.dither2mono","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.grey22grey","title":"imageop.grey22grey","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.grey2grey2","title":"imageop.grey2grey2","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.grey2grey4","title":"imageop.grey2grey4","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.grey2mono","title":"imageop.grey2mono","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.grey42grey","title":"imageop.grey42grey","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.mono2grey","title":"imageop.mono2grey","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.scale","title":"imageop.scale","description":""},{"url":"http:\/\/docs.python.org\/library\/imageop.html#imageop.tovideo","title":"imageop.tovideo","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html","title":"Cookie","description":"20.22. Cookie &#8212; HTTP state management\u00b6  Note The Cookie module has been renamed to http.cookies in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  Source code: Lib\/Cookie.py  The Cookie module defines classes for abstracting the concept of cookies, an HTTP state management mechanism. It supports both simple string-only cookies, and provides an abstraction for having any serializable data-type as cookie value. The module formerly strictly applied the parsing rules described in the RFC 2109 and RFC 2068 specifications.  It has since been discovered that MSIE 3.0x doesn&#8217;t follow the character rules outlined in those specs.  As a result, the parsing rules used are a bit less strict.  Note On encountering an invalid cookie, CookieError is raised, so if your cookie data comes from a browser you should always prepare for invalid data and catch CookieError on parsing.    exception Cookie.CookieError\u00b6 Exception failing because of RFC 2109 invalidity: incorrect attributes, incorrect Set-Cookie header, etc.    class Cookie.BaseCookie([input])\u00b6 This class is a dictionary-like object whose keys are strings and whose values are Morsel instances. Note that upon setting a key to a value, the value is first converted to a Morsel containing the key and the value. If input is given, it is passed to the load() method.     class Cookie.SimpleCookie([input])\u00b6 This class derives from BaseCookie and overrides value_decode() and value_encode() to be the identity and str() respectively.    class Cookie.SerialCookie([input])\u00b6 This class derives from BaseCookie and overrides value_decode() and value_encode() to be the pickle.loads() and pickle.dumps().  Deprecated since version 2.3: Reading pickled values from untrusted cookie data is a huge security hole, as pickle strings can be crafted to cause arbitrary code to execute on your server. It is supported for backwards compatibility only, and may eventually go away.     class Cookie.SmartCookie([input])\u00b6 This class derives from BaseCookie. It overrides value_decode() to be pickle.loads() if it is a valid pickle, and otherwise the value itself. It overrides value_encode() to be pickle.dumps() unless it is a string, in which case it returns the value itself.  Deprecated since version 2.3: The same security warning from SerialCookie applies here.   A further security note is warranted.  For backwards compatibility, the Cookie module exports a class named Cookie which is just an alias for SmartCookie.  This is probably a mistake and will likely be removed in a future version.  You should not use the Cookie class in your applications, for the same reason why you should not use the SerialCookie class.  See also  Module cookielib HTTP cookie handling for web clients.  The cookielib and Cookie modules do not depend on each other. RFC 2109 - HTTP State Management Mechanism This is the state management specification implemented by this module.    20.22.1. Cookie Objects\u00b6   BaseCookie.value_decode(val)\u00b6 Return a decoded value from a string representation. Return value can be any type. This method does nothing in BaseCookie &#8212; it exists so it can be overridden.    BaseCookie.value_encode(val)\u00b6 Return an encoded value. val can be any type, but return value must be a string. This method does nothing in BaseCookie &#8212; it exists so it can be overridden In general, it should be the case that value_encode() and value_decode() are inverses on the range of value_decode.     BaseCookie.output([attrs[, header[, sep]]])\u00b6 Return a string representation suitable to be sent as HTTP headers. attrs and header are sent to each Morsel&#8216;s output() method. sep is used to join the headers together, and is by default the combination '\\r\\n' (CRLF).  Changed in version 2.5: The default separator has been changed from '\\n' to match the cookie specification.     BaseCookie.js_output([attrs])\u00b6 Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP headers was sent. The meaning for attrs is the same as in output().     BaseCookie.load(rawdata)\u00b6 If rawdata is a string, parse it as an HTTP_COOKIE and add the values found there as Morsels. If it is a dictionary, it is equivalent to: for k, v in rawdata.items():     cookie[k] = v       20.22.2. Morsel Objects\u00b6   class Cookie.Morsel\u00b6 Abstract a key\/value pair, which has some RFC 2109 attributes. Morsels are dictionary-like objects, whose set of keys is constant &#8212; the valid RFC 2109 attributes, which are  expires path comment domain max-age secure version httponly  The attribute httponly specifies that the cookie is only transfered in HTTP requests, and is not accessible through JavaScript. This is intended to mitigate some forms of cross-site scripting. The keys are case-insensitive.  New in version 2.6: The httponly attribute was added.     Morsel.value\u00b6 The value of the cookie.    Morsel.coded_value\u00b6 The encoded value of the cookie &#8212; this is what should be sent.    Morsel.key\u00b6 The name of the cookie.    Morsel.set(key, value, coded_value)\u00b6 Set the key, value and coded_value attributes.    Morsel.isReservedKey(K)\u00b6 Whether K is a member of the set of keys of a Morsel.    Morsel.output([attrs[, header]])\u00b6 Return a string representation of the Morsel, suitable to be sent as an HTTP header. By default, all the attributes are included, unless attrs is given, in which case it should be a list of attributes to use. header is by default \"Set-Cookie:\".    Morsel.js_output([attrs])\u00b6 Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP header was sent. The meaning for attrs is the same as in output().     Morsel.OutputString([attrs])\u00b6 Return a string representing the Morsel, without any surrounding HTTP or JavaScript. The meaning for attrs is the same as in output().     20.22.3. Example\u00b6 The following example demonstrates how to use the Cookie module. >>> import Cookie >>> C = Cookie.SimpleCookie() >>> C[\"fig\"] = \"newton\" >>> C[\"sugar\"] = \"wafer\" >>> print C # generate HTTP headers Set-Cookie: fig=newton Set-Cookie: sugar=wafer >>> print C.output() # same thing Set-Cookie: fig=newton Set-Cookie: sugar=wafer >>> C = Cookie.SimpleCookie() >>> C[\"rocky\"] = \"road\" >>> C[\"rocky\"][\"path\"] = \"\/cookie\" >>> print C.output(header=\"Cookie:\") Cookie: rocky=road; Path=\/cookie >>> print C.output(attrs=[], header=\"Cookie:\") Cookie: rocky=road >>> C = Cookie.SimpleCookie() >>> C.load(\"chips=ahoy; vienna=finger\") # load from a string (HTTP header) >>> print C Set-Cookie: chips=ahoy Set-Cookie: vienna=finger >>> C = Cookie.SimpleCookie() >>> C.load(&#39;keebler=\"E=everybody; L=\\\\\"Loves\\\\\"; fudge=\\\\012;\";&#39;) >>> print C Set-Cookie: keebler=\"E=everybody; L=\\\"Loves\\\"; fudge=\\012;\" >>> C = Cookie.SimpleCookie() >>> C[\"oreo\"] = \"doublestuff\" >>> C[\"oreo\"][\"path\"] = \"\/\" >>> print C Set-Cookie: oreo=doublestuff; Path=\/ >>> C[\"twix\"] = \"none for you\" >>> C[\"twix\"].value &#39;none for you&#39; >>> C = Cookie.SimpleCookie() >>> C[\"number\"] = 7 # equivalent to C[\"number\"] = str(7) >>> C[\"string\"] = \"seven\" >>> C[\"number\"].value &#39;7&#39; >>> C[\"string\"].value &#39;seven&#39; >>> print C Set-Cookie: number=7 Set-Cookie: string=seven >>> # SerialCookie and SmartCookie are deprecated >>> # using it can cause security loopholes in your code. >>> C = Cookie.SerialCookie() >>> C[\"number\"] = 7 >>> C[\"string\"] = \"seven\" >>> C[\"number\"].value 7 >>> C[\"string\"].value &#39;seven&#39; >>> print C Set-Cookie: number=\"I7\\012.\" Set-Cookie: string=\"S&#39;seven&#39;\\012p1\\012.\" >>> C = Cookie.SmartCookie() >>> C[\"number\"] = 7 >>> C[\"string\"] = \"seven\" >>> C[\"number\"].value 7 >>> C[\"string\"].value &#39;seven&#39; >>> print C Set-Cookie: number=\"I7\\012.\" Set-Cookie: string=seven"},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.BaseCookie","title":"Cookie.BaseCookie","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.BaseCookie.js_output","title":"Cookie.BaseCookie.js_output","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.BaseCookie.load","title":"Cookie.BaseCookie.load","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.BaseCookie.output","title":"Cookie.BaseCookie.output","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.BaseCookie.value_decode","title":"Cookie.BaseCookie.value_decode","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.BaseCookie.value_encode","title":"Cookie.BaseCookie.value_encode","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.Morsel","title":"Cookie.Morsel","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.Morsel.isReservedKey","title":"Cookie.Morsel.isReservedKey","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.Morsel.js_output","title":"Cookie.Morsel.js_output","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.Morsel.output","title":"Cookie.Morsel.output","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.Morsel.OutputString","title":"Cookie.Morsel.OutputString","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.Morsel.set","title":"Cookie.Morsel.set","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.SerialCookie","title":"Cookie.SerialCookie","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.SimpleCookie","title":"Cookie.SimpleCookie","description":""},{"url":"http:\/\/docs.python.org\/library\/cookie.html#Cookie.SmartCookie","title":"Cookie.SmartCookie","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html","title":"sunau","description":"21.4. sunau &#8212; Read and write Sun AU files\u00b6 Source code: Lib\/sunau.py  The sunau module provides a convenient interface to the Sun AU sound format.  Note that this module is interface-compatible with the modules aifc and wave. An audio file consists of a header followed by the data.  The fields of the header are:       Field Contents    magic word The four bytes .snd.  header size Size of the header, including info, in bytes.  data size Physical size of the data, in bytes.  encoding Indicates how the audio samples are encoded.  sample rate The sampling rate.  # of channels The number of channels in the samples.  info ASCII string giving a description of the audio file (padded with null bytes).    Apart from the info field, all header fields are 4 bytes in size. They are all 32-bit unsigned integers encoded in big-endian byte order. The sunau module defines the following functions:   sunau.open(file, mode)\u00b6 If file is a string, open the file by that name, otherwise treat it as a seekable file-like object. mode can be any of  'r' Read only mode. 'w' Write only mode.  Note that it does not allow read\/write files. A mode of 'r' returns a AU_read object, while a mode of 'w' or 'wb' returns a AU_write object.     sunau.openfp(file, mode)\u00b6 A synonym for open(), maintained for backwards compatibility.  The sunau module defines the following exception:   exception sunau.Error\u00b6 An error raised when something is impossible because of Sun AU specs or implementation deficiency.  The sunau module defines the following data items:   sunau.AUDIO_FILE_MAGIC\u00b6 An integer every valid Sun AU file begins with, stored in big-endian form.  This is the string .snd interpreted as an integer.    sunau.AUDIO_FILE_ENCODING_MULAW_8\u00b6  sunau.AUDIO_FILE_ENCODING_LINEAR_8\u00b6  sunau.AUDIO_FILE_ENCODING_LINEAR_16\u00b6  sunau.AUDIO_FILE_ENCODING_LINEAR_24\u00b6  sunau.AUDIO_FILE_ENCODING_LINEAR_32\u00b6  sunau.AUDIO_FILE_ENCODING_ALAW_8\u00b6 Values of the encoding field from the AU header which are supported by this module.    sunau.AUDIO_FILE_ENCODING_FLOAT\u00b6  sunau.AUDIO_FILE_ENCODING_DOUBLE\u00b6  sunau.AUDIO_FILE_ENCODING_ADPCM_G721\u00b6  sunau.AUDIO_FILE_ENCODING_ADPCM_G722\u00b6  sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3\u00b6  sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5\u00b6 Additional known values of the encoding field from the AU header, but which are not supported by this module.   21.4.1. AU_read Objects\u00b6 AU_read objects, as returned by open() above, have the following methods:   AU_read.close()\u00b6 Close the stream, and make the instance unusable. (This is  called automatically on deletion.)    AU_read.getnchannels()\u00b6 Returns number of audio channels (1 for mone, 2 for stereo).    AU_read.getsampwidth()\u00b6 Returns sample width in bytes.    AU_read.getframerate()\u00b6 Returns sampling frequency.    AU_read.getnframes()\u00b6 Returns number of audio frames.    AU_read.getcomptype()\u00b6 Returns compression type. Supported compression types are 'ULAW', 'ALAW' and 'NONE'.    AU_read.getcompname()\u00b6 Human-readable version of getcomptype().  The supported types have the respective names 'CCITT G.711 u-law', 'CCITT G.711 A-law' and 'not compressed'.    AU_read.getparams()\u00b6 Returns a tuple (nchannels, sampwidth, framerate, nframes, comptype, compname), equivalent to output of the get*() methods.    AU_read.readframes(n)\u00b6 Reads and returns at most n frames of audio, as a string of bytes.  The data will be returned in linear format.  If the original data is in u-LAW format, it will be converted.    AU_read.rewind()\u00b6 Rewind the file pointer to the beginning of the audio stream.  The following two methods define a term &#8220;position&#8221; which is compatible between them, and is otherwise implementation dependent.   AU_read.setpos(pos)\u00b6 Set the file pointer to the specified position.  Only values returned from tell() should be used for pos.    AU_read.tell()\u00b6 Return current file pointer position.  Note that the returned value has nothing to do with the actual position in the file.  The following two functions are defined for compatibility with the  aifc, and don&#8217;t do anything interesting.   AU_read.getmarkers()\u00b6 Returns None.    AU_read.getmark(id)\u00b6 Raise an error.    21.4.2. AU_write Objects\u00b6 AU_write objects, as returned by open() above, have the following methods:   AU_write.setnchannels(n)\u00b6 Set the number of channels.    AU_write.setsampwidth(n)\u00b6 Set the sample width (in bytes.)    AU_write.setframerate(n)\u00b6 Set the frame rate.    AU_write.setnframes(n)\u00b6 Set the number of frames. This can be later changed, when and if more  frames are written.    AU_write.setcomptype(type, name)\u00b6 Set the compression type and description. Only 'NONE' and 'ULAW' are supported on output.    AU_write.setparams(tuple)\u00b6 The tuple should be (nchannels, sampwidth, framerate, nframes, comptype, compname), with values valid for the set*() methods.  Set all parameters.    AU_write.tell()\u00b6 Return current position in the file, with the same disclaimer for the AU_read.tell() and AU_read.setpos() methods.    AU_write.writeframesraw(data)\u00b6 Write audio frames, without correcting nframes.    AU_write.writeframes(data)\u00b6 Write audio frames and make sure nframes is correct.    AU_write.close()\u00b6 Make sure nframes is correct, and close the file. This method is called upon deletion.   Note that it is invalid to set any parameters after calling  writeframes() or writeframesraw()."},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.close","title":"sunau.AU_read.close","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getcompname","title":"sunau.AU_read.getcompname","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getcomptype","title":"sunau.AU_read.getcomptype","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getframerate","title":"sunau.AU_read.getframerate","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getmark","title":"sunau.AU_read.getmark","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getmarkers","title":"sunau.AU_read.getmarkers","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getnchannels","title":"sunau.AU_read.getnchannels","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getnframes","title":"sunau.AU_read.getnframes","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getparams","title":"sunau.AU_read.getparams","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.getsampwidth","title":"sunau.AU_read.getsampwidth","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.readframes","title":"sunau.AU_read.readframes","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.rewind","title":"sunau.AU_read.rewind","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.setpos","title":"sunau.AU_read.setpos","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_read.tell","title":"sunau.AU_read.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.close","title":"sunau.AU_write.close","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.setcomptype","title":"sunau.AU_write.setcomptype","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.setframerate","title":"sunau.AU_write.setframerate","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.setnchannels","title":"sunau.AU_write.setnchannels","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.setnframes","title":"sunau.AU_write.setnframes","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.setparams","title":"sunau.AU_write.setparams","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.setsampwidth","title":"sunau.AU_write.setsampwidth","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.tell","title":"sunau.AU_write.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.writeframes","title":"sunau.AU_write.writeframes","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.AU_write.writeframesraw","title":"sunau.AU_write.writeframesraw","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.open","title":"sunau.open","description":""},{"url":"http:\/\/docs.python.org\/library\/sunau.html#sunau.openfp","title":"sunau.openfp","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html","title":"aifc","description":"21.3. aifc &#8212; Read and write AIFF and AIFC files\u00b6 Source code: Lib\/aifc.py  This module provides support for reading and writing AIFF and AIFF-C files. AIFF is Audio Interchange File Format, a format for storing digital audio samples in a file.  AIFF-C is a newer version of the format that includes the ability to compress the audio data.  Note Some operations may only work under IRIX; these will raise ImportError when attempting to import the cl module, which is only available on IRIX.  Audio files have a number of parameters that describe the audio data. The sampling rate or frame rate is the number of times per second the sound is sampled.  The number of channels indicate if the audio is mono, stereo, or quadro.  Each frame consists of one sample per channel.  The sample size is the size in bytes of each sample.  Thus a frame consists of nchannels**samplesize* bytes, and a second&#8217;s worth of audio consists of nchannels**samplesize***framerate* bytes. For example, CD quality audio has a sample size of two bytes (16 bits), uses two channels (stereo) and has a frame rate of 44,100 frames\/second.  This gives a frame size of 4 bytes (2*2), and a second&#8217;s worth occupies 2*2*44100 bytes (176,400 bytes). Module aifc defines the following function:   aifc.open(file[, mode])\u00b6 Open an AIFF or AIFF-C file and return an object instance with methods that are described below.  The argument file is either a string naming a file or a file object.  mode must be 'r' or 'rb' when the file must be opened for reading, or 'w'  or 'wb' when the file must be opened for writing.  If omitted, file.mode is used if it exists, otherwise 'rb' is used.  When used for writing, the file object should be seekable, unless you know ahead of time how many samples you are going to write in total and use writeframesraw() and setnframes().  Objects returned by open() when a file is opened for reading have the following methods:   aifc.getnchannels()\u00b6 Return the number of audio channels (1 for mono, 2 for stereo).    aifc.getsampwidth()\u00b6 Return the size in bytes of individual samples.    aifc.getframerate()\u00b6 Return the sampling rate (number of audio frames per second).    aifc.getnframes()\u00b6 Return the number of audio frames in the file.    aifc.getcomptype()\u00b6 Return a four-character string describing the type of compression used in the audio file.  For AIFF files, the returned value is 'NONE'.    aifc.getcompname()\u00b6 Return a human-readable description of the type of compression used in the audio file.  For AIFF files, the returned value is 'not compressed'.    aifc.getparams()\u00b6 Return a tuple consisting of all of the above values in the above order.    aifc.getmarkers()\u00b6 Return a list of markers in the audio file.  A marker consists of a tuple of three elements.  The first is the mark ID (an integer), the second is the mark position in frames from the beginning of the data (an integer), the third is the name of the mark (a string).    aifc.getmark(id)\u00b6 Return the tuple as described in getmarkers() for the mark with the given id.    aifc.readframes(nframes)\u00b6 Read and return the next nframes frames from the audio file.  The returned data is a string containing for each frame the uncompressed samples of all channels.    aifc.rewind()\u00b6 Rewind the read pointer.  The next readframes() will start from the beginning.    aifc.setpos(pos)\u00b6 Seek to the specified frame number.    aifc.tell()\u00b6 Return the current frame number.    aifc.close()\u00b6 Close the AIFF file.  After calling this method, the object can no longer be used.  Objects returned by open() when a file is opened for writing have all the above methods, except for readframes() and setpos().  In addition the following methods exist.  The get*() methods can only be called after the corresponding set*() methods have been called.  Before the first writeframes() or writeframesraw(), all parameters except for the number of frames must be filled in.   aifc.aiff()\u00b6 Create an AIFF file.  The default is that an AIFF-C file is created, unless the name of the file ends in '.aiff' in which case the default is an AIFF file.    aifc.aifc()\u00b6 Create an AIFF-C file.  The default is that an AIFF-C file is created, unless the name of the file ends in '.aiff' in which case the default is an AIFF file.    aifc.setnchannels(nchannels)\u00b6 Specify the number of channels in the audio file.    aifc.setsampwidth(width)\u00b6 Specify the size in bytes of audio samples.    aifc.setframerate(rate)\u00b6 Specify the sampling frequency in frames per second.    aifc.setnframes(nframes)\u00b6 Specify the number of frames that are to be written to the audio file. If this parameter is not set, or not set correctly, the file needs to support seeking.    aifc.setcomptype(type, name)\u00b6 Specify the compression type.  If not specified, the audio data will not be compressed.  In AIFF files, compression is not possible.  The name parameter should be a human-readable description of the compression type, the type parameter should be a four-character string.  Currently the following compression types are supported: NONE, ULAW, ALAW, G722.     aifc.setparams(nchannels, sampwidth, framerate, comptype, compname)\u00b6 Set all the above parameters at once.  The argument is a tuple consisting of the various parameters.  This means that it is possible to use the result of a getparams() call as argument to setparams().    aifc.setmark(id, pos, name)\u00b6 Add a mark with the given id (larger than 0), and the given name at the given position.  This method can be called at any time before close().    aifc.tell() Return the current write position in the output file.  Useful in combination with setmark().    aifc.writeframes(data)\u00b6 Write data to the output file.  This method can only be called after the audio file parameters have been set.    aifc.writeframesraw(data)\u00b6 Like writeframes(), except that the header of the audio file is not updated.    aifc.close() Close the AIFF file.  The header of the file is updated to reflect the actual size of the audio data. After calling this method, the object can no longer be used."},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.aifc","title":"aifc.aifc.aifc","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.aiff","title":"aifc.aifc.aiff","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.close","title":"aifc.aifc.close","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getcompname","title":"aifc.aifc.getcompname","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getcomptype","title":"aifc.aifc.getcomptype","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getframerate","title":"aifc.aifc.getframerate","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getmark","title":"aifc.aifc.getmark","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getmarkers","title":"aifc.aifc.getmarkers","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getnchannels","title":"aifc.aifc.getnchannels","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getnframes","title":"aifc.aifc.getnframes","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getparams","title":"aifc.aifc.getparams","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.getsampwidth","title":"aifc.aifc.getsampwidth","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.readframes","title":"aifc.aifc.readframes","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.rewind","title":"aifc.aifc.rewind","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.setcomptype","title":"aifc.aifc.setcomptype","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.setframerate","title":"aifc.aifc.setframerate","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.setmark","title":"aifc.aifc.setmark","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.setnchannels","title":"aifc.aifc.setnchannels","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.setnframes","title":"aifc.aifc.setnframes","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.setparams","title":"aifc.aifc.setparams","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.setpos","title":"aifc.aifc.setpos","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.setsampwidth","title":"aifc.aifc.setsampwidth","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.tell","title":"aifc.aifc.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.writeframes","title":"aifc.aifc.writeframes","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.aifc.writeframesraw","title":"aifc.aifc.writeframesraw","description":""},{"url":"http:\/\/docs.python.org\/library\/aifc.html#aifc.open","title":"aifc.open","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html","title":"chunk","description":"21.6. chunk &#8212; Read IFF chunked data\u00b6 This module provides an interface for reading files that use EA IFF 85 chunks. [1]  This format is used in at least the Audio Interchange File Format (AIFF\/AIFF-C) and the Real Media File Format (RMFF).  The WAVE audio file format is closely related and can also be read using this module. A chunk has the following structure:        Offset Length Contents    0 4 Chunk ID  4 4 Size of chunk in big-endian byte order, not including the header  8 n Data bytes, where n is the size given in the preceding field  8 + n 0 or 1 Pad byte needed if n is odd and chunk alignment is used    The ID is a 4-byte string which identifies the type of chunk. The size field (a 32-bit value, encoded using big-endian byte order) gives the size of the chunk data, not including the 8-byte header. Usually an IFF-type file consists of one or more chunks.  The proposed usage of the Chunk class defined here is to instantiate an instance at the start of each chunk and read from the instance until it reaches the end, after which a new instance can be instantiated. At the end of the file, creating a new instance will fail with a EOFError exception.   class chunk.Chunk(file[, align, bigendian, inclheader])\u00b6 Class which represents a chunk.  The file argument is expected to be a file-like object.  An instance of this class is specifically allowed.  The only method that is needed is read().  If the methods seek() and tell() are present and don&#8217;t raise an exception, they are also used. If these methods are present and raise an exception, they are expected to not have altered the object.  If the optional argument align is true, chunks are assumed to be aligned on 2-byte boundaries.  If align is false, no alignment is assumed.  The default value is true.  If the optional argument bigendian is false, the chunk size is assumed to be in little-endian order. This is needed for WAVE audio files. The default value is true.  If the optional argument inclheader is true, the size given in the chunk header includes the size of the header.  The default value is false. A Chunk object supports the following methods:   getname()\u00b6 Returns the name (ID) of the chunk.  This is the first 4 bytes of the chunk.    getsize()\u00b6 Returns the size of the chunk.    close()\u00b6 Close and skip to the end of the chunk.  This does not close the underlying file.  The remaining methods will raise IOError if called after the close() method has been called.   isatty()\u00b6 Returns False.    seek(pos[, whence])\u00b6 Set the chunk&#8217;s current position.  The whence argument is optional and defaults to 0 (absolute file positioning); other values are 1 (seek relative to the current position) and 2 (seek relative to the file&#8217;s end).  There is no return value. If the underlying file does not allow seek, only forward seeks are allowed.    tell()\u00b6 Return the current position into the chunk.    read([size])\u00b6 Read at most size bytes from the chunk (less if the read hits the end of the chunk before obtaining size bytes).  If the size argument is negative or omitted, read all data until the end of the chunk.  The bytes are returned as a string object.  An empty string is returned when the end of the chunk is encountered immediately.    skip()\u00b6 Skip to the end of the chunk.  All further calls to read() for the chunk will return ''.  If you are not interested in the contents of the chunk, this method should be called so that the file points to the start of the next chunk.    Footnotes    [1]&#8220;EA IFF 85&#8221; Standard for Interchange Format Files, Jerry Morrison, Electronic Arts, January 1985."},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk","title":"chunk.Chunk","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk.close","title":"chunk.Chunk.close","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk.getname","title":"chunk.Chunk.getname","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk.getsize","title":"chunk.Chunk.getsize","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk.isatty","title":"chunk.Chunk.isatty","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk.read","title":"chunk.Chunk.read","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk.seek","title":"chunk.Chunk.seek","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk.skip","title":"chunk.Chunk.skip","description":""},{"url":"http:\/\/docs.python.org\/library\/chunk.html#chunk.Chunk.tell","title":"chunk.Chunk.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html","title":"wave","description":"21.5. wave &#8212; Read and write WAV files\u00b6 Source code: Lib\/wave.py  The wave module provides a convenient interface to the WAV sound format. It does not support compression\/decompression, but it does support mono\/stereo. The wave module defines the following function and exception:   wave.open(file[, mode])\u00b6 If file is a string, open the file by that name, otherwise treat it as a seekable file-like object.  mode can be any of  'r', 'rb' Read only mode. 'w', 'wb' Write only mode.  Note that it does not allow read\/write WAV files. A mode of 'r' or 'rb' returns a Wave_read object, while a mode of 'w' or 'wb' returns a Wave_write object.  If mode is omitted and a file-like object is passed as file, file.mode is used as the default value for mode (the 'b' flag is still added if necessary). If you pass in a file-like object, the wave object will not close it when its close() method is called; it is the caller&#8217;s responsibility to close the file object.     wave.openfp(file, mode)\u00b6 A synonym for open(), maintained for backwards compatibility.    exception wave.Error\u00b6 An error raised when something is impossible because it violates the WAV specification or hits an implementation deficiency.   21.5.1. Wave_read Objects\u00b6 Wave_read objects, as returned by open(), have the following methods:   Wave_read.close()\u00b6 Close the stream if it was opened by wave, and make the instance unusable.  This is called automatically on object collection.    Wave_read.getnchannels()\u00b6 Returns number of audio channels (1 for mono, 2 for stereo).    Wave_read.getsampwidth()\u00b6 Returns sample width in bytes.    Wave_read.getframerate()\u00b6 Returns sampling frequency.    Wave_read.getnframes()\u00b6 Returns number of audio frames.    Wave_read.getcomptype()\u00b6 Returns compression type ('NONE' is the only supported type).    Wave_read.getcompname()\u00b6 Human-readable version of getcomptype(). Usually 'not compressed' parallels 'NONE'.    Wave_read.getparams()\u00b6 Returns a tuple (nchannels, sampwidth, framerate, nframes, comptype, compname), equivalent to output of the get*() methods.    Wave_read.readframes(n)\u00b6 Reads and returns at most n frames of audio, as a string of bytes.    Wave_read.rewind()\u00b6 Rewind the file pointer to the beginning of the audio stream.  The following two methods are defined for compatibility with the aifc module, and don&#8217;t do anything interesting.   Wave_read.getmarkers()\u00b6 Returns None.    Wave_read.getmark(id)\u00b6 Raise an error.  The following two methods define a term &#8220;position&#8221; which is compatible between them, and is otherwise implementation dependent.   Wave_read.setpos(pos)\u00b6 Set the file pointer to the specified position.    Wave_read.tell()\u00b6 Return current file pointer position.    21.5.2. Wave_write Objects\u00b6 Wave_write objects, as returned by open(), have the following methods:   Wave_write.close()\u00b6 Make sure nframes is correct, and close the file if it was opened by wave.  This method is called upon object collection.    Wave_write.setnchannels(n)\u00b6 Set the number of channels.    Wave_write.setsampwidth(n)\u00b6 Set the sample width to n bytes.    Wave_write.setframerate(n)\u00b6 Set the frame rate to n.    Wave_write.setnframes(n)\u00b6 Set the number of frames to n. This will be changed later if more frames are written.    Wave_write.setcomptype(type, name)\u00b6 Set the compression type and description. At the moment, only compression type NONE is supported, meaning no compression.    Wave_write.setparams(tuple)\u00b6 The tuple should be (nchannels, sampwidth, framerate, nframes, comptype, compname), with values valid for the set*() methods.  Sets all parameters.    Wave_write.tell()\u00b6 Return current position in the file, with the same disclaimer for the Wave_read.tell() and Wave_read.setpos() methods.    Wave_write.writeframesraw(data)\u00b6 Write audio frames, without correcting nframes.    Wave_write.writeframes(data)\u00b6 Write audio frames and make sure nframes is correct.  Note that it is invalid to set any parameters after calling writeframes() or writeframesraw(), and any attempt to do so will raise wave.Error."},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.open","title":"wave.open","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.openfp","title":"wave.openfp","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.close","title":"wave.Wave_read.close","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getcompname","title":"wave.Wave_read.getcompname","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getcomptype","title":"wave.Wave_read.getcomptype","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getframerate","title":"wave.Wave_read.getframerate","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getmark","title":"wave.Wave_read.getmark","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getmarkers","title":"wave.Wave_read.getmarkers","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getnchannels","title":"wave.Wave_read.getnchannels","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getnframes","title":"wave.Wave_read.getnframes","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getparams","title":"wave.Wave_read.getparams","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.getsampwidth","title":"wave.Wave_read.getsampwidth","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.readframes","title":"wave.Wave_read.readframes","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.rewind","title":"wave.Wave_read.rewind","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.setpos","title":"wave.Wave_read.setpos","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_read.tell","title":"wave.Wave_read.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.close","title":"wave.Wave_write.close","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.setcomptype","title":"wave.Wave_write.setcomptype","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.setframerate","title":"wave.Wave_write.setframerate","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.setnchannels","title":"wave.Wave_write.setnchannels","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.setnframes","title":"wave.Wave_write.setnframes","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.setparams","title":"wave.Wave_write.setparams","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.setsampwidth","title":"wave.Wave_write.setsampwidth","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.tell","title":"wave.Wave_write.tell","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.writeframes","title":"wave.Wave_write.writeframes","description":""},{"url":"http:\/\/docs.python.org\/library\/wave.html#wave.Wave_write.writeframesraw","title":"wave.Wave_write.writeframesraw","description":""},{"url":"http:\/\/docs.python.org\/library\/colorsys.html","title":"colorsys","description":"21.7. colorsys &#8212; Conversions between color systems\u00b6 Source code: Lib\/colorsys.py  The colorsys module defines bidirectional conversions of color values between colors expressed in the RGB (Red Green Blue) color space used in computer monitors and three other coordinate systems: YIQ, HLS (Hue Lightness Saturation) and HSV (Hue Saturation Value).  Coordinates in all of these color spaces are floating point values.  In the YIQ space, the Y coordinate is between 0 and 1, but the I and Q coordinates can be positive or negative.  In all other spaces, the coordinates are all between 0 and 1.  See also More information about color spaces can be found at http:\/\/www.poynton.com\/ColorFAQ.html and http:\/\/www.cambridgeincolour.com\/tutorials\/color-spaces.htm.  The colorsys module defines the following functions:   colorsys.rgb_to_yiq(r, g, b)\u00b6 Convert the color from RGB coordinates to YIQ coordinates.    colorsys.yiq_to_rgb(y, i, q)\u00b6 Convert the color from YIQ coordinates to RGB coordinates.    colorsys.rgb_to_hls(r, g, b)\u00b6 Convert the color from RGB coordinates to HLS coordinates.    colorsys.hls_to_rgb(h, l, s)\u00b6 Convert the color from HLS coordinates to RGB coordinates.    colorsys.rgb_to_hsv(r, g, b)\u00b6 Convert the color from RGB coordinates to HSV coordinates.    colorsys.hsv_to_rgb(h, s, v)\u00b6 Convert the color from HSV coordinates to RGB coordinates.  Example: >>> import colorsys >>> colorsys.rgb_to_hsv(.3, .4, .2) (0.25, 0.5, 0.4) >>> colorsys.hsv_to_rgb(0.25, 0.5, 0.4) (0.3, 0.4, 0.2)"},{"url":"http:\/\/docs.python.org\/library\/colorsys.html#colorsys.hls_to_rgb","title":"colorsys.hls_to_rgb","description":""},{"url":"http:\/\/docs.python.org\/library\/colorsys.html#colorsys.hsv_to_rgb","title":"colorsys.hsv_to_rgb","description":""},{"url":"http:\/\/docs.python.org\/library\/colorsys.html#colorsys.rgb_to_hls","title":"colorsys.rgb_to_hls","description":""},{"url":"http:\/\/docs.python.org\/library\/colorsys.html#colorsys.rgb_to_hsv","title":"colorsys.rgb_to_hsv","description":""},{"url":"http:\/\/docs.python.org\/library\/colorsys.html#colorsys.rgb_to_yiq","title":"colorsys.rgb_to_yiq","description":""},{"url":"http:\/\/docs.python.org\/library\/colorsys.html#colorsys.yiq_to_rgb","title":"colorsys.yiq_to_rgb","description":""},{"url":"http:\/\/docs.python.org\/library\/imghdr.html","title":"imghdr","description":"21.8. imghdr &#8212; Determine the type of an image\u00b6 Source code: Lib\/imghdr.py  The imghdr module determines the type of image contained in a file or byte stream. The imghdr module defines the following function:   imghdr.what(filename[, h])\u00b6 Tests the image data contained in the file named by filename, and returns a string describing the image type.  If optional h is provided, the filename is ignored and h is assumed to contain the byte stream to test.  The following image types are recognized, as listed below with the return value from what():       Value Image format    'rgb' SGI ImgLib Files  'gif' GIF 87a and 89a Files  'pbm' Portable Bitmap Files  'pgm' Portable Graymap Files  'ppm' Portable Pixmap Files  'tiff' TIFF Files  'rast' Sun Raster Files  'xbm' X Bitmap Files  'jpeg' JPEG data in JFIF or Exif formats  'bmp' BMP files  'png' Portable Network Graphics     New in version 2.5: Exif detection. You can extend the list of file types imghdr can recognize by appending to this variable:   imghdr.tests\u00b6 A list of functions performing the individual tests.  Each function takes two arguments: the byte-stream and an open file-like object. When what() is called with a byte-stream, the file-like object will be None. The test function should return a string describing the image type if the test succeeded, or None if it failed.   Example: >>> import imghdr >>> imghdr.what(&#39;\/tmp\/bass.gif&#39;) &#39;gif&#39;"},{"url":"http:\/\/docs.python.org\/library\/imghdr.html#imghdr.what","title":"imghdr.what","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html","title":"cookielib","description":"20.21. cookielib &#8212; Cookie handling for HTTP clients\u00b6  Note The cookielib module has been renamed to http.cookiejar in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.   New in version 2.4. Source code: Lib\/cookielib.py  The cookielib module defines classes for automatic handling of HTTP cookies.  It is useful for accessing web sites that require small pieces of data &#8211; cookies &#8211; to be set on the client machine by an HTTP response from a web server, and then returned to the server in later HTTP requests. Both the regular Netscape cookie protocol and the protocol defined by RFC 2965 are handled.  RFC 2965 handling is switched off by default. RFC 2109 cookies are parsed as Netscape cookies and subsequently treated either as Netscape or RFC 2965 cookies according to the &#8216;policy&#8217; in effect. Note that the great majority of cookies on the Internet are Netscape cookies. cookielib attempts to follow the de-facto Netscape cookie protocol (which differs substantially from that set out in the original Netscape specification), including taking note of the max-age and port cookie-attributes introduced with RFC 2965.  Note The various named parameters found in Set-Cookie and Set-Cookie2 headers (eg. domain and expires) are conventionally referred to as attributes.  To distinguish them from Python attributes, the documentation for this module uses the term cookie-attribute instead.  The module defines the following exception:   exception cookielib.LoadError\u00b6 Instances of FileCookieJar raise this exception on failure to load cookies from a file.  Note For backwards-compatibility with Python 2.4 (which raised an IOError), LoadError is a subclass of IOError.    The following classes are provided:   class cookielib.CookieJar(policy=None)\u00b6 policy is an object implementing the CookiePolicy interface. The CookieJar class stores HTTP cookies.  It extracts cookies from HTTP requests, and returns them in HTTP responses. CookieJar instances automatically expire contained cookies when necessary.  Subclasses are also responsible for storing and retrieving cookies from a file or database.     class cookielib.FileCookieJar(filename, delayload=None, policy=None)\u00b6 policy is an object implementing the CookiePolicy interface.  For the other arguments, see the documentation for the corresponding attributes. A CookieJar which can load cookies from, and perhaps save cookies to, a file on disk.  Cookies are NOT loaded from the named file until either the load() or revert() method is called.  Subclasses of this class are documented in section FileCookieJar subclasses and co-operation with web browsers.     class cookielib.CookiePolicy\u00b6 This class is responsible for deciding whether each cookie should be accepted from \/ returned to the server.    class cookielib.DefaultCookiePolicy(blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, strict_ns_domain=DefaultCookiePolicy.DomainLiberal, strict_ns_set_initial_dollar=False, strict_ns_set_path=False)\u00b6 Constructor arguments should be passed as keyword arguments only. blocked_domains is a sequence of domain names that we never accept cookies from, nor return cookies to. allowed_domains if not None, this is a sequence of the only domains for which we accept and return cookies.  For all other arguments, see the documentation for CookiePolicy and DefaultCookiePolicy objects. DefaultCookiePolicy implements the standard accept \/ reject rules for Netscape and RFC 2965 cookies.  By default, RFC 2109 cookies (ie. cookies received in a Set-Cookie header with a version cookie-attribute of 1) are treated according to the RFC 2965 rules.  However, if RFC 2965 handling is turned off or rfc2109_as_netscape is True, RFC 2109 cookies are &#8216;downgraded&#8217; by the CookieJar instance to Netscape cookies, by setting the version attribute of the Cookie instance to 0. DefaultCookiePolicy also provides some parameters to allow some fine-tuning of policy.     class cookielib.Cookie\u00b6 This class represents Netscape, RFC 2109 and RFC 2965 cookies.  It is not expected that users of cookielib construct their own Cookie instances.  Instead, if necessary, call make_cookies() on a CookieJar instance.   See also  Module urllib2 URL opening with automatic cookie handling. Module Cookie HTTP cookie classes, principally useful for server-side code.  The cookielib and Cookie modules do not depend on each other. http:\/\/wp.netscape.com\/newsref\/std\/cookie_spec.html The specification of the original Netscape cookie protocol.  Though this is still the dominant protocol, the &#8216;Netscape cookie protocol&#8217; implemented by all the major browsers (and cookielib) only bears a passing resemblance to the one sketched out in cookie_spec.html. RFC 2109 - HTTP State Management Mechanism Obsoleted by RFC 2965. Uses Set-Cookie with version=1. RFC 2965 - HTTP State Management Mechanism The Netscape protocol with the bugs fixed.  Uses Set-Cookie2 in place of Set-Cookie.  Not widely used. http:\/\/kristol.org\/cookie\/errata.html Unfinished errata to RFC 2965.  RFC 2964 - Use of HTTP State Management   20.21.1. CookieJar and FileCookieJar Objects\u00b6 CookieJar objects support the iterator protocol for iterating over contained Cookie objects. CookieJar has the following methods:   CookieJar.add_cookie_header(request)\u00b6 Add correct Cookie header to request. If policy allows (ie. the rfc2965 and hide_cookie2 attributes of the CookieJar&#8216;s CookiePolicy instance are true and false respectively), the Cookie2 header is also added when appropriate. The request object (usually a urllib2.Request instance) must support the methods get_full_url(), get_host(), get_type(), unverifiable(), get_origin_req_host(), has_header(), get_header(), header_items(), and add_unredirected_header(),as documented by urllib2.     CookieJar.extract_cookies(response, request)\u00b6 Extract cookies from HTTP response and store them in the CookieJar, where allowed by policy. The CookieJar will look for allowable Set-Cookie and Set-Cookie2 headers in the response argument, and store cookies as appropriate (subject to the CookiePolicy.set_ok() method&#8217;s approval). The response object (usually the result of a call to urllib2.urlopen(), or similar) should support an info() method, which returns an object with a getallmatchingheaders() method (usually a mimetools.Message instance). The request object (usually a urllib2.Request instance) must support the methods get_full_url(), get_host(), unverifiable(), and get_origin_req_host(), as documented by urllib2.  The request is used to set default values for cookie-attributes as well as for checking that the cookie is allowed to be set.     CookieJar.set_policy(policy)\u00b6 Set the CookiePolicy instance to be used.    CookieJar.make_cookies(response, request)\u00b6 Return sequence of Cookie objects extracted from response object. See the documentation for extract_cookies() for the interfaces required of the response and request arguments.     CookieJar.set_cookie_if_ok(cookie, request)\u00b6 Set a Cookie if policy says it&#8217;s OK to do so.    CookieJar.set_cookie(cookie)\u00b6 Set a Cookie, without checking with policy to see whether or not it should be set.    CookieJar.clear([domain[, path[, name]]])\u00b6 Clear some cookies. If invoked without arguments, clear all cookies.  If given a single argument, only cookies belonging to that domain will be removed. If given two arguments, cookies belonging to the specified domain and URL path are removed.  If given three arguments, then the cookie with the specified domain, path and name is removed. Raises KeyError if no matching cookie exists.     CookieJar.clear_session_cookies()\u00b6 Discard all session cookies. Discards all contained cookies that have a true discard attribute (usually because they had either no max-age or expires cookie-attribute, or an explicit discard cookie-attribute).  For interactive browsers, the end of a session usually corresponds to closing the browser window. Note that the save() method won&#8217;t save session cookies anyway, unless you ask otherwise by passing a true ignore_discard argument.   FileCookieJar implements the following additional methods:   FileCookieJar.save(filename=None, ignore_discard=False, ignore_expires=False)\u00b6 Save cookies to a file. This base class raises NotImplementedError.  Subclasses may leave this method unimplemented. filename is the name of file in which to save cookies.  If filename is not specified, self.filename is used (whose default is the value passed to the constructor, if any); if self.filename is None, ValueError is raised. ignore_discard: save even cookies set to be discarded. ignore_expires: save even cookies that have expired The file is overwritten if it already exists, thus wiping all the cookies it contains.  Saved cookies can be restored later using the load() or revert() methods.     FileCookieJar.load(filename=None, ignore_discard=False, ignore_expires=False)\u00b6 Load cookies from a file. Old cookies are kept unless overwritten by newly loaded ones. Arguments are as for save(). The named file must be in the format understood by the class, or LoadError will be raised.  Also, IOError may be raised, for example if the file does not exist.  Note For backwards-compatibility with Python 2.4 (which raised an IOError), LoadError is a subclass of IOError.      FileCookieJar.revert(filename=None, ignore_discard=False, ignore_expires=False)\u00b6 Clear all cookies and reload cookies from a saved file. revert() can raise the same exceptions as load(). If there is a failure, the object&#8217;s state will not be altered.   FileCookieJar instances have the following public attributes:   FileCookieJar.filename\u00b6 Filename of default file in which to keep cookies.  This attribute may be assigned to.    FileCookieJar.delayload\u00b6 If true, load cookies lazily from disk.  This attribute should not be assigned to.  This is only a hint, since this only affects performance, not behaviour (unless the cookies on disk are changing). A CookieJar object may ignore it.  None of the FileCookieJar classes included in the standard library lazily loads cookies.    20.21.2. FileCookieJar subclasses and co-operation with web browsers\u00b6 The following CookieJar subclasses are provided for reading and writing .   class cookielib.MozillaCookieJar(filename, delayload=None, policy=None)\u00b6 A FileCookieJar that can load from and save cookies to disk in the Mozilla cookies.txt file format (which is also used by the Lynx and Netscape browsers).  Note Version 3 of the Firefox web browser no longer writes cookies in the cookies.txt file format.   Note This loses information about RFC 2965 cookies, and also about newer or non-standard cookie-attributes such as port.   Warning Back up your cookies before saving if you have cookies whose loss \/ corruption would be inconvenient (there are some subtleties which may lead to slight changes in the file over a load \/ save round-trip).  Also note that cookies saved while Mozilla is running will get clobbered by Mozilla.     class cookielib.LWPCookieJar(filename, delayload=None, policy=None)\u00b6 A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library&#8217;s Set-Cookie3 file format.  This is convenient if you want to store cookies in a human-readable file.    20.21.3. CookiePolicy Objects\u00b6 Objects implementing the CookiePolicy interface have the following methods:   CookiePolicy.set_ok(cookie, request)\u00b6 Return boolean value indicating whether cookie should be accepted from server. cookie is a cookielib.Cookie instance.  request is an object implementing the interface defined by the documentation for CookieJar.extract_cookies().     CookiePolicy.return_ok(cookie, request)\u00b6 Return boolean value indicating whether cookie should be returned to server. cookie is a cookielib.Cookie instance.  request is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header().     CookiePolicy.domain_return_ok(domain, request)\u00b6 Return false if cookies should not be returned, given cookie domain. This method is an optimization.  It removes the need for checking every cookie with a particular domain (which might involve reading many files).  Returning true from domain_return_ok() and path_return_ok() leaves all the work to return_ok(). If domain_return_ok() returns true for the cookie domain, path_return_ok() is called for the cookie path.  Otherwise, path_return_ok() and return_ok() are never called for that cookie domain.  If path_return_ok() returns true, return_ok() is called with the Cookie object itself for a full check.  Otherwise, return_ok() is never called for that cookie path. Note that domain_return_ok() is called for every cookie domain, not just for the request domain.  For example, the function might be called with both \".example.com\" and \"www.example.com\" if the request domain is \"www.example.com\".  The same goes for path_return_ok(). The request argument is as documented for return_ok().     CookiePolicy.path_return_ok(path, request)\u00b6 Return false if cookies should not be returned, given cookie path. See the documentation for domain_return_ok().   In addition to implementing the methods above, implementations of the CookiePolicy interface must also supply the following attributes, indicating which protocols should be used, and how.  All of these attributes may be assigned to.   CookiePolicy.netscape\u00b6 Implement Netscape protocol.    CookiePolicy.rfc2965\u00b6 Implement RFC 2965 protocol.    CookiePolicy.hide_cookie2\u00b6 Don&#8217;t add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies).  The most useful way to define a CookiePolicy class is by subclassing from DefaultCookiePolicy and overriding some or all of the methods above.  CookiePolicy itself may be used as a &#8216;null policy&#8217; to allow setting and receiving any and all cookies (this is unlikely to be useful).   20.21.4. DefaultCookiePolicy Objects\u00b6 Implements the standard rules for accepting and returning cookies. Both RFC 2965 and Netscape cookies are covered.  RFC 2965 handling is switched off by default. The easiest way to provide your own policy is to override this class and call its methods in your overridden implementations before adding your own additional checks: import cookielib class MyCookiePolicy(cookielib.DefaultCookiePolicy):     def set_ok(self, cookie, request):         if not cookielib.DefaultCookiePolicy.set_ok(self, cookie, request):             return False         if i_dont_want_to_store_this_cookie(cookie):             return False         return True   In addition to the features required to implement the CookiePolicy interface, this class allows you to block and allow domains from setting and receiving cookies.  There are also some strictness switches that allow you to tighten up the rather loose Netscape protocol rules a little bit (at the cost of blocking some benign cookies). A domain blacklist and whitelist is provided (both off by default). Only domains not in the blacklist and present in the whitelist (if the whitelist is active) participate in cookie setting and returning.  Use the blocked_domains constructor argument, and blocked_domains() and set_blocked_domains() methods (and the corresponding argument and methods for allowed_domains).  If you set a whitelist, you can turn it off again by setting it to None. Domains in block or allow lists that do not start with a dot must equal the cookie domain to be matched.  For example, \"example.com\" matches a blacklist entry of \"example.com\", but \"www.example.com\" does not.  Domains that do start with a dot are matched by more specific domains too. For example, both \"www.example.com\" and \"www.coyote.example.com\" match \".example.com\" (but \"example.com\" itself does not).  IP addresses are an exception, and must match exactly.  For example, if blocked_domains contains \"192.168.1.2\" and \".168.1.2\", 192.168.1.2 is blocked, but 193.168.1.2 is not. DefaultCookiePolicy implements the following additional methods:   DefaultCookiePolicy.blocked_domains()\u00b6 Return the sequence of blocked domains (as a tuple).    DefaultCookiePolicy.set_blocked_domains(blocked_domains)\u00b6 Set the sequence of blocked domains.    DefaultCookiePolicy.is_blocked(domain)\u00b6 Return whether domain is on the blacklist for setting or receiving cookies.    DefaultCookiePolicy.allowed_domains()\u00b6 Return None, or the sequence of allowed domains (as a tuple).    DefaultCookiePolicy.set_allowed_domains(allowed_domains)\u00b6 Set the sequence of allowed domains, or None.    DefaultCookiePolicy.is_not_allowed(domain)\u00b6 Return whether domain is not on the whitelist for setting or receiving cookies.  DefaultCookiePolicy instances have the following attributes, which are all initialised from the constructor arguments of the same name, and which may all be assigned to.   DefaultCookiePolicy.rfc2109_as_netscape\u00b6 If true, request that the CookieJar instance downgrade RFC 2109 cookies (ie. cookies received in a Set-Cookie header with a version cookie-attribute of 1) to Netscape cookies by setting the version attribute of the Cookie instance to 0.  The default value is None, in which case RFC 2109 cookies are downgraded if and only if RFC 2965 handling is turned off.  Therefore, RFC 2109 cookies are downgraded by default.  New in version 2.5.   General strictness switches:   DefaultCookiePolicy.strict_domain\u00b6 Don&#8217;t allow sites to set two-component domains with country-code top-level domains like .co.uk, .gov.uk, .co.nz.etc.  This is far from perfect and isn&#8217;t guaranteed to work!  RFC 2965 protocol strictness switches:   DefaultCookiePolicy.strict_rfc2965_unverifiable\u00b6 Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).  If this is false, cookies are never blocked on the basis of verifiability  Netscape protocol strictness switches:   DefaultCookiePolicy.strict_ns_unverifiable\u00b6 apply RFC 2965 rules on unverifiable transactions even to Netscape cookies    DefaultCookiePolicy.strict_ns_domain\u00b6 Flags indicating how strict to be with domain-matching rules for Netscape cookies.  See below for acceptable values.    DefaultCookiePolicy.strict_ns_set_initial_dollar\u00b6 Ignore cookies in Set-Cookie: headers that have names starting with '$'.    DefaultCookiePolicy.strict_ns_set_path\u00b6 Don&#8217;t allow setting cookies whose path doesn&#8217;t path-match request URI.  strict_ns_domain is a collection of flags.  Its value is constructed by or-ing together (for example, DomainStrictNoDots|DomainStrictNonDomain means both flags are set).   DefaultCookiePolicy.DomainStrictNoDots\u00b6 When setting cookies, the &#8216;host prefix&#8217; must not contain a dot (eg. www.foo.bar.com can&#8217;t set a cookie for .bar.com, because www.foo contains a dot).    DefaultCookiePolicy.DomainStrictNonDomain\u00b6 Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg. spam.example.com won&#8217;t be returned cookies from example.com that had no domain cookie-attribute).    DefaultCookiePolicy.DomainRFC2965Match\u00b6 When setting cookies, require a full RFC 2965 domain-match.  The following attributes are provided for convenience, and are the most useful combinations of the above flags:   DefaultCookiePolicy.DomainLiberal\u00b6 Equivalent to 0 (ie. all of the above Netscape domain strictness flags switched off).    DefaultCookiePolicy.DomainStrict\u00b6 Equivalent to DomainStrictNoDots|DomainStrictNonDomain.    20.21.5. Cookie Objects\u00b6 Cookie instances have Python attributes roughly corresponding to the standard cookie-attributes specified in the various cookie standards.  The correspondence is not one-to-one, because there are complicated rules for assigning default values, because the max-age and expires cookie-attributes contain equivalent information, and because RFC 2109 cookies may be &#8216;downgraded&#8217; by cookielib from version 1 to version 0 (Netscape) cookies. Assignment to these attributes should not be necessary other than in rare circumstances in a CookiePolicy method.  The class does not enforce internal consistency, so you should know what you&#8217;re doing if you do that.   Cookie.version\u00b6 Integer or None.  Netscape cookies have version 0. RFC 2965 and RFC 2109 cookies have a version cookie-attribute of 1.  However, note that cookielib may &#8216;downgrade&#8217; RFC 2109 cookies to Netscape cookies, in which case version is 0.    Cookie.name\u00b6 Cookie name (a string).    Cookie.value\u00b6 Cookie value (a string), or None.    Cookie.port\u00b6 String representing a port or a set of ports (eg. &#8216;80&#8217;, or &#8216;80,8080&#8217;), or None.    Cookie.path\u00b6 Cookie path (a string, eg. '\/acme\/rocket_launchers').    Cookie.secure\u00b6 True if cookie should only be returned over a secure connection.    Cookie.expires\u00b6 Integer expiry date in seconds since epoch, or None.  See also the is_expired() method.    Cookie.discard\u00b6 True if this is a session cookie.    Cookie.comment\u00b6 String comment from the server explaining the function of this cookie, or None.    Cookie.comment_url\u00b6 URL linking to a comment from the server explaining the function of this cookie, or None.    Cookie.rfc2109\u00b6 True if this cookie was received as an RFC 2109 cookie (ie. the cookie arrived in a Set-Cookie header, and the value of the Version cookie-attribute in that header was 1).  This attribute is provided because cookielib may &#8216;downgrade&#8217; RFC 2109 cookies to Netscape cookies, in which case version is 0.  New in version 2.5.     Cookie.port_specified\u00b6 True if a port or set of ports was explicitly specified by the server (in the Set-Cookie \/ Set-Cookie2 header).    Cookie.domain_specified\u00b6 True if a domain was explicitly specified by the server.    Cookie.domain_initial_dot\u00b6 True if the domain explicitly specified by the server began with a dot ('.').  Cookies may have additional non-standard cookie-attributes.  These may be accessed using the following methods:   Cookie.has_nonstandard_attr(name)\u00b6 Return true if cookie has the named cookie-attribute.    Cookie.get_nonstandard_attr(name, default=None)\u00b6 If cookie has the named cookie-attribute, return its value. Otherwise, return default.    Cookie.set_nonstandard_attr(name, value)\u00b6 Set the value of the named cookie-attribute.  The Cookie class also defines the following method:   Cookie.is_expired([now=None])\u00b6 True if cookie has passed the time at which the server requested it should expire.  If now is given (in seconds since the epoch), return whether the cookie has expired at the specified time.    20.21.6. Examples\u00b6 The first example shows the most common usage of cookielib: import cookielib, urllib2 cj = cookielib.CookieJar() opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)) r = opener.open(\"http:\/\/example.com\/\")   This example illustrates how to open a URL using your Netscape, Mozilla, or Lynx cookies (assumes Unix\/Netscape convention for location of the cookies file): import os, cookielib, urllib2 cj = cookielib.MozillaCookieJar() cj.load(os.path.join(os.path.expanduser(\"~\"), \".netscape\", \"cookies.txt\")) opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)) r = opener.open(\"http:\/\/example.com\/\")   The next example illustrates the use of DefaultCookiePolicy. Turn on RFC 2965 cookies, be more strict about domains when setting and returning Netscape cookies, and block some domains from setting cookies or having them returned: import urllib2 from cookielib import CookieJar, DefaultCookiePolicy policy = DefaultCookiePolicy(     rfc2965=True, strict_ns_domain=DefaultCookiePolicy.DomainStrict,     blocked_domains=[\"ads.net\", \".ads.net\"]) cj = CookieJar(policy) opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)) r = opener.open(\"http:\/\/example.com\/\")"},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.Cookie","title":"cookielib.Cookie","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.Cookie.get_nonstandard_attr","title":"cookielib.Cookie.get_nonstandard_attr","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.Cookie.has_nonstandard_attr","title":"cookielib.Cookie.has_nonstandard_attr","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.Cookie.is_expired","title":"cookielib.Cookie.is_expired","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.Cookie.set_nonstandard_attr","title":"cookielib.Cookie.set_nonstandard_attr","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar","title":"cookielib.CookieJar","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar.add_cookie_header","title":"cookielib.CookieJar.add_cookie_header","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar.clear","title":"cookielib.CookieJar.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar.clear_session_cookies","title":"cookielib.CookieJar.clear_session_cookies","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar.extract_cookies","title":"cookielib.CookieJar.extract_cookies","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar.make_cookies","title":"cookielib.CookieJar.make_cookies","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar.set_cookie","title":"cookielib.CookieJar.set_cookie","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar.set_cookie_if_ok","title":"cookielib.CookieJar.set_cookie_if_ok","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookieJar.set_policy","title":"cookielib.CookieJar.set_policy","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookiePolicy","title":"cookielib.CookiePolicy","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookiePolicy.domain_return_ok","title":"cookielib.CookiePolicy.domain_return_ok","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookiePolicy.path_return_ok","title":"cookielib.CookiePolicy.path_return_ok","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookiePolicy.return_ok","title":"cookielib.CookiePolicy.return_ok","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.CookiePolicy.set_ok","title":"cookielib.CookiePolicy.set_ok","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.DefaultCookiePolicy","title":"cookielib.DefaultCookiePolicy","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.DefaultCookiePolicy.allowed_domains","title":"cookielib.DefaultCookiePolicy.allowed_domains","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.DefaultCookiePolicy.blocked_domains","title":"cookielib.DefaultCookiePolicy.blocked_domains","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.DefaultCookiePolicy.is_blocked","title":"cookielib.DefaultCookiePolicy.is_blocked","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.DefaultCookiePolicy.is_not_allowed","title":"cookielib.DefaultCookiePolicy.is_not_allowed","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.DefaultCookiePolicy.set_allowed_domains","title":"cookielib.DefaultCookiePolicy.set_allowed_domains","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.DefaultCookiePolicy.set_blocked_domains","title":"cookielib.DefaultCookiePolicy.set_blocked_domains","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.FileCookieJar","title":"cookielib.FileCookieJar","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.FileCookieJar.load","title":"cookielib.FileCookieJar.load","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.FileCookieJar.revert","title":"cookielib.FileCookieJar.revert","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.FileCookieJar.save","title":"cookielib.FileCookieJar.save","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.LWPCookieJar","title":"cookielib.LWPCookieJar","description":""},{"url":"http:\/\/docs.python.org\/library\/cookielib.html#cookielib.MozillaCookieJar","title":"cookielib.MozillaCookieJar","description":""},{"url":"http:\/\/docs.python.org\/library\/sndhdr.html","title":"sndhdr","description":"21.9. sndhdr &#8212; Determine type of sound file\u00b6 Source code: Lib\/sndhdr.py  The sndhdr provides utility functions which attempt to determine the type of sound data which is in a file.  When these functions are able to determine what type of sound data is stored in a file, they return a tuple (type, sampling_rate, channels, frames, bits_per_sample).  The value for type indicates the data type and will be one of the strings 'aifc', 'aiff', 'au', 'hcom', 'sndr', 'sndt', 'voc', 'wav', '8svx', 'sb', 'ub', or 'ul'.  The sampling_rate will be either the actual value or 0 if unknown or difficult to decode.  Similarly, channels will be either the number of channels or 0 if it cannot be determined or if the value is difficult to decode.  The value for frames will be either the number of frames or -1.  The last item in the tuple, bits_per_sample, will either be the sample size in bits or 'A' for A-LAW or 'U' for u-LAW.   sndhdr.what(filename)\u00b6 Determines the type of sound data stored in the file filename using whathdr().  If it succeeds, returns a tuple as described above, otherwise None is returned.    sndhdr.whathdr(filename)\u00b6 Determines the type of sound data stored in a file based on the file  header. The name of the file is given by filename.  This function returns a tuple as described above on success, or None."},{"url":"http:\/\/docs.python.org\/library\/sndhdr.html#sndhdr.what","title":"sndhdr.what","description":""},{"url":"http:\/\/docs.python.org\/library\/sndhdr.html#sndhdr.whathdr","title":"sndhdr.whathdr","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html","title":"gettext","description":"22.1. gettext &#8212; Multilingual internationalization services\u00b6 Source code: Lib\/gettext.py  The gettext module provides internationalization (I18N) and localization (L10N) services for your Python modules and applications. It supports both the GNU gettext message catalog API and a higher level, class-based API that may be more appropriate for Python files.  The interface described below allows you to write your module and application messages in one natural language, and provide a catalog of translated messages for running under different natural languages. Some hints on localizing your Python modules and applications are also given.  22.1.1. GNU gettext API\u00b6 The gettext module defines the following API, which is very similar to the GNU gettext API.  If you use this API you will affect the translation of your entire application globally.  Often this is what you want if your application is monolingual, with the choice of language dependent on the locale of your user.  If you are localizing a Python module, or if your application needs to switch languages on the fly, you probably want to use the class-based API instead.   gettext.bindtextdomain(domain[, localedir])\u00b6 Bind the domain to the locale directory localedir.  More concretely, gettext will look for binary .mo files for the given domain using the path (on Unix): localedir\/language\/LC_MESSAGES\/domain.mo, where languages is searched for in the environment variables LANGUAGE, LC_ALL, LC_MESSAGES, and LANG respectively. If localedir is omitted or None, then the current binding for domain is returned. [1]     gettext.bind_textdomain_codeset(domain[, codeset])\u00b6 Bind the domain to codeset, changing the encoding of strings returned by the gettext() family of functions. If codeset is omitted, then the current binding is returned.  New in version 2.4.     gettext.textdomain([domain])\u00b6 Change or query the current global domain.  If domain is None, then the current global domain is returned, otherwise the global domain is set to domain, which is returned.    gettext.gettext(message)\u00b6 Return the localized translation of message, based on the current global domain, language, and locale directory.  This function is usually aliased as _() in the local namespace (see examples below).    gettext.lgettext(message)\u00b6 Equivalent to gettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().  New in version 2.4.     gettext.dgettext(domain, message)\u00b6 Like gettext(), but look the message up in the specified domain.    gettext.ldgettext(domain, message)\u00b6 Equivalent to dgettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().  New in version 2.4.     gettext.ngettext(singular, plural, n)\u00b6 Like gettext(), but consider plural forms. If a translation is found, apply the plural formula to n, and return the resulting message (some languages have more than two plural forms). If no translation is found, return singular if n is 1; return plural otherwise. The Plural formula is taken from the catalog header. It is a C or Python expression that has a free variable n; the expression evaluates to the index of the plural in the catalog. See the GNU gettext documentation for the precise syntax to be used in .po files and the formulas for a variety of languages.  New in version 2.3.     gettext.lngettext(singular, plural, n)\u00b6 Equivalent to ngettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().  New in version 2.4.     gettext.dngettext(domain, singular, plural, n)\u00b6 Like ngettext(), but look the message up in the specified domain.  New in version 2.3.     gettext.ldngettext(domain, singular, plural, n)\u00b6 Equivalent to dngettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with bind_textdomain_codeset().  New in version 2.4.   Note that GNU gettext also defines a dcgettext() method, but this was deemed not useful and so it is currently unimplemented. Here&#8217;s an example of typical usage for this API: import gettext gettext.bindtextdomain(&#39;myapplication&#39;, &#39;\/path\/to\/my\/language\/directory&#39;) gettext.textdomain(&#39;myapplication&#39;) _ = gettext.gettext # ... print _(&#39;This is a translatable string.&#39;)     22.1.2. Class-based API\u00b6 The class-based API of the gettext module gives you more flexibility and greater convenience than the GNU gettext API.  It is the recommended way of localizing your Python applications and modules.  gettext defines a &#8220;translations&#8221; class which implements the parsing of GNU .mo format files, and has methods for returning either standard 8-bit strings or Unicode strings. Instances of this &#8220;translations&#8221; class can also install themselves  in the built-in namespace as the function _().   gettext.find(domain[, localedir[, languages[, all]]])\u00b6 This function implements the standard .mo file search algorithm.  It takes a domain, identical to what textdomain() takes.  Optional localedir is as in bindtextdomain()  Optional languages is a list of strings, where each string is a language code. If localedir is not given, then the default system locale directory is used. [2]  If languages is not given, then the following environment variables are searched: LANGUAGE, LC_ALL, LC_MESSAGES, and LANG.  The first one returning a non-empty value is used for the languages variable. The environment variables should contain a colon separated list of languages, which will be split on the colon to produce the expected list of language code strings. find() then expands and normalizes the languages, and then iterates through them, searching for an existing file built of these components: localedir\/language\/LC_MESSAGES\/domain.mo The first such file name that exists is returned by find(). If no such file is found, then None is returned. If all is given, it returns a list of all file names, in the order in which they appear in the languages list or the environment variables.     gettext.translation(domain[, localedir[, languages[, class_[, fallback[, codeset]]]]])\u00b6 Return a Translations instance based on the domain, localedir, and languages, which are first passed to find() to get a list of the associated .mo file paths.  Instances with identical .mo file names are cached.  The actual class instantiated is either class_ if provided, otherwise GNUTranslations.  The class&#8217;s constructor must take a single file object argument. If provided, codeset will change the charset used to encode translated strings. If multiple files are found, later files are used as fallbacks for earlier ones. To allow setting the fallback, copy.copy() is used to clone each translation object from the cache; the actual instance data is still shared with the cache. If no .mo file is found, this function raises IOError if fallback is false (which is the default), and returns a NullTranslations instance if fallback is true.  Changed in version 2.4: Added the codeset parameter.     gettext.install(domain[, localedir[, unicode[, codeset[, names]]]])\u00b6 This installs the function _() in Python&#8217;s builtins namespace, based on domain, localedir, and codeset which are passed to the function translation().  The unicode flag is passed to the resulting translation object&#8217;s install() method. For the names parameter, please see the description of the translation object&#8217;s install() method. As seen below, you usually mark the strings in your application that are candidates for translation, by wrapping them in a call to the _() function, like this: print _(&#39;This string will be translated.&#39;)   For convenience, you want the _() function to be installed in Python&#8217;s builtins namespace, so it is easily accessible in all modules of your application.  Changed in version 2.4: Added the codeset parameter.  Changed in version 2.5: Added the names parameter.    22.1.2.1. The NullTranslations class\u00b6 Translation classes are what actually implement the translation of original source file message strings to translated message strings. The base class used by all translation classes is NullTranslations; this provides the basic interface you can use to write your own specialized translation classes.  Here are the methods of NullTranslations:   class gettext.NullTranslations([fp])\u00b6 Takes an optional file object fp, which is ignored by the base class. Initializes &#8220;protected&#8221; instance variables _info and _charset which are set by derived classes, as well as _fallback, which is set through add_fallback().  It then calls self._parse(fp) if fp is not None.   _parse(fp)\u00b6 No-op&#8217;d in the base class, this method takes file object fp, and reads the data from the file, initializing its message catalog.  If you have an unsupported message catalog file format, you should override this method to parse your format.    add_fallback(fallback)\u00b6 Add fallback as the fallback object for the current translation object. A translation object should consult the fallback if it cannot provide a translation for a given message.    gettext(message)\u00b6 If a fallback has been set, forward gettext() to the fallback. Otherwise, return the translated message.  Overridden in derived classes.    lgettext(message)\u00b6 If a fallback has been set, forward lgettext() to the fallback. Otherwise, return the translated message.  Overridden in derived classes.  New in version 2.4.     ugettext(message)\u00b6 If a fallback has been set, forward ugettext() to the fallback. Otherwise, return the translated message as a Unicode string. Overridden in derived classes.    ngettext(singular, plural, n)\u00b6 If a fallback has been set, forward ngettext() to the fallback. Otherwise, return the translated message.  Overridden in derived classes.  New in version 2.3.     lngettext(singular, plural, n)\u00b6 If a fallback has been set, forward lngettext() to the fallback. Otherwise, return the translated message.  Overridden in derived classes.  New in version 2.4.     ungettext(singular, plural, n)\u00b6 If a fallback has been set, forward ungettext() to the fallback. Otherwise, return the translated message as a Unicode string. Overridden in derived classes.  New in version 2.3.     info()\u00b6 Return the &#8220;protected&#8221; _info variable.    charset()\u00b6 Return the &#8220;protected&#8221; _charset variable.    output_charset()\u00b6 Return the &#8220;protected&#8221; _output_charset variable, which defines the encoding used to return translated messages.  New in version 2.4.     set_output_charset(charset)\u00b6 Change the &#8220;protected&#8221; _output_charset variable, which defines the encoding used to return translated messages.  New in version 2.4.     install([unicode[, names]])\u00b6 If the unicode flag is false, this method installs self.gettext() into the built-in namespace, binding it to _.  If unicode is true, it binds self.ugettext() instead.  By default, unicode is false. If the names parameter is given, it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _().  Supported names are 'gettext' (bound to self.gettext() or self.ugettext() according to the unicode flag), 'ngettext' (bound to self.ngettext() or self.ungettext() according to the unicode flag), 'lgettext' and 'lngettext'. Note that this is only one way, albeit the most convenient way, to make the _() function available to your application.  Because it affects the entire application globally, and specifically the built-in namespace, localized modules should never install _(). Instead, they should use this code to make _() available to their module: import gettext t = gettext.translation(&#39;mymodule&#39;, ...) _ = t.gettext   This puts _() only in the module&#8217;s global namespace and so only affects calls within this module.  Changed in version 2.5: Added the names parameter.       22.1.2.2. The GNUTranslations class\u00b6 The gettext module provides one additional class derived from NullTranslations: GNUTranslations.  This class overrides _parse() to enable reading GNU gettext format .mo files in both big-endian and little-endian format. It also coerces both message ids and message strings to Unicode. GNUTranslations parses optional meta-data out of the translation catalog.  It is convention with GNU gettext to include meta-data as the translation for the empty string.  This meta-data is in RFC 822-style key: value pairs, and should contain the Project-Id-Version key.  If the key Content-Type is found, then the charset property is used to initialize the &#8220;protected&#8221; _charset instance variable, defaulting to None if not found.  If the charset encoding is specified, then all message ids and message strings read from the catalog are converted to Unicode using this encoding.  The ugettext() method always returns a Unicode, while the gettext() returns an encoded 8-bit string.  For the message id arguments of both methods, either Unicode strings or 8-bit strings containing only US-ASCII characters are acceptable.  Note that the Unicode version of the methods (i.e. ugettext() and ungettext()) are the recommended interface to use for internationalized Python programs. The entire set of key\/value pairs are placed into a dictionary and set as the &#8220;protected&#8221; _info instance variable. If the .mo file&#8217;s magic number is invalid, or if other problems occur while reading the file, instantiating a GNUTranslations class can raise IOError. The following methods are overridden from the base class implementation:   GNUTranslations.gettext(message)\u00b6 Look up the message id in the catalog and return the corresponding message string, as an 8-bit string encoded with the catalog&#8217;s charset encoding, if known.  If there is no entry in the catalog for the message id, and a fallback has been set, the look up is forwarded to the fallback&#8217;s gettext() method. Otherwise, the message id is returned.    GNUTranslations.lgettext(message)\u00b6 Equivalent to gettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with set_output_charset().  New in version 2.4.     GNUTranslations.ugettext(message)\u00b6 Look up the message id in the catalog and return the corresponding message string, as a Unicode string.  If there is no entry in the catalog for the message id, and a fallback has been set, the look up is forwarded to the fallback&#8217;s ugettext() method.  Otherwise, the message id is returned.    GNUTranslations.ngettext(singular, plural, n)\u00b6 Do a plural-forms lookup of a message id.  singular is used as the message id for purposes of lookup in the catalog, while n is used to determine which plural form to use.  The returned message string is an 8-bit string encoded with the catalog&#8217;s charset encoding, if known. If the message id is not found in the catalog, and a fallback is specified, the request is forwarded to the fallback&#8217;s ngettext() method.  Otherwise, when n is 1 singular is returned, and plural is returned in all other cases.  New in version 2.3.     GNUTranslations.lngettext(singular, plural, n)\u00b6 Equivalent to gettext(), but the translation is returned in the preferred system encoding, if no other encoding was explicitly set with set_output_charset().  New in version 2.4.     GNUTranslations.ungettext(singular, plural, n)\u00b6 Do a plural-forms lookup of a message id.  singular is used as the message id for purposes of lookup in the catalog, while n is used to determine which plural form to use.  The returned message string is a Unicode string. If the message id is not found in the catalog, and a fallback is specified, the request is forwarded to the fallback&#8217;s ungettext() method.  Otherwise, when n is 1 singular is returned, and plural is returned in all other cases. Here is an example: n = len(os.listdir(&#39;.&#39;)) cat = GNUTranslations(somefile) message = cat.ungettext(     &#39;There is %(num)d file in this directory&#39;,     &#39;There are %(num)d files in this directory&#39;,     n)  {&#39;num&#39;: n}    New in version 2.3.     22.1.2.3. Solaris message catalog support\u00b6 The Solaris operating system defines its own binary .mo file format, but since no documentation can be found on this format, it is not supported at this time.   22.1.2.4. The Catalog constructor\u00b6 GNOME uses a version of the gettext module by James Henstridge, but this version has a slightly different API.  Its documented usage was: import gettext cat = gettext.Catalog(domain, localedir) _ = cat.gettext print _(&#39;hello world&#39;)   For compatibility with this older module, the function Catalog() is an alias for the translation() function described above. One difference between this module and Henstridge&#8217;s: his catalog objects supported access through a mapping API, but this appears to be unused and so is not currently supported.    22.1.3. Internationalizing your programs and modules\u00b6 Internationalization (I18N) refers to the operation by which a program is made aware of multiple languages.  Localization (L10N) refers to the adaptation of your program, once internationalized, to the local language and cultural habits. In order to provide multilingual messages for your Python programs, you need to take the following steps:  prepare your program or module by specially marking translatable strings run a suite of tools over your marked files to generate raw messages catalogs create language specific translations of the message catalogs use the gettext module so that message strings are properly translated  In order to prepare your code for I18N, you need to look at all the strings in your files.  Any string that needs to be translated should be marked by wrapping it in _('...') &#8212; that is, a call to the function _().  For example: filename = &#39;mylog.txt&#39; message = _(&#39;writing a log message&#39;) fp = open(filename, &#39;w&#39;) fp.write(message) fp.close()   In this example, the string 'writing a log message' is marked as a candidate for translation, while the strings 'mylog.txt' and 'w' are not. The Python distribution comes with two tools which help you generate the message catalogs once you&#8217;ve prepared your source code.  These may or may not be available from a binary distribution, but they can be found in a source distribution, in the Tools\/i18n directory. The pygettext [3] program scans all your Python source code looking for the strings you previously marked as translatable.  It is similar to the GNU gettext program except that it understands all the intricacies of Python source code, but knows nothing about C or C++ source code.  You don&#8217;t need GNU gettext unless you&#8217;re also going to be translating C code (such as C extension modules). pygettext generates textual Uniforum-style human readable message catalog .pot files, essentially structured human readable files which contain every marked string in the source code, along with a placeholder for the translation strings. pygettext is a command line script that supports a similar command line interface as xgettext; for details on its use, run: pygettext.py --help   Copies of these .pot files are then handed over to the individual human translators who write language-specific versions for every supported natural language.  They send you back the filled in language-specific versions as a .po file.  Using the msgfmt.py [4] program (in the Tools\/i18n directory), you take the .po files from your translators and generate the machine-readable .mo binary catalog files. The .mo files are what the gettext module uses for the actual translation processing during run-time. How you use the gettext module in your code depends on whether you are internationalizing a single module or your entire application. The next two sections will discuss each case.  22.1.3.1. Localizing your module\u00b6 If you are localizing your module, you must take care not to make global changes, e.g. to the built-in namespace.  You should not use the GNU gettext API but instead the class-based API. Let&#8217;s say your module is called &#8220;spam&#8221; and the module&#8217;s various natural language translation .mo files reside in \/usr\/share\/locale in GNU gettext format.  Here&#8217;s what you would put at the top of your module: import gettext t = gettext.translation(&#39;spam&#39;, &#39;\/usr\/share\/locale&#39;) _ = t.lgettext   If your translators were providing you with Unicode strings in their .po files, you&#8217;d instead do: import gettext t = gettext.translation(&#39;spam&#39;, &#39;\/usr\/share\/locale&#39;) _ = t.ugettext     22.1.3.2. Localizing your application\u00b6 If you are localizing your application, you can install the _() function globally into the built-in namespace, usually in the main driver file of your application.  This will let all your application-specific files just use _('...') without having to explicitly install it in each file. In the simple case then, you need only add the following bit of code to the main driver file of your application: import gettext gettext.install(&#39;myapplication&#39;)   If you need to set the locale directory or the unicode flag, you can pass these into the install() function: import gettext gettext.install(&#39;myapplication&#39;, &#39;\/usr\/share\/locale&#39;, unicode=1)     22.1.3.3. Changing languages on the fly\u00b6 If your program needs to support many languages at the same time, you may want to create multiple translation instances and then switch between them explicitly, like so: import gettext  lang1 = gettext.translation(&#39;myapplication&#39;, languages=[&#39;en&#39;]) lang2 = gettext.translation(&#39;myapplication&#39;, languages=[&#39;fr&#39;]) lang3 = gettext.translation(&#39;myapplication&#39;, languages=[&#39;de&#39;])  # start by using language1 lang1.install()  # ... time goes by, user selects language 2 lang2.install()  # ... more time goes by, user selects language 3 lang3.install()     22.1.3.4. Deferred translations\u00b6 In most coding situations, strings are translated where they are coded. Occasionally however, you need to mark strings for translation, but defer actual translation until later.  A classic example is: animals = [&#39;mollusk&#39;,            &#39;albatross&#39;,            &#39;rat&#39;,            &#39;penguin&#39;,            &#39;python&#39;, ] # ... for a in animals:     print a   Here, you want to mark the strings in the animals list as being translatable, but you don&#8217;t actually want to translate them until they are printed. Here is one way you can handle this situation: def _(message): return message  animals = [_(&#39;mollusk&#39;),            _(&#39;albatross&#39;),            _(&#39;rat&#39;),            _(&#39;penguin&#39;),            _(&#39;python&#39;), ]  del _  # ... for a in animals:     print _(a)   This works because the dummy definition of _() simply returns the string unchanged.  And this dummy definition will temporarily override any definition of _() in the built-in namespace (until the del command). Take care, though if you have a previous definition of _() in the local namespace. Note that the second use of _() will not identify &#8220;a&#8221; as being translatable to the pygettext program, since it is not a string. Another way to handle this is with the following example: def N_(message): return message  animals = [N_(&#39;mollusk&#39;),            N_(&#39;albatross&#39;),            N_(&#39;rat&#39;),            N_(&#39;penguin&#39;),            N_(&#39;python&#39;), ]  # ... for a in animals:     print _(a)   In this case, you are marking translatable strings with the function N_(), [5] which won&#8217;t conflict with any definition of _().  However, you will need to teach your message extraction program to look for translatable strings marked with N_(). pygettext and xpot both support this through the use of command line switches.   22.1.3.5. gettext() vs. lgettext()\u00b6 In Python 2.4 the lgettext() family of functions were introduced. The intention of these functions is to provide an alternative which is more compliant with the current implementation of GNU gettext. Unlike gettext(), which returns strings encoded with the same codeset used in the translation file, lgettext() will return strings encoded with the preferred system encoding, as returned by locale.getpreferredencoding(). Also notice that Python 2.4 introduces new functions to explicitly choose the codeset used in translated strings. If a codeset is explicitly set, even lgettext() will return translated strings in the requested codeset, as would be expected in the GNU gettext implementation.    22.1.4. Acknowledgements\u00b6 The following people contributed code, feedback, design suggestions, previous implementations, and valuable experience to the creation of this module:  Peter Funk James Henstridge Juan David Ib\u00e1\u00f1ez Palomar Marc-Andr\u00e9 Lemburg Martin von L\u00f6wis Fran\u00e7ois Pinard Barry Warsaw Gustavo Niemeyer  Footnotes    [1]The default locale directory is system dependent; for example, on RedHat Linux it is \/usr\/share\/locale, but on Solaris it is \/usr\/lib\/locale. The gettext module does not try to support these system dependent defaults; instead its default is sys.prefix\/share\/locale. For this reason, it is always best to call bindtextdomain() with an explicit absolute path at the start of your application.      [2]See the footnote for bindtextdomain() above.      [3]Fran\u00e7ois Pinard has written a program called xpot which does a similar job.  It is available as part of his po-utils package.      [4]msgfmt.py is binary compatible with GNU msgfmt except that it provides a simpler, all-Python implementation.  With this and pygettext.py, you generally won&#8217;t need to install the GNU gettext package to internationalize your Python applications.      [5]The choice of N_() here is totally arbitrary; it could have just as easily been MarkThisStringForTranslation()."},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.bind_textdomain_codeset","title":"gettext.bind_textdomain_codeset","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.bindtextdomain","title":"gettext.bindtextdomain","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.dgettext","title":"gettext.dgettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.dngettext","title":"gettext.dngettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.find","title":"gettext.find","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.gettext","title":"gettext.gettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.GNUTranslations.gettext","title":"gettext.GNUTranslations.gettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.GNUTranslations.lgettext","title":"gettext.GNUTranslations.lgettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.GNUTranslations.lngettext","title":"gettext.GNUTranslations.lngettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.GNUTranslations.ngettext","title":"gettext.GNUTranslations.ngettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.GNUTranslations.ugettext","title":"gettext.GNUTranslations.ugettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.GNUTranslations.ungettext","title":"gettext.GNUTranslations.ungettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.install","title":"gettext.install","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.ldgettext","title":"gettext.ldgettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.ldngettext","title":"gettext.ldngettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.lgettext","title":"gettext.lgettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.lngettext","title":"gettext.lngettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.ngettext","title":"gettext.ngettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations","title":"gettext.NullTranslations","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations._parse","title":"gettext.NullTranslations._parse","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.add_fallback","title":"gettext.NullTranslations.add_fallback","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.charset","title":"gettext.NullTranslations.charset","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.gettext","title":"gettext.NullTranslations.gettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.info","title":"gettext.NullTranslations.info","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.install","title":"gettext.NullTranslations.install","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.lgettext","title":"gettext.NullTranslations.lgettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.lngettext","title":"gettext.NullTranslations.lngettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.ngettext","title":"gettext.NullTranslations.ngettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.output_charset","title":"gettext.NullTranslations.output_charset","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.set_output_charset","title":"gettext.NullTranslations.set_output_charset","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.ugettext","title":"gettext.NullTranslations.ugettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.NullTranslations.ungettext","title":"gettext.NullTranslations.ungettext","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.textdomain","title":"gettext.textdomain","description":""},{"url":"http:\/\/docs.python.org\/library\/gettext.html#gettext.translation","title":"gettext.translation","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html","title":"ossaudiodev","description":null},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.open","title":"ossaudiodev.open","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.openmixer","title":"ossaudiodev.openmixer","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.bufsize","title":"ossaudiodev.oss_audio_device.bufsize","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.channels","title":"ossaudiodev.oss_audio_device.channels","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.close","title":"ossaudiodev.oss_audio_device.close","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.fileno","title":"ossaudiodev.oss_audio_device.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.getfmts","title":"ossaudiodev.oss_audio_device.getfmts","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.nonblock","title":"ossaudiodev.oss_audio_device.nonblock","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.obufcount","title":"ossaudiodev.oss_audio_device.obufcount","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.obuffree","title":"ossaudiodev.oss_audio_device.obuffree","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.post","title":"ossaudiodev.oss_audio_device.post","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.read","title":"ossaudiodev.oss_audio_device.read","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.reset","title":"ossaudiodev.oss_audio_device.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.setfmt","title":"ossaudiodev.oss_audio_device.setfmt","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.setparameters","title":"ossaudiodev.oss_audio_device.setparameters","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.speed","title":"ossaudiodev.oss_audio_device.speed","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.sync","title":"ossaudiodev.oss_audio_device.sync","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.write","title":"ossaudiodev.oss_audio_device.write","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_audio_device.writeall","title":"ossaudiodev.oss_audio_device.writeall","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.close","title":"ossaudiodev.oss_mixer_device.close","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.controls","title":"ossaudiodev.oss_mixer_device.controls","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.fileno","title":"ossaudiodev.oss_mixer_device.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.get","title":"ossaudiodev.oss_mixer_device.get","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.get_recsrc","title":"ossaudiodev.oss_mixer_device.get_recsrc","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.reccontrols","title":"ossaudiodev.oss_mixer_device.reccontrols","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.set","title":"ossaudiodev.oss_mixer_device.set","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.set_recsrc","title":"ossaudiodev.oss_mixer_device.set_recsrc","description":""},{"url":"http:\/\/docs.python.org\/library\/ossaudiodev.html#ossaudiodev.oss_mixer_device.stereocontrols","title":"ossaudiodev.oss_mixer_device.stereocontrols","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html","title":"cmd","description":"23.1. cmd &#8212; Support for line-oriented command interpreters\u00b6 Source code: Lib\/cmd.py  The Cmd class provides a simple framework for writing line-oriented command interpreters.  These are often useful for test harnesses, administrative tools, and prototypes that will later be wrapped in a more sophisticated interface.   class cmd.Cmd([completekey[, stdin[, stdout]]])\u00b6 A Cmd instance or subclass instance is a line-oriented interpreter framework.  There is no good reason to instantiate Cmd itself; rather, it&#8217;s useful as a superclass of an interpreter class you define yourself in order to inherit Cmd&#8216;s methods and encapsulate action methods. The optional argument completekey is the readline name of a completion key; it defaults to Tab. If completekey is not None and readline is available, command completion is done automatically. The optional arguments stdin and stdout specify the  input and output file objects that the Cmd instance or subclass  instance will use for input and output. If not specified, they will default to sys.stdin and sys.stdout. If you want a given stdin to be used, make sure to set the instance&#8217;s use_rawinput attribute to False, otherwise stdin will be ignored.  Changed in version 2.3: The stdin and stdout parameters were added.    23.1.1. Cmd Objects\u00b6 A Cmd instance has the following methods:   Cmd.cmdloop([intro])\u00b6 Repeatedly issue a prompt, accept input, parse an initial prefix off the received input, and dispatch to action methods, passing them the remainder of the line as argument. The optional argument is a banner or intro string to be issued before the first prompt (this overrides the intro class attribute). If the readline module is loaded, input will automatically inherit bash-like history-list editing (e.g. Control-P scrolls back to the last command, Control-N forward to the next one, Control-F moves the cursor to the right non-destructively, Control-B moves the cursor to the left non-destructively, etc.). An end-of-file on input is passed back as the string 'EOF'. An interpreter instance will recognize a command name foo if and only if it has a method do_foo().  As a special case, a line beginning with the character '?' is dispatched to the method do_help().  As another special case, a line beginning with the character '!' is dispatched to the method do_shell() (if such a method is defined). This method will return when the postcmd() method returns a true value. The stop argument to postcmd() is the return value from the command&#8217;s corresponding do_*() method. If completion is enabled, completing commands will be done automatically, and completing of commands args is done by calling complete_foo() with arguments text, line, begidx, and endidx.  text is the string prefix we are attempting to match: all returned matches must begin with it. line is the current input line with leading whitespace removed, begidx and endidx are the beginning and ending indexes of the prefix text, which could be used to provide different completion depending upon which position the argument is in. All subclasses of Cmd inherit a predefined do_help().  This method, called with an argument 'bar', invokes the corresponding method help_bar(), and if that is not present, prints the docstring of do_bar(), if available.  With no argument, do_help() lists all available help topics (that is, all commands with corresponding help_*() methods or commands that have docstrings), and also lists any undocumented commands.     Cmd.onecmd(str)\u00b6 Interpret the argument as though it had been typed in response to the prompt. This may be overridden, but should not normally need to be; see the precmd() and postcmd() methods for useful execution hooks.  The return value is a flag indicating whether interpretation of commands by the interpreter should stop.  If there is a do_*() method for the command str, the return value of that method is returned, otherwise the return value from the default() method is returned.    Cmd.emptyline()\u00b6 Method called when an empty line is entered in response to the prompt. If this method is not overridden, it repeats the last nonempty command entered.    Cmd.default(line)\u00b6 Method called on an input line when the command prefix is not recognized. If this method is not overridden, it prints an error message and returns.    Cmd.completedefault(text, line, begidx, endidx)\u00b6 Method called to complete an input line when no command-specific complete_*() method is available.  By default, it returns an empty list.    Cmd.precmd(line)\u00b6 Hook method executed just before the command line line is interpreted, but after the input prompt is generated and issued.  This method is a stub in Cmd; it exists to be overridden by subclasses.  The return value is used as the command which will be executed by the onecmd() method; the precmd() implementation may re-write the command or simply return line unchanged.    Cmd.postcmd(stop, line)\u00b6 Hook method executed just after a command dispatch is finished.  This method is a stub in Cmd; it exists to be overridden by subclasses.  line is the command line which was executed, and stop is a flag which indicates whether execution will be terminated after the call to postcmd(); this will be the return value of the onecmd() method.  The return value of this method will be used as the new value for the internal flag which corresponds to stop; returning false will cause interpretation to continue.    Cmd.preloop()\u00b6 Hook method executed once when cmdloop() is called.  This method is a stub in Cmd; it exists to be overridden by subclasses.    Cmd.postloop()\u00b6 Hook method executed once when cmdloop() is about to return. This method is a stub in Cmd; it exists to be overridden by subclasses.  Instances of Cmd subclasses have some public instance variables:   Cmd.prompt\u00b6 The prompt issued to solicit input.    Cmd.identchars\u00b6 The string of characters accepted for the command prefix.    Cmd.lastcmd\u00b6 The last nonempty command prefix seen.    Cmd.intro\u00b6 A string to issue as an intro or banner.  May be overridden by giving the cmdloop() method an argument.    Cmd.doc_header\u00b6 The header to issue if the help output has a section for documented commands.    Cmd.misc_header\u00b6 The header to issue if the help output has a section for miscellaneous  help topics (that is, there are help_*() methods without corresponding do_*() methods).    Cmd.undoc_header\u00b6 The header to issue if the help output has a section for undocumented  commands (that is, there are do_*() methods without corresponding help_*() methods).    Cmd.ruler\u00b6 The character used to draw separator lines under the help-message headers.  If empty, no ruler line is drawn.  It defaults to '='.    Cmd.use_rawinput\u00b6 A flag, defaulting to true.  If true, cmdloop() uses raw_input() to display a prompt and read the next command; if false, sys.stdout.write() and sys.stdin.readline() are used. (This means that by importing readline, on systems that support it, the interpreter will automatically support Emacs-like line editing  and command-history keystrokes.)"},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd","title":"cmd.Cmd","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.cmdloop","title":"cmd.Cmd.cmdloop","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.completedefault","title":"cmd.Cmd.completedefault","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.default","title":"cmd.Cmd.default","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.emptyline","title":"cmd.Cmd.emptyline","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.onecmd","title":"cmd.Cmd.onecmd","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.postcmd","title":"cmd.Cmd.postcmd","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.postloop","title":"cmd.Cmd.postloop","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.precmd","title":"cmd.Cmd.precmd","description":""},{"url":"http:\/\/docs.python.org\/library\/cmd.html#cmd.Cmd.preloop","title":"cmd.Cmd.preloop","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html","title":"locale","description":null},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.atof","title":"locale.atof","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.atoi","title":"locale.atoi","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.currency","title":"locale.currency","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.format","title":"locale.format","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.format_string","title":"locale.format_string","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.getdefaultlocale","title":"locale.getdefaultlocale","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.getlocale","title":"locale.getlocale","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.getpreferredencoding","title":"locale.getpreferredencoding","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.localeconv","title":"locale.localeconv","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.nl_langinfo","title":"locale.nl_langinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.normalize","title":"locale.normalize","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.resetlocale","title":"locale.resetlocale","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.setlocale","title":"locale.setlocale","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.str","title":"locale.str","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.strcoll","title":"locale.strcoll","description":""},{"url":"http:\/\/docs.python.org\/library\/locale.html#locale.strxfrm","title":"locale.strxfrm","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html","title":"shlex","description":"23.2. shlex &#8212; Simple lexical analysis\u00b6  New in version 1.5.2. Source code: Lib\/shlex.py  The shlex class makes it easy to write lexical analyzers for simple syntaxes resembling that of the Unix shell.  This will often be useful for writing minilanguages, (for example, in run control files for Python applications) or for parsing quoted strings. Prior to Python 2.7.3, this module did not support Unicode input. The shlex module defines the following functions:   shlex.split(s[, comments[, posix]])\u00b6 Split the string s using shell-like syntax. If comments is False (the default), the parsing of comments in the given string will be disabled (setting the commenters attribute of the shlex instance to the empty string).  This function operates in POSIX mode by default, but uses non-POSIX mode if the posix argument is false.  New in version 2.3.  Changed in version 2.6: Added the posix parameter.  Note Since the split() function instantiates a shlex instance, passing None for s will read the string to split from standard input.    The shlex module defines the following class:   class shlex.shlex([instream[, infile[, posix]]])\u00b6 A shlex instance or subclass instance is a lexical analyzer object. The initialization argument, if present, specifies where to read characters from. It must be a file-\/stream-like object with read() and readline() methods, or a string (strings are accepted since Python 2.3). If no argument is given, input will be taken from sys.stdin.  The second optional argument is a filename string, which sets the initial value of the infile attribute.  If the instream argument is omitted or equal to sys.stdin, this second argument defaults to &#8220;stdin&#8221;.  The posix argument was introduced in Python 2.3, and defines the operational mode.  When posix is not true (default), the shlex instance will operate in compatibility mode.  When operating in POSIX mode, shlex will try to be as close as possible to the POSIX shell parsing rules.   See also  Module ConfigParser Parser for configuration files similar to the Windows .ini files.    23.2.1. shlex Objects\u00b6 A shlex instance has the following methods:   shlex.get_token()\u00b6 Return a token.  If tokens have been stacked using push_token(), pop a token off the stack.  Otherwise, read one from the input stream.  If reading encounters an immediate end-of-file, self.eof is returned (the empty string ('') in non-POSIX mode, and None in POSIX mode).    shlex.push_token(str)\u00b6 Push the argument onto the token stack.    shlex.read_token()\u00b6 Read a raw token.  Ignore the pushback stack, and do not interpret source requests.  (This is not ordinarily a useful entry point, and is documented here only for the sake of completeness.)    shlex.sourcehook(filename)\u00b6 When shlex detects a source request (see source below) this method is given the following token as argument, and expected to return a tuple consisting of a filename and an open file-like object. Normally, this method first strips any quotes off the argument.  If the result is an absolute pathname, or there was no previous source request in effect, or the previous source was a stream (such as sys.stdin), the result is left alone.  Otherwise, if the result is a relative pathname, the directory part of the name of the file immediately before it on the source inclusion stack is prepended (this behavior is like the way the C preprocessor handles #include \"file.h\"). The result of the manipulations is treated as a filename, and returned as the first component of the tuple, with open() called on it to yield the second component. (Note: this is the reverse of the order of arguments in instance initialization!) This hook is exposed so that you can use it to implement directory search paths, addition of file extensions, and other namespace hacks. There is no corresponding &#8216;close&#8217; hook, but a shlex instance will call the close() method of the sourced input stream when it returns EOF. For more explicit control of source stacking, use the push_source() and pop_source() methods.     shlex.push_source(stream[, filename])\u00b6 Push an input source stream onto the input stack.  If the filename argument is specified it will later be available for use in error messages.  This is the same method used internally by the sourcehook() method.  New in version 2.1.     shlex.pop_source()\u00b6 Pop the last-pushed input source from the input stack. This is the same method used internally when the lexer reaches EOF on a stacked input stream.  New in version 2.1.     shlex.error_leader([file[, line]])\u00b6 This method generates an error message leader in the format of a Unix C compiler error label; the format is '\"%s\", line %d: ', where the %s is replaced with the name of the current source file and the %d with the current input line number (the optional arguments can be used to override these). This convenience is provided to encourage shlex users to generate error messages in the standard, parseable format understood by Emacs and other Unix tools.   Instances of shlex subclasses have some public instance variables which either control lexical analysis or can be used for debugging:   shlex.commenters\u00b6 The string of characters that are recognized as comment beginners. All characters from the comment beginner to end of line are ignored. Includes just '#' by default.    shlex.wordchars\u00b6 The string of characters that will accumulate into multi-character tokens.  By default, includes all ASCII alphanumerics and underscore.    shlex.whitespace\u00b6 Characters that will be considered whitespace and skipped.  Whitespace bounds tokens.  By default, includes space, tab, linefeed and carriage-return.    shlex.escape\u00b6 Characters that will be considered as escape. This will be only used in POSIX mode, and includes just '\\' by default.  New in version 2.3.     shlex.quotes\u00b6 Characters that will be considered string quotes.  The token accumulates until the same quote is encountered again (thus, different quote types protect each other as in the shell.)  By default, includes ASCII single and double quotes.    shlex.escapedquotes\u00b6 Characters in quotes that will interpret escape characters defined in escape.  This is only used in POSIX mode, and includes just '\"' by default.  New in version 2.3.     shlex.whitespace_split\u00b6 If True, tokens will only be split in whitespaces. This is useful, for example, for parsing command lines with shlex, getting tokens in a similar way to shell arguments.  New in version 2.3.     shlex.infile\u00b6 The name of the current input file, as initially set at class instantiation time or stacked by later source requests.  It may be useful to examine this when constructing error messages.    shlex.instream\u00b6 The input stream from which this shlex instance is reading characters.    shlex.source\u00b6 This attribute is None by default.  If you assign a string to it, that string will be recognized as a lexical-level inclusion request similar to the source keyword in various shells.  That is, the immediately following token will opened as a filename and input taken from that stream until EOF, at which point the close() method of that stream will be called and the input source will again become the original input stream. Source requests may be stacked any number of levels deep.    shlex.debug\u00b6 If this attribute is numeric and 1 or more, a shlex instance will print verbose progress output on its behavior.  If you need to use this, you can read the module source code to learn the details.    shlex.lineno\u00b6 Source line number (count of newlines seen so far plus one).    shlex.token\u00b6 The token buffer.  It may be useful to examine this when catching exceptions.    shlex.eof\u00b6 Token used to determine end of file. This will be set to the empty string (''), in non-POSIX mode, and to None in POSIX mode.  New in version 2.3.     23.2.2. Parsing Rules\u00b6 When operating in non-POSIX mode, shlex will try to obey to the following rules.  Quote characters are not recognized within words (Do\"Not\"Separate is parsed as the single word Do\"Not\"Separate); Escape characters are not recognized; Enclosing characters in quotes preserve the literal value of all characters within the quotes; Closing quotes separate words (\"Do\"Separate is parsed as \"Do\" and Separate); If whitespace_split is False, any character not declared to be a word character, whitespace, or a quote will be returned as a single-character token. If it is True, shlex will only split words in whitespaces; EOF is signaled with an empty string (''); It&#8217;s not possible to parse empty strings, even if quoted.  When operating in POSIX mode, shlex will try to obey to the following parsing rules.  Quotes are stripped out, and do not separate words (\"Do\"Not\"Separate\" is parsed as the single word DoNotSeparate); Non-quoted escape characters (e.g. '\\') preserve the literal value of the next character that follows; Enclosing characters in quotes which are not part of escapedquotes (e.g. \"'\") preserve the literal value of all characters within the quotes; Enclosing characters in quotes which are part of escapedquotes (e.g. '\"') preserves the literal value of all characters within the quotes, with the exception of the characters mentioned in escape. The escape characters retain its special meaning only when followed by the quote in use, or the escape character itself. Otherwise the escape character will be considered a normal character. EOF is signaled with a None value; Quoted empty strings ('') are allowed;"},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.shlex","title":"shlex.shlex","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.shlex.error_leader","title":"shlex.shlex.error_leader","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.shlex.get_token","title":"shlex.shlex.get_token","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.shlex.pop_source","title":"shlex.shlex.pop_source","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.shlex.push_source","title":"shlex.shlex.push_source","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.shlex.push_token","title":"shlex.shlex.push_token","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.shlex.read_token","title":"shlex.shlex.read_token","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.shlex.sourcehook","title":"shlex.shlex.sourcehook","description":""},{"url":"http:\/\/docs.python.org\/library\/shlex.html#shlex.split","title":"shlex.split","description":""},{"url":"http:\/\/docs.python.org\/library\/scrolledtext.html","title":"ScrolledText","description":"24.4. ScrolledText &#8212; Scrolled Text Widget\u00b6 Platforms: Tk The ScrolledText module provides a class of the same name which implements a basic text widget which has a vertical scroll bar configured to do the &#8220;right thing.&#8221;  Using the ScrolledText class is a lot easier than setting up a text widget and scroll bar directly.  The constructor is the same as that of the Tkinter.Text class.  Note ScrolledText has been renamed to tkinter.scrolledtext in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.  The text widget and scrollbar are packed together in a Frame, and the methods of the Grid and Pack geometry managers are acquired from the Frame object.  This allows the ScrolledText widget to be used directly to achieve most normal geometry management behavior. Should more specific control be necessary, the following attributes are available:   ScrolledText.frame\u00b6 The frame which surrounds the text and scroll bar widgets.    ScrolledText.vbar\u00b6 The scroll bar widget."},{"url":"http:\/\/docs.python.org\/library\/tkinter.html","title":"Tkinter","description":"24.1. Tkinter &#8212; Python interface to Tcl\/Tk\u00b6 The Tkinter module (&#8220;Tk interface&#8221;) is the standard Python interface to the Tk GUI toolkit.  Both Tk and Tkinter are available on most Unix platforms, as well as on Windows systems.  (Tk itself is not part of Python; it is maintained at ActiveState.)  Note Tkinter has been renamed to tkinter in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.   See also  Python Tkinter Resources The Python Tkinter Topic Guide provides a great deal of information on using Tk from Python and links to other sources of information on Tk. An Introduction to Tkinter Fredrik Lundh&#8217;s on-line reference material. Tkinter reference: a GUI for Python On-line reference material. Python and Tkinter Programming The book by John Grayson (ISBN 1-884777-81-3).    24.1.1. Tkinter Modules\u00b6 Most of the time, the Tkinter module is all you really need, but a number of additional modules are available as well.  The Tk interface is located in a binary module named _tkinter. This module contains the low-level interface to Tk, and should never be used directly by application programmers. It is usually a shared library (or DLL), but might in some cases be statically linked with the Python interpreter. In addition to the Tk interface module, Tkinter includes a number of Python modules. The two most important modules are the Tkinter module itself, and a module called Tkconstants. The former automatically imports the latter, so to use Tkinter, all you need to do is to import one module: import Tkinter   Or, more often: from Tkinter import *     class Tkinter.Tk(screenName=None, baseName=None, className='Tk', useTk=1)\u00b6 The Tk class is instantiated without arguments. This creates a toplevel widget of Tk which usually is the main window of an application. Each instance has its own associated Tcl interpreter.  Changed in version 2.4: The useTk parameter was added.     Tkinter.Tcl(screenName=None, baseName=None, className='Tk', useTk=0)\u00b6 The Tcl() function is a factory function which creates an object much like that created by the Tk class, except that it does not initialize the Tk subsystem.  This is most often useful when driving the Tcl interpreter in an environment where one doesn&#8217;t want to create extraneous toplevel windows, or where one cannot (such as Unix\/Linux systems without an X server).  An object created by the Tcl() object can have a Toplevel window created (and the Tk subsystem initialized) by calling its loadtk() method.  New in version 2.4.   Other modules that provide Tk support include:  ScrolledText Text widget with a vertical scroll bar built in. tkColorChooser Dialog to let the user choose a color. tkCommonDialog Base class for the dialogs defined in the other modules listed here. tkFileDialog Common dialogs to allow the user to specify a file to open or save. tkFont Utilities to help work with fonts. tkMessageBox Access to standard Tk dialog boxes. tkSimpleDialog Basic dialogs and convenience functions. Tkdnd Drag-and-drop support for Tkinter. This is experimental and should become deprecated when it is replaced  with the Tk DND. turtle Turtle graphics in a Tk window.  These have been renamed as well in Python 3.0; they were all made submodules of the new tkinter package.   24.1.2. Tkinter Life Preserver\u00b6 This section is not designed to be an exhaustive tutorial on either Tk or Tkinter.  Rather, it is intended as a stop gap, providing some introductory orientation on the system. Credits:  Tkinter was written by Steen Lumholt and Guido van Rossum. Tk was written by John Ousterhout while at Berkeley. This Life Preserver was written by Matt Conway at the University of Virginia. The html rendering, and some liberal editing, was produced from a FrameMaker version by Ken Manheimer. Fredrik Lundh elaborated and revised the class interface descriptions, to get them current with Tk 4.2. Mike Clarkson converted the documentation to LaTeX, and compiled the  User Interface chapter of the reference manual.   24.1.2.1. How To Use This Section\u00b6 This section is designed in two parts: the first half (roughly) covers background material, while the second half can be taken to the keyboard as a handy reference. When trying to answer questions of the form &#8220;how do I do blah&#8221;, it is often best to find out how to do&#8221;blah&#8221; in straight Tk, and then convert this back into the corresponding Tkinter call. Python programmers can often guess at the correct Python command by looking at the Tk documentation. This means that in order to use Tkinter, you will have to know a little bit about Tk. This document can&#8217;t fulfill that role, so the best we can do is point you to the best documentation that exists. Here are some hints:  The authors strongly suggest getting a copy of the Tk man pages. Specifically, the man pages in the mann directory are most useful. The man3 man pages describe the C interface to the Tk library and thus are not especially helpful for script writers. Addison-Wesley publishes a book called Tcl and the Tk Toolkit by John Ousterhout (ISBN 0-201-63337-X) which is a good introduction to Tcl and Tk for the novice.  The book is not exhaustive, and for many details it defers to the man pages. Tkinter.py is a last resort for most, but can be a good place to go when nothing else makes sense.   See also  ActiveState Tcl Home Page The Tk\/Tcl development is largely taking place at ActiveState. Tcl and the Tk Toolkit The book by John Ousterhout, the inventor of Tcl . Practical Programming in Tcl and Tk Brent Welch&#8217;s encyclopedic book.     24.1.2.2. A Simple Hello World Program\u00b6 from Tkinter import *  class Application(Frame):     def say_hi(self):         print \"hi there, everyone!\"      def createWidgets(self):         self.QUIT = Button(self)         self.QUIT[\"text\"] = \"QUIT\"         self.QUIT[\"fg\"]   = \"red\"         self.QUIT[\"command\"] =  self.quit          self.QUIT.pack({\"side\": \"left\"})          self.hi_there = Button(self)         self.hi_there[\"text\"] = \"Hello\",         self.hi_there[\"command\"] = self.say_hi          self.hi_there.pack({\"side\": \"left\"})      def __init__(self, master=None):         Frame.__init__(self, master)         self.pack()         self.createWidgets()  root = Tk() app = Application(master=root) app.mainloop() root.destroy()      24.1.3. A (Very) Quick Look at Tcl\/Tk\u00b6 The class hierarchy looks complicated, but in actual practice, application programmers almost always refer to the classes at the very bottom of the hierarchy. Notes:  These classes are provided for the purposes of organizing certain functions under one namespace. They aren&#8217;t meant to be instantiated independently. The Tk class is meant to be instantiated only once in an application. Application programmers need not instantiate one explicitly, the system creates one whenever any of the other classes are instantiated. The Widget class is not meant to be instantiated, it is meant only for subclassing to make &#8220;real&#8221; widgets (in C++, this is called an &#8216;abstract class&#8217;).  To make use of this reference material, there will be times when you will need to know how to read short passages of Tk and how to identify the various parts of a Tk command.   (See section Mapping Basic Tk into Tkinter for the Tkinter equivalents of what&#8217;s below.) Tk scripts are Tcl programs.  Like all Tcl programs, Tk scripts are just lists of tokens separated by spaces.  A Tk widget is just its class, the options that help configure it, and the actions that make it do useful things. To make a widget in Tk, the command is always of the form: classCommand newPathname options   classCommand denotes which kind of widget to make (a button, a label, a menu...) newPathname is the new name for this widget.  All names in Tk must be unique.  To help enforce this, widgets in Tk are named with pathnames, just like files in a file system.  The top level widget, the root, is called . (period) and children are delimited by more periods.  For example, .myApp.controlPanel.okButton might be the name of a widget. options configure the widget&#8217;s appearance and in some cases, its behavior.  The options come in the form of a list of flags and values. Flags are preceded by a &#8216;-&#8216;, like Unix shell command flags, and values are put in quotes if they are more than one word.  For example: button   .fred   -fg red -text \"hi there\"    ^       ^     \\_____________________\/    |       |                |  class    new            options command  widget  (-opt val -opt val ...)  Once created, the pathname to the widget becomes a new command.  This new widget command is the programmer&#8217;s handle for getting the new widget to perform some action.  In C, you&#8217;d express this as someAction(fred, someOptions), in C++, you would express this as fred.someAction(someOptions), and in Tk, you say: .fred someAction someOptions  Note that the object name, .fred, starts with a dot. As you&#8217;d expect, the legal values for someAction will depend on the widget&#8217;s class: .fred disable works if fred is a button (fred gets greyed out), but does not work if fred is a label (disabling of labels is not supported in Tk). The legal values of someOptions is action dependent.  Some actions, like disable, require no arguments, others, like a text-entry box&#8217;s delete command, would need arguments to specify what range of text to delete.   24.1.4. Mapping Basic Tk into Tkinter\u00b6 Class commands in Tk correspond to class constructors in Tkinter. button .fred                =====>  fred = Button()  The master of an object is implicit in the new name given to it at creation time.  In Tkinter, masters are specified explicitly. button .panel.fred          =====>  fred = Button(panel)  The configuration options in Tk are given in lists of hyphened tags followed by values.  In Tkinter, options are specified as keyword-arguments in the instance constructor, and keyword-args for configure calls or as instance indices, in dictionary style, for established instances.  See section Setting Options on setting options. button .fred -fg red        =====>  fred = Button(panel, fg = \"red\") .fred configure -fg red     =====>  fred[\"fg\"] = red                             OR ==>  fred.config(fg = \"red\")  In Tk, to perform an action on a widget, use the widget name as a command, and follow it with an action name, possibly with arguments (options).  In Tkinter, you call methods on the class instance to invoke actions on the widget.  The actions (methods) that a given widget can perform are listed in the Tkinter.py module. .fred invoke                =====>  fred.invoke()  To give a widget to the packer (geometry manager), you call pack with optional arguments.  In Tkinter, the Pack class holds all this functionality, and the various forms of the pack command are implemented as methods.  All widgets in Tkinter are subclassed from the Packer, and so inherit all the packing methods. See the Tix module documentation for additional information on the Form geometry manager. pack .fred -side left       =====>  fred.pack(side = \"left\")    24.1.5. How Tk and Tkinter are Related\u00b6 From the top down:  Your App Here (Python) A Python application makes a Tkinter call. Tkinter (Python Module) This call (say, for example, creating a button widget), is implemented in the Tkinter module, which is written in Python.  This Python function will parse the commands and the arguments and convert them into a form that makes them look as if they had come from a Tk script instead of a Python script. tkinter (C) These commands and their arguments will be passed to a C function in the tkinter - note the lowercase - extension module. Tk Widgets (C and Tcl) This C function is able to make calls into other C modules, including the C functions that make up the Tk library.  Tk is implemented in C and some Tcl. The Tcl part of the Tk widgets is used to bind certain default behaviors to widgets, and is executed once at the point where the Python Tkinter module is imported. (The user never sees this stage). Tk (C) The Tk part of the Tk Widgets implement the final mapping to ... Xlib (C) the Xlib library to draw graphics on the screen.    24.1.6. Handy Reference\u00b6  24.1.6.1. Setting Options\u00b6 Options control things like the color and border width of a widget. Options can be set in three ways:  At object creation time, using keyword arguments fred = Button(self, fg = \"red\", bg = \"blue\")    After object creation, treating the option name like a dictionary index fred[\"fg\"] = \"red\" fred[\"bg\"] = \"blue\"    Use the config() method to update multiple attrs subsequent to object creation fred.config(fg = \"red\", bg = \"blue\")     For a complete explanation of a given option and its behavior, see the Tk man pages for the widget in question. Note that the man pages list &#8220;STANDARD OPTIONS&#8221; and &#8220;WIDGET SPECIFIC OPTIONS&#8221; for each widget.  The former is a list of options that are common to many widgets, the latter are the options that are idiosyncratic to that particular widget.  The Standard Options are documented on the options(3) man page. No distinction between standard and widget-specific options is made in this document.  Some options don&#8217;t apply to some kinds of widgets. Whether a given widget responds to a particular option depends on the class of the widget; buttons have a command option, labels do not. The options supported by a given widget are listed in that widget&#8217;s man page, or can be queried at runtime by calling the config() method without arguments, or by calling the keys() method on that widget.  The return value of these calls is a dictionary whose key is the name of the option as a string (for example, 'relief') and whose values are 5-tuples. Some options, like bg are synonyms for common options with long names (bg is shorthand for &#8220;background&#8221;). Passing the config() method the name of a shorthand option will return a 2-tuple, not 5-tuple. The 2-tuple passed back will contain the name of the synonym and the &#8220;real&#8221; option (such as ('bg', 'background')).        Index Meaning Example    0 option name 'relief'  1 option name for database lookup 'relief'  2 option class for database lookup 'Relief'  3 default value 'raised'  4 current value 'groove'    Example: >>> print fred.config() {&#39;relief&#39; : (&#39;relief&#39;, &#39;relief&#39;, &#39;Relief&#39;, &#39;raised&#39;, &#39;groove&#39;)}   Of course, the dictionary printed will include all the options available and their values.  This is meant only as an example.   24.1.6.2. The Packer\u00b6 The packer is one of Tk&#8217;s geometry-management mechanisms.    Geometry managers are used to specify the relative positioning of the positioning of widgets within their container - their mutual master.  In contrast to the more cumbersome placer (which is used less commonly, and we do not cover here), the packer takes qualitative relationship specification - above, to the left of, filling, etc - and works everything out to determine the exact placement coordinates for you. The size of any master widget is determined by the size of the &#8220;slave widgets&#8221; inside.  The packer is used to control where slave widgets appear inside the master into which they are packed.  You can pack widgets into frames, and frames into other frames, in order to achieve the kind of layout you desire. Additionally, the arrangement is dynamically adjusted to accommodate incremental changes to the configuration, once it is packed. Note that widgets do not appear until they have had their geometry specified with a geometry manager.  It&#8217;s a common early mistake to leave out the geometry specification, and then be surprised when the widget is created but nothing appears.  A widget will appear only after it has had, for example, the packer&#8217;s pack() method applied to it. The pack() method can be called with keyword-option\/value pairs that control where the widget is to appear within its container, and how it is to behave when the main application window is resized.  Here are some examples: fred.pack()                     # defaults to side = \"top\" fred.pack(side = \"left\") fred.pack(expand = 1)     24.1.6.3. Packer Options\u00b6 For more extensive information on the packer and the options that it can take, see the man pages and page 183 of John Ousterhout&#8217;s book.  anchor Anchor type.  Denotes where the packer is to place each slave in its parcel. expand Boolean, 0 or 1. fill Legal values: 'x', 'y', 'both', 'none'. ipadx and ipady A distance - designating internal padding on each side of the slave widget. padx and pady A distance - designating external padding on each side of the slave widget. side Legal values are: 'left', 'right', 'top', 'bottom'.    24.1.6.4. Coupling Widget Variables\u00b6 The current-value setting of some widgets (like text entry widgets) can be connected directly to application variables by using special options.  These options are variable, textvariable, onvalue, offvalue, and value.  This connection works both ways: if the variable changes for any reason, the widget it&#8217;s connected to will be updated to reflect the new value. Unfortunately, in the current implementation of Tkinter it is not possible to hand over an arbitrary Python variable to a widget through a variable or textvariable option.  The only kinds of variables for which this works are variables that are subclassed from a class called Variable, defined in the Tkinter module. There are many useful subclasses of Variable already defined: StringVar, IntVar, DoubleVar, and BooleanVar.  To read the current value of such a variable, call the get() method on it, and to change its value you call the set() method.  If you follow this protocol, the widget will always track the value of the variable, with no further intervention on your part. For example: class App(Frame):     def __init__(self, master=None):         Frame.__init__(self, master)         self.pack()          self.entrythingy = Entry()         self.entrythingy.pack()          # here is the application variable         self.contents = StringVar()         # set it to some value         self.contents.set(\"this is a variable\")         # tell the entry widget to watch this variable         self.entrythingy[\"textvariable\"] = self.contents          # and here we get a callback when the user hits return.         # we will have the program print out the value of the         # application variable when the user hits return         self.entrythingy.bind(&#39;<Key-Return>&#39;,                               self.print_contents)      def print_contents(self, event):         print \"hi. contents of entry is now ---->\", \\               self.contents.get()     24.1.6.5. The Window Manager\u00b6 In Tk, there is a utility command, wm, for interacting with the window manager.  Options to the wm command allow you to control things like titles, placement, icon bitmaps, and the like.  In Tkinter, these commands have been implemented as methods on the Wm class.  Toplevel widgets are subclassed from the Wm class, and so can call the Wm methods directly. To get at the toplevel window that contains a given widget, you can often just refer to the widget&#8217;s master.  Of course if the widget has been packed inside of a frame, the master won&#8217;t represent a toplevel window.  To get at the toplevel window that contains an arbitrary widget, you can call the _root() method. This method begins with an underscore to denote the fact that this function is part of the implementation, and not an interface to Tk functionality. Here are some examples of typical usage: from Tkinter import * class App(Frame):     def __init__(self, master=None):         Frame.__init__(self, master)         self.pack()   # create the application myapp = App()  # # here are method calls to the window manager class # myapp.master.title(\"My Do-Nothing Application\") myapp.master.maxsize(1000, 400)  # start the program myapp.mainloop()     24.1.6.6. Tk Option Data Types\u00b6  anchor Legal values are points of the compass: \"n\", \"ne\", \"e\", \"se\", \"s\", \"sw\", \"w\", \"nw\", and also \"center\". bitmap There are eight built-in, named bitmaps: 'error', 'gray25', 'gray50', 'hourglass', 'info', 'questhead', 'question', 'warning'.  To specify an X bitmap filename, give the full path to the file, preceded with an @, as in \"@\/usr\/contrib\/bitmap\/gumby.bit\". boolean You can pass integers 0 or 1 or the strings \"yes\" or \"no\" . callback This is any Python function that takes no arguments.  For example: def print_it():         print \"hi there\" fred[\"command\"] = print_it    color Colors can be given as the names of X colors in the rgb.txt file, or as strings representing RGB values in 4 bit: \"#RGB\", 8 bit: \"#RRGGBB\", 12 bit&#8221; \"#RRRGGGBBB\", or 16 bit \"#RRRRGGGGBBBB\" ranges, where R,G,B here represent any legal hex digit.  See page 160 of Ousterhout&#8217;s book for details. cursor The standard X cursor names from cursorfont.h can be used, without the XC_ prefix.  For example to get a hand cursor (XC_hand2), use the string \"hand2\".  You can also specify a bitmap and mask file of your own. See page 179 of Ousterhout&#8217;s book. distance Screen distances can be specified in either pixels or absolute distances. Pixels are given as numbers and absolute distances as strings, with the trailing character denoting units: c for centimetres, i for inches, m for millimetres, p for printer&#8217;s points.  For example, 3.5 inches is expressed as \"3.5i\". font Tk uses a list font name format, such as {courier 10 bold}. Font sizes with positive numbers are measured in points; sizes with negative numbers are measured in pixels. geometry This is a string of the form widthxheight, where width and height are measured in pixels for most widgets (in characters for widgets displaying text). For example: fred[\"geometry\"] = \"200x100\". justify Legal values are the strings: \"left\", \"center\", \"right\", and \"fill\". region This is a string with four space-delimited elements, each of which is a legal distance (see above).  For example: \"2 3 4 5\" and \"3i 2i 4.5i 2i\" and \"3c 2c 4c 10.43c\"  are all legal regions. relief Determines what the border style of a widget will be.  Legal values are: \"raised\", \"sunken\", \"flat\", \"groove\", and \"ridge\". scrollcommand This is almost always the set() method of some scrollbar widget, but can be any widget method that takes a single argument.   Refer to the file Demo\/tkinter\/matt\/canvas-with-scrollbars.py in the Python source distribution for an example. wrap: Must be one of: \"none\", \"char\", or \"word\".    24.1.6.7. Bindings and Events\u00b6 The bind method from the widget command allows you to watch for certain events and to have a callback function trigger when that event type occurs.  The form of the bind method is: def bind(self, sequence, func, add=''):  where:  sequence is a string that denotes the target kind of event.  (See the bind man page and page 201 of John Ousterhout&#8217;s book for details). func is a Python function, taking one argument, to be invoked when the event occurs. An Event instance will be passed as the argument. (Functions deployed this way are commonly known as callbacks.) add is optional, either '' or '+'.  Passing an empty string denotes that this binding is to replace any other bindings that this event is associated with.  Passing a '+' means that this function is to be added to the list of functions bound to this event type.  For example: def turnRed(self, event):     event.widget[\"activeforeground\"] = \"red\"  self.button.bind(\"<Enter>\", self.turnRed)   Notice how the widget field of the event is being accessed in the turnRed() callback.  This field contains the widget that caught the X event.  The following table lists the other event fields you can access, and how they are denoted in Tk, which can be useful when referring to the Tk man pages. Tk      Tkinter Event Field             Tk      Tkinter Event Field --      -------------------             --      ------------------- %f      focus                           %A      char %h      height                          %E      send_event %k      keycode                         %K      keysym %s      state                           %N      keysym_num %t      time                            %T      type %w      width                           %W      widget %x      x                               %X      x_root %y      y                               %Y      y_root    24.1.6.8. The index Parameter\u00b6 A number of widgets require&#8221;index&#8221; parameters to be passed.  These are used to point at a specific place in a Text widget, or to particular characters in an Entry widget, or to particular menu items in a Menu widget.  Entry widget indexes (index, view index, etc.) Entry widgets have options that refer to character positions in the text being displayed.  You can use these Tkinter functions to access these special points in text widgets:  AtEnd() refers to the last position in the text AtInsert() refers to the point where the text cursor is AtSelFirst() indicates the beginning point of the selected text AtSelLast() denotes the last point of the selected text and finally At(x[, y]) refers to the character at pixel location x, y (with y not used in the case of a text entry widget, which contains a single line of text).   Text widget indexes The index notation for Text widgets is very rich and is best described in the Tk man pages. Menu indexes (menu.invoke(), menu.entryconfig(), etc.) Some options and methods for menus manipulate specific menu entries. Anytime a menu index is needed for an option or a parameter, you may pass in:  an integer which refers to the numeric position of the entry in the widget, counted from the top, starting with 0; the string 'active', which refers to the menu position that is currently under the cursor; the string \"last\" which refers to the last menu item; An integer preceded by @, as in @6, where the integer is interpreted as a y pixel coordinate in the menu&#8217;s coordinate system; the string \"none\", which indicates no menu entry at all, most often used with menu.activate() to deactivate all entries, and finally, a text string that is pattern matched against the label of the menu entry, as scanned from the top of the menu to the bottom.  Note that this index type is considered after all the others, which means that matches for menu items labelled last, active, or none may be interpreted as the above literals, instead.      24.1.6.9. Images\u00b6 Bitmap\/Pixelmap images can be created through the subclasses of Tkinter.Image:  BitmapImage can be used for X11 bitmap data. PhotoImage can be used for GIF and PPM\/PGM color bitmaps.  Either type of image is created through either the file or the data option (other options are available as well). The image object can then be used wherever an image option is supported by some widget (e.g. labels, buttons, menus). In these cases, Tk will not keep a reference to the image. When the last Python reference to the image object is deleted, the image data is deleted as well, and Tk will display an empty box wherever the image was used."},{"url":"http:\/\/docs.python.org\/library\/tkinter.html#Tkinter.Tcl","title":"Tkinter.Tcl","description":""},{"url":"http:\/\/docs.python.org\/library\/tkinter.html#Tkinter.Tk","title":"Tkinter.Tk","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html","title":"Tix","description":"24.3. Tix &#8212; Extension widgets for Tk\u00b6 The Tix (Tk Interface Extension) module provides an additional rich set of widgets. Although the standard Tk library has many useful widgets, they are far from complete. The Tix library provides most of the commonly needed widgets that are missing from standard Tk: HList, ComboBox, Control (a.k.a. SpinBox) and an assortment of scrollable widgets. Tix also includes many more widgets that are generally useful in a wide range of applications: NoteBook, FileEntry, PanedWindow, etc; there are more than 40 of them. With all these new widgets, you can introduce new interaction techniques into applications, creating more useful and more intuitive user interfaces. You can design your application by choosing the most appropriate widgets to match the special needs of your application and users.  Note Tix has been renamed to tkinter.tix in Python 3.0.  The 2to3 tool will automatically adapt imports when converting your sources to 3.0.   See also  Tix Homepage The home page for Tix.  This includes links to additional documentation and downloads. Tix Man Pages On-line version of the man pages and reference material. Tix Programming Guide On-line version of the programmer&#8217;s reference material. Tix Development Applications Tix applications for development of Tix and Tkinter programs. Tide applications work under Tk or Tkinter, and include TixInspect, an inspector to remotely modify and debug Tix\/Tk\/Tkinter applications.    24.3.1. Using Tix\u00b6   class Tix.Tix(screenName[, baseName[, className]])\u00b6 Toplevel widget of Tix which represents mostly the main window of an application. It has an associated Tcl interpreter. Classes in the Tix module subclasses the classes in the Tkinter module. The former imports the latter, so to use Tix with Tkinter, all you need to do is to import one module. In general, you can just import Tix, and replace the toplevel call to Tkinter.Tk with Tix.Tk: import Tix from Tkconstants import * root = Tix.Tk()     To use Tix, you must have the Tix widgets installed, usually alongside your installation of the Tk widgets. To test your installation, try the following: import Tix root = Tix.Tk() root.tk.eval(&#39;package require Tix&#39;)   If this fails, you have a Tk installation problem which must be resolved before proceeding. Use the environment variable TIX_LIBRARY to point to the installed Tix library directory, and make sure you have the dynamic object library (tix8183.dll or libtix8183.so) in  the same directory that contains your Tk dynamic object library (tk8183.dll or libtk8183.so). The directory with the dynamic object library should also have a file called pkgIndex.tcl (case sensitive), which contains the line: package ifneeded Tix 8.1 [list load \"[file join $dir tix8183.dll]\" Tix]    24.3.2. Tix Widgets\u00b6 Tix introduces over 40 widget classes to the Tkinter  repertoire.  There is a demo of all the Tix widgets in the Demo\/tix directory of the standard distribution.  24.3.2.1. Basic Widgets\u00b6   class Tix.Balloon\u00b6 A Balloon that pops up over a widget to provide help.  When the user moves the cursor inside a widget to which a Balloon widget has been bound, a small pop-up window with a descriptive message will be shown on the screen.    class Tix.ButtonBox\u00b6 The ButtonBox widget creates a box of buttons, such as is commonly used for Ok Cancel.    class Tix.ComboBox\u00b6 The ComboBox widget is similar to the combo box control in MS Windows. The user can select a choice by either typing in the entry subwdget or selecting from the listbox subwidget.    class Tix.Control\u00b6 The Control widget is also known as the SpinBox widget. The user can adjust the value by pressing the two arrow buttons or by entering the value directly into the entry. The new value will be checked against the user-defined upper and lower limits.    class Tix.LabelEntry\u00b6 The LabelEntry widget packages an entry widget and a label into one mega widget. It can be used be used to simplify the creation of &#8220;entry-form&#8221; type of interface.    class Tix.LabelFrame\u00b6 The LabelFrame widget packages a frame widget and a label into one mega widget.  To create widgets inside a LabelFrame widget, one creates the new widgets relative to the frame subwidget and manage them inside the frame subwidget.    class Tix.Meter\u00b6 The Meter widget can be used to show the progress of a background job which may take a long time to execute.    class Tix.OptionMenu\u00b6 The OptionMenu creates a menu button of options.    class Tix.PopupMenu\u00b6 The PopupMenu widget can be used as a replacement of the tk_popup command. The advantage of the Tix PopupMenu widget is it requires less application code to manipulate.    class Tix.Select\u00b6 The Select widget is a container of button subwidgets. It can be used to provide radio-box or check-box style of selection options for the user.    class Tix.StdButtonBox\u00b6 The StdButtonBox widget is a group of standard buttons for Motif-like dialog boxes.    24.3.2.2. File Selectors\u00b6   class Tix.DirList\u00b6 The DirList widget displays a list view of a directory, its previous directories and its sub-directories. The user can choose one of the directories displayed in the list or change to another directory.    class Tix.DirTree\u00b6 The DirTree widget displays a tree view of a directory, its previous directories and its sub-directories. The user can choose one of the directories displayed in the list or change to another directory.    class Tix.DirSelectDialog\u00b6 The DirSelectDialog widget presents the directories in the file system in a dialog window.  The user can use this dialog window to navigate through the file system to select the desired directory.    class Tix.DirSelectBox\u00b6 The DirSelectBox is similar to the standard Motif(TM) directory-selection box. It is generally used for the user to choose a directory.  DirSelectBox stores the directories mostly recently selected into a ComboBox widget so that they can be quickly selected again.    class Tix.ExFileSelectBox\u00b6 The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget. It provides an convenient method for the user to select files. The style of the ExFileSelectBox widget is very similar to the standard file dialog on MS Windows 3.1.    class Tix.FileSelectBox\u00b6 The FileSelectBox is similar to the standard Motif(TM) file-selection box. It is generally used for the user to choose a file. FileSelectBox stores the files mostly recently selected into a ComboBox widget so that they can be quickly selected again.    class Tix.FileEntry\u00b6 The FileEntry widget can be used to input a filename. The user can type in the filename manually. Alternatively, the user can press the button widget that sits next to the entry, which will bring up a file selection dialog.    24.3.2.3. Hierarchical ListBox\u00b6   class Tix.HList\u00b6 The HList widget can be used to display any data that have a hierarchical structure, for example, file system directory trees. The list entries are indented and connected by branch lines according to their places in the hierarchy.    class Tix.CheckList\u00b6 The CheckList widget displays a list of items to be selected by the user. CheckList acts similarly to the Tk checkbutton or radiobutton widgets, except it is capable of handling many more items than checkbuttons or radiobuttons.    class Tix.Tree\u00b6 The Tree widget can be used to display hierarchical data in a tree form. The user can adjust the view of the tree by opening or closing parts of the tree.    24.3.2.4. Tabular ListBox\u00b6   class Tix.TList\u00b6 The TList widget can be used to display data in a tabular format. The list entries of a TList widget are similar to the entries in the Tk listbox widget.  The main differences are (1) the TList widget can display the list entries in a two dimensional format and (2) you can use graphical images as well as multiple colors and fonts for the list entries.    24.3.2.5. Manager Widgets\u00b6   class Tix.PanedWindow\u00b6 The PanedWindow widget allows the user to interactively manipulate the sizes of several panes. The panes can be arranged either vertically or horizontally.  The user changes the sizes of the panes by dragging the resize handle between two panes.    class Tix.ListNoteBook\u00b6 The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor. The notebook is divided into a stack of pages (windows). At one time only one of these pages can be shown. The user can navigate through these pages by choosing the name of the desired page in the hlist subwidget.    class Tix.NoteBook\u00b6 The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor. The notebook is divided into a stack of pages. At one time only one of these pages can be shown. The user can navigate through these pages by choosing the visual &#8220;tabs&#8221; at the top of the NoteBook widget.    24.3.2.6. Image Types\u00b6 The Tix module adds:  pixmap capabilities to all Tix and Tkinter widgets to create color images from XPM files. Compound image types can be used to create images that consists of multiple horizontal lines; each line is composed of a series of items (texts, bitmaps, images or spaces) arranged from left to right. For example, a compound image can be used to display a bitmap and a text string simultaneously in a Tk Button widget.    24.3.2.7. Miscellaneous Widgets\u00b6   class Tix.InputOnly\u00b6 The InputOnly widgets are to accept inputs from the user, which can be done with the bind command (Unix only).    24.3.2.8. Form Geometry Manager\u00b6 In addition, Tix augments Tkinter by providing:   class Tix.Form\u00b6 The Form geometry manager based on attachment rules for all Tk widgets.     24.3.3. Tix Commands\u00b6   class Tix.tixCommand\u00b6 The tix commands provide access to miscellaneous elements of Tix&#8216;s internal state and the Tix application context.  Most of the information manipulated by these methods pertains to the application as a whole, or to a screen or display, rather than to a particular window. To view the current settings, the common usage is: import Tix root = Tix.Tk() print root.tix_configure()       tixCommand.tix_configure([cnf], **kw)\u00b6 Query or modify the configuration options of the Tix application context. If no option is specified, returns a dictionary all of the available options.  If option is specified with no value, then the method returns a list describing the one named option (this list will be identical to the corresponding sublist of the value returned if no option is specified).  If one or more option-value pairs are specified, then the method modifies the given option(s) to have the given value(s); in this case the method returns an empty string. Option may be any of the configuration options.    tixCommand.tix_cget(option)\u00b6 Returns the current value of the configuration option given by option. Option may be any of the configuration options.    tixCommand.tix_getbitmap(name)\u00b6 Locates a bitmap file of the name name.xpm or name in one of the bitmap directories (see the tix_addbitmapdir() method).  By using tix_getbitmap(), you can avoid hard coding the pathnames of the bitmap files in your application. When successful, it returns the complete pathname of the bitmap file, prefixed with the character @.  The returned value can be used to configure the bitmap option of the Tk and Tix widgets.    tixCommand.tix_addbitmapdir(directory)\u00b6 Tix maintains a list of directories under which the tix_getimage() and tix_getbitmap() methods will search for image files.  The standard bitmap directory is $TIX_LIBRARY\/bitmaps. The tix_addbitmapdir() method adds directory into this list. By using this method, the image files of an applications can also be located using the tix_getimage() or tix_getbitmap() method.    tixCommand.tix_filedialog([dlgclass])\u00b6 Returns the file selection dialog that may be shared among different calls from this application.  This method will create a file selection dialog widget when it is called the first time. This dialog will be returned by all subsequent calls to tix_filedialog().  An optional dlgclass parameter can be passed as a string to specified what type of file selection dialog widget is desired. Possible options are tix, FileSelectDialog or tixExFileSelectDialog.    tixCommand.tix_getimage(self, name)\u00b6 Locates an image file of the name name.xpm, name.xbm or name.ppm in one of the bitmap directories (see the tix_addbitmapdir() method above). If more than one file with the same name (but different extensions) exist, then the image type is chosen according to the depth of the X display: xbm images are chosen on monochrome displays and color images are chosen on color displays. By using tix_getimage(), you can avoid hard coding the pathnames of the image files in your application. When successful, this method returns the name of the newly created image, which can be used to configure the image option of the Tk and Tix widgets.    tixCommand.tix_option_get(name)\u00b6 Gets the options maintained by the Tix scheme mechanism.    tixCommand.tix_resetoptions(newScheme, newFontSet[, newScmPrio])\u00b6 Resets the scheme and fontset of the Tix application to newScheme and newFontSet, respectively.  This affects only those widgets created after this call.  Therefore, it is best to call the resetoptions method before the creation of any widgets in a Tix application. The optional parameter newScmPrio can be given to reset the priority level of the Tk options set by the Tix schemes. Because of the way Tk handles the X option database, after Tix has been has imported and inited, it is not possible to reset the color schemes and font sets using the tix_config() method. Instead, the tix_resetoptions() method must be used."},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.Balloon","title":"Tix.Balloon","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.ButtonBox","title":"Tix.ButtonBox","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.CheckList","title":"Tix.CheckList","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.ComboBox","title":"Tix.ComboBox","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.Control","title":"Tix.Control","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.DirList","title":"Tix.DirList","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.DirSelectBox","title":"Tix.DirSelectBox","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.DirSelectDialog","title":"Tix.DirSelectDialog","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.DirTree","title":"Tix.DirTree","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.ExFileSelectBox","title":"Tix.ExFileSelectBox","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.FileEntry","title":"Tix.FileEntry","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.FileSelectBox","title":"Tix.FileSelectBox","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.Form","title":"Tix.Form","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.HList","title":"Tix.HList","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.InputOnly","title":"Tix.InputOnly","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.LabelEntry","title":"Tix.LabelEntry","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.LabelFrame","title":"Tix.LabelFrame","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.ListNoteBook","title":"Tix.ListNoteBook","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.Meter","title":"Tix.Meter","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.NoteBook","title":"Tix.NoteBook","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.OptionMenu","title":"Tix.OptionMenu","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.PanedWindow","title":"Tix.PanedWindow","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.PopupMenu","title":"Tix.PopupMenu","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.Select","title":"Tix.Select","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.StdButtonBox","title":"Tix.StdButtonBox","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.Tix","title":"Tix.Tix","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand","title":"Tix.tixCommand","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand.tix_addbitmapdir","title":"Tix.tixCommand.tix_addbitmapdir","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand.tix_cget","title":"Tix.tixCommand.tix_cget","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand.tix_configure","title":"Tix.tixCommand.tix_configure","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand.tix_filedialog","title":"Tix.tixCommand.tix_filedialog","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand.tix_getbitmap","title":"Tix.tixCommand.tix_getbitmap","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand.tix_getimage","title":"Tix.tixCommand.tix_getimage","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand.tix_option_get","title":"Tix.tixCommand.tix_option_get","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.tixCommand.tix_resetoptions","title":"Tix.tixCommand.tix_resetoptions","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.TList","title":"Tix.TList","description":""},{"url":"http:\/\/docs.python.org\/library\/tix.html#Tix.Tree","title":"Tix.Tree","description":""},{"url":"http:\/\/docs.python.org\/library\/idle.html","title":"","description":"24.6. IDLE\u00b6 IDLE is the Python IDE built with the tkinter GUI toolkit. IDLE has the following features:  coded in 100% pure Python, using the tkinter GUI toolkit cross-platform: works on Windows and Unix multi-window text editor with multiple undo, Python colorizing and many other features, e.g. smart indent and call tips Python shell window (a.k.a. interactive interpreter) debugger (not complete, but you can set breakpoints, view  and step)   24.6.1. Menus\u00b6  24.6.1.1. File menu\u00b6  New window create a new editing window Open... open an existing file Open module... open an existing module (searches sys.path) Class browser show classes and methods in current file Path browser show sys.path directories, modules, classes and methods   Save save current window to the associated file (unsaved windows have a * before and after the window title) Save As... save current window to new file, which becomes the associated file Save Copy As... save current window to different file without changing the associated file Close close current window (asks to save if unsaved) Exit close all windows and quit IDLE (asks to save if unsaved)    24.6.1.2. Edit menu\u00b6  Undo Undo last change to current window (max 1000 changes) Redo Redo last undone change to current window Cut Copy selection into system-wide clipboard; then delete selection Copy Copy selection into system-wide clipboard Paste Insert system-wide clipboard into window Select All Select the entire contents of the edit buffer Find... Open a search dialog box with many options Find again Repeat last search Find selection Search for the string in the selection Find in Files... Open a search dialog box for searching files Replace... Open a search-and-replace dialog box Go to line Ask for a line number and show that line Indent region Shift selected lines right 4 spaces Dedent region Shift selected lines left 4 spaces Comment out region Insert ## in front of selected lines Uncomment region Remove leading # or ## from selected lines Tabify region Turns leading stretches of spaces into tabs Untabify region Turn all tabs into the right number of spaces Expand word Expand the word you have typed to match another word in the same buffer; repeat to get a different expansion Format Paragraph Reformat the current blank-line-separated paragraph Import module Import or reload the current module Run script Execute the current file in the __main__ namespace    24.6.1.3. Windows menu\u00b6  Zoom Height toggles the window between normal size (24x80) and maximum height.  The rest of this menu lists the names of all open windows; select one to bring it to the foreground (deiconifying it if necessary).   24.6.1.4. Debug menu (in the Python Shell window only)\u00b6  Go to file\/line look around the insert point for a filename and linenumber, open the file, and show the line. Open stack viewer show the stack traceback of the last exception Debugger toggle Run commands in the shell under the debugger JIT Stack viewer toggle Open stack viewer on traceback     24.6.2. Basic editing and navigation\u00b6  Backspace deletes to the left; Del deletes to the right Arrow keys and Page Up\/Page Down to move around Home\/End go to begin\/end of line C-Home\/C-End go to begin\/end of file Some Emacs bindings may also work, including C-B, C-P, C-A, C-E, C-D, C-L   24.6.2.1. Automatic indentation\u00b6 After a block-opening statement, the next line is indented by 4 spaces (in the Python Shell window by one tab).  After certain keywords (break, return etc.) the next line is dedented.  In leading indentation, Backspace deletes up to 4 spaces if they are there. Tab inserts 1-4 spaces (in the Python Shell window one tab). See also the indent\/dedent region commands in the edit menu.   24.6.2.2. Python Shell window\u00b6  C-C interrupts executing command C-D sends end-of-file; closes window if typed at a >>> prompt Alt-p retrieves previous command matching what you have typed Alt-n retrieves next Return while on any previous command retrieves that command Alt-\/ (Expand word) is also useful here     24.6.3. Syntax colors\u00b6 The coloring is applied in a background &#8220;thread,&#8221; so you may occasionally see uncolorized text.  To change the color scheme, edit the [Colors] section in config.txt.  Python syntax colors:  Keywords orange Strings green Comments red Definitions blue   Shell colors:  Console output brown stdout blue stderr dark green stdin black      24.6.4. Startup\u00b6 Upon startup with the -s option, IDLE will execute the file referenced by the environment variables IDLESTARTUP or PYTHONSTARTUP. Idle first checks for IDLESTARTUP; if IDLESTARTUP is present the file referenced is run.  If IDLESTARTUP is not present, Idle checks for PYTHONSTARTUP.  Files referenced by these environment variables are convenient places to store functions that are used frequently from the Idle shell, or for executing import statements to import common modules. In addition, Tk also loads a startup file if it is present.  Note that the Tk file is loaded unconditionally.  This additional file is .Idle.py and is looked for in the user&#8217;s home directory.  Statements in this file will be executed in the Tk namespace, so this file is not useful for importing functions to be used from Idle&#8217;s Python shell.  24.6.4.1. Command line usage\u00b6 idle.py [-c command] [-d] [-e] [-s] [-t title] [arg] ...  -c command  run this command -d          enable debugger -e          edit mode; arguments are files to be edited -s          run $IDLESTARTUP or $PYTHONSTARTUP first -t title    set title of shell window  If there are arguments:  If -e is used, arguments are files opened for editing and sys.argv reflects the arguments passed to IDLE itself. Otherwise, if -c is used, all arguments are placed in sys.argv[1:...], with sys.argv[0] set to '-c'. Otherwise, if neither -e nor -c is used, the first argument is a script which is executed with the remaining arguments in sys.argv[1:...]  and sys.argv[0] set to the script name.  If the script name is &#8216;-&#8216;, no script is executed but an interactive Python session is started; the arguments are still available in sys.argv."},{"url":"http:\/\/docs.python.org\/library\/othergui.html","title":"","description":"24.7. Other Graphical User Interface Packages\u00b6 Major cross-platform (Windows, Mac OS X, Unix-like) GUI toolkits are available for Python:  See also  PyGTK is a set of bindings for the GTK widget set. It provides an object oriented interface that is slightly higher level than the C one. It comes with many more widgets than Tkinter provides, and has good Python-specific reference documentation. There are also bindings to GNOME.  One well known PyGTK application is PythonCAD. An online tutorial is available. PyQt PyQt is a sip-wrapped binding to the Qt toolkit.  Qt is an extensive C++ GUI application development framework that is available for Unix, Windows and Mac OS X. sip is a tool for generating bindings for C++ libraries as Python classes, and is specifically designed for Python. The PyQt3 bindings have a book, GUI Programming with Python: QT Edition by Boudewijn Rempt. The PyQt4 bindings also have a book, Rapid GUI Programming with Python and Qt, by Mark Summerfield. wxPython wxPython is a cross-platform GUI toolkit for Python that is built around the popular wxWidgets (formerly wxWindows) C++ toolkit.  It provides a native look and feel for applications on Windows, Mac OS X, and Unix systems by using each platform&#8217;s native widgets where ever possible, (GTK+ on Unix-like systems).  In addition to an extensive set of widgets, wxPython provides classes for online documentation and context sensitive help, printing, HTML viewing, low-level device context drawing, drag and drop, system clipboard access, an XML-based resource format and more, including an ever growing library of user-contributed modules.  wxPython has a book, wxPython in Action, by Noel Rappin and Robin Dunn.   PyGTK, PyQt, and wxPython, all have a modern look and feel and more widgets than Tkinter. In addition, there are many other GUI toolkits for Python, both cross-platform, and platform-specific. See the GUI Programming page in the Python Wiki for a much more complete list, and also for links to documents where the different GUI toolkits are compared."},{"url":"http:\/\/docs.python.org\/library\/ttk.html","title":"ttk","description":"24.2. ttk &#8212; Tk themed widgets\u00b6 The ttk module provides access to the Tk themed widget set, which has been introduced in Tk 8.5. If Python is not compiled against Tk 8.5 code may still use this module as long as Tile is installed. However, some features provided by the new Tk, like anti-aliased font rendering under X11, window transparency (on X11 you will need a composition window manager) will be missing. The basic idea of ttk is to separate, to the extent possible, the code implementing a widget&#8217;s behavior from the code implementing its appearance.  See also  Tk Widget Styling Support The document which brought up theming support for Tk    24.2.1. Using Ttk\u00b6 To start using Ttk, import its module: import ttk   But code like this: from Tkinter import *   may optionally want to use this: from Tkinter import * from ttk import *   And then several ttk widgets (Button, Checkbutton, Entry, Frame, Label, LabelFrame, Menubutton, PanedWindow, Radiobutton, Scale and Scrollbar) will automatically substitute for the Tk widgets. This has the direct benefit of using the new widgets, giving better look & feel across platforms, but be aware that they are not totally compatible. The main difference is that widget options such as &#8220;fg&#8221;, &#8220;bg&#8221; and others related to widget styling are no longer present in Ttk widgets. Use ttk.Style to achieve the same (or better) styling.  See also  Converting existing applications to use the Tile widgets A text which talks in Tcl terms about differences typically found when converting applications to use the new widgets.     24.2.2. Ttk Widgets\u00b6 Ttk comes with 17 widgets, 11 of which already exist in Tkinter: Button, Checkbutton, Entry, Frame, Label, LabelFrame, Menubutton, PanedWindow, Radiobutton, Scale and Scrollbar. The 6 new widget classes are: Combobox, Notebook, Progressbar, Separator, Sizegrip and Treeview.  All of these classes are subclasses of Widget. As said previously, you will notice changes in look-and-feel as well in the styling code. To demonstrate the latter, a very simple example is shown below. Tk code: l1 = Tkinter.Label(text=\"Test\", fg=\"black\", bg=\"white\") l2 = Tkinter.Label(text=\"Test\", fg=\"black\", bg=\"white\")   Corresponding Ttk code: style = ttk.Style() style.configure(\"BW.TLabel\", foreground=\"black\", background=\"white\")  l1 = ttk.Label(text=\"Test\", style=\"BW.TLabel\") l2 = ttk.Label(text=\"Test\", style=\"BW.TLabel\")   For more information about TtkStyling read the Style class documentation.   24.2.3. Widget\u00b6 ttk.Widget defines standard options and methods supported by Tk themed widgets and is not supposed to be directly instantiated.  24.2.3.1. Standard Options\u00b6 All the ttk widgets accept the following options:        Option Description    class Specifies the window class. The class is used when querying the option database for the window&#8217;s other options, to determine the default bindtags for the window, and to select the widget&#8217;s default layout and style. This is a read-only option which may only be specified when the window is created.  cursor Specifies the mouse cursor to be used for the widget. If set to the empty string (the default), the cursor is inherited from the parent widget.  takefocus Determines whether the window accepts the focus during keyboard traversal. 0, 1 or an empty string is returned. If 0, the window should be skipped entirely during keyboard traversal. If 1, the window should receive the input focus as long as it is viewable. An empty string means that the traversal scripts make the decision about whether or not to focus on the window.  style May be used to specify a custom widget style.       24.2.3.2. Scrollable Widget Options\u00b6 The following options are supported by widgets that are controlled by a scrollbar.        option description    xscrollcommand Used to communicate with horizontal scrollbars. When the view in the widget&#8217;s window changes, the widget will generate a Tcl command based on the scrollcommand. Usually this option consists of the Scrollbar.set() method of some scrollbar. This will cause the scrollbar to be updated whenever the view in the window changes.   yscrollcommand Used to communicate with vertical scrollbars. For more information, see above.       24.2.3.3. Label Options\u00b6 The following options are supported by labels, buttons and other button-like widgets.        option description    text Specifies a text string to be displayed inside the widget.  textvariable Specifies a name whose value will be used in place of the text option resource.  underline If set, specifies the index (0-based) of a character to underline in the text string. The underline character is used for mnemonic activation.  image Specifies an image to display. This is a list of 1 or more elements. The first element is the default image name. The rest of the list is a sequence of statespec\/value pairs as defined by Style.map(), specifying different images to use when the widget is in a particular state or a combination of states. All images in the list should have the same size.  compound Specifies how to display the image relative to the text, in the case both text and image options are present. Valid values are:  text: display text only image: display image only top, bottom, left, right: display image above, below, left of, or right of the text, respectively. none: the default. display the image if present, otherwise the text.    width If greater than zero, specifies how much space, in character widths, to allocate for the text label; if less than zero, specifies a minimum width. If zero or unspecified, the natural width of the text label is used.       24.2.3.4. Compatibility Options\u00b6        option description    state May be set to &#8220;normal&#8221; or &#8220;disabled&#8221; to control the &#8220;disabled&#8221; state bit. This is a write-only option: setting it changes the widget state, but the Widget.state() method does not affect this option.       24.2.3.5. Widget States\u00b6 The widget state is a bitmap of independent state flags.        flag description    active The mouse cursor is over the widget and pressing a mouse button will cause some action to occur.  disabled Widget is disabled under program control.  focus Widget has keyboard focus.  pressed Widget is being pressed.  selected &#8220;On&#8221;, &#8220;true&#8221;, or &#8220;current&#8221; for things like Checkbuttons and radiobuttons.  background Windows and Mac have a notion of an &#8220;active&#8221; or foreground window. The background state is set for widgets in a background window, and cleared for those in the foreground window.  readonly Widget should not allow user modification.  alternate A widget-specific alternate display format.  invalid The widget&#8217;s value is invalid.     A state specification is a sequence of state names, optionally prefixed with an exclamation point indicating that the bit is off.   24.2.3.6. ttk.Widget\u00b6 Besides the methods described below, the ttk.Widget class supports the Tkinter.Widget.cget() and Tkinter.Widget.configure() methods.   class ttk.Widget\u00b6   identify(x, y)\u00b6 Returns the name of the element at position x y, or the empty string if the point does not lie within any element. x and y are pixel coordinates relative to the widget.     instate(statespec[, callback=None[, *args[, **kw]]])\u00b6 Test the widget&#8217;s state. If a callback is not specified, returns True if the widget state matches statespec and False otherwise. If callback is specified then it is called with args if widget state matches statespec.    state([statespec=None])\u00b6 Modify or read widget state. If statespec is specified, sets the widget state accordingly and returns a new statespec indicating which flags were changed. If statespec is not specified, returns the currently-enabled state flags.  statespec will usually be a list or a tuple.      24.2.4. Combobox\u00b6 The ttk.Combobox widget combines a text field with a pop-down list of values. This widget is a subclass of Entry. Besides the methods inherited from Widget (Widget.cget(), Widget.configure(), Widget.identify(), Widget.instate() and Widget.state()) and those inherited from Entry (Entry.bbox(), Entry.delete(), Entry.icursor(), Entry.index(), Entry.inset(), Entry.selection(), Entry.xview()), this class has some other methods, described at ttk.Combobox.  24.2.4.1. Options\u00b6 This widget accepts the following options:        option description    exportselection Boolean value. If set, the widget selection is linked to the Window Manager selection (which can be returned by invoking Misc.selection_get(), for example).  justify Specifies how the text is aligned within the widget. One of &#8220;left&#8221;, &#8220;center&#8221;, or &#8220;right&#8221;.  height Specifies the height of the pop-down listbox, in rows.  postcommand A script (possibly registered with Misc.register()) that is called immediately before displaying the values. It may specify which values to display.  state One of &#8220;normal&#8221;, &#8220;readonly&#8221;, or &#8220;disabled&#8221;. In the &#8220;readonly&#8221; state, the value may not be edited directly, and the user can only select one of the values from the dropdown list. In the &#8220;normal&#8221; state, the text field is directly editable. In the &#8220;disabled&#8221; state, no interaction is possible.  textvariable Specifies a name whose value is linked to the widget value. Whenever the value associated with that name changes, the widget value is updated, and vice versa. See Tkinter.StringVar.  values Specifies the list of values to display in the drop-down listbox.  width Specifies an integer value indicating the desired width of the entry window, in average-size characters of the widget&#8217;s font.       24.2.4.2. Virtual events\u00b6 The combobox widget generates a <<ComboboxSelected>> virtual event when the user selects an element from the list of values.   24.2.4.3. ttk.Combobox\u00b6   class ttk.Combobox\u00b6   current([newindex=None])\u00b6 If newindex is specified, sets the combobox value to the element position newindex. Otherwise, returns the index of the current value or -1 if the current value is not in the values list.    get()\u00b6 Returns the current value of the combobox.    set(value)\u00b6 Sets the value of the combobox to value.       24.2.5. Notebook\u00b6 The Ttk Notebook widget manages a collection of windows and displays a single one at a time. Each child window is associated with a tab, which the user may select to change the currently-displayed window.  24.2.5.1. Options\u00b6 This widget accepts the following specific options:        option description    height If present and greater than zero, specifies the desired height of the pane area (not including internal padding or tabs). Otherwise, the maximum height of all panes is used.  padding Specifies the amount of extra space to add around the outside of the notebook. The padding is a list of up to four length specifications: left top right bottom. If fewer than four elements are specified, bottom defaults to top, right defaults to left, and top defaults to left.  width If present and greater than zero, specifies the desired width of the pane area (not including internal padding). Otherwise, the maximum width of all panes is used.       24.2.5.2. Tab Options\u00b6 There are also specific options for tabs:        option description    state Either &#8220;normal&#8221;, &#8220;disabled&#8221; or &#8220;hidden&#8221;. If &#8220;disabled&#8221;, then the tab is not selectable. If &#8220;hidden&#8221;, then the tab is not shown.  sticky Specifies how the child window is positioned within the pane area. Value is a string containing zero or more of the characters &#8220;n&#8221;, &#8220;s&#8221;, &#8220;e&#8221; or &#8220;w&#8221;. Each letter refers to a side (north, south, east or west) that the child window will stick to, as per the grid() geometry manager.  padding Specifies the amount of extra space to add between the notebook and this pane. Syntax is the same as for the option padding used by this widget.  text Specifies a text to be displayed in the tab.  image Specifies an image to display in the tab. See the option image described in Widget.  compound Specifies how to display the image relative to the text, in the case both text and image options are present. See Label Options for legal values.  underline Specifies the index (0-based) of a character to underline in the text string. The underlined character is used for mnemonic activation if Notebook.enable_traversal() is called.       24.2.5.3. Tab Identifiers\u00b6 The tab_id present in several methods of ttk.Notebook may take any of the following forms:  An integer between zero and the number of tabs. The name of a child window. A positional specification of the form &#8220;@x,y&#8221;, which identifies the tab. The literal string &#8220;current&#8221;, which identifies the currently-selected tab. The literal string &#8220;end&#8221;, which returns the number of tabs (only valid for Notebook.index()).    24.2.5.4. Virtual Events\u00b6 This widget generates a <<NotebookTabChanged>> virtual event after a new tab is selected.   24.2.5.5. ttk.Notebook\u00b6   class ttk.Notebook\u00b6   add(child, **kw)\u00b6 Adds a new tab to the notebook. If window is currently managed by the notebook but hidden, it is restored to its previous position. See Tab Options for the list of available options.     forget(tab_id)\u00b6 Removes the tab specified by tab_id, unmaps and unmanages the associated window.    hide(tab_id)\u00b6 Hides the tab specified by tab_id. The tab will not be displayed, but the associated window remains managed by the notebook and its configuration remembered. Hidden tabs may be restored with the add() command.     identify(x, y)\u00b6 Returns the name of the tab element at position x, y, or the empty string if none.    index(tab_id)\u00b6 Returns the numeric index of the tab specified by tab_id, or the total number of tabs if tab_id is the string &#8220;end&#8221;.    insert(pos, child, **kw)\u00b6 Inserts a pane at the specified position. pos is either the string &#8220;end&#8221;, an integer index, or the name of a managed child. If child is already managed by the notebook, moves it to the specified position. See Tab Options for the list of available options.     select([tab_id])\u00b6 Selects the specified tab_id. The associated child window will be displayed, and the previously-selected window (if different) is unmapped. If tab_id is omitted, returns the widget name of the currently selected pane.     tab(tab_id[, option=None[, **kw]])\u00b6 Query or modify the options of the specific tab_id. If kw is not given, returns a dictionary of the tab option values. If option is specified, returns the value of that option. Otherwise, sets the options to the corresponding values.     tabs()\u00b6 Returns a list of windows managed by the notebook.    enable_traversal()\u00b6 Enable keyboard traversal for a toplevel window containing this notebook. This will extend the bindings for the toplevel window containing the notebook as follows:  Control-Tab: selects the tab following the currently selected one. Shift-Control-Tab: selects the tab preceding the currently selected one. Alt-K: where K is the mnemonic (underlined) character of any tab, will select that tab.  Multiple notebooks in a single toplevel may be enabled for traversal, including nested notebooks. However, notebook traversal only works properly if all panes have the notebook they are in as master.        24.2.6. Progressbar\u00b6 The ttk.Progressbar widget shows the status of a long-running operation. It can operate in two modes: determinate mode shows the amount completed relative to the total amount of work to be done, and indeterminate mode provides an animated display to let the user know that something is happening.  24.2.6.1. Options\u00b6 This widget accepts the following specific options:        option description    orient One of &#8220;horizontal&#8221; or &#8220;vertical&#8221;. Specifies the orientation of the progress bar.  length Specifies the length of the long axis of the progress bar (width if horizontal, height if vertical).  mode One of &#8220;determinate&#8221; or &#8220;indeterminate&#8221;.  maximum A number specifying the maximum value. Defaults to 100.  value The current value of the progress bar. In &#8220;determinate&#8221; mode, this represents the amount of work completed. In &#8220;indeterminate&#8221; mode, it is interpreted as modulo maximum; that is, the progress bar completes one &#8220;cycle&#8221; when its value increases by maximum.  variable A name which is linked to the option value. If specified, the value of the progress bar is automatically set to the value of this name whenever the latter is modified.  phase Read-only option. The widget periodically increments the value of this option whenever its value is greater than 0 and, in determinate mode, less than maximum. This option may be used by the current theme to provide additional animation effects.       24.2.6.2. ttk.Progressbar\u00b6   class ttk.Progressbar\u00b6   start([interval])\u00b6 Begin autoincrement mode: schedules a recurring timer event that calls Progressbar.step() every interval milliseconds. If omitted, interval defaults to 50 milliseconds.    step([amount])\u00b6 Increments the progress bar&#8217;s value by amount. amount defaults to 1.0 if omitted.     stop()\u00b6 Stop autoincrement mode: cancels any recurring timer event initiated by Progressbar.start() for this progress bar.       24.2.7. Separator\u00b6 The ttk.Separator widget displays a horizontal or vertical separator bar. It has no other methods besides the ones inherited from ttk.Widget.  24.2.7.1. Options\u00b6 This widget accepts the following specific option:        option description    orient One of &#8220;horizontal&#8221; or &#8220;vertical&#8221;. Specifies the orientation of the separator.        24.2.8. Sizegrip\u00b6 The ttk.Sizegrip widget (also known as a grow box) allows the user to resize the containing toplevel window by pressing and dragging the grip. This widget has neither specific options nor specific methods, besides the ones inherited from ttk.Widget.  24.2.8.1. Platform-specific notes\u00b6  On Mac OS X, toplevel windows automatically include a built-in size grip by default. Adding a Sizegrip is harmless, since the built-in grip will just mask the widget.    24.2.8.2. Bugs\u00b6  If the containing toplevel&#8217;s position was specified relative to the right or bottom of the screen (e.g. ....), the Sizegrip widget will not resize the window. This widget supports only &#8220;southeast&#8221; resizing.     24.2.9. Treeview\u00b6 The ttk.Treeview widget displays a hierarchical collection of items. Each item has a textual label, an optional image, and an optional list of data values. The data values are displayed in successive columns after the tree label. The order in which data values are displayed may be controlled by setting the widget option displaycolumns. The tree widget can also display column headings. Columns may be accessed by number or symbolic names listed in the widget option columns. See Column Identifiers. Each item is identified by an unique name. The widget will generate item IDs if they are not supplied by the caller. There is a distinguished root item, named {}. The root item itself is not displayed; its children appear at the top level of the hierarchy. Each item also has a list of tags, which can be used to associate event bindings with individual items and control the appearance of the item. The Treeview widget supports horizontal and vertical scrolling, according to the options described in Scrollable Widget Options and the methods Treeview.xview() and Treeview.yview().  24.2.9.1. Options\u00b6 This widget accepts the following specific options:        option description    columns A list of column identifiers, specifying the number of columns and their names.  displaycolumns A list of column identifiers (either symbolic or integer indices) specifying which data columns are displayed and the order in which they appear, or the string &#8220;#all&#8221;.  height Specifies the number of rows which should be visible. Note: the requested width is determined from the sum of the column widths.  padding Specifies the internal padding for the widget. The padding is a list of up to four length specifications.  selectmode Controls how the built-in class bindings manage the selection. One of &#8220;extended&#8221;, &#8220;browse&#8221; or &#8220;none&#8221;. If set to &#8220;extended&#8221; (the default), multiple items may be selected. If &#8220;browse&#8221;, only a single item will be selected at a time. If &#8220;none&#8221;, the selection will not be changed. Note that the application code and tag bindings can set the selection however they wish, regardless of the value  of this option.   show A list containing zero or more of the following values, specifying which elements of the tree to display.  tree: display tree labels in column #0. headings: display the heading row.  The default is &#8220;tree headings&#8221;, i.e., show all elements. Note: Column #0 always refers to the tree column, even if show=&#8221;tree&#8221; is not specified.        24.2.9.2. Item Options\u00b6 The following item options may be specified for items in the insert and item widget commands.        option description    text The textual label to display for the item.  image A Tk Image, displayed to the left of the label.  values The list of values associated with the item. Each item should have the same number of values as the widget option columns. If there are fewer values than columns, the remaining values are assumed empty. If there are more values than columns, the extra values are ignored.   open True\/False value indicating whether the item&#8217;s children should be displayed or hidden.  tags A list of tags associated with this item.       24.2.9.3. Tag Options\u00b6 The following options may be specified on tags:        option description    foreground Specifies the text foreground color.  background Specifies the cell or item background color.  font Specifies the font to use when drawing text.  image Specifies the item image, in case the item&#8217;s image option is empty.       24.2.9.4. Column Identifiers\u00b6 Column identifiers take any of the following forms:  A symbolic name from the list of columns option. An integer n, specifying the nth data column. A string of the form #n, where n is an integer, specifying the nth display column.  Notes:  Item&#8217;s option values may be displayed in a different order than the order in which they are stored. Column #0 always refers to the tree column, even if show=&#8221;tree&#8221; is not specified.  A data column number is an index into an item&#8217;s option values list; a display column number is the column number in the tree where the values are displayed. Tree labels are displayed in column #0. If option displaycolumns is not set, then data column n is displayed in column #n+1. Again, column #0 always refers to the tree column.   24.2.9.5. Virtual Events\u00b6 The Treeview widget generates the following virtual events.        event description    <<TreeviewSelect>> Generated whenever the selection changes.  <<TreeviewOpen>> Generated just before settings the focus item to open=True.  <<TreeviewClose>> Generated just after setting the focus item to open=False.     The Treeview.focus() and Treeview.selection() methods can be used to determine the affected item or items.   24.2.9.6. ttk.Treeview\u00b6   class ttk.Treeview\u00b6   bbox(item[, column=None])\u00b6 Returns the bounding box (relative to the treeview widget&#8217;s window) of the specified item in the form (x, y, width, height). If column is specified, returns the bounding box of that cell. If the item is not visible (i.e., if it is a descendant of a closed item or is scrolled offscreen), returns an empty string.     get_children([item])\u00b6 Returns the list of children belonging to item. If item is not specified, returns root children.     set_children(item, *newchildren)\u00b6 Replaces item&#8216;s child with newchildren. Children present in item that are not present in newchildren are detached from the tree. No items in newchildren may be an ancestor of item. Note that not specifying newchildren results in detaching item&#8216;s children.     column(column[, option=None[, **kw]])\u00b6 Query or modify the options for the specified column. If kw is not given, returns a dict of the column option values. If option is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values. The valid options\/values are:   id Returns the column name. This is a read-only option.     anchor: One of the standard Tk anchor values. Specifies how the text in this column should be aligned with respect to the cell.     minwidth: width The minimum width of the column in pixels. The treeview widget will not make the column any smaller than specified by this option when the widget is resized or the user drags a column.     stretch: True\/False Specifies whether the column&#8217;s width should be adjusted when the widget is resized.     width: width The width of the column in pixels.     To configure the tree column, call this with column = &#8220;#0&#8221;     delete(*items)\u00b6 Delete all specified items and all their descendants. The root item may not be deleted.     detach(*items)\u00b6 Unlinks all of the specified items from the tree. The items and all of their descendants are still present, and may be reinserted at another point in the tree, but will not be displayed. The root item may not be detached.     exists(item)\u00b6 Returns True if the specified item is present in the tree.    focus([item=None])\u00b6 If item is specified, sets the focus item to item. Otherwise, returns the current focus item, or &#8216;&#8217; if there is none.    heading(column[, option=None[, **kw]])\u00b6 Query or modify the heading options for the specified column. If kw is not given, returns a dict of the heading option values. If option is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values. The valid options\/values are:   text: text The text to display in the column heading.     image: imageName Specifies an image to display to the right of the column heading.     anchor: anchor Specifies how the heading text should be aligned. One of the standard Tk anchor values.     command: callback A callback to be invoked when the heading label is pressed.     To configure the tree column heading, call this with column = &#8220;#0&#8221;.     identify(component, x, y)\u00b6 Returns a description of the specified component under the point given by x and y, or the empty string if no such component is present at that position.    identify_row(y)\u00b6 Returns the item ID of the item at position y.    identify_column(x)\u00b6 Returns the data column identifier of the cell at position x. The tree column has ID #0.     identify_region(x, y)\u00b6 Returns one of:       region meaning    heading Tree heading area.  separator Space between two columns headings.  tree The tree area.  cell A data cell.    Availability: Tk 8.6.     identify_element(x, y)\u00b6 Returns the element at position x, y. Availability: Tk 8.6.     index(item)\u00b6 Returns the integer index of item within its parent&#8217;s list of children.    insert(parent, index[, iid=None[, **kw]])\u00b6 Creates a new item and returns the item identifier of the newly created item. parent is the item ID of the parent item, or the empty string to create a new top-level item. index is an integer, or the value &#8220;end&#8221;, specifying where in the list of parent&#8217;s children to insert the new item. If index is less than or equal to zero, the new node is inserted at the beginning; if index is greater than or equal to the current number of children, it is inserted at the end. If iid is specified, it is used as the item identifier; iid must not already exist in the tree. Otherwise, a new unique identifier is generated. See Item Options for the list of available points.     item(item[, option[, **kw]])\u00b6 Query or modify the options for the specified item. If no options are given, a dict with options\/values for the item is returned. If option is specified then the value for that option is returned. Otherwise, sets the options to the corresponding values as given by kw.     move(item, parent, index)\u00b6 Moves item to position index in parent&#8216;s list of children. It is illegal to move an item under one of its descendants. If index is less than or equal to zero, item is moved to the beginning; if greater than or equal to the number of children, it is moved to the end. If item was detached it is reattached.     next(item)\u00b6 Returns the identifier of item&#8216;s next sibling, or &#8216;&#8217; if item is the last child of its parent.    parent(item)\u00b6 Returns the ID of the parent of item, or &#8216;&#8217; if item is at the top level of the hierarchy.    prev(item)\u00b6 Returns the identifier of item&#8216;s previous sibling, or &#8216;&#8217; if item is the first child of its parent.    reattach(item, parent, index)\u00b6 An alias for Treeview.move().    see(item)\u00b6 Ensure that item is visible. Sets all of item&#8216;s ancestors open option to True, and scrolls the widget if necessary so that item is within the visible portion of the tree.     selection([selop=None[, items=None]])\u00b6 If selop is not specified, returns selected items. Otherwise, it will act according to the following selection methods.    selection_set(items)\u00b6 items becomes the new selection.    selection_add(items)\u00b6 Add items to the selection.    selection_remove(items)\u00b6 Remove items from the selection.    selection_toggle(items)\u00b6 Toggle the selection state of each item in items.    set(item[, column=None[, value=None]])\u00b6 With one argument, returns a dictionary of column\/value pairs for the specified item. With two arguments, returns the current value of the specified column. With three arguments, sets the value of given column in given item to the specified value.    tag_bind(tagname[, sequence=None[, callback=None]])\u00b6 Bind a callback for the given event sequence to the tag tagname. When an event is delivered to an item, the callbacks for each of the item&#8217;s tags option are called.    tag_configure(tagname[, option=None[, **kw]])\u00b6 Query or modify the options for the specified tagname. If kw is not given, returns a dict of the option settings for tagname. If option is specified, returns the value for that option for the specified tagname. Otherwise, sets the options to the corresponding values for the given tagname.     tag_has(tagname[, item])\u00b6 If item is specified, returns 1 or 0 depending on whether the specified item has the given tagname. Otherwise, returns a list of all items that have the specified tag. Availability: Tk 8.6     xview(*args)\u00b6 Query or modify horizontal position of the treeview.    yview(*args)\u00b6 Query or modify vertical position of the treeview.       24.2.10. Ttk Styling\u00b6 Each widget in ttk is assigned a style, which specifies the set of elements making up the widget and how they are arranged, along with dynamic and default settings for element options. By default the style name is the same as the widget&#8217;s class name, but it may be overridden by the widget&#8217;s style option. If the class name of a widget is unknown, use the method Misc.winfo_class() (somewidget.winfo_class()).  See also  Tcl&#8216;2004 conference presentation This document explains how the theme engine works     class ttk.Style\u00b6 This class is used to manipulate the style database.   configure(style, query_opt=None, **kw)\u00b6 Query or set the default value of the specified option(s) in style. Each key in kw is an option and each value is a string identifying the value for that option. For example, to change every default button to be a flat button with some padding and a different background color do: import ttk import Tkinter  root = Tkinter.Tk()  ttk.Style().configure(\"TButton\", padding=6, relief=\"flat\",    background=\"#ccc\")  btn = ttk.Button(text=\"Sample\") btn.pack()  root.mainloop()       map(style, query_opt=None, **kw)\u00b6 Query or sets dynamic values of the specified option(s) in style. Each key in kw is an option and each value should be a list or a tuple (usually) containing statespecs grouped in tuples, lists, or something else of your preference. A statespec is a compound of one or more states and then a value. An example: import Tkinter import ttk  root = Tkinter.Tk()  style = ttk.Style() style.map(\"C.TButton\",     foreground=[(&#39;pressed&#39;, &#39;red&#39;), (&#39;active&#39;, &#39;blue&#39;)],     background=[(&#39;pressed&#39;, &#39;!disabled&#39;, &#39;black&#39;), (&#39;active&#39;, &#39;white&#39;)]     )  colored_btn = ttk.Button(text=\"Test\", style=\"C.TButton\").pack()  root.mainloop()   Note that the order of the (states, value) sequences for an option matters.  In the previous example, if you change the order to [('active', 'blue'), ('pressed', 'red')] in the foreground option, for example, you would get a blue foreground when the widget is in the active or pressed states.     lookup(style, option[, state=None[, default=None]])\u00b6 Returns the value specified for option in style. If state is specified, it is expected to be a sequence of one or more states. If the default argument is set, it is used as a fallback value in case no specification for option is found. To check what font a Button uses by default, do: import ttk  print ttk.Style().lookup(\"TButton\", \"font\")       layout(style[, layoutspec=None])\u00b6 Define the widget layout for given style. If layoutspec is omitted, return the layout specification for given style. layoutspec, if specified, is expected to be a list or some other sequence type (excluding strings), where each item should be a tuple and the first item is the layout name and the second item should have the format described in Layouts. To understand the format, see the following example (it is not intended to do anything useful): import ttk import Tkinter  root = Tkinter.Tk()  style = ttk.Style() style.layout(\"TMenubutton\", [    (\"Menubutton.background\", None),    (\"Menubutton.button\", {\"children\":        [(\"Menubutton.focus\", {\"children\":            [(\"Menubutton.padding\", {\"children\":                [(\"Menubutton.label\", {\"side\": \"left\", \"expand\": 1})]            })]        })]    }), ])  mbtn = ttk.Menubutton(text=&#39;Text&#39;) mbtn.pack() root.mainloop()       element_create(elementname, etype, *args, **kw)\u00b6 Create a new element in the current theme, of the given etype which is expected to be either &#8220;image&#8221;, &#8220;from&#8221; or &#8220;vsapi&#8221;. The latter is only available in Tk 8.6a for Windows XP and Vista and is not described here. If &#8220;image&#8221; is used, args should contain the default image name followed by statespec\/value pairs (this is the imagespec), and kw may have the following options:    border=padding padding is a list of up to four integers, specifying the left, top, right, and bottom borders, respectively.     height=height Specifies a minimum height for the element. If less than zero, the base image&#8217;s height is used as a default.     padding=padding Specifies the element&#8217;s interior padding. Defaults to border&#8217;s value if not specified.     sticky=spec Specifies how the image is placed within the final parcel. spec contains zero or more characters &#8220;n&#8221;, &#8220;s&#8221;, &#8220;w&#8221;, or &#8220;e&#8221;.     width=width Specifies a minimum width for the element. If less than zero, the base image&#8217;s width is used as a default.      If &#8220;from&#8221; is used as the value of etype, element_create() will clone an existing element. args is expected to contain a themename, from which the element will be cloned, and optionally an element to clone from. If this element to clone from is not specified, an empty element will be used. kw is discarded.     element_names()\u00b6 Returns the list of elements defined in the current theme.    element_options(elementname)\u00b6 Returns the list of elementname&#8216;s options.    theme_create(themename[, parent=None[, settings=None]])\u00b6 Create a new theme. It is an error if themename already exists. If parent is specified, the new theme will inherit styles, elements and layouts from the parent theme. If settings are present they are expected to have the same syntax used for theme_settings().     theme_settings(themename, settings)\u00b6 Temporarily sets the current theme to themename, apply specified settings and then restore the previous theme. Each key in settings is a style and each value may contain the keys &#8216;configure&#8217;, &#8216;map&#8217;, &#8216;layout&#8217; and &#8216;element create&#8217; and they are expected to have the same format as specified by the methods Style.configure(), Style.map(), Style.layout() and Style.element_create() respectively. As an example, let&#8217;s change the Combobox for the default theme a bit: import ttk import Tkinter  root = Tkinter.Tk()  style = ttk.Style() style.theme_settings(\"default\", {    \"TCombobox\": {        \"configure\": {\"padding\": 5},        \"map\": {            \"background\": [(\"active\", \"green2\"),                           (\"!disabled\", \"green4\")],            \"fieldbackground\": [(\"!disabled\", \"green3\")],            \"foreground\": [(\"focus\", \"OliveDrab1\"),                           (\"!disabled\", \"OliveDrab2\")]        }    } })  combo = ttk.Combobox().pack()  root.mainloop()       theme_names()\u00b6 Returns a list of all known themes.    theme_use([themename])\u00b6 If themename is not given, returns the theme in use.  Otherwise, sets the current theme to themename, refreshes all widgets and emits a <<ThemeChanged>> event.     24.2.10.1. Layouts\u00b6 A layout can be just None, if it takes no options, or a dict of options specifying how to arrange the element. The layout mechanism uses a simplified version of the pack geometry manager: given an initial cavity, each element is allocated a parcel. Valid options\/values are:    side: whichside Specifies which side of the cavity to place the element; one of top, right, bottom or left. If omitted, the element occupies the entire cavity.     sticky: nswe Specifies where the element is placed inside its allocated parcel.     unit: 0 or 1 If set to 1, causes the element and all of its descendants to be treated as a single element for the purposes of Widget.identify() et al. It&#8217;s used for things like scrollbar thumbs with grips.     children: [sublayout... ] Specifies a list of elements to place inside the element. Each element is a tuple (or other sequence type) where the first item is the layout name, and the other is a Layout."},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Combobox","title":"ttk.Combobox","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Combobox.current","title":"ttk.Combobox.current","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Combobox.get","title":"ttk.Combobox.get","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Combobox.set","title":"ttk.Combobox.set","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook","title":"ttk.Notebook","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.add","title":"ttk.Notebook.add","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.enable_traversal","title":"ttk.Notebook.enable_traversal","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.forget","title":"ttk.Notebook.forget","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.hide","title":"ttk.Notebook.hide","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.identify","title":"ttk.Notebook.identify","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.index","title":"ttk.Notebook.index","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.insert","title":"ttk.Notebook.insert","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.select","title":"ttk.Notebook.select","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.tab","title":"ttk.Notebook.tab","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Notebook.tabs","title":"ttk.Notebook.tabs","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Progressbar","title":"ttk.Progressbar","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Progressbar.start","title":"ttk.Progressbar.start","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Progressbar.step","title":"ttk.Progressbar.step","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Progressbar.stop","title":"ttk.Progressbar.stop","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style","title":"ttk.Style","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.configure","title":"ttk.Style.configure","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.element_create","title":"ttk.Style.element_create","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.element_names","title":"ttk.Style.element_names","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.element_options","title":"ttk.Style.element_options","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.layout","title":"ttk.Style.layout","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.lookup","title":"ttk.Style.lookup","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.map","title":"ttk.Style.map","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.theme_create","title":"ttk.Style.theme_create","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.theme_names","title":"ttk.Style.theme_names","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.theme_settings","title":"ttk.Style.theme_settings","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Style.theme_use","title":"ttk.Style.theme_use","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview","title":"ttk.Treeview","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.bbox","title":"ttk.Treeview.bbox","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.column","title":"ttk.Treeview.column","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.delete","title":"ttk.Treeview.delete","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.detach","title":"ttk.Treeview.detach","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.exists","title":"ttk.Treeview.exists","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.focus","title":"ttk.Treeview.focus","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.get_children","title":"ttk.Treeview.get_children","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.heading","title":"ttk.Treeview.heading","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.identify","title":"ttk.Treeview.identify","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.identify_column","title":"ttk.Treeview.identify_column","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.identify_element","title":"ttk.Treeview.identify_element","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.identify_region","title":"ttk.Treeview.identify_region","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.identify_row","title":"ttk.Treeview.identify_row","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.index","title":"ttk.Treeview.index","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.insert","title":"ttk.Treeview.insert","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.item","title":"ttk.Treeview.item","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.move","title":"ttk.Treeview.move","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.next","title":"ttk.Treeview.next","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.parent","title":"ttk.Treeview.parent","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.prev","title":"ttk.Treeview.prev","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.reattach","title":"ttk.Treeview.reattach","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.see","title":"ttk.Treeview.see","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.selection","title":"ttk.Treeview.selection","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.selection_add","title":"ttk.Treeview.selection_add","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.selection_remove","title":"ttk.Treeview.selection_remove","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.selection_set","title":"ttk.Treeview.selection_set","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.selection_toggle","title":"ttk.Treeview.selection_toggle","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.set","title":"ttk.Treeview.set","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.set_children","title":"ttk.Treeview.set_children","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.tag_bind","title":"ttk.Treeview.tag_bind","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.tag_configure","title":"ttk.Treeview.tag_configure","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.tag_has","title":"ttk.Treeview.tag_has","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.xview","title":"ttk.Treeview.xview","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Treeview.yview","title":"ttk.Treeview.yview","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Widget","title":"ttk.Widget","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Widget.identify","title":"ttk.Widget.identify","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Widget.instate","title":"ttk.Widget.instate","description":""},{"url":"http:\/\/docs.python.org\/library\/ttk.html#ttk.Widget.state","title":"ttk.Widget.state","description":""},{"url":"http:\/\/docs.python.org\/library\/pydoc.html","title":"pydoc","description":"25.1. pydoc &#8212; Documentation generator and online help system\u00b6  New in version 2.1. Source code: Lib\/pydoc.py  The pydoc module automatically generates documentation from Python modules.  The documentation can be presented as pages of text on the console, served to a Web browser, or saved to HTML files. The built-in function help() invokes the online help system in the interactive interpreter, which uses pydoc to generate its documentation as text on the console.  The same text documentation can also be viewed from outside the Python interpreter by running pydoc as a script at the operating system&#8217;s command prompt. For example, running pydoc sys  at a shell prompt will display documentation on the sys module, in a style similar to the manual pages shown by the Unix man command.  The argument to pydoc can be the name of a function, module, or package, or a dotted reference to a class, method, or function within a module or module in a package.  If the argument to pydoc looks like a path (that is, it contains the path separator for your operating system, such as a slash in Unix), and refers to an existing Python source file, then documentation is produced for that file.  Note In order to find objects and their documentation, pydoc imports the module(s) to be documented.  Therefore, any code on module level will be executed on that occasion.  Use an if __name__ == '__main__': guard to only execute code when a file is invoked as a script and not just imported.  Specifying a -w flag before the argument will cause HTML documentation to be written out to a file in the current directory, instead of displaying text on the console. Specifying a -k flag before the argument will search the synopsis lines of all available modules for the keyword given as the argument, again in a manner similar to the Unix man command.  The synopsis line of a module is the first line of its documentation string. You can also use pydoc to start an HTTP server on the local machine that will serve documentation to visiting Web browsers. pydoc -p 1234 will start a HTTP server on port 1234, allowing you to browse the documentation at http:\/\/localhost:1234\/ in your preferred Web browser. pydoc -g will start the server and additionally bring up a small Tkinter-based graphical interface to help you search for documentation pages. When pydoc generates documentation, it uses the current environment and path to locate modules.  Thus, invoking pydoc spam documents precisely the version of the module you would get if you started the Python interpreter and typed import spam. Module docs for core modules are assumed to reside in http:\/\/docs.python.org\/library\/.  This can be overridden by setting the PYTHONDOCS environment variable to a different URL or to a local directory containing the Library Reference Manual pages."},{"url":"http:\/\/docs.python.org\/library\/turtle.html","title":"turtle","description":"24.5. turtle &#8212; Turtle graphics for Tk\u00b6  24.5.1. Introduction\u00b6 Turtle graphics is a popular way for introducing programming to kids.  It was part of the original Logo programming language developed by Wally Feurzig and Seymour Papert in 1966. Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an import turtle, give it the command turtle.forward(15), and it moves (on-screen!) 15 pixels in the direction it is facing, drawing a line as it moves.  Give it the command turtle.right(25), and it rotates in-place 25 degrees clockwise. By combining together these and similar commands, intricate shapes and pictures can easily be drawn. The turtle module is an extended reimplementation of the same-named module from the Python standard distribution up to version Python 2.5. It tries to keep the merits of the old turtle module and to be (nearly) 100% compatible with it.  This means in the first place to enable the learning programmer to use all the commands, classes and methods interactively when using the module from within IDLE run with the -n switch. The turtle module provides turtle graphics primitives, in both object-oriented and procedure-oriented ways.  Because it uses Tkinter for the underlying graphics, it needs a version of Python installed with Tk support. The object-oriented interface uses essentially two+two classes:  The TurtleScreen class defines graphics windows as a playground for the drawing turtles.  Its constructor needs a Tkinter.Canvas or a ScrolledCanvas as argument.  It should be used when turtle is used as part of some application. The function Screen() returns a singleton object of a TurtleScreen subclass. This function should be used when turtle is used as a standalone tool for doing graphics. As a singleton object, inheriting from its class is not possible. All methods of TurtleScreen\/Screen also exist as functions, i.e. as part of the procedure-oriented interface.  RawTurtle (alias: RawPen) defines Turtle objects which draw on a TurtleScreen.  Its constructor needs a Canvas, ScrolledCanvas or TurtleScreen as argument, so the RawTurtle objects know where to draw. Derived from RawTurtle is the subclass Turtle (alias: Pen), which draws on &#8220;the&#8221; Screen - instance which is automatically created, if not already present. All methods of RawTurtle\/Turtle also exist as functions, i.e. part of the procedure-oriented interface.   The procedural interface provides functions which are derived from the methods of the classes Screen and Turtle.  They have the same names as the corresponding methods.  A screen object is automatically created whenever a function derived from a Screen method is called.  An (unnamed) turtle object is automatically created whenever any of the functions derived from a Turtle method is called. To use multiple turtles an a screen one has to use the object-oriented interface.  Note In the following documentation the argument list for functions is given. Methods, of course, have the additional first argument self which is omitted here.    24.5.2. Overview over available Turtle and Screen methods\u00b6  24.5.2.1. Turtle methods\u00b6  Turtle motion  Move and draw  forward() | fd() backward() | bk() | back() right() | rt() left() | lt() goto() | setpos() | setposition() setx() sety() setheading() | seth() home() circle() dot() stamp() clearstamp() clearstamps() undo() speed()   Tell Turtle&#8217;s state  position() | pos() towards() xcor() ycor() heading() distance()   Setting and measurement  degrees() radians()     Pen control  Drawing state  pendown() | pd() | down() penup() | pu() | up() pensize() | width() pen() isdown()   Color control  color() pencolor() fillcolor()   Filling  fill() begin_fill() end_fill()   More drawing control  reset() clear() write()     Turtle state  Visibility  showturtle() | st() hideturtle() | ht() isvisible()   Appearance  shape() resizemode() shapesize() | turtlesize() settiltangle() tiltangle() tilt()     Using events  onclick() onrelease() ondrag() mainloop() | done()   Special Turtle methods  begin_poly() end_poly() get_poly() clone() getturtle() | getpen() getscreen() setundobuffer() undobufferentries() tracer() window_width() window_height()      24.5.2.2. Methods of TurtleScreen\/Screen\u00b6  Window control  bgcolor() bgpic() clear() | clearscreen() reset() | resetscreen() screensize() setworldcoordinates()   Animation control  delay() tracer() update()   Using screen events  listen() onkey() onclick() | onscreenclick() ontimer()   Settings and special methods  mode() colormode() getcanvas() getshapes() register_shape() | addshape() turtles() window_height() window_width()   Methods specific to Screen  bye() exitonclick() setup() title()       24.5.3. Methods of RawTurtle\/Turtle and corresponding functions\u00b6 Most of the examples in this section refer to a Turtle instance called turtle.  24.5.3.1. Turtle motion\u00b6   turtle.forward(distance)\u00b6  turtle.fd(distance)\u00b6     Parameter:distance &#8211; a number (integer or float)    Move the turtle forward by the specified distance, in the direction the turtle is headed. >>> turtle.position() (0.00,0.00) >>> turtle.forward(25) >>> turtle.position() (25.00,0.00) >>> turtle.forward(-75) >>> turtle.position() (-50.00,0.00)       turtle.back(distance)\u00b6  turtle.bk(distance)\u00b6  turtle.backward(distance)\u00b6     Parameter:distance &#8211; a number    Move the turtle backward by distance, opposite to the direction the turtle is headed.  Do not change the turtle&#8217;s heading. >>> turtle.position() (0.00,0.00) >>> turtle.backward(30) >>> turtle.position() (-30.00,0.00)       turtle.right(angle)\u00b6  turtle.rt(angle)\u00b6     Parameter:angle &#8211; a number (integer or float)    Turn turtle right by angle units.  (Units are by default degrees, but can be set via the degrees() and radians() functions.)  Angle orientation depends on the turtle mode, see mode(). >>> turtle.heading() 22.0 >>> turtle.right(45) >>> turtle.heading() 337.0       turtle.left(angle)\u00b6  turtle.lt(angle)\u00b6     Parameter:angle &#8211; a number (integer or float)    Turn turtle left by angle units.  (Units are by default degrees, but can be set via the degrees() and radians() functions.)  Angle orientation depends on the turtle mode, see mode(). >>> turtle.heading() 22.0 >>> turtle.left(45) >>> turtle.heading() 67.0       turtle.goto(x, y=None)\u00b6  turtle.setpos(x, y=None)\u00b6  turtle.setposition(x, y=None)\u00b6     Parameters: x &#8211; a number or a pair\/vector of numbers y &#8211; a number or None      If y is None, x must be a pair of coordinates or a Vec2D (e.g. as returned by pos()). Move turtle to an absolute position.  If the pen is down, draw line.  Do not change the turtle&#8217;s orientation. >>> tp = turtle.pos() >>> tp (0.00,0.00) >>> turtle.setpos(60,30) >>> turtle.pos() (60.00,30.00) >>> turtle.setpos((20,80)) >>> turtle.pos() (20.00,80.00) >>> turtle.setpos(tp) >>> turtle.pos() (0.00,0.00)       turtle.setx(x)\u00b6     Parameter:x &#8211; a number (integer or float)    Set the turtle&#8217;s first coordinate to x, leave second coordinate unchanged. >>> turtle.position() (0.00,240.00) >>> turtle.setx(10) >>> turtle.position() (10.00,240.00)       turtle.sety(y)\u00b6     Parameter:y &#8211; a number (integer or float)    Set the turtle&#8217;s second coordinate to y, leave first coordinate unchanged. >>> turtle.position() (0.00,40.00) >>> turtle.sety(-10) >>> turtle.position() (0.00,-10.00)       turtle.setheading(to_angle)\u00b6  turtle.seth(to_angle)\u00b6     Parameter:to_angle &#8211; a number (integer or float)    Set the orientation of the turtle to to_angle.  Here are some common directions in degrees:       standard mode logo mode    0 - east 0 - north  90 - north 90 - east  180 - west 180 - south  270 - south 270 - west    >>> turtle.setheading(90) >>> turtle.heading() 90.0       turtle.home()\u00b6 Move turtle to the origin &#8211; coordinates (0,0) &#8211; and set its heading to its start-orientation (which depends on the mode, see mode()). >>> turtle.heading() 90.0 >>> turtle.position() (0.00,-10.00) >>> turtle.home() >>> turtle.position() (0.00,0.00) >>> turtle.heading() 0.0       turtle.circle(radius, extent=None, steps=None)\u00b6     Parameters: radius &#8211; a number extent &#8211; a number (or None) steps &#8211; an integer (or None)      Draw a circle with given radius.  The center is radius units left of the turtle; extent &#8211; an angle &#8211; determines which part of the circle is drawn.  If extent is not given, draw the entire circle.  If extent is not a full circle, one endpoint of the arc is the current pen position.  Draw the arc in counterclockwise direction if radius is positive, otherwise in clockwise direction.  Finally the direction of the turtle is changed by the amount of extent. As the circle is approximated by an inscribed regular polygon, steps determines the number of steps to use.  If not given, it will be calculated automatically.  May be used to draw regular polygons. >>> turtle.home() >>> turtle.position() (0.00,0.00) >>> turtle.heading() 0.0 >>> turtle.circle(50) >>> turtle.position() (-0.00,0.00) >>> turtle.heading() 0.0 >>> turtle.circle(120, 180)  # draw a semicircle >>> turtle.position() (0.00,240.00) >>> turtle.heading() 180.0       turtle.dot(size=None, *color)\u00b6     Parameters: size &#8211; an integer >= 1 (if given) color &#8211; a colorstring or a numeric color tuple      Draw a circular dot with diameter size, using color.  If size is not given, the maximum of pensize+4 and 2*pensize is used. >>> turtle.home() >>> turtle.dot() >>> turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50) >>> turtle.position() (100.00,-0.00) >>> turtle.heading() 0.0       turtle.stamp()\u00b6 Stamp a copy of the turtle shape onto the canvas at the current turtle position.  Return a stamp_id for that stamp, which can be used to delete it by calling clearstamp(stamp_id). >>> turtle.color(\"blue\") >>> turtle.stamp() 11 >>> turtle.fd(50)       turtle.clearstamp(stampid)\u00b6     Parameter:stampid &#8211; an integer, must be return value of previous stamp() call    Delete stamp with given stampid. >>> turtle.position() (150.00,-0.00) >>> turtle.color(\"blue\") >>> astamp = turtle.stamp() >>> turtle.fd(50) >>> turtle.position() (200.00,-0.00) >>> turtle.clearstamp(astamp) >>> turtle.position() (200.00,-0.00)       turtle.clearstamps(n=None)\u00b6     Parameter:n &#8211; an integer (or None)    Delete all or first\/last n of turtle&#8217;s stamps.  If n is None, delete all stamps, if n > 0 delete first n stamps, else if n < 0 delete last n stamps. >>> for i in range(8): ...     turtle.stamp(); turtle.fd(30) 13 14 15 16 17 18 19 20 >>> turtle.clearstamps(2) >>> turtle.clearstamps(-2) >>> turtle.clearstamps()       turtle.undo()\u00b6 Undo (repeatedly) the last turtle action(s).  Number of available undo actions is determined by the size of the undobuffer. >>> for i in range(4): ...     turtle.fd(50); turtle.lt(80) ... >>> for i in range(8): ...     turtle.undo()       turtle.speed(speed=None)\u00b6     Parameter:speed &#8211; an integer in the range 0..10 or a speedstring (see below)    Set the turtle&#8217;s speed to an integer value in the range 0..10.  If no argument is given, return current speed. If input is a number greater than 10 or smaller than 0.5, speed is set to 0.  Speedstrings are mapped to speedvalues as follows:  &#8220;fastest&#8221;:  0 &#8220;fast&#8221;:  10 &#8220;normal&#8221;:  6 &#8220;slow&#8221;:  3 &#8220;slowest&#8221;:  1  Speeds from 1 to 10 enforce increasingly faster animation of line drawing and turtle turning. Attention: speed = 0 means that no animation takes place. forward\/back makes turtle jump and likewise left\/right make the turtle turn instantly. >>> turtle.speed() 3 >>> turtle.speed(&#39;normal&#39;) >>> turtle.speed() 6 >>> turtle.speed(9) >>> turtle.speed() 9       24.5.3.2. Tell Turtle&#8217;s state\u00b6   turtle.position()\u00b6  turtle.pos()\u00b6 Return the turtle&#8217;s current location (x,y) (as a Vec2D vector). >>> turtle.pos() (440.00,-0.00)       turtle.towards(x, y=None)\u00b6     Parameters: x &#8211; a number or a pair\/vector of numbers or a turtle instance y &#8211; a number if x is a number, else None      Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle.  This depends on the turtle&#8217;s start orientation which depends on the mode - &#8220;standard&#8221;\/&#8221;world&#8221; or &#8220;logo&#8221;). >>> turtle.goto(10, 10) >>> turtle.towards(0,0) 225.0       turtle.xcor()\u00b6 Return the turtle&#8217;s x coordinate. >>> turtle.home() >>> turtle.left(50) >>> turtle.forward(100) >>> turtle.pos() (64.28,76.60) >>> print turtle.xcor() 64.2787609687       turtle.ycor()\u00b6 Return the turtle&#8217;s y coordinate. >>> turtle.home() >>> turtle.left(60) >>> turtle.forward(100) >>> print turtle.pos() (50.00,86.60) >>> print turtle.ycor() 86.6025403784       turtle.heading()\u00b6 Return the turtle&#8217;s current heading (value depends on the turtle mode, see mode()). >>> turtle.home() >>> turtle.left(67) >>> turtle.heading() 67.0       turtle.distance(x, y=None)\u00b6     Parameters: x &#8211; a number or a pair\/vector of numbers or a turtle instance y &#8211; a number if x is a number, else None      Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units. >>> turtle.home() >>> turtle.distance(30,40) 50.0 >>> turtle.distance((30,40)) 50.0 >>> joe = Turtle() >>> joe.forward(77) >>> turtle.distance(joe) 77.0       24.5.3.3. Settings for measurement\u00b6   turtle.degrees(fullcircle=360.0)\u00b6     Parameter:fullcircle &#8211; a number    Set angle measurement units, i.e. set number of &#8220;degrees&#8221; for a full circle. Default value is 360 degrees. >>> turtle.home() >>> turtle.left(90) >>> turtle.heading() 90.0  Change angle measurement unit to grad (also known as gon, grade, or gradian and equals 1\/100-th of the right angle.) >>> turtle.degrees(400.0) >>> turtle.heading() 100.0 >>> turtle.degrees(360) >>> turtle.heading() 90.0       turtle.radians()\u00b6 Set the angle measurement units to radians.  Equivalent to degrees(2*math.pi). >>> turtle.home() >>> turtle.left(90) >>> turtle.heading() 90.0 >>> turtle.radians() >>> turtle.heading() 1.5707963267948966       24.5.3.4. Pen control\u00b6  24.5.3.4.1. Drawing state\u00b6   turtle.pendown()\u00b6  turtle.pd()\u00b6  turtle.down()\u00b6 Pull the pen down &#8211; drawing when moving.    turtle.penup()\u00b6  turtle.pu()\u00b6  turtle.up()\u00b6 Pull the pen up &#8211; no drawing when moving.    turtle.pensize(width=None)\u00b6  turtle.width(width=None)\u00b6     Parameter:width &#8211; a positive number    Set the line thickness to width or return it.  If resizemode is set to &#8220;auto&#8221; and turtleshape is a polygon, that polygon is drawn with the same line thickness.  If no argument is given, the current pensize is returned. >>> turtle.pensize() 1 >>> turtle.pensize(10)   # from here on lines of width 10 are drawn       turtle.pen(pen=None, **pendict)\u00b6     Parameters: pen &#8211; a dictionary with some or all of the below listed keys pendict &#8211; one or more keyword-arguments with the below listed keys as keywords      Return or set the pen&#8217;s attributes in a &#8220;pen-dictionary&#8221; with the following key\/value pairs:  &#8220;shown&#8221;: True\/False &#8220;pendown&#8221;: True\/False &#8220;pencolor&#8221;: color-string or color-tuple &#8220;fillcolor&#8221;: color-string or color-tuple &#8220;pensize&#8221;: positive number &#8220;speed&#8221;: number in range 0..10 &#8220;resizemode&#8221;: &#8220;auto&#8221; or &#8220;user&#8221; or &#8220;noresize&#8221; &#8220;stretchfactor&#8221;: (positive number, positive number) &#8220;outline&#8221;: positive number &#8220;tilt&#8221;: number  This dictionary can be used as argument for a subsequent call to pen() to restore the former pen-state.  Moreover one or more of these attributes can be provided as keyword-arguments.  This can be used to set several pen attributes in one statement. >>> turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10) >>> sorted(turtle.pen().items()) [(&#39;fillcolor&#39;, &#39;black&#39;), (&#39;outline&#39;, 1), (&#39;pencolor&#39;, &#39;red&#39;),  (&#39;pendown&#39;, True), (&#39;pensize&#39;, 10), (&#39;resizemode&#39;, &#39;noresize&#39;),  (&#39;shown&#39;, True), (&#39;speed&#39;, 9), (&#39;stretchfactor&#39;, (1, 1)), (&#39;tilt&#39;, 0)] >>> penstate=turtle.pen() >>> turtle.color(\"yellow\", \"\") >>> turtle.penup() >>> sorted(turtle.pen().items()) [(&#39;fillcolor&#39;, &#39;&#39;), (&#39;outline&#39;, 1), (&#39;pencolor&#39;, &#39;yellow&#39;),  (&#39;pendown&#39;, False), (&#39;pensize&#39;, 10), (&#39;resizemode&#39;, &#39;noresize&#39;),  (&#39;shown&#39;, True), (&#39;speed&#39;, 9), (&#39;stretchfactor&#39;, (1, 1)), (&#39;tilt&#39;, 0)] >>> turtle.pen(penstate, fillcolor=\"green\") >>> sorted(turtle.pen().items()) [(&#39;fillcolor&#39;, &#39;green&#39;), (&#39;outline&#39;, 1), (&#39;pencolor&#39;, &#39;red&#39;),  (&#39;pendown&#39;, True), (&#39;pensize&#39;, 10), (&#39;resizemode&#39;, &#39;noresize&#39;),  (&#39;shown&#39;, True), (&#39;speed&#39;, 9), (&#39;stretchfactor&#39;, (1, 1)), (&#39;tilt&#39;, 0)]       turtle.isdown()\u00b6 Return True if pen is down, False if it&#8217;s up. >>> turtle.penup() >>> turtle.isdown() False >>> turtle.pendown() >>> turtle.isdown() True       24.5.3.4.2. Color control\u00b6   turtle.pencolor(*args)\u00b6 Return or set the pencolor. Four input formats are allowed:  pencolor() Return the current pencolor as color specification string or as a tuple (see example).  May be used as input to another color\/pencolor\/fillcolor call. pencolor(colorstring) Set pencolor to colorstring, which is a Tk color specification string, such as \"red\", \"yellow\", or \"#33cc8c\". pencolor((r, g, b)) Set pencolor to the RGB color represented by the tuple of r, g, and b.  Each of r, g, and b must be in the range 0..colormode, where colormode is either 1.0 or 255 (see colormode()). pencolor(r, g, b)  Set pencolor to the RGB color represented by r, g, and b.  Each of r, g, and b must be in the range 0..colormode. If turtleshape is a polygon, the outline of that polygon is drawn with the newly set pencolor.   >>> colormode() 1.0 >>> turtle.pencolor() &#39;red&#39; >>> turtle.pencolor(\"brown\") >>> turtle.pencolor() &#39;brown&#39; >>> tup = (0.2, 0.8, 0.55) >>> turtle.pencolor(tup) >>> turtle.pencolor() (0.2, 0.8, 0.5490196078431373) >>> colormode(255) >>> turtle.pencolor() (51, 204, 140) >>> turtle.pencolor(&#39;#32c18f&#39;) >>> turtle.pencolor() (50, 193, 143)       turtle.fillcolor(*args)\u00b6 Return or set the fillcolor. Four input formats are allowed:  fillcolor() Return the current fillcolor as color specification string, possibly in tuple format (see example).  May be used as input to another color\/pencolor\/fillcolor call. fillcolor(colorstring) Set fillcolor to colorstring, which is a Tk color specification string, such as \"red\", \"yellow\", or \"#33cc8c\". fillcolor((r, g, b)) Set fillcolor to the RGB color represented by the tuple of r, g, and b.  Each of r, g, and b must be in the range 0..colormode, where colormode is either 1.0 or 255 (see colormode()). fillcolor(r, g, b)  Set fillcolor to the RGB color represented by r, g, and b.  Each of r, g, and b must be in the range 0..colormode. If turtleshape is a polygon, the interior of that polygon is drawn with the newly set fillcolor.   >>> turtle.fillcolor(\"violet\") >>> turtle.fillcolor() &#39;violet&#39; >>> col = turtle.pencolor() >>> col (50, 193, 143) >>> turtle.fillcolor(col) >>> turtle.fillcolor() (50, 193, 143) >>> turtle.fillcolor(&#39;#ffffff&#39;) >>> turtle.fillcolor() (255, 255, 255)       turtle.color(*args)\u00b6 Return or set pencolor and fillcolor. Several input formats are allowed.  They use 0 to 3 arguments as follows:  color() Return the current pencolor and the current fillcolor as a pair of color specification strings or tuples as returned by pencolor() and fillcolor(). color(colorstring), color((r,g,b)), color(r,g,b) Inputs as in pencolor(), set both, fillcolor and pencolor, to the given value. color(colorstring1, colorstring2), color((r1,g1,b1), (r2,g2,b2))  Equivalent to pencolor(colorstring1) and fillcolor(colorstring2) and analogously if the other input format is used. If turtleshape is a polygon, outline and interior of that polygon is drawn with the newly set colors.   >>> turtle.color(\"red\", \"green\") >>> turtle.color() (&#39;red&#39;, &#39;green&#39;) >>> color(\"#285078\", \"#a0c8f0\") >>> color() ((40, 80, 120), (160, 200, 240))     See also: Screen method colormode().   24.5.3.4.3. Filling\u00b6   turtle.fill(flag)\u00b6     Parameter:flag &#8211; True\/False (or 1\/0 respectively)    Call fill(True) before drawing the shape you want to fill, and fill(False) when done.  When used without argument: return fillstate (True if filling, False else). >>> turtle.fill(True) >>> for _ in range(3): ...    turtle.forward(100) ...    turtle.left(120) ... >>> turtle.fill(False)       turtle.begin_fill()\u00b6 Call just before drawing a shape to be filled.  Equivalent to fill(True).    turtle.end_fill()\u00b6 Fill the shape drawn after the last call to begin_fill().  Equivalent to fill(False). >>> turtle.color(\"black\", \"red\") >>> turtle.begin_fill() >>> turtle.circle(80) >>> turtle.end_fill()       24.5.3.4.4. More drawing control\u00b6   turtle.reset()\u00b6 Delete the turtle&#8217;s drawings from the screen, re-center the turtle and set variables to the default values. >>> turtle.goto(0,-22) >>> turtle.left(100) >>> turtle.position() (0.00,-22.00) >>> turtle.heading() 100.0 >>> turtle.reset() >>> turtle.position() (0.00,0.00) >>> turtle.heading() 0.0       turtle.clear()\u00b6 Delete the turtle&#8217;s drawings from the screen.  Do not move turtle.  State and position of the turtle as well as drawings of other turtles are not affected.    turtle.write(arg, move=False, align=\"left\", font=(\"Arial\", 8, \"normal\"))\u00b6     Parameters: arg &#8211; object to be written to the TurtleScreen move &#8211; True\/False align &#8211; one of the strings &#8220;left&#8221;, &#8220;center&#8221; or right&#8221; font &#8211; a triple (fontname, fontsize, fonttype)      Write text - the string representation of arg - at the current turtle position according to align (&#8220;left&#8221;, &#8220;center&#8221; or right&#8221;) and with the given font.  If move is True, the pen is moved to the bottom-right corner of the text.  By default, move is False. >>> turtle.write(\"Home = \", True, align=\"center\") >>> turtle.write((0,0), True)        24.5.3.5. Turtle state\u00b6  24.5.3.5.1. Visibility\u00b6   turtle.hideturtle()\u00b6  turtle.ht()\u00b6 Make the turtle invisible.  It&#8217;s a good idea to do this while you&#8217;re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably. >>> turtle.hideturtle()       turtle.showturtle()\u00b6  turtle.st()\u00b6 Make the turtle visible. >>> turtle.showturtle()       turtle.isvisible()\u00b6 Return True if the Turtle is shown, False if it&#8217;s hidden. >>> turtle.hideturtle() >>> turtle.isvisible() False >>> turtle.showturtle() >>> turtle.isvisible() True       24.5.3.5.2. Appearance\u00b6   turtle.shape(name=None)\u00b6     Parameter:name &#8211; a string which is a valid shapename    Set turtle shape to shape with given name or, if name is not given, return name of current shape.  Shape with name must exist in the TurtleScreen&#8217;s shape dictionary.  Initially there are the following polygon shapes: &#8220;arrow&#8221;, &#8220;turtle&#8221;, &#8220;circle&#8221;, &#8220;square&#8221;, &#8220;triangle&#8221;, &#8220;classic&#8221;.  To learn about how to deal with shapes see Screen method register_shape(). >>> turtle.shape() &#39;classic&#39; >>> turtle.shape(\"turtle\") >>> turtle.shape() &#39;turtle&#39;       turtle.resizemode(rmode=None)\u00b6     Parameter:rmode &#8211; one of the strings &#8220;auto&#8221;, &#8220;user&#8221;, &#8220;noresize&#8221;    Set resizemode to one of the values: &#8220;auto&#8221;, &#8220;user&#8221;, &#8220;noresize&#8221;.  If rmode is not given, return current resizemode.  Different resizemodes have the following effects:  &#8220;auto&#8221;: adapts the appearance of the turtle corresponding to the value of pensize. &#8220;user&#8221;: adapts the appearance of the turtle according to the values of stretchfactor and outlinewidth (outline), which are set by shapesize(). &#8220;noresize&#8221;: no adaption of the turtle&#8217;s appearance takes place.  resizemode(&#8220;user&#8221;) is called by shapesize() when used with arguments. >>> turtle.resizemode() &#39;noresize&#39; >>> turtle.resizemode(\"auto\") >>> turtle.resizemode() &#39;auto&#39;       turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None)\u00b6  turtle.turtlesize(stretch_wid=None, stretch_len=None, outline=None)\u00b6     Parameters: stretch_wid &#8211; positive number stretch_len &#8211; positive number outline &#8211; positive number      Return or set the pen&#8217;s attributes x\/y-stretchfactors and\/or outline.  Set resizemode to &#8220;user&#8221;.  If and only if resizemode is set to &#8220;user&#8221;, the turtle will be displayed stretched according to its stretchfactors: stretch_wid is stretchfactor perpendicular to its orientation, stretch_len is stretchfactor in direction of its orientation, outline determines the width of the shapes&#8217;s outline. >>> turtle.shapesize() (1, 1, 1) >>> turtle.resizemode(\"user\") >>> turtle.shapesize(5, 5, 12) >>> turtle.shapesize() (5, 5, 12) >>> turtle.shapesize(outline=8) >>> turtle.shapesize() (5, 5, 8)       turtle.tilt(angle)\u00b6     Parameter:angle &#8211; a number    Rotate the turtleshape by angle from its current tilt-angle, but do not change the turtle&#8217;s heading (direction of movement). >>> turtle.reset() >>> turtle.shape(\"circle\") >>> turtle.shapesize(5,2) >>> turtle.tilt(30) >>> turtle.fd(50) >>> turtle.tilt(30) >>> turtle.fd(50)       turtle.settiltangle(angle)\u00b6     Parameter:angle &#8211; a number    Rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle.  Do not change the turtle&#8217;s heading (direction of movement). >>> turtle.reset() >>> turtle.shape(\"circle\") >>> turtle.shapesize(5,2) >>> turtle.settiltangle(45) >>> turtle.fd(50) >>> turtle.settiltangle(-45) >>> turtle.fd(50)       turtle.tiltangle()\u00b6 Return the current tilt-angle, i.e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement). >>> turtle.reset() >>> turtle.shape(\"circle\") >>> turtle.shapesize(5,2) >>> turtle.tilt(45) >>> turtle.tiltangle() 45.0        24.5.3.6. Using events\u00b6   turtle.onclick(fun, btn=1, add=None)\u00b6     Parameters: fun &#8211; a function with two arguments which will be called with the coordinates of the clicked point on the canvas num &#8211; number of the mouse-button, defaults to 1 (left mouse button) add &#8211; True or False &#8211; if True, a new binding will be added, otherwise it will replace a former binding      Bind fun to mouse-click events on this turtle.  If fun is None, existing bindings are removed.  Example for the anonymous turtle, i.e. the procedural way: >>> def turn(x, y): ...     left(180) ... >>> onclick(turn)  # Now clicking into the turtle will turn it. >>> onclick(None)  # event-binding will be removed       turtle.onrelease(fun, btn=1, add=None)\u00b6     Parameters: fun &#8211; a function with two arguments which will be called with the coordinates of the clicked point on the canvas num &#8211; number of the mouse-button, defaults to 1 (left mouse button) add &#8211; True or False &#8211; if True, a new binding will be added, otherwise it will replace a former binding      Bind fun to mouse-button-release events on this turtle.  If fun is None, existing bindings are removed. >>> class MyTurtle(Turtle): ...     def glow(self,x,y): ...         self.fillcolor(\"red\") ...     def unglow(self,x,y): ...         self.fillcolor(\"\") ... >>> turtle = MyTurtle() >>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red, >>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent.       turtle.ondrag(fun, btn=1, add=None)\u00b6     Parameters: fun &#8211; a function with two arguments which will be called with the coordinates of the clicked point on the canvas num &#8211; number of the mouse-button, defaults to 1 (left mouse button) add &#8211; True or False &#8211; if True, a new binding will be added, otherwise it will replace a former binding      Bind fun to mouse-move events on this turtle.  If fun is None, existing bindings are removed. Remark: Every sequence of mouse-move-events on a turtle is preceded by a mouse-click event on that turtle. >>> turtle.ondrag(turtle.goto)   Subsequently, clicking and dragging the Turtle will move it across the screen thereby producing handdrawings (if pen is down).     turtle.mainloop()\u00b6  turtle.done()\u00b6 Starts event loop - calling Tkinter&#8217;s mainloop function. Must be the last statement in a turtle graphics program. >>> turtle.mainloop()       24.5.3.7. Special Turtle methods\u00b6   turtle.begin_poly()\u00b6 Start recording the vertices of a polygon.  Current turtle position is first vertex of polygon.    turtle.end_poly()\u00b6 Stop recording the vertices of a polygon.  Current turtle position is last vertex of polygon.  This will be connected with the first vertex.    turtle.get_poly()\u00b6 Return the last recorded polygon. >>> turtle.home() >>> turtle.begin_poly() >>> turtle.fd(100) >>> turtle.left(20) >>> turtle.fd(30) >>> turtle.left(60) >>> turtle.fd(50) >>> turtle.end_poly() >>> p = turtle.get_poly() >>> register_shape(\"myFavouriteShape\", p)       turtle.clone()\u00b6 Create and return a clone of the turtle with same position, heading and turtle properties. >>> mick = Turtle() >>> joe = mick.clone()       turtle.getturtle()\u00b6  turtle.getpen()\u00b6 Return the Turtle object itself.  Only reasonable use: as a function to return the &#8220;anonymous turtle&#8221;: >>> pet = getturtle() >>> pet.fd(50) >>> pet <turtle.Turtle object at 0x...>       turtle.getscreen()\u00b6 Return the TurtleScreen object the turtle is drawing on. TurtleScreen methods can then be called for that object. >>> ts = turtle.getscreen() >>> ts <turtle._Screen object at 0x...> >>> ts.bgcolor(\"pink\")       turtle.setundobuffer(size)\u00b6     Parameter:size &#8211; an integer or None    Set or disable undobuffer.  If size is an integer an empty undobuffer of given size is installed.  size gives the maximum number of turtle actions that can be undone by the undo() method\/function.  If size is None, the undobuffer is disabled. >>> turtle.setundobuffer(42)       turtle.undobufferentries()\u00b6 Return number of entries in the undobuffer. >>> while undobufferentries(): ...     undo()       turtle.tracer(flag=None, delay=None)\u00b6 A replica of the corresponding TurtleScreen method.  Deprecated since version 2.6.     turtle.window_width()\u00b6  turtle.window_height()\u00b6 Both are replicas of the corresponding TurtleScreen methods.  Deprecated since version 2.6.     24.5.3.8. Excursus about the use of compound shapes\u00b6 To use compound turtle shapes, which consist of several polygons of different color, you must use the helper class Shape explicitly as described below:  Create an empty Shape object of type &#8220;compound&#8221;.  Add as many components to this object as desired, using the addcomponent() method. For example: >>> s = Shape(\"compound\") >>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5)) >>> s.addcomponent(poly1, \"red\", \"blue\") >>> poly2 = ((0,0),(10,-5),(-10,-5)) >>> s.addcomponent(poly2, \"blue\", \"red\")    Now add the Shape to the Screen&#8217;s shapelist and use it: >>> register_shape(\"myshape\", s) >>> shape(\"myshape\")      Note The Shape class is used internally by the register_shape() method in different ways.  The application programmer has to deal with the Shape class only when using compound shapes like shown above!     24.5.4. Methods of TurtleScreen\/Screen and corresponding functions\u00b6 Most of the examples in this section refer to a TurtleScreen instance called screen.  24.5.4.1. Window control\u00b6   turtle.bgcolor(*args)\u00b6     Parameter:args &#8211; a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers    Set or return background color of the TurtleScreen. >>> screen.bgcolor(\"orange\") >>> screen.bgcolor() &#39;orange&#39; >>> screen.bgcolor(\"#800080\") >>> screen.bgcolor() (128, 0, 128)       turtle.bgpic(picname=None)\u00b6     Parameter:picname &#8211; a string, name of a gif-file or \"nopic\", or None    Set background image or return name of current backgroundimage.  If picname is a filename, set the corresponding image as background.  If picname is \"nopic\", delete background image, if present.  If picname is None, return the filename of the current backgroundimage. >>> screen.bgpic() &#39;nopic&#39; >>> screen.bgpic(\"landscape.gif\") >>> screen.bgpic() \"landscape.gif\"       turtle.clear()  turtle.clearscreen()\u00b6 Delete all drawings and all turtles from the TurtleScreen.  Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on.  Note This TurtleScreen method is available as a global function only under the name clearscreen.  The global function clear is another one derived from the Turtle method clear.      turtle.reset()  turtle.resetscreen()\u00b6 Reset all Turtles on the Screen to their initial state.  Note This TurtleScreen method is available as a global function only under the name resetscreen.  The global function reset is another one derived from the Turtle method reset.      turtle.screensize(canvwidth=None, canvheight=None, bg=None)\u00b6     Parameters: canvwidth &#8211; positive integer, new width of canvas in pixels canvheight &#8211; positive integer, new height of canvas in pixels bg &#8211; colorstring or color-tuple, new background color      If no arguments are given, return current (canvaswidth, canvasheight).  Else resize the canvas the turtles are drawing on.  Do not alter the drawing window.  To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before. >>> screen.screensize() (400, 300) >>> screen.screensize(2000,1500) >>> screen.screensize() (2000, 1500)   e.g. to search for an erroneously escaped turtle ;-)     turtle.setworldcoordinates(llx, lly, urx, ury)\u00b6     Parameters: llx &#8211; a number, x-coordinate of lower left corner of canvas lly &#8211; a number, y-coordinate of lower left corner of canvas urx &#8211; a number, x-coordinate of upper right corner of canvas ury &#8211; a number, y-coordinate of upper right corner of canvas      Set up user-defined coordinate system and switch to mode &#8220;world&#8221; if necessary.  This performs a screen.reset().  If mode &#8220;world&#8221; is already active, all drawings are redrawn according to the new coordinates. ATTENTION: in user-defined coordinate systems angles may appear distorted. >>> screen.reset() >>> screen.setworldcoordinates(-50,-7.5,50,7.5) >>> for _ in range(72): ...     left(10) ... >>> for _ in range(8): ...     left(45); fd(2)   # a regular octagon       24.5.4.2. Animation control\u00b6   turtle.delay(delay=None)\u00b6     Parameter:delay &#8211; positive integer    Set or return the drawing delay in milliseconds.  (This is approximately the time interval between two consecutive canvas updates.)  The longer the drawing delay, the slower the animation. Optional argument: >>> screen.delay() 10 >>> screen.delay(5) >>> screen.delay() 5       turtle.tracer(n=None, delay=None)     Parameters: n &#8211; nonnegative integer delay &#8211; nonnegative integer      Turn turtle animation on\/off and set delay for update drawings.  If n is given, only each n-th regular screen update is really performed.  (Can be used to accelerate the drawing of complex graphics.)  Second argument sets delay value (see delay()). >>> screen.tracer(8, 25) >>> dist = 2 >>> for i in range(200): ...     fd(dist) ...     rt(90) ...     dist += 2       turtle.update()\u00b6 Perform a TurtleScreen update. To be used when tracer is turned off.  See also the RawTurtle\/Turtle method speed().   24.5.4.3. Using screen events\u00b6   turtle.listen(xdummy=None, ydummy=None)\u00b6 Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments are provided in order to be able to pass listen() to the onclick method.    turtle.onkey(fun, key)\u00b6     Parameters: fun &#8211; a function with no arguments or None key &#8211; a string: key (e.g. &#8220;a&#8221;) or key-symbol (e.g. &#8220;space&#8221;)      Bind fun to key-release event of key.  If fun is None, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method listen().) >>> def f(): ...     fd(50) ...     lt(60) ... >>> screen.onkey(f, \"Up\") >>> screen.listen()       turtle.onclick(fun, btn=1, add=None)  turtle.onscreenclick(fun, btn=1, add=None)\u00b6     Parameters: fun &#8211; a function with two arguments which will be called with the coordinates of the clicked point on the canvas num &#8211; number of the mouse-button, defaults to 1 (left mouse button) add &#8211; True or False &#8211; if True, a new binding will be added, otherwise it will replace a former binding      Bind fun to mouse-click events on this screen.  If fun is None, existing bindings are removed. Example for a TurtleScreen instance named screen and a Turtle instance named turtle: >>> screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will >>>                             # make the turtle move to the clicked point. >>> screen.onclick(None)        # remove event binding again    Note This TurtleScreen method is available as a global function only under the name onscreenclick.  The global function onclick is another one derived from the Turtle method onclick.      turtle.ontimer(fun, t=0)\u00b6     Parameters: fun &#8211; a function with no arguments t &#8211; a number >= 0      Install a timer that calls fun after t milliseconds. >>> running = True >>> def f(): ...     if running: ...         fd(50) ...         lt(60) ...         screen.ontimer(f, 250) >>> f()   ### makes the turtle march around >>> running = False       24.5.4.4. Settings and special methods\u00b6   turtle.mode(mode=None)\u00b6     Parameter:mode &#8211; one of the strings &#8220;standard&#8221;, &#8220;logo&#8221; or &#8220;world&#8221;    Set turtle mode (&#8220;standard&#8221;, &#8220;logo&#8221; or &#8220;world&#8221;) and perform reset.  If mode is not given, current mode is returned. Mode &#8220;standard&#8221; is compatible with old turtle.  Mode &#8220;logo&#8221; is compatible with most Logo turtle graphics.  Mode &#8220;world&#8221; uses user-defined &#8220;world coordinates&#8221;. Attention: in this mode angles appear distorted if x\/y unit-ratio doesn&#8217;t equal 1.        Mode Initial turtle heading positive angles    &#8220;standard&#8221; to the right (east) counterclockwise  &#8220;logo&#8221; upward    (north) clockwise    >>> mode(\"logo\")   # resets turtle heading to north >>> mode() &#39;logo&#39;       turtle.colormode(cmode=None)\u00b6     Parameter:cmode &#8211; one of the values 1.0 or 255    Return the colormode or set it to 1.0 or 255.  Subsequently r, g, b values of color triples have to be in the range 0..cmode. >>> screen.colormode(1) >>> turtle.pencolor(240, 160, 80) Traceback (most recent call last):      ... TurtleGraphicsError: bad color sequence: (240, 160, 80) >>> screen.colormode() 1.0 >>> screen.colormode(255) >>> screen.colormode() 255 >>> turtle.pencolor(240,160,80)       turtle.getcanvas()\u00b6 Return the Canvas of this TurtleScreen.  Useful for insiders who know what to do with a Tkinter Canvas. >>> cv = screen.getcanvas() >>> cv <turtle.ScrolledCanvas instance at 0x...>       turtle.getshapes()\u00b6 Return a list of names of all currently available turtle shapes. >>> screen.getshapes() [&#39;arrow&#39;, &#39;blank&#39;, &#39;circle&#39;, ..., &#39;turtle&#39;]       turtle.register_shape(name, shape=None)\u00b6  turtle.addshape(name, shape=None)\u00b6 There are three different ways to call this function:  name is the name of a gif-file and shape is None: Install the corresponding image shape. >>> screen.register_shape(\"turtle.gif\")    Note Image shapes do not rotate when turning the turtle, so they do not display the heading of the turtle!   name is an arbitrary string and shape is a tuple of pairs of coordinates: Install the corresponding polygon shape. >>> screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))    name is an arbitrary string and shape is a (compound) Shape object: Install the corresponding compound shape.   Add a turtle shape to TurtleScreen&#8217;s shapelist.  Only thusly registered shapes can be used by issuing the command shape(shapename).     turtle.turtles()\u00b6 Return the list of turtles on the screen. >>> for turtle in screen.turtles(): ...     turtle.color(\"red\")       turtle.window_height() Return the height of the turtle window. >>> screen.window_height() 480       turtle.window_width() Return the width of the turtle window. >>> screen.window_width() 640       24.5.4.5. Methods specific to Screen, not inherited from TurtleScreen\u00b6   turtle.bye()\u00b6 Shut the turtlegraphics window.    turtle.exitonclick()\u00b6 Bind bye() method to mouse clicks on the Screen. If the value &#8220;using_IDLE&#8221; in the configuration dictionary is False (default value), also enter mainloop.  Remark: If IDLE with the -n switch (no subprocess) is used, this value should be set to True in turtle.cfg.  In this case IDLE&#8217;s own mainloop is active also for the client script.     turtle.setup(width=_CFG[, \"width\"], height=_CFG[, \"height\"], startx=_CFG[, \"leftright\"], starty=_CFG[, \"topbottom\"])\u00b6 Set the size and position of the main window.  Default values of arguments are stored in the configuration dictionary and can be changed via a turtle.cfg file.     Parameters: width &#8211; if an integer, a size in pixels, if a float, a fraction of the screen; default is 50% of screen height &#8211; if an integer, the height in pixels, if a float, a fraction of the screen; default is 75% of screen startx &#8211; if positive, starting position in pixels from the left edge of the screen, if negative from the right edge, if None, center window horizontally startx &#8211; if positive, starting position in pixels from the top edge of the screen, if negative from the bottom edge, if None, center window vertically      >>> screen.setup (width=200, height=200, startx=0, starty=0) >>>              # sets window to 200x200 pixels, in upper left of screen >>> screen.setup(width=.75, height=0.5, startx=None, starty=None) >>>              # sets window to 75% of screen by 50% of screen and centers       turtle.title(titlestring)\u00b6     Parameter:titlestring &#8211; a string that is shown in the titlebar of the turtle graphics window    Set title of turtle window to titlestring. >>> screen.title(\"Welcome to the turtle zoo!\")        24.5.5. The public classes of the module turtle\u00b6   class turtle.RawTurtle(canvas)\u00b6  class turtle.RawPen(canvas)\u00b6     Parameter:canvas &#8211; a Tkinter.Canvas, a ScrolledCanvas or a TurtleScreen    Create a turtle.  The turtle has all methods described above as &#8220;methods of Turtle\/RawTurtle&#8221;.     class turtle.Turtle\u00b6 Subclass of RawTurtle, has the same interface but draws on a default Screen object created automatically when needed for the first time.    class turtle.TurtleScreen(cv)\u00b6     Parameter:cv &#8211; a Tkinter.Canvas    Provides screen oriented methods like setbg() etc. that are described above.     class turtle.Screen\u00b6 Subclass of TurtleScreen, with four methods added.    class turtle.ScrolledCanvas(master)\u00b6     Parameter:master &#8211; some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas with scrollbars added    Used by class Screen, which thus automatically provides a ScrolledCanvas as playground for the turtles.     class turtle.Shape(type_, data)\u00b6     Parameter:type_ &#8211; one of the strings &#8220;polygon&#8221;, &#8220;image&#8221;, &#8220;compound&#8221;    Data structure modeling shapes.  The pair (type_, data) must follow this specification:       type_ data    &#8220;polygon&#8221; a polygon-tuple, i.e. a tuple of pairs of coordinates  &#8220;image&#8221; an image  (in this form only used internally!)  &#8220;compound&#8221; None (a compound shape has to be constructed using the addcomponent() method)      addcomponent(poly, fill, outline=None)\u00b6     Parameters: poly &#8211; a polygon, i.e. a tuple of pairs of numbers fill &#8211; a color the poly will be filled with outline &#8211; a color for the poly&#8217;s outline (if given)      Example: >>> poly = ((0,0),(10,-5),(0,10),(-10,-5)) >>> s = Shape(\"compound\") >>> s.addcomponent(poly, \"red\", \"blue\") >>> # ... add more components and then use register_shape()   See Excursus about the use of compound shapes.       class turtle.Vec2D(x, y)\u00b6 A two-dimensional vector class, used as a helper class for implementing turtle graphics.  May be useful for turtle graphics programs too.  Derived from tuple, so a vector is a tuple! Provides (for a, b vectors, k number):  a + b vector addition a - b vector subtraction a * b inner product k * a and a * k multiplication with scalar abs(a) absolute value of a a.rotate(angle) rotation      24.5.6. Help and configuration\u00b6  24.5.6.1. How to use help\u00b6 The public methods of the Screen and Turtle classes are documented extensively via docstrings.  So these can be used as online-help via the Python help facilities:  When using IDLE, tooltips show the signatures and first lines of the docstrings of typed in function-\/method calls.  Calling help() on methods or functions displays the docstrings: >>> help(Screen.bgcolor) Help on method bgcolor in module turtle:  bgcolor(self, *args) unbound turtle.Screen method     Set or return backgroundcolor of the TurtleScreen.      Arguments (if given): a color string or three numbers     in the range 0..colormode or a 3-tuple of such numbers.         >>> screen.bgcolor(\"orange\")       >>> screen.bgcolor()       \"orange\"       >>> screen.bgcolor(0.5,0,0.5)       >>> screen.bgcolor()       \"#800080\"  >>> help(Turtle.penup) Help on method penup in module turtle:  penup(self) unbound turtle.Turtle method     Pull the pen up -- no drawing when moving.      Aliases: penup | pu | up      No argument      >>> turtle.penup()    The docstrings of the functions which are derived from methods have a modified form: >>> help(bgcolor) Help on function bgcolor in module turtle:  bgcolor(*args)     Set or return backgroundcolor of the TurtleScreen.      Arguments (if given): a color string or three numbers     in the range 0..colormode or a 3-tuple of such numbers.      Example::        >>> bgcolor(\"orange\")       >>> bgcolor()       \"orange\"       >>> bgcolor(0.5,0,0.5)       >>> bgcolor()       \"#800080\"  >>> help(penup) Help on function penup in module turtle:  penup()     Pull the pen up -- no drawing when moving.      Aliases: penup | pu | up      No argument      Example:     >>> penup()     These modified docstrings are created automatically together with the function definitions that are derived from the methods at import time.   24.5.6.2. Translation of docstrings into different languages\u00b6 There is a utility to create a dictionary the keys of which are the method names and the values of which are the docstrings of the public methods of the classes Screen and Turtle.   turtle.write_docstringdict(filename=\"turtle_docstringdict\")\u00b6     Parameter:filename &#8211; a string, used as filename    Create and write docstring-dictionary to a Python script with the given filename.  This function has to be called explicitly (it is not used by the turtle graphics classes).  The docstring dictionary will be written to the Python script filename.py.  It is intended to serve as a template for translation of the docstrings into different languages.   If you (or your students) want to use turtle with online help in your native language, you have to translate the docstrings and save the resulting file as e.g. turtle_docstringdict_german.py. If you have an appropriate entry in your turtle.cfg file this dictionary will be read in at import time and will replace the original English docstrings. At the time of this writing there are docstring dictionaries in German and in Italian.  (Requests please to glingl@aon.at.)   24.5.6.3. How to configure Screen and Turtles\u00b6 The built-in default configuration mimics the appearance and behaviour of the old turtle module in order to retain best possible compatibility with it. If you want to use a different configuration which better reflects the features of this module or which better fits to your needs, e.g. for use in a classroom, you can prepare a configuration file turtle.cfg which will be read at import time and modify the configuration according to its settings. The built in configuration would correspond to the following turtle.cfg: width = 0.5 height = 0.75 leftright = None topbottom = None canvwidth = 400 canvheight = 300 mode = standard colormode = 1.0 delay = 10 undobuffersize = 1000 shape = classic pencolor = black fillcolor = black resizemode = noresize visible = True language = english exampleturtle = turtle examplescreen = screen title = Python Turtle Graphics using_IDLE = False  Short explanation of selected entries:  The first four lines correspond to the arguments of the Screen.setup() method. Line 5 and 6 correspond to the arguments of the method Screen.screensize(). shape can be any of the built-in shapes, e.g: arrow, turtle, etc.  For more info try help(shape). If you want to use no fillcolor (i.e. make the turtle transparent), you have to write fillcolor = \"\" (but all nonempty strings must not have quotes in the cfg-file). If you want to reflect the turtle its state, you have to use resizemode = auto. If you set e.g. language = italian the docstringdict turtle_docstringdict_italian.py will be loaded at import time (if present on the import path, e.g. in the same directory as turtle. The entries exampleturtle and examplescreen define the names of these objects as they occur in the docstrings.  The transformation of method-docstrings to function-docstrings will delete these names from the docstrings. using_IDLE: Set this to True if you regularly work with IDLE and its -n switch (&#8220;no subprocess&#8221;).  This will prevent exitonclick() to enter the mainloop.  There can be a turtle.cfg file in the directory where turtle is stored and an additional one in the current working directory.  The latter will override the settings of the first one. The Demo\/turtle directory contains a turtle.cfg file.  You can study it as an example and see its effects when running the demos (preferably not from within the demo-viewer).    24.5.7. Demo scripts\u00b6 There is a set of demo scripts in the turtledemo directory located in the Demo\/turtle directory in the source distribution. It contains:  a set of 15 demo scripts demonstrating different features of the new module turtle a demo viewer turtleDemo.py which can be used to view the sourcecode of the scripts and run them at the same time. 14 of the examples can be accessed via the Examples menu; all of them can also be run standalone. The example turtledemo_two_canvases.py demonstrates the simultaneous use of two canvases with the turtle module.  Therefore it only can be run standalone. There is a turtle.cfg file in this directory, which also serves as an example for how to write and use such files.  The demoscripts are:        Name Description Features  bytedesign complex classical turtlegraphics pattern tracer(), delay, update()  chaos graphs Verhulst dynamics, shows that computer&#8217;s computations can generate results sometimes against the common sense expectations world coordinates  clock analog clock showing time of your computer turtles as clock&#8217;s hands, ontimer  colormixer experiment with r, g, b ondrag()  fractalcurves Hilbert & Koch curves recursion  lindenmayer ethnomathematics (indian kolams) L-System  minimal_hanoi Towers of Hanoi Rectangular Turtles as Hanoi discs (shape, shapesize)  paint super minimalistic drawing program onclick()  peace elementary turtle: appearance and animation  penrose aperiodic tiling with kites and darts stamp()  planet_and_moon simulation of gravitational system compound shapes, Vec2D  tree a (graphical) breadth first tree (using generators) clone()  wikipedia a pattern from the wikipedia article on turtle graphics clone(), undo()  yingyang another elementary example circle()    Have fun!"},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.back","title":"turtle.back","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.begin_fill","title":"turtle.begin_fill","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.begin_poly","title":"turtle.begin_poly","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.bgcolor","title":"turtle.bgcolor","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.bgpic","title":"turtle.bgpic","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.bye","title":"turtle.bye","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.circle","title":"turtle.circle","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.clear","title":"turtle.clear","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.clearstamp","title":"turtle.clearstamp","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.clearstamps","title":"turtle.clearstamps","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.clone","title":"turtle.clone","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.color","title":"turtle.color","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.colormode","title":"turtle.colormode","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.degrees","title":"turtle.degrees","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.delay","title":"turtle.delay","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.distance","title":"turtle.distance","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.dot","title":"turtle.dot","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.end_fill","title":"turtle.end_fill","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.end_poly","title":"turtle.end_poly","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.exitonclick","title":"turtle.exitonclick","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.fill","title":"turtle.fill","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.fillcolor","title":"turtle.fillcolor","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.forward","title":"turtle.forward","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.get_poly","title":"turtle.get_poly","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.getcanvas","title":"turtle.getcanvas","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.getscreen","title":"turtle.getscreen","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.getshapes","title":"turtle.getshapes","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.getturtle","title":"turtle.getturtle","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.goto","title":"turtle.goto","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.heading","title":"turtle.heading","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.hideturtle","title":"turtle.hideturtle","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.home","title":"turtle.home","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.isdown","title":"turtle.isdown","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.isvisible","title":"turtle.isvisible","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.left","title":"turtle.left","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.listen","title":"turtle.listen","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.mainloop","title":"turtle.mainloop","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.mode","title":"turtle.mode","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.onclick","title":"turtle.onclick","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.ondrag","title":"turtle.ondrag","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.onkey","title":"turtle.onkey","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.onrelease","title":"turtle.onrelease","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.ontimer","title":"turtle.ontimer","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.pen","title":"turtle.pen","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.pencolor","title":"turtle.pencolor","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.pendown","title":"turtle.pendown","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.pensize","title":"turtle.pensize","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.penup","title":"turtle.penup","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.position","title":"turtle.position","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.radians","title":"turtle.radians","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.RawTurtle","title":"turtle.RawTurtle","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.register_shape","title":"turtle.register_shape","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.reset","title":"turtle.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.resizemode","title":"turtle.resizemode","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.right","title":"turtle.right","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.Screen","title":"turtle.Screen","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.screensize","title":"turtle.screensize","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.ScrolledCanvas","title":"turtle.ScrolledCanvas","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.setheading","title":"turtle.setheading","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.settiltangle","title":"turtle.settiltangle","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.setundobuffer","title":"turtle.setundobuffer","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.setup","title":"turtle.setup","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.setworldcoordinates","title":"turtle.setworldcoordinates","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.setx","title":"turtle.setx","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.sety","title":"turtle.sety","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle_turtle_turtle.Shape","title":"turtle.Shape","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle_turtle_turtle.shape","title":"turtle.shape","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle_turtle_turtle.Shape","title":"turtle.Shape","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle_turtle_turtle.shape","title":"turtle.shape","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.Shape.addcomponent","title":"turtle.Shape.addcomponent","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.shapesize","title":"turtle.shapesize","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.showturtle","title":"turtle.showturtle","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.speed","title":"turtle.speed","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.stamp","title":"turtle.stamp","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.tilt","title":"turtle.tilt","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.tiltangle","title":"turtle.tiltangle","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.title","title":"turtle.title","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.towards","title":"turtle.towards","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.tracer","title":"turtle.tracer","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.Turtle","title":"turtle.Turtle","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.turtles","title":"turtle.turtles","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.TurtleScreen","title":"turtle.TurtleScreen","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.undo","title":"turtle.undo","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.undobufferentries","title":"turtle.undobufferentries","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.update","title":"turtle.update","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.Vec2D","title":"turtle.Vec2D","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.window_width","title":"turtle.window_width","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.write","title":"turtle.write","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.write_docstringdict","title":"turtle.write_docstringdict","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.xcor","title":"turtle.xcor","description":""},{"url":"http:\/\/docs.python.org\/library\/turtle.html#turtle.ycor","title":"turtle.ycor","description":""},{"url":"http:\/\/docs.python.org\/library\/2to3.html","title":"","description":"25.4. 2to3 - Automated Python 2 to 3 code translation\u00b6 2to3 is a Python program that reads Python 2.x source code and applies a series of fixers to transform it into valid Python 3.x code.  The standard library contains a rich set of fixers that will handle almost all code.  2to3 supporting library lib2to3 is, however, a flexible and generic library, so it is possible to write your own fixers for 2to3.  lib2to3 could also be adapted to custom applications in which Python code needs to be edited automatically.  25.4.1. Using 2to3\u00b6 2to3 will usually be installed with the Python interpreter as a script.  It is also located in the Tools\/scripts directory of the Python root. 2to3&#8217;s basic arguments are a list of files or directories to transform.  The directories are to recursively traversed for Python sources. Here is a sample Python 2.x source file, example.py: def greet(name):     print \"Hello, {0}!\".format(name) print \"What&#39;s your name?\" name = raw_input() greet(name)   It can be converted to Python 3.x code via 2to3 on the command line: $ 2to3 example.py  A diff against the original source file is printed.  2to3 can also write the needed modifications right back to the source file.  (A backup of the original file is made unless -n is also given.)  Writing the changes back is enabled with the -w flag: $ 2to3 -w example.py  After transformation, example.py looks like this: def greet(name):     print(\"Hello, {0}!\".format(name)) print(\"What&#39;s your name?\") name = input() greet(name)   Comments and exact indentation are preserved throughout the translation process. By default, 2to3 runs a set of predefined fixers.  The -l flag lists all available fixers.  An explicit set of fixers to run can be given with -f.  Likewise the -x explicitly disables a fixer.  The following example runs only the imports and has_key fixers: $ 2to3 -f imports -f has_key example.py  This command runs every fixer except the apply fixer: $ 2to3 -x apply example.py  Some fixers are explicit, meaning they aren&#8217;t run by default and must be listed on the command line to be run.  Here, in addition to the default fixers, the idioms fixer is run: $ 2to3 -f all -f idioms example.py  Notice how passing all enables all default fixers. Sometimes 2to3 will find a place in your source code that needs to be changed, but 2to3 cannot fix automatically.  In this case, 2to3 will print a warning beneath the diff for a file.  You should address the warning in order to have compliant 3.x code. 2to3 can also refactor doctests.  To enable this mode, use the -d flag.  Note that only doctests will be refactored.  This also doesn&#8217;t require the module to be valid Python.  For example, doctest like examples in a reST document could also be refactored with this option. The -v option enables output of more information on the translation process. Since some print statements can be parsed as function calls or statements, 2to3 cannot always read files containing the print function.  When 2to3 detects the presence of the from __future__ import print_function compiler directive, it modifies its internal grammar to interpret print() as a function.  This change can also be enabled manually with the -p flag.  Use -p to run fixers on code that already has had its print statements converted.   25.4.2. Fixers\u00b6 Each step of transforming code is encapsulated in a fixer.  The command 2to3 -l lists them.  As documented above, each can be turned on and off individually.  They are described here in more detail.   apply\u00b6 Removes usage of apply().  For example apply(function, *args, **kwargs) is converted to function(*args, **kwargs).    basestring\u00b6 Converts basestring to str.    buffer\u00b6 Converts buffer to memoryview.  This fixer is optional because the memoryview API is similar but not exactly the same as that of buffer.    callable\u00b6 Converts callable(x) to isinstance(x, collections.Callable), adding an import to collections if needed. Note callable(x) has returned in Python 3.2, so if you do not intend to support Python 3.1, you can disable this fixer.    dict\u00b6 Fixes dictionary iteration methods.  dict.iteritems() is converted to dict.items(), dict.iterkeys() to dict.keys(), and dict.itervalues() to dict.values().  Similarly, dict.viewitems(), dict.viewkeys() and dict.viewvalues() are converted respectively to dict.items(), dict.keys() and dict.values().  It also wraps existing usages of dict.items(), dict.keys(), and dict.values() in a call to list.    except\u00b6 Converts except X, T to except X as T.    exec\u00b6 Converts the exec statement to the exec() function.    execfile\u00b6 Removes usage of execfile().  The argument to execfile() is wrapped in calls to open(), compile(), and exec().    exitfunc\u00b6 Changes assignment of sys.exitfunc to use of the atexit module.    filter\u00b6 Wraps filter() usage in a list call.    funcattrs\u00b6 Fixes function attributes that have been renamed.  For example, my_function.func_closure is converted to my_function.__closure__.    future\u00b6 Removes from __future__ import new_feature statements.    getcwdu\u00b6 Renames os.getcwdu() to os.getcwd().    has_key\u00b6 Changes dict.has_key(key) to key in dict.    idioms\u00b6 This optional fixer performs several transformations that make Python code more idiomatic.  Type comparisons like type(x) is SomeClass and type(x) == SomeClass are converted to isinstance(x, SomeClass). while 1 becomes while True.  This fixer also tries to make use of sorted() in appropriate places.  For example, this block L = list(some_iterable) L.sort()   is changed to L = sorted(some_iterable)       import\u00b6 Detects sibling imports and converts them to relative imports.    imports\u00b6 Handles module renames in the standard library.    imports2\u00b6 Handles other modules renames in the standard library.  It is separate from the imports fixer only because of technical limitations.    input\u00b6 Converts input(prompt) to eval(input(prompt))    intern\u00b6 Converts intern() to sys.intern().    isinstance\u00b6 Fixes duplicate types in the second argument of isinstance().  For example, isinstance(x, (int, int)) is converted to isinstance(x, (int)).    itertools_imports\u00b6 Removes imports of itertools.ifilter(), itertools.izip(), and itertools.imap().  Imports of itertools.ifilterfalse() are also changed to itertools.filterfalse().    itertools\u00b6 Changes usage of itertools.ifilter(), itertools.izip(), and itertools.imap() to their built-in equivalents. itertools.ifilterfalse() is changed to itertools.filterfalse().    long\u00b6 Strips the L suffix on long literals and renames long to int.    map\u00b6 Wraps map() in a list call.  It also changes map(None, x) to list(x).  Using from future_builtins import map disables this fixer.    metaclass\u00b6 Converts the old metaclass syntax (__metaclass__ = Meta in the class body) to the new (class X(metaclass=Meta)).    methodattrs\u00b6 Fixes old method attribute names.  For example, meth.im_func is converted to meth.__func__.    ne\u00b6 Converts the old not-equal syntax, <>, to !=.    next\u00b6 Converts the use of iterator&#8217;s next() methods to the next() function.  It also renames next() methods to __next__().    nonzero\u00b6 Renames __nonzero__() to __bool__().    numliterals\u00b6 Converts octal literals into the new syntax.    paren\u00b6 Add extra parenthesis where they are required in list comprehensions.  For example, [x for x in 1, 2] becomes [x for x in (1, 2)].    print\u00b6 Converts the print statement to the print() function.    raise\u00b6 Converts raise E, V to raise E(V), and raise E, V, T to raise E(V).with_traceback(T).  If E is a tuple, the translation will be incorrect because substituting tuples for exceptions has been removed in 3.0.    raw_input\u00b6 Converts raw_input() to input().    reduce\u00b6 Handles the move of reduce() to functools.reduce().    renames\u00b6 Changes sys.maxint to sys.maxsize.    repr\u00b6 Replaces backtick repr with the repr() function.    set_literal\u00b6 Replaces use of the set constructor with set literals.  This fixer is optional.    standard_error\u00b6 Renames StandardError to Exception.    sys_exc\u00b6 Changes the deprecated sys.exc_value, sys.exc_type, sys.exc_traceback to use sys.exc_info().    throw\u00b6 Fixes the API change in generator&#8217;s throw() method.    tuple_params\u00b6 Removes implicit tuple parameter unpacking.  This fixer inserts temporary variables.    types\u00b6 Fixes code broken from the removal of some members in the types module.    unicode\u00b6 Renames unicode to str.    urllib\u00b6 Handles the rename of urllib and urllib2 to the urllib package.    ws_comma\u00b6 Removes excess whitespace from comma separated items.  This fixer is optional.    xrange\u00b6 Renames xrange() to range() and wraps existing range() calls with list.    xreadlines\u00b6 Changes for x in file.xreadlines() to for x in file.    zip\u00b6 Wraps zip() usage in a list call.  This is disabled when from future_builtins import zip appears.    25.4.3. lib2to3 - 2to3&#8217;s library\u00b6  Note The lib2to3 API should be considered unstable and may change drastically in the future."},{"url":"http:\/\/docs.python.org\/library\/test.html","title":"test","description":"25.5. test &#8212; Regression tests package for Python\u00b6  Note The test package is meant for internal use by Python only. It is documented for the benefit of the core developers of Python. Any use of this package outside of Python&#8217;s standard library is discouraged as code mentioned here can change or be removed without notice between releases of Python.  The test package contains all regression tests for Python as well as the modules test.test_support and test.regrtest. test.test_support is used to enhance your tests while test.regrtest drives the testing suite. Each module in the test package whose name starts with test_ is a testing suite for a specific module or feature. All new tests should be written using the unittest or doctest module.  Some older tests are written using a &#8220;traditional&#8221; testing style that compares output printed to sys.stdout; this style of test is considered deprecated.  See also  Module unittest Writing PyUnit regression tests. Module doctest Tests embedded in documentation strings.    25.5.1. Writing Unit Tests for the test package\u00b6 It is preferred that tests that use the unittest module follow a few guidelines. One is to name the test module by starting it with test_ and end it with the name of the module being tested. The test methods in the test module should start with test_ and end with a description of what the method is testing. This is needed so that the methods are recognized by the test driver as test methods. Also, no documentation string for the method should be included. A comment (such as # Tests function returns only True or False) should be used to provide documentation for test methods. This is done because documentation strings get printed out if they exist and thus what test is being run is not stated. A basic boilerplate is often used: import unittest from test import test_support  class MyTestCase1(unittest.TestCase):      # Only use setUp() and tearDown() if necessary      def setUp(self):         ... code to execute in preparation for tests ...      def tearDown(self):         ... code to execute to clean up after tests ...      def test_feature_one(self):         # Test feature one.         ... testing code ...      def test_feature_two(self):         # Test feature two.         ... testing code ...      ... more test methods ...  class MyTestCase2(unittest.TestCase):     ... same structure as MyTestCase1 ...  ... more test classes ...  def test_main():     test_support.run_unittest(MyTestCase1,                               MyTestCase2,                               ... list other tests ...                              )  if __name__ == &#39;__main__&#39;:     test_main()   This boilerplate code allows the testing suite to be run by test.regrtest as well as on its own as a script. The goal for regression testing is to try to break code. This leads to a few guidelines to be followed:  The testing suite should exercise all classes, functions, and constants. This includes not just the external API that is to be presented to the outside world but also &#8220;private&#8221; code.  Whitebox testing (examining the code being tested when the tests are being written) is preferred. Blackbox testing (testing only the published user interface) is not complete enough to make sure all boundary and edge cases are tested.  Make sure all possible values are tested including invalid ones. This makes sure that not only all valid values are acceptable but also that improper values are handled correctly.  Exhaust as many code paths as possible. Test where branching occurs and thus tailor input to make sure as many different paths through the code are taken.  Add an explicit test for any bugs discovered for the tested code. This will make sure that the error does not crop up again if the code is changed in the future.  Make sure to clean up after your tests (such as close and remove all temporary files).  If a test is dependent on a specific condition of the operating system then verify the condition already exists before attempting the test.  Import as few modules as possible and do it as soon as possible. This minimizes external dependencies of tests and also minimizes possible anomalous behavior from side-effects of importing a module.  Try to maximize code reuse. On occasion, tests will vary by something as small as what type of input is used. Minimize code duplication by subclassing a basic test class with a class that specifies the input: class TestFuncAcceptsSequences(unittest.TestCase):      func = mySuperWhammyFunction      def test_func(self):         self.func(self.arg)  class AcceptLists(TestFuncAcceptsSequences):     arg = [1, 2, 3]  class AcceptStrings(TestFuncAcceptsSequences):     arg = &#39;abc&#39;  class AcceptTuples(TestFuncAcceptsSequences):     arg = (1, 2, 3)      See also  Test Driven Development A book by Kent Beck on writing tests before code.     25.5.2. Running tests using the command-line interface\u00b6 The test.regrtest module can be run as a script to drive Python&#8217;s regression test suite, thanks to the -m option: python -m test.regrtest. Running the script by itself automatically starts running all regression tests in the test package. It does this by finding all modules in the package whose name starts with test_, importing them, and executing the function test_main() if present. The names of tests to execute may also be passed to the script. Specifying a single regression test (python -m test.regrtest test_spam) will minimize output and only print whether the test passed or failed and thus minimize output. Running test.regrtest directly allows what resources are available for tests to use to be set. You do this by using the -u command-line option. Run python -m test.regrtest -uall to turn on all resources; specifying all as an option for -u enables all possible resources. If all but one resource is desired (a more common case), a comma-separated list of resources that are not desired may be listed after all. The command python -m test.regrtest -uall,-audio,-largefile will run test.regrtest with all resources except the audio and largefile resources. For a list of all resources and more command-line options, run python -m test.regrtest -h. Some other ways to execute the regression tests depend on what platform the tests are being executed on. On Unix, you can run make test at the top-level directory where Python was built. On Windows, executing rt.bat from your PCBuild directory will run all regression tests.   25.6. test.test_support &#8212; Utility functions for tests\u00b6  Note The test.test_support module has been renamed to test.support in Python 3.x.  The test.test_support module provides support for Python&#8217;s regression tests. This module defines the following exceptions:   exception test.test_support.TestFailed\u00b6 Exception to be raised when a test fails. This is deprecated in favor of unittest-based tests and unittest.TestCase&#8216;s assertion methods.    exception test.test_support.ResourceDenied\u00b6 Subclass of unittest.SkipTest. Raised when a resource (such as a network connection) is not available. Raised by the requires() function.  The test.test_support module defines the following constants:   test.test_support.verbose\u00b6 True when verbose output is enabled. Should be checked when more detailed information is desired about a running test. verbose is set by test.regrtest.    test.test_support.have_unicode\u00b6 True when Unicode support is available.    test.test_support.is_jython\u00b6 True if the running interpreter is Jython.    test.test_support.TESTFN\u00b6 Set to a name that is safe to use as the name of a temporary file.  Any temporary file that is created should be closed and unlinked (removed).  The test.test_support module defines the following functions:   test.test_support.forget(module_name)\u00b6 Remove the module named module_name from sys.modules and delete any byte-compiled files of the module.    test.test_support.is_resource_enabled(resource)\u00b6 Return True if resource is enabled and available. The list of available resources is only set when test.regrtest is executing the tests.    test.test_support.requires(resource[, msg])\u00b6 Raise ResourceDenied if resource is not available. msg is the argument to ResourceDenied if it is raised. Always returns True if called by a function whose __name__ is '__main__'. Used when tests are executed by test.regrtest.    test.test_support.findfile(filename)\u00b6 Return the path to the file named filename. If no match is found filename is returned. This does not equal a failure since it could be the path to the file.    test.test_support.run_unittest(*classes)\u00b6 Execute unittest.TestCase subclasses passed to the function. The function scans the classes for methods starting with the prefix test_ and executes the tests individually. It is also legal to pass strings as parameters; these should be keys in sys.modules. Each associated module will be scanned by unittest.TestLoader.loadTestsFromModule(). This is usually seen in the following test_main() function: def test_main():     test_support.run_unittest(__name__)   This will run all tests defined in the named module.     test.test_support.check_warnings(*filters, quiet=True)\u00b6 A convenience wrapper for warnings.catch_warnings() that makes it easier to test that a warning was correctly raised.  It is approximately equivalent to calling warnings.catch_warnings(record=True) with warnings.simplefilter() set to always and with the option to automatically validate the results that are recorded. check_warnings accepts 2-tuples of the form (\"message regexp\", WarningCategory) as positional arguments. If one or more filters are provided, or if the optional keyword argument quiet is False, it checks to make sure the warnings are as expected:  each specified filter must match at least one of the warnings raised by the enclosed code or the test fails, and if any warnings are raised that do not match any of the specified filters the test fails.  To disable the first of these checks, set quiet to True. If no arguments are specified, it defaults to: check_warnings((\"\", Warning), quiet=True)   In this case all warnings are caught and no errors are raised. On entry to the context manager, a WarningRecorder instance is returned. The underlying warnings list from catch_warnings() is available via the recorder object&#8217;s warnings attribute.  As a convenience, the attributes of the object representing the most recent warning can also be accessed directly through the recorder object (see example below).  If no warning has been raised, then any of the attributes that would otherwise be expected on an object representing a warning will return None. The recorder object also has a reset() method, which clears the warnings list. The context manager is designed to be used like this: with check_warnings((\"assertion is always true\", SyntaxWarning),                     (\"\", UserWarning)):     exec(&#39;assert(False, \"Hey!\")&#39;)     warnings.warn(UserWarning(\"Hide me!\"))   In this case if either warning was not raised, or some other warning was raised, check_warnings() would raise an error. When a test needs to look more deeply into the warnings, rather than just checking whether or not they occurred, code like this can be used: with check_warnings(quiet=True) as w:     warnings.warn(\"foo\")     assert str(w.args[0]) == \"foo\"     warnings.warn(\"bar\")     assert str(w.args[0]) == \"bar\"     assert str(w.warnings[0].args[0]) == \"foo\"     assert str(w.warnings[1].args[0]) == \"bar\"     w.reset()     assert len(w.warnings) == 0   Here all warnings will be caught, and the test code tests the captured warnings directly.  New in version 2.6.  Changed in version 2.7: New optional arguments filters and quiet.     test.test_support.check_py3k_warnings(*filters, quiet=False)\u00b6 Similar to check_warnings(), but for Python 3 compatibility warnings. If sys.py3kwarning == 1, it checks if the warning is effectively raised. If sys.py3kwarning == 0, it checks that no warning is raised.  It accepts 2-tuples of the form (\"message regexp\", WarningCategory) as positional arguments.  When the optional keyword argument quiet is True, it does not fail if a filter catches nothing.  Without arguments, it defaults to: check_py3k_warnings((\"\", DeprecationWarning), quiet=False)    New in version 2.7.     test.test_support.captured_stdout()\u00b6 This is a context manager that runs the with statement body using a StringIO.StringIO object as sys.stdout.  That object can be retrieved using the as clause of the with statement. Example use: with captured_stdout() as s:     print \"hello\" assert s.getvalue() == \"hello\"    New in version 2.6.     test.test_support.import_module(name, deprecated=False)\u00b6 This function imports and returns the named module. Unlike a normal import, this function raises unittest.SkipTest if the module cannot be imported. Module and package deprecation messages are suppressed during this import if deprecated is True.  New in version 2.7.     test.test_support.import_fresh_module(name, fresh=(), blocked=(), deprecated=False)\u00b6 This function imports and returns a fresh copy of the named Python module by removing the named module from sys.modules before doing the import. Note that unlike reload(), the original module is not affected by this operation. fresh is an iterable of additional module names that are also removed from the sys.modules cache before doing the import. blocked is an iterable of module names that are replaced with 0 in the module cache during the import to ensure that attempts to import them raise ImportError. The named module and any modules named in the fresh and blocked parameters are saved before starting the import and then reinserted into sys.modules when the fresh import is complete. Module and package deprecation messages are suppressed during this import if deprecated is True. This function will raise unittest.SkipTest is the named module cannot be imported. Example use: # Get copies of the warnings module for testing without # affecting the version being used by the rest of the test suite # One copy uses the C implementation, the other is forced to use # the pure Python fallback implementation py_warnings = import_fresh_module(&#39;warnings&#39;, blocked=[&#39;_warnings&#39;]) c_warnings = import_fresh_module(&#39;warnings&#39;, fresh=[&#39;_warnings&#39;])    New in version 2.7.   The test.test_support module defines the following classes:   class test.test_support.TransientResource(exc[, **kwargs])\u00b6 Instances are a context manager that raises ResourceDenied if the specified exception type is raised.  Any keyword arguments are treated as attribute\/value pairs to be compared against any exception raised within the with statement.  Only if all pairs match properly against attributes on the exception is ResourceDenied raised.  New in version 2.6.     class test.test_support.EnvironmentVarGuard\u00b6 Class used to temporarily set or unset environment variables.  Instances can be used as a context manager and have a complete dictionary interface for querying\/modifying the underlying os.environ. After exit from the context manager all changes to environment variables done through this instance will be rolled back.  New in version 2.6.  Changed in version 2.7: Added dictionary interface.     EnvironmentVarGuard.set(envvar, value)\u00b6 Temporarily set the environment variable envvar to the value of value.    EnvironmentVarGuard.unset(envvar)\u00b6 Temporarily unset the environment variable envvar.    class test.test_support.WarningsRecorder\u00b6 Class used to record warnings for unit tests. See documentation of check_warnings() above for more details.  New in version 2.6."},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.captured_stdout","title":"test.test_support.captured_stdout","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.check_py3k_warnings","title":"test.test_support.check_py3k_warnings","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.check_warnings","title":"test.test_support.check_warnings","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.EnvironmentVarGuard","title":"test.test_support.EnvironmentVarGuard","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.EnvironmentVarGuard.set","title":"test.test_support.EnvironmentVarGuard.set","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.EnvironmentVarGuard.unset","title":"test.test_support.EnvironmentVarGuard.unset","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.findfile","title":"test.test_support.findfile","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.forget","title":"test.test_support.forget","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.import_fresh_module","title":"test.test_support.import_fresh_module","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.import_module","title":"test.test_support.import_module","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.is_resource_enabled","title":"test.test_support.is_resource_enabled","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.requires","title":"test.test_support.requires","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.run_unittest","title":"test.test_support.run_unittest","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.TransientResource","title":"test.test_support.TransientResource","description":""},{"url":"http:\/\/docs.python.org\/library\/test.html#test.test_support.WarningsRecorder","title":"test.test_support.WarningsRecorder","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html","title":"doctest","description":"25.2. doctest &#8212; Test interactive Python examples\u00b6 The doctest module searches for pieces of text that look like interactive Python sessions, and then executes those sessions to verify that they work exactly as shown.  There are several common ways to use doctest:  To check that a module&#8217;s docstrings are up-to-date by verifying that all interactive examples still work as documented. To perform regression testing by verifying that interactive examples from a test file or a test object work as expected. To write tutorial documentation for a package, liberally illustrated with input-output examples.  Depending on whether the examples or the expository text are emphasized, this has the flavor of &#8220;literate testing&#8221; or &#8220;executable documentation&#8221;.  Here&#8217;s a complete but small example module: \"\"\" This is the \"example\" module.  The example module supplies one function, factorial().  For example,  >>> factorial(5) 120 \"\"\"  def factorial(n):     \"\"\"Return the factorial of n, an exact integer >= 0.      If the result is small enough to fit in an int, return an int.     Else return a long.      >>> [factorial(n) for n in range(6)]     [1, 1, 2, 6, 24, 120]     >>> [factorial(long(n)) for n in range(6)]     [1, 1, 2, 6, 24, 120]     >>> factorial(30)     265252859812191058636308480000000L     >>> factorial(30L)     265252859812191058636308480000000L     >>> factorial(-1)     Traceback (most recent call last):         ...     ValueError: n must be >= 0      Factorials of floats are OK, but the float must be an exact integer:     >>> factorial(30.1)     Traceback (most recent call last):         ...     ValueError: n must be exact integer     >>> factorial(30.0)     265252859812191058636308480000000L      It must also not be ridiculously large:     >>> factorial(1e100)     Traceback (most recent call last):         ...     OverflowError: n too large     \"\"\"      import math     if not n >= 0:         raise ValueError(\"n must be >= 0\")     if math.floor(n) != n:         raise ValueError(\"n must be exact integer\")     if n+1 == n:  # catch a value like 1e300         raise OverflowError(\"n too large\")     result = 1     factor = 2     while factor <= n:         result *= factor         factor += 1     return result   if __name__ == \"__main__\":     import doctest     doctest.testmod()   If you run example.py directly from the command line, doctest works its magic: $ python example.py $  There&#8217;s no output!  That&#8217;s normal, and it means all the examples worked.  Pass -v to the script, and doctest prints a detailed log of what it&#8217;s trying, and prints a summary at the end: $ python example.py -v Trying:     factorial(5) Expecting:     120 ok Trying:     [factorial(n) for n in range(6)] Expecting:     [1, 1, 2, 6, 24, 120] ok Trying:     [factorial(long(n)) for n in range(6)] Expecting:     [1, 1, 2, 6, 24, 120] ok  And so on, eventually ending with: Trying:     factorial(1e100) Expecting:     Traceback (most recent call last):         ...     OverflowError: n too large ok 2 items passed all tests:    1 tests in __main__    8 tests in __main__.factorial 9 tests in 2 items. 9 passed and 0 failed. Test passed. $  That&#8217;s all you need to know to start making productive use of doctest! Jump in.  The following sections provide full details.  Note that there are many examples of doctests in the standard Python test suite and libraries. Especially useful examples can be found in the standard test file Lib\/test\/test_doctest.py.  25.2.1. Simple Usage: Checking Examples in Docstrings\u00b6 The simplest way to start using doctest (but not necessarily the way you&#8217;ll continue to do it) is to end each module M with: if __name__ == \"__main__\":     import doctest     doctest.testmod()   doctest then examines docstrings in module M. Running the module as a script causes the examples in the docstrings to get executed and verified: python M.py  This won&#8217;t display anything unless an example fails, in which case the failing example(s) and the cause(s) of the failure(s) are printed to stdout, and the final line of output is ***Test Failed*** N failures., where N is the number of examples that failed. Run it with the -v switch instead: python M.py -v  and a detailed report of all examples tried is printed to standard output, along with assorted summaries at the end. You can force verbose mode by passing verbose=True to testmod(), or prohibit it by passing verbose=False.  In either of those cases, sys.argv is not examined by testmod() (so passing -v or not has no effect). Since Python 2.6, there is also a command line shortcut for running testmod().  You can instruct the Python interpreter to run the doctest module directly from the standard library and pass the module name(s) on the command line: python -m doctest -v example.py  This will import example.py as a standalone module and run testmod() on it.  Note that this may not work correctly if the file is part of a package and imports other submodules from that package. For more information on testmod(), see section Basic API.   25.2.2. Simple Usage: Checking Examples in a Text File\u00b6 Another simple application of doctest is testing interactive examples in a text file.  This can be done with the testfile() function: import doctest doctest.testfile(\"example.txt\")   That short script executes and verifies any interactive Python examples contained in the file example.txt.  The file content is treated as if it were a single giant docstring; the file doesn&#8217;t need to contain a Python program!   For example, perhaps example.txt contains this: The ``example`` module ======================  Using ``factorial`` -------------------  This is an example text file in reStructuredText format.  First import ``factorial`` from the ``example`` module:      >>> from example import factorial  Now use it:      >>> factorial(6)     120  Running doctest.testfile(\"example.txt\") then finds the error in this documentation: File \".\/example.txt\", line 14, in example.txt Failed example:     factorial(6) Expected:     120 Got:     720  As with testmod(), testfile() won&#8217;t display anything unless an example fails.  If an example does fail, then the failing example(s) and the cause(s) of the failure(s) are printed to stdout, using the same format as testmod(). By default, testfile() looks for files in the calling module&#8217;s directory. See section Basic API for a description of the optional arguments that can be used to tell it to look for files in other locations. Like testmod(), testfile()&#8216;s verbosity can be set with the -v command-line switch or with the optional keyword argument verbose. Since Python 2.6, there is also a command line shortcut for running testfile().  You can instruct the Python interpreter to run the doctest module directly from the standard library and pass the file name(s) on the command line: python -m doctest -v example.txt  Because the file name does not end with .py, doctest infers that it must be run with testfile(), not testmod(). For more information on testfile(), see section Basic API.   25.2.3. How It Works\u00b6 This section examines in detail how doctest works: which docstrings it looks at, how it finds interactive examples, what execution context it uses, how it handles exceptions, and how option flags can be used to control its behavior. This is the information that you need to know to write doctest examples; for information about actually running doctest on these examples, see the following sections.  25.2.3.1. Which Docstrings Are Examined?\u00b6 The module docstring, and all function, class and method docstrings are searched.  Objects imported into the module are not searched. In addition, if M.__test__ exists and &#8220;is true&#8221;, it must be a dict, and each entry maps a (string) name to a function object, class object, or string. Function and class object docstrings found from M.__test__ are searched, and strings are treated as if they were docstrings.  In output, a key K in M.__test__ appears with name <name of M>.__test__.K  Any classes found are recursively searched similarly, to test docstrings in their contained methods and nested classes.  Changed in version 2.4: A &#8220;private name&#8221; concept is deprecated and no longer documented.   25.2.3.2. How are Docstring Examples Recognized?\u00b6 In most cases a copy-and-paste of an interactive console session works fine, but doctest isn&#8217;t trying to do an exact emulation of any specific Python shell. >>> # comments are ignored >>> x = 12 >>> x 12 >>> if x == 13: ...     print \"yes\" ... else: ...     print \"no\" ...     print \"NO\" ...     print \"NO!!!\" ... no NO NO!!! >>>   Any expected output must immediately follow the final '>>> ' or '... ' line containing the code, and the expected output (if any) extends to the next '>>> ' or all-whitespace line. The fine print:  Expected output cannot contain an all-whitespace line, since such a line is taken to signal the end of expected output.  If expected output does contain a blank line, put <BLANKLINE> in your doctest example each place a blank line is expected.  New in version 2.4: <BLANKLINE> was added; there was no way to use expected output containing empty lines in previous versions.  All hard tab characters are expanded to spaces, using 8-column tab stops. Tabs in output generated by the tested code are not modified.  Because any hard tabs in the sample output are expanded, this means that if the code output includes hard tabs, the only way the doctest can pass is if the NORMALIZE_WHITESPACE option or directive is in effect. Alternatively, the test can be rewritten to capture the output and compare it to an expected value as part of the test.  This handling of tabs in the source was arrived at through trial and error, and has proven to be the least error prone way of handling them.  It is possible to use a different algorithm for handling tabs by writing a custom DocTestParser class.  Changed in version 2.4: Expanding tabs to spaces is new; previous versions tried to preserve hard tabs, with confusing results.  Output to stdout is captured, but not output to stderr (exception tracebacks are captured via a different means).  If you continue a line via backslashing in an interactive session, or for any other reason use a backslash, you should use a raw docstring, which will preserve your backslashes exactly as you type them: >>> def f(x): ...     r&#39;&#39;&#39;Backslashes in a raw docstring: m\\n&#39;&#39;&#39; >>> print f.__doc__ Backslashes in a raw docstring: m\\n   Otherwise, the backslash will be interpreted as part of the string. For example, the &#8220;\\&#8221; above would be interpreted as a newline character.  Alternatively, you can double each backslash in the doctest version (and not use a raw string): >>> def f(x): ...     &#39;&#39;&#39;Backslashes in a raw docstring: m\\\\n&#39;&#39;&#39; >>> print f.__doc__ Backslashes in a raw docstring: m\\n    The starting column doesn&#8217;t matter: >>> assert \"Easy!\"       >>> import math           >>> math.floor(1.9)           1.0   and as many leading whitespace characters are stripped from the expected output as appeared in the initial '>>> ' line that started the example.     25.2.3.3. What&#8217;s the Execution Context?\u00b6 By default, each time doctest finds a docstring to test, it uses a shallow copy of M&#8216;s globals, so that running tests doesn&#8217;t change the module&#8217;s real globals, and so that one test in M can&#8217;t leave behind crumbs that accidentally allow another test to work.  This means examples can freely use any names defined at top-level in M, and names defined earlier in the docstring being run. Examples cannot see names defined in other docstrings. You can force use of your own dict as the execution context by passing globs=your_dict to testmod() or testfile() instead.   25.2.3.4. What About Exceptions?\u00b6 No problem, provided that the traceback is the only output produced by the example:  just paste in the traceback. [1] Since tracebacks contain details that are likely to change rapidly (for example, exact file paths and line numbers), this is one case where doctest works hard to be flexible in what it accepts. Simple example: >>> [1, 2, 3].remove(42) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: list.remove(x): x not in list   That doctest succeeds if ValueError is raised, with the list.remove(x): x not in list detail as shown. The expected output for an exception must start with a traceback header, which may be either of the following two lines, indented the same as the first line of the example: Traceback (most recent call last): Traceback (innermost last):  The traceback header is followed by an optional traceback stack, whose contents are ignored by doctest.  The traceback stack is typically omitted, or copied verbatim from an interactive session. The traceback stack is followed by the most interesting part: the line(s) containing the exception type and detail.  This is usually the last line of a traceback, but can extend across multiple lines if the exception has a multi-line detail: >>> raise ValueError(&#39;multi\\n    line\\ndetail&#39;) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? ValueError: multi     line detail   The last three lines (starting with ValueError) are compared against the exception&#8217;s type and detail, and the rest are ignored.  Changed in version 2.4: Previous versions were unable to handle multi-line exception details. Best practice is to omit the traceback stack, unless it adds significant documentation value to the example.  So the last example is probably better as: >>> raise ValueError(&#39;multi\\n    line\\ndetail&#39;) Traceback (most recent call last):     ... ValueError: multi     line detail   Note that tracebacks are treated very specially.  In particular, in the rewritten example, the use of ... is independent of doctest&#8217;s ELLIPSIS option.  The ellipsis in that example could be left out, or could just as well be three (or three hundred) commas or digits, or an indented transcript of a Monty Python skit. Some details you should read once, but won&#8217;t need to remember:  Doctest can&#8217;t guess whether your expected output came from an exception traceback or from ordinary printing.  So, e.g., an example that expects ValueError: 42 is prime will pass whether ValueError is actually raised or if the example merely prints that traceback text.  In practice, ordinary output rarely begins with a traceback header line, so this doesn&#8217;t create real problems.  Each line of the traceback stack (if present) must be indented further than the first line of the example, or start with a non-alphanumeric character. The first line following the traceback header indented the same and starting with an alphanumeric is taken to be the start of the exception detail.  Of course this does the right thing for genuine tracebacks.  When the IGNORE_EXCEPTION_DETAIL doctest option is specified, everything following the leftmost colon and any module information in the exception name is ignored.  The interactive shell omits the traceback header line for some SyntaxErrors.  But doctest uses the traceback header line to distinguish exceptions from non-exceptions.  So in the rare case where you need to test a SyntaxError that omits the traceback header, you will need to manually add the traceback header line to your test example.  For some SyntaxErrors, Python displays the character position of the syntax error, using a ^ marker: >>> 1 1   File \"<stdin>\", line 1     1 1       ^ SyntaxError: invalid syntax   Since the lines showing the position of the error come before the exception type and detail, they are not checked by doctest.  For example, the following test would pass, even though it puts the ^ marker in the wrong location: >>> 1 1   File \"<stdin>\", line 1     1 1     ^ SyntaxError: invalid syntax       25.2.3.5. Option Flags and Directives\u00b6 A number of option flags control various aspects of doctest&#8217;s behavior. Symbolic names for the flags are supplied as module constants, which can be or&#8217;ed together and passed to various functions.  The names can also be used in doctest directives (see below). The first group of options define test semantics, controlling aspects of how doctest decides whether actual output matches an example&#8217;s expected output:   doctest.DONT_ACCEPT_TRUE_FOR_1\u00b6 By default, if an expected output block contains just 1, an actual output block containing just 1 or just True is considered to be a match, and similarly for 0 versus False.  When DONT_ACCEPT_TRUE_FOR_1 is specified, neither substitution is allowed.  The default behavior caters to that Python changed the return type of many functions from integer to boolean; doctests expecting &#8220;little integer&#8221; output still work in these cases.  This option will probably go away, but not for several years.    doctest.DONT_ACCEPT_BLANKLINE\u00b6 By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.  Because a genuinely blank line delimits the expected output, this is the only way to communicate that a blank line is expected.  When DONT_ACCEPT_BLANKLINE is specified, this substitution is not allowed.    doctest.NORMALIZE_WHITESPACE\u00b6 When specified, all sequences of whitespace (blanks and newlines) are treated as equal.  Any sequence of whitespace within the expected output will match any sequence of whitespace within the actual output. By default, whitespace must match exactly. NORMALIZE_WHITESPACE is especially useful when a line of expected output is very long, and you want to wrap it across multiple lines in your source.    doctest.ELLIPSIS\u00b6 When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.  This includes substrings that span line boundaries, and empty substrings, so it&#8217;s best to keep usage of this simple. Complicated uses can lead to the same kinds of &#8220;oops, it matched too much!&#8221; surprises that .* is prone to in regular expressions.    doctest.IGNORE_EXCEPTION_DETAIL\u00b6 When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.  For example, an example expecting ValueError: 42 will pass if the actual exception raised is ValueError: 3*14, but will fail, e.g., if TypeError is raised. It will also ignore the module name used in Python 3 doctest reports. Hence both these variations will work regardless of whether the test is run under Python 2.7 or Python 3.2 (or later versions):  >>> raise CustomError(&#39;message&#39;) #doctest: +IGNORE_EXCEPTION_DETAIL Traceback (most recent call last): CustomError: message   >>> raise CustomError(&#39;message&#39;) #doctest: +IGNORE_EXCEPTION_DETAIL Traceback (most recent call last): my_module.CustomError: message    Note that ELLIPSIS can also be used to ignore the details of the exception message, but such a test may still fail based on whether or not the module details are printed as part of the exception name. Using IGNORE_EXCEPTION_DETAIL and the details from Python 2.3 is also the only clear way to write a doctest that doesn&#8217;t care about the exception detail yet continues to pass under Python 2.3 or earlier (those releases do not support doctest directives and ignore them as irrelevant comments). For example, >>> (1, 2)[3] = &#39;moo&#39; #doctest: +IGNORE_EXCEPTION_DETAIL Traceback (most recent call last):   File \"<stdin>\", line 1, in ? TypeError: object doesn&#39;t support item assignment   passes under Python 2.3 and later Python versions, even though the detail changed in Python 2.4 to say &#8220;does not&#8221; instead of &#8220;doesn&#8217;t&#8221;.  Changed in version 2.7: IGNORE_EXCEPTION_DETAIL now also ignores any information relating to the module containing the exception under test     doctest.SKIP\u00b6 When specified, do not run the example at all.  This can be useful in contexts where doctest examples serve as both documentation and test cases, and an example should be included for documentation purposes, but should not be checked.  E.g., the example&#8217;s output might be random; or the example might depend on resources which would be unavailable to the test driver. The SKIP flag can also be used for temporarily &#8220;commenting out&#8221; examples.    New in version 2.5.   doctest.COMPARISON_FLAGS\u00b6 A bitmask or&#8217;ing together all the comparison flags above.  The second group of options controls how test failures are reported:   doctest.REPORT_UDIFF\u00b6 When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff.    doctest.REPORT_CDIFF\u00b6 When specified, failures that involve multi-line expected and actual outputs will be displayed using a context diff.    doctest.REPORT_NDIFF\u00b6 When specified, differences are computed by difflib.Differ, using the same algorithm as the popular ndiff.py utility. This is the only method that marks differences within lines as well as across lines.  For example, if a line of expected output contains digit 1 where actual output contains letter l, a line is inserted with a caret marking the mismatching column positions.    doctest.REPORT_ONLY_FIRST_FAILURE\u00b6 When specified, display the first failing example in each doctest, but suppress output for all remaining examples.  This will prevent doctest from reporting correct examples that break because of earlier failures; but it might also hide incorrect examples that fail independently of the first failure.  When REPORT_ONLY_FIRST_FAILURE is specified, the remaining examples are still run, and still count towards the total number of failures reported; only the output is suppressed.    doctest.REPORTING_FLAGS\u00b6 A bitmask or&#8217;ing together all the reporting flags above.  &#8220;Doctest directives&#8221; may be used to modify the option flags for individual examples.  Doctest directives are expressed as a special Python comment following an example&#8217;s source code:  directive             ::=  \"#\" \"doctest:\" directive_options directive_options     ::=  directive_option (\",\" directive_option)\\* directive_option      ::=  on_or_off directive_option_name on_or_off             ::=  \"+\" \\| \"-\" directive_option_name ::=  \"DONT_ACCEPT_BLANKLINE\" \\| \"NORMALIZE_WHITESPACE\" \\| ...  Whitespace is not allowed between the + or - and the directive option name.  The directive option name can be any of the option flag names explained above. An example&#8217;s doctest directives modify doctest&#8217;s behavior for that single example.  Use + to enable the named behavior, or - to disable it. For example, this test passes: >>> print range(20) #doctest: +NORMALIZE_WHITESPACE [0,   1,  2,  3,  4,  5,  6,  7,  8,  9, 10,  11, 12, 13, 14, 15, 16, 17, 18, 19]   Without the directive it would fail, both because the actual output doesn&#8217;t have two blanks before the single-digit list elements, and because the actual output is on a single line.  This test also passes, and also requires a directive to do so: >>> print range(20) # doctest:+ELLIPSIS [0, 1, ..., 18, 19]   Multiple directives can be used on a single physical line, separated by commas: >>> print range(20) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE [0,    1, ...,   18,    19]   If multiple directive comments are used for a single example, then they are combined: >>> print range(20) # doctest: +ELLIPSIS ...                 # doctest: +NORMALIZE_WHITESPACE [0,    1, ...,   18,    19]   As the previous example shows, you can add ... lines to your example containing only directives.  This can be useful when an example is too long for a directive to comfortably fit on the same line: >>> print range(5) + range(10,20) + range(30,40) + range(50,60) ... # doctest: +ELLIPSIS [0, ..., 4, 10, ..., 19, 30, ..., 39, 50, ..., 59]   Note that since all options are disabled by default, and directives apply only to the example they appear in, enabling options (via + in a directive) is usually the only meaningful choice.  However, option flags can also be passed to functions that run doctests, establishing different defaults.  In such cases, disabling an option via - in a directive can be useful.  New in version 2.4: Doctest directives and the associated constants DONT_ACCEPT_BLANKLINE, NORMALIZE_WHITESPACE, ELLIPSIS, IGNORE_EXCEPTION_DETAIL, REPORT_UDIFF, REPORT_CDIFF, REPORT_NDIFF, REPORT_ONLY_FIRST_FAILURE, COMPARISON_FLAGS and REPORTING_FLAGS were added. There&#8217;s also a way to register new option flag names, although this isn&#8217;t useful unless you intend to extend doctest internals via subclassing:   doctest.register_optionflag(name)\u00b6 Create a new option flag with a given name, and return the new flag&#8217;s integer value.  register_optionflag() can be used when subclassing OutputChecker or DocTestRunner to create new options that are supported by your subclasses.  register_optionflag() should always be called using the following idiom: MY_FLAG = register_optionflag(&#39;MY_FLAG&#39;)    New in version 2.4.     25.2.3.6. Warnings\u00b6 doctest is serious about requiring exact matches in expected output.  If even a single character doesn&#8217;t match, the test fails.  This will probably surprise you a few times, as you learn exactly what Python does and doesn&#8217;t guarantee about output.  For example, when printing a dict, Python doesn&#8217;t guarantee that the key-value pairs will be printed in any particular order, so a test like >>> foo() {\"Hermione\": \"hippogryph\", \"Harry\": \"broomstick\"}   is vulnerable!  One workaround is to do >>> foo() == {\"Hermione\": \"hippogryph\", \"Harry\": \"broomstick\"} True   instead.  Another is to do >>> d = foo().items() >>> d.sort() >>> d [(&#39;Harry&#39;, &#39;broomstick&#39;), (&#39;Hermione&#39;, &#39;hippogryph&#39;)]   There are others, but you get the idea. Another bad idea is to print things that embed an object address, like >>> id(1.0) # certain to fail some of the time 7948648 >>> class C: pass >>> C()   # the default repr() for instances embeds an address <__main__.C instance at 0x00AC18F0>   The ELLIPSIS directive gives a nice approach for the last example: >>> C() #doctest: +ELLIPSIS <__main__.C instance at 0x...>   Floating-point numbers are also subject to small output variations across platforms, because Python defers to the platform C library for float formatting, and C libraries vary widely in quality here. >>> 1.\/7  # risky 0.14285714285714285 >>> print 1.\/7 # safer 0.142857142857 >>> print round(1.\/7, 6) # much safer 0.142857   Numbers of the form I\/2.**J are safe across all platforms, and I often contrive doctest examples to produce numbers of that form: >>> 3.\/4  # utterly safe 0.75   Simple fractions are also easier for people to understand, and that makes for better documentation.    25.2.4. Basic API\u00b6 The functions testmod() and testfile() provide a simple interface to doctest that should be sufficient for most basic uses.  For a less formal introduction to these two functions, see sections Simple Usage: Checking Examples in Docstrings and Simple Usage: Checking Examples in a Text File.   doctest.testfile(filename[, module_relative][, name][, package][, globs][, verbose][, report][, optionflags][, extraglobs][, raise_on_error][, parser][, encoding])\u00b6 All arguments except filename are optional, and should be specified in keyword form. Test examples in the file named filename.  Return (failure_count, test_count). Optional argument module_relative specifies how the filename should be interpreted:  If module_relative is True (the default), then filename specifies an OS-independent module-relative path.  By default, this path is relative to the calling module&#8217;s directory; but if the package argument is specified, then it is relative to that package.  To ensure OS-independence, filename should use \/ characters to separate path segments, and may not be an absolute path (i.e., it may not begin with \/). If module_relative is False, then filename specifies an OS-specific path.  The path may be absolute or relative; relative paths are resolved with respect to the current working directory.  Optional argument name gives the name of the test; by default, or if None, os.path.basename(filename) is used. Optional argument package is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename.  If no package is specified, then the calling module&#8217;s directory is used as the base directory for module-relative filenames.  It is an error to specify package if module_relative is False. Optional argument globs gives a dict to be used as the globals when executing examples.  A new shallow copy of this dict is created for the doctest, so its examples start with a clean slate. By default, or if None, a new empty dict is used. Optional argument extraglobs gives a dict merged into the globals used to execute examples.  This works like dict.update():  if globs and extraglobs have a common key, the associated value in extraglobs appears in the combined dict.  By default, or if None, no extra globals are used.  This is an advanced feature that allows parameterization of doctests.  For example, a doctest can be written for a base class, using a generic name for the class, then reused to test any number of subclasses by passing an extraglobs dict mapping the generic name to the subclass to be tested. Optional argument verbose prints lots of stuff if true, and prints only failures if false; by default, or if None, it&#8217;s true if and only if '-v' is in sys.argv. Optional argument report prints a summary at the end when true, else prints nothing at the end.  In verbose mode, the summary is detailed, else the summary is very brief (in fact, empty if all tests passed). Optional argument optionflags or&#8217;s together option flags.  See section Option Flags and Directives. Optional argument raise_on_error defaults to false.  If true, an exception is raised upon the first failure or unexpected exception in an example.  This allows failures to be post-mortem debugged. Default behavior is to continue running examples. Optional argument parser specifies a DocTestParser (or subclass) that should be used to extract tests from the files.  It defaults to a normal parser (i.e., DocTestParser()). Optional argument encoding specifies an encoding that should be used to convert the file to unicode.  New in version 2.4.  Changed in version 2.5: The parameter encoding was added.     doctest.testmod([m][, name][, globs][, verbose][, report][, optionflags][, extraglobs][, raise_on_error][, exclude_empty])\u00b6 All arguments are optional, and all except for m should be specified in keyword form. Test examples in docstrings in functions and classes reachable from module m (or module __main__ if m is not supplied or is None), starting with m.__doc__. Also test examples reachable from dict m.__test__, if it exists and is not None.  m.__test__ maps names (strings) to functions, classes and strings; function and class docstrings are searched for examples; strings are searched directly, as if they were docstrings. Only docstrings attached to objects belonging to module m are searched. Return (failure_count, test_count). Optional argument name gives the name of the module; by default, or if None, m.__name__ is used. Optional argument exclude_empty defaults to false.  If true, objects for which no doctests are found are excluded from consideration. The default is a backward compatibility hack, so that code still using doctest.master.summarize() in conjunction with testmod() continues to get output for objects with no tests. The exclude_empty argument to the newer DocTestFinder constructor defaults to true. Optional arguments extraglobs, verbose, report, optionflags, raise_on_error, and globs are the same as for function testfile() above, except that globs defaults to m.__dict__.  Changed in version 2.3: The parameter optionflags was added.  Changed in version 2.4: The parameters extraglobs, raise_on_error and exclude_empty were added.  Changed in version 2.5: The optional argument isprivate, deprecated in 2.4, was removed.   There&#8217;s also a function to run the doctests associated with a single object. This function is provided for backward compatibility.  There are no plans to deprecate it, but it&#8217;s rarely useful:   doctest.run_docstring_examples(f, globs[, verbose][, name][, compileflags][, optionflags])\u00b6 Test examples associated with object f; for example, f may be a module, function, or class object. A shallow copy of dictionary argument globs is used for the execution context. Optional argument name is used in failure messages, and defaults to \"NoName\". If optional argument verbose is true, output is generated even if there are no failures.  By default, output is generated only in case of an example failure. Optional argument compileflags gives the set of flags that should be used by the Python compiler when running the examples.  By default, or if None, flags are deduced corresponding to the set of future features found in globs. Optional argument optionflags works as for function testfile() above.     25.2.5. Unittest API\u00b6 As your collection of doctest&#8217;ed modules grows, you&#8217;ll want a way to run all their doctests systematically.  Prior to Python 2.4, doctest had a barely documented Tester class that supplied a rudimentary way to combine doctests from multiple modules. Tester was feeble, and in practice most serious Python testing frameworks build on the unittest module, which supplies many flexible ways to combine tests from multiple sources.  So, in Python 2.4, doctest&#8216;s Tester class is deprecated, and doctest provides two functions that can be used to create unittest test suites from modules and text files containing doctests.  To integrate with unittest test discovery, include a load_tests() function in your test module: import unittest import doctest import my_module_with_doctests  def load_tests(loader, tests, ignore):     tests.addTests(doctest.DocTestSuite(my_module_with_doctests))     return tests   There are two main functions for creating unittest.TestSuite instances from text files and modules with doctests:   doctest.DocFileSuite(*paths[, module_relative][, package][, setUp][, tearDown][, globs][, optionflags][, parser][, encoding])\u00b6 Convert doctest tests from one or more text files to a unittest.TestSuite. The returned unittest.TestSuite is to be run by the unittest framework and runs the interactive examples in each file.  If an example in any file fails, then the synthesized unit test fails, and a failureException exception is raised showing the name of the file containing the test and a (sometimes approximate) line number. Pass one or more paths (as strings) to text files to be examined. Options may be provided as keyword arguments: Optional argument module_relative specifies how the filenames in paths should be interpreted:  If module_relative is True (the default), then each filename in paths specifies an OS-independent module-relative path.  By default, this path is relative to the calling module&#8217;s directory; but if the package argument is specified, then it is relative to that package.  To ensure OS-independence, each filename should use \/ characters to separate path segments, and may not be an absolute path (i.e., it may not begin with \/). If module_relative is False, then each filename in paths specifies an OS-specific path.  The path may be absolute or relative; relative paths are resolved with respect to the current working directory.  Optional argument package is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths.  If no package is specified, then the calling module&#8217;s directory is used as the base directory for module-relative filenames.  It is an error to specify package if module_relative is False. Optional argument setUp specifies a set-up function for the test suite. This is called before running the tests in each file.  The setUp function will be passed a DocTest object.  The setUp function can access the test globals as the globs attribute of the test passed. Optional argument tearDown specifies a tear-down function for the test suite.  This is called after running the tests in each file.  The tearDown function will be passed a DocTest object.  The setUp function can access the test globals as the globs attribute of the test passed. Optional argument globs is a dictionary containing the initial global variables for the tests.  A new copy of this dictionary is created for each test.  By default, globs is a new empty dictionary. Optional argument optionflags specifies the default doctest options for the tests, created by or-ing together individual option flags.  See section Option Flags and Directives. See function set_unittest_reportflags() below for a better way to set reporting options. Optional argument parser specifies a DocTestParser (or subclass) that should be used to extract tests from the files.  It defaults to a normal parser (i.e., DocTestParser()). Optional argument encoding specifies an encoding that should be used to convert the file to unicode.  New in version 2.4.  Changed in version 2.5: The global __file__ was added to the globals provided to doctests loaded from a text file using DocFileSuite().  Changed in version 2.5: The parameter encoding was added.     doctest.DocTestSuite([module][, globs][, extraglobs][, test_finder][, setUp][, tearDown][, checker])\u00b6 Convert doctest tests for a module to a unittest.TestSuite. The returned unittest.TestSuite is to be run by the unittest framework and runs each doctest in the module.  If any of the doctests fail, then the synthesized unit test fails, and a failureException exception is raised showing the name of the file containing the test and a (sometimes approximate) line number. Optional argument module provides the module to be tested.  It can be a module object or a (possibly dotted) module name.  If not specified, the module calling this function is used. Optional argument globs is a dictionary containing the initial global variables for the tests.  A new copy of this dictionary is created for each test.  By default, globs is a new empty dictionary. Optional argument extraglobs specifies an extra set of global variables, which is merged into globs.  By default, no extra globals are used. Optional argument test_finder is the DocTestFinder object (or a drop-in replacement) that is used to extract doctests from the module. Optional arguments setUp, tearDown, and optionflags are the same as for function DocFileSuite() above.  New in version 2.3.  Changed in version 2.4: The parameters globs, extraglobs, test_finder, setUp, tearDown, and optionflags were added; this function now uses the same search technique as testmod().   Under the covers, DocTestSuite() creates a unittest.TestSuite out of doctest.DocTestCase instances, and DocTestCase is a subclass of unittest.TestCase. DocTestCase isn&#8217;t documented here (it&#8217;s an internal detail), but studying its code can answer questions about the exact details of unittest integration. Similarly, DocFileSuite() creates a unittest.TestSuite out of doctest.DocFileCase instances, and DocFileCase is a subclass of DocTestCase. So both ways of creating a unittest.TestSuite run instances of DocTestCase.  This is important for a subtle reason: when you run doctest functions yourself, you can control the doctest options in use directly, by passing option flags to doctest functions.  However, if you&#8217;re writing a unittest framework, unittest ultimately controls when and how tests get run.  The framework author typically wants to control doctest reporting options (perhaps, e.g., specified by command line options), but there&#8217;s no way to pass options through unittest to doctest test runners. For this reason, doctest also supports a notion of doctest reporting flags specific to unittest support, via this function:   doctest.set_unittest_reportflags(flags)\u00b6 Set the doctest reporting flags to use. Argument flags or&#8217;s together option flags.  See section Option Flags and Directives.  Only &#8220;reporting flags&#8221; can be used. This is a module-global setting, and affects all future doctests run by module unittest:  the runTest() method of DocTestCase looks at the option flags specified for the test case when the DocTestCase instance was constructed.  If no reporting flags were specified (which is the typical and expected case), doctest&#8216;s unittest reporting flags are or&#8217;ed into the option flags, and the option flags so augmented are passed to the DocTestRunner instance created to run the doctest.  If any reporting flags were specified when the DocTestCase instance was constructed, doctest&#8216;s unittest reporting flags are ignored. The value of the unittest reporting flags in effect before the function was called is returned by the function.  New in version 2.4.     25.2.6. Advanced API\u00b6 The basic API is a simple wrapper that&#8217;s intended to make doctest easy to use. It is fairly flexible, and should meet most users&#8217; needs; however, if you require more fine-grained control over testing, or wish to extend doctest&#8217;s capabilities, then you should use the advanced API. The advanced API revolves around two container classes, which are used to store the interactive examples extracted from doctest cases:  Example: A single Python statement, paired with its expected output. DocTest: A collection of Examples, typically extracted from a single docstring or text file.  Additional processing classes are defined to find, parse, and run, and check doctest examples:  DocTestFinder: Finds all docstrings in a given module, and uses a DocTestParser to create a DocTest from every docstring that contains interactive examples. DocTestParser: Creates a DocTest object from a string (such as an object&#8217;s docstring). DocTestRunner: Executes the examples in a DocTest, and uses an OutputChecker to verify their output. OutputChecker: Compares the actual output from a doctest example with the expected output, and decides whether they match.  The relationships among these processing classes are summarized in the following diagram:                             list of: +------+                   +---------+ |module| --DocTestFinder-> | DocTest | --DocTestRunner-> results +------+    |        ^     +---------+     |       ^    (printed)             |        |     | Example |     |       |             v        |     |   ...   |     v       |            DocTestParser   | Example |   OutputChecker                            +---------+   25.2.6.1. DocTest Objects\u00b6   class doctest.DocTest(examples, globs, name, filename, lineno, docstring)\u00b6 A collection of doctest examples that should be run in a single namespace.  The constructor arguments are used to initialize the attributes of the same names.  New in version 2.4. DocTest defines the following attributes.  They are initialized by the constructor, and should not be modified directly.   examples\u00b6 A list of Example objects encoding the individual interactive Python examples that should be run by this test.    globs\u00b6 The namespace (aka globals) that the examples should be run in. This is a dictionary mapping names to values.  Any changes to the namespace made by the examples (such as binding new variables) will be reflected in globs after the test is run.    name\u00b6 A string name identifying the DocTest.  Typically, this is the name of the object or file that the test was extracted from.    filename\u00b6 The name of the file that this DocTest was extracted from; or None if the filename is unknown, or if the DocTest was not extracted from a file.    lineno\u00b6 The line number within filename where this DocTest begins, or None if the line number is unavailable.  This line number is zero-based with respect to the beginning of the file.    docstring\u00b6 The string that the test was extracted from, or &#8216;None&#8217; if the string is unavailable, or if the test was not extracted from a string.      25.2.6.2. Example Objects\u00b6   class doctest.Example(source, want[, exc_msg][, lineno][, indent][, options])\u00b6 A single interactive example, consisting of a Python statement and its expected output.  The constructor arguments are used to initialize the attributes of the same names.  New in version 2.4. Example defines the following attributes.  They are initialized by the constructor, and should not be modified directly.   source\u00b6 A string containing the example&#8217;s source code.  This source code consists of a single Python statement, and always ends with a newline; the constructor adds a newline when necessary.    want\u00b6 The expected output from running the example&#8217;s source code (either from stdout, or a traceback in case of exception).  want ends with a newline unless no output is expected, in which case it&#8217;s an empty string.  The constructor adds a newline when necessary.    exc_msg\u00b6 The exception message generated by the example, if the example is expected to generate an exception; or None if it is not expected to generate an exception.  This exception message is compared against the return value of traceback.format_exception_only().  exc_msg ends with a newline unless it&#8217;s None.  The constructor adds a newline if needed.    lineno\u00b6 The line number within the string containing this example where the example begins.  This line number is zero-based with respect to the beginning of the containing string.    indent\u00b6 The example&#8217;s indentation in the containing string, i.e., the number of space characters that precede the example&#8217;s first prompt.    options\u00b6 A dictionary mapping from option flags to True or False, which is used to override default options for this example.  Any option flags not contained in this dictionary are left at their default value (as specified by the DocTestRunner&#8216;s optionflags). By default, no options are set.      25.2.6.3. DocTestFinder objects\u00b6   class doctest.DocTestFinder([verbose][, parser][, recurse][, exclude_empty])\u00b6 A processing class used to extract the DocTests that are relevant to a given object, from its docstring and the docstrings of its contained objects. DocTests can currently be extracted from the following object types: modules, functions, classes, methods, staticmethods, classmethods, and properties. The optional argument verbose can be used to display the objects searched by the finder.  It defaults to False (no output). The optional argument parser specifies the DocTestParser object (or a drop-in replacement) that is used to extract doctests from docstrings. If the optional argument recurse is false, then DocTestFinder.find() will only examine the given object, and not any contained objects. If the optional argument exclude_empty is false, then DocTestFinder.find() will include tests for objects with empty docstrings.  New in version 2.4. DocTestFinder defines the following method:   find(obj[, name][, module][, globs][, extraglobs])\u00b6 Return a list of the DocTests that are defined by obj&#8216;s docstring, or by any of its contained objects&#8217; docstrings. The optional argument name specifies the object&#8217;s name; this name will be used to construct names for the returned DocTests.  If name is not specified, then obj.__name__ is used. The optional parameter module is the module that contains the given object. If the module is not specified or is None, then the test finder will attempt to automatically determine the correct module.  The object&#8217;s module is used:  As a default namespace, if globs is not specified. To prevent the DocTestFinder from extracting DocTests from objects that are imported from other modules.  (Contained objects with modules other than module are ignored.) To find the name of the file containing the object. To help find the line number of the object within its file.  If module is False, no attempt to find the module will be made.  This is obscure, of use mostly in testing doctest itself: if module is False, or is None but cannot be found automatically, then all objects are considered to belong to the (non-existent) module, so all contained objects will (recursively) be searched for doctests. The globals for each DocTest is formed by combining globs and extraglobs (bindings in extraglobs override bindings in globs).  A new shallow copy of the globals dictionary is created for each DocTest. If globs is not specified, then it defaults to the module&#8217;s __dict__, if specified, or {} otherwise.  If extraglobs is not specified, then it defaults to {}.       25.2.6.4. DocTestParser objects\u00b6   class doctest.DocTestParser\u00b6 A processing class used to extract interactive examples from a string, and use them to create a DocTest object.  New in version 2.4. DocTestParser defines the following methods:   get_doctest(string, globs, name, filename, lineno)\u00b6 Extract all doctest examples from the given string, and collect them into a DocTest object. globs, name, filename, and lineno are attributes for the new DocTest object.  See the documentation for DocTest for more information.     get_examples(string[, name])\u00b6 Extract all doctest examples from the given string, and return them as a list of Example objects.  Line numbers are 0-based.  The optional argument name is a name identifying this string, and is only used for error messages.    parse(string[, name])\u00b6 Divide the given string into examples and intervening text, and return them as a list of alternating Examples and strings. Line numbers for the Examples are 0-based.  The optional argument name is a name identifying this string, and is only used for error messages.      25.2.6.5. DocTestRunner objects\u00b6   class doctest.DocTestRunner([checker][, verbose][, optionflags])\u00b6 A processing class used to execute and verify the interactive examples in a DocTest. The comparison between expected outputs and actual outputs is done by an OutputChecker.  This comparison may be customized with a number of option flags; see section Option Flags and Directives for more information.  If the option flags are insufficient, then the comparison may also be customized by passing a subclass of OutputChecker to the constructor. The test runner&#8217;s display output can be controlled in two ways. First, an output function can be passed to TestRunner.run(); this function will be called with strings that should be displayed.  It defaults to sys.stdout.write.  If capturing the output is not sufficient, then the display output can be also customized by subclassing DocTestRunner, and overriding the methods report_start(), report_success(), report_unexpected_exception(), and report_failure(). The optional keyword argument checker specifies the OutputChecker object (or drop-in replacement) that should be used to compare the expected outputs to the actual outputs of doctest examples. The optional keyword argument verbose controls the DocTestRunner&#8216;s verbosity.  If verbose is True, then information is printed about each example, as it is run.  If verbose is False, then only failures are printed.  If verbose is unspecified, or None, then verbose output is used iff the command-line switch -v is used. The optional keyword argument optionflags can be used to control how the test runner compares expected output to actual output, and how it displays failures. For more information, see section Option Flags and Directives.  New in version 2.4. DocTestParser defines the following methods:   report_start(out, test, example)\u00b6 Report that the test runner is about to process the given example. This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly. example is the example about to be processed.  test is the test containing example.  out is the output function that was passed to DocTestRunner.run().     report_success(out, test, example, got)\u00b6 Report that the given example ran successfully.  This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly. example is the example about to be processed.  got is the actual output from the example.  test is the test containing example.  out is the output function that was passed to DocTestRunner.run().     report_failure(out, test, example, got)\u00b6 Report that the given example failed.  This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly. example is the example about to be processed.  got is the actual output from the example.  test is the test containing example.  out is the output function that was passed to DocTestRunner.run().     report_unexpected_exception(out, test, example, exc_info)\u00b6 Report that the given example raised an unexpected exception. This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly. example is the example about to be processed. exc_info is a tuple containing information about the unexpected exception (as returned by sys.exc_info()). test is the test containing example.  out is the output function that was passed to DocTestRunner.run().     run(test[, compileflags][, out][, clear_globs])\u00b6 Run the examples in test (a DocTest object), and display the results using the writer function out. The examples are run in the namespace test.globs.  If clear_globs is true (the default), then this namespace will be cleared after the test runs, to help with garbage collection. If you would like to examine the namespace after the test completes, then use clear_globs=False. compileflags gives the set of flags that should be used by the Python compiler when running the examples.  If not specified, then it will default to the set of future-import flags that apply to globs. The output of each example is checked using the DocTestRunner&#8216;s output checker, and the results are formatted by the DocTestRunner.report_*() methods.     summarize([verbose])\u00b6 Print a summary of all the test cases that have been run by this DocTestRunner, and return a named tuple TestResults(failed, attempted). The optional verbose argument controls how detailed the summary is.  If the verbosity is not specified, then the DocTestRunner&#8216;s verbosity is used.  Changed in version 2.6: Use a named tuple.       25.2.6.6. OutputChecker objects\u00b6   class doctest.OutputChecker\u00b6 A class used to check the whether the actual output from a doctest example matches the expected output.  OutputChecker defines two methods: check_output(), which compares a given pair of outputs, and returns true if they match; and output_difference(), which returns a string describing the differences between two outputs.  New in version 2.4. OutputChecker defines the following methods:   check_output(want, got, optionflags)\u00b6 Return True iff the actual output from an example (got) matches the expected output (want).  These strings are always considered to match if they are identical; but depending on what option flags the test runner is using, several non-exact match types are also possible.  See section Option Flags and Directives for more information about option flags.    output_difference(example, got, optionflags)\u00b6 Return a string describing the differences between the expected output for a given example (example) and the actual output (got).  optionflags is the set of option flags used to compare want and got.       25.2.7. Debugging\u00b6 Doctest provides several mechanisms for debugging doctest examples:  Several functions convert doctests to executable Python programs, which can be run under the Python debugger, pdb.  The DebugRunner class is a subclass of DocTestRunner that raises an exception for the first failing example, containing information about that example. This information can be used to perform post-mortem debugging on the example.  The unittest cases generated by DocTestSuite() support the debug() method defined by unittest.TestCase.  You can add a call to pdb.set_trace() in a doctest example, and you&#8217;ll drop into the Python debugger when that line is executed.  Then you can inspect current values of variables, and so on.  For example, suppose a.py contains just this module docstring: \"\"\" >>> def f(x): ...     g(x*2) >>> def g(x): ...     print x+3 ...     import pdb; pdb.set_trace() >>> f(3) 9 \"\"\"   Then an interactive Python session may look like this: >>> import a, doctest >>> doctest.testmod(a) --Return-- > <doctest a[1]>(3)g()->None -> import pdb; pdb.set_trace() (Pdb) list   1     def g(x):   2         print x+3   3  ->     import pdb; pdb.set_trace() [EOF] (Pdb) print x 6 (Pdb) step --Return-- > <doctest a[0]>(2)f()->None -> g(x*2) (Pdb) list   1     def f(x):   2  ->     g(x*2) [EOF] (Pdb) print x 3 (Pdb) step --Return-- > <doctest a[2]>(1)?()->None -> f(3) (Pdb) cont (0, 3) >>>    Changed in version 2.4: The ability to use pdb.set_trace() usefully inside doctests was added.   Functions that convert doctests to Python code, and possibly run the synthesized code under the debugger:   doctest.script_from_examples(s)\u00b6 Convert text with examples to a script. Argument s is a string containing doctest examples.  The string is converted to a Python script, where doctest examples in s are converted to regular code, and everything else is converted to Python comments.  The generated script is returned as a string. For example, import doctest print doctest.script_from_examples(r\"\"\"     Set x and y to 1 and 2.     >>> x, y = 1, 2      Print their sum:     >>> print x+y     3 \"\"\")   displays: # Set x and y to 1 and 2. x, y = 1, 2 # # Print their sum: print x+y # Expected: ## 3   This function is used internally by other functions (see below), but can also be useful when you want to transform an interactive Python session into a Python script.  New in version 2.4.     doctest.testsource(module, name)\u00b6 Convert the doctest for an object to a script. Argument module is a module object, or dotted name of a module, containing the object whose doctests are of interest.  Argument name is the name (within the module) of the object with the doctests of interest.  The result is a string, containing the object&#8217;s docstring converted to a Python script, as described for script_from_examples() above.  For example, if module a.py contains a top-level function f(), then import a, doctest print doctest.testsource(a, \"a.f\")   prints a script version of function f()&#8216;s docstring, with doctests converted to code, and the rest placed in comments.  New in version 2.3.     doctest.debug(module, name[, pm])\u00b6 Debug the doctests for an object. The module and name arguments are the same as for function testsource() above.  The synthesized Python script for the named object&#8217;s docstring is written to a temporary file, and then that file is run under the control of the Python debugger, pdb. A shallow copy of module.__dict__ is used for both local and global execution context. Optional argument pm controls whether post-mortem debugging is used.  If pm has a true value, the script file is run directly, and the debugger gets involved only if the script terminates via raising an unhandled exception.  If it does, then post-mortem debugging is invoked, via pdb.post_mortem(), passing the traceback object from the unhandled exception.  If pm is not specified, or is false, the script is run under the debugger from the start, via passing an appropriate execfile() call to pdb.run().  New in version 2.3.  Changed in version 2.4: The pm argument was added.     doctest.debug_src(src[, pm][, globs])\u00b6 Debug the doctests in a string. This is like function debug() above, except that a string containing doctest examples is specified directly, via the src argument. Optional argument pm has the same meaning as in function debug() above. Optional argument globs gives a dictionary to use as both local and global execution context.  If not specified, or None, an empty dictionary is used. If specified, a shallow copy of the dictionary is used.  New in version 2.4.   The DebugRunner class, and the special exceptions it may raise, are of most interest to testing framework authors, and will only be sketched here.  See the source code, and especially DebugRunner&#8216;s docstring (which is a doctest!) for more details:   class doctest.DebugRunner([checker][, verbose][, optionflags])\u00b6 A subclass of DocTestRunner that raises an exception as soon as a failure is encountered.  If an unexpected exception occurs, an UnexpectedException exception is raised, containing the test, the example, and the original exception.  If the output doesn&#8217;t match, then a DocTestFailure exception is raised, containing the test, the example, and the actual output. For information about the constructor parameters and methods, see the documentation for DocTestRunner in section Advanced API.   There are two exceptions that may be raised by DebugRunner instances:   exception doctest.DocTestFailure(test, example, got)\u00b6 An exception raised by DocTestRunner to signal that a doctest example&#8217;s actual output did not match its expected output. The constructor arguments are used to initialize the attributes of the same names.  DocTestFailure defines the following attributes:   DocTestFailure.test\u00b6 The DocTest object that was being run when the example failed.    DocTestFailure.example\u00b6 The Example that failed.    DocTestFailure.got\u00b6 The example&#8217;s actual output.    exception doctest.UnexpectedException(test, example, exc_info)\u00b6 An exception raised by DocTestRunner to signal that a doctest example raised an unexpected exception.  The constructor arguments are used to initialize the attributes of the same names.  UnexpectedException defines the following attributes:   UnexpectedException.test\u00b6 The DocTest object that was being run when the example failed.    UnexpectedException.example\u00b6 The Example that failed.    UnexpectedException.exc_info\u00b6 A tuple containing information about the unexpected exception, as returned by sys.exc_info().    25.2.8. Soapbox\u00b6 As mentioned in the introduction, doctest has grown to have three primary uses:  Checking examples in docstrings. Regression testing. Executable documentation \/ literate testing.  These uses have different requirements, and it is important to distinguish them. In particular, filling your docstrings with obscure test cases makes for bad documentation. When writing a docstring, choose docstring examples with care. There&#8217;s an art to this that needs to be learned&#8212;it may not be natural at first.  Examples should add genuine value to the documentation.  A good example can often be worth many words. If done with care, the examples will be invaluable for your users, and will pay back the time it takes to collect them many times over as the years go by and things change.  I&#8217;m still amazed at how often one of my doctest examples stops working after a &#8220;harmless&#8221; change. Doctest also makes an excellent tool for regression testing, especially if you don&#8217;t skimp on explanatory text.  By interleaving prose and examples, it becomes much easier to keep track of what&#8217;s actually being tested, and why.  When a test fails, good prose can make it much easier to figure out what the problem is, and how it should be fixed.  It&#8217;s true that you could write extensive comments in code-based testing, but few programmers do. Many have found that using doctest approaches instead leads to much clearer tests.  Perhaps this is simply because doctest makes writing prose a little easier than writing code, while writing comments in code is a little harder.  I think it goes deeper than just that: the natural attitude when writing a doctest-based test is that you want to explain the fine points of your software, and illustrate them with examples. This in turn naturally leads to test files that start with the simplest features, and logically progress to complications and edge cases.  A coherent narrative is the result, instead of a collection of isolated functions that test isolated bits of functionality seemingly at random.  It&#8217;s a different attitude, and produces different results, blurring the distinction between testing and explaining. Regression testing is best confined to dedicated objects or files.  There are several options for organizing tests:  Write text files containing test cases as interactive examples, and test the files using testfile() or DocFileSuite().  This is recommended, although is easiest to do for new projects, designed from the start to use doctest. Define functions named _regrtest_topic that consist of single docstrings, containing test cases for the named topics.  These functions can be included in the same file as the module, or separated out into a separate test file. Define a __test__ dictionary mapping from regression test topics to docstrings containing test cases.  Footnotes    [1]Examples containing both expected output and an exception are not supported. Trying to guess where one ends and the other begins is too error-prone, and that also makes for a confusing test."},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.debug","title":"doctest.debug","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.debug_src","title":"doctest.debug_src","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DebugRunner","title":"doctest.DebugRunner","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocFileSuite","title":"doctest.DocFileSuite","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTest","title":"doctest.DocTest","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestFinder","title":"doctest.DocTestFinder","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestFinder.find","title":"doctest.DocTestFinder.find","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestParser","title":"doctest.DocTestParser","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestParser.get_doctest","title":"doctest.DocTestParser.get_doctest","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestParser.get_examples","title":"doctest.DocTestParser.get_examples","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestParser.parse","title":"doctest.DocTestParser.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestRunner","title":"doctest.DocTestRunner","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestRunner.report_failure","title":"doctest.DocTestRunner.report_failure","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestRunner.report_start","title":"doctest.DocTestRunner.report_start","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestRunner.report_success","title":"doctest.DocTestRunner.report_success","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestRunner.report_unexpected_exception","title":"doctest.DocTestRunner.report_unexpected_exception","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestRunner.run","title":"doctest.DocTestRunner.run","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestRunner.summarize","title":"doctest.DocTestRunner.summarize","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.DocTestSuite","title":"doctest.DocTestSuite","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.Example","title":"doctest.Example","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.OutputChecker","title":"doctest.OutputChecker","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.OutputChecker.check_output","title":"doctest.OutputChecker.check_output","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.OutputChecker.output_difference","title":"doctest.OutputChecker.output_difference","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.register_optionflag","title":"doctest.register_optionflag","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.run_docstring_examples","title":"doctest.run_docstring_examples","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.script_from_examples","title":"doctest.script_from_examples","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.set_unittest_reportflags","title":"doctest.set_unittest_reportflags","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.testfile","title":"doctest.testfile","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.testmod","title":"doctest.testmod","description":""},{"url":"http:\/\/docs.python.org\/library\/doctest.html#doctest.testsource","title":"doctest.testsource","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html","title":"unittest","description":null},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.expectedFailure","title":"unittest.expectedFailure","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.FunctionTestCase","title":"unittest.FunctionTestCase","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.installHandler","title":"unittest.installHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.main","title":"unittest.main","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.registerResult","title":"unittest.registerResult","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.removeHandler","title":"unittest.removeHandler","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.removeResult","title":"unittest.removeResult","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.skip","title":"unittest.skip","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.skipIf","title":"unittest.skipIf","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.skipUnless","title":"unittest.skipUnless","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase","title":"unittest.TestCase","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.addCleanup","title":"unittest.TestCase.addCleanup","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.addTypeEqualityFunc","title":"unittest.TestCase.addTypeEqualityFunc","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertAlmostEqual","title":"unittest.TestCase.assertAlmostEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertDictContainsSubset","title":"unittest.TestCase.assertDictContainsSubset","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertDictEqual","title":"unittest.TestCase.assertDictEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertEqual","title":"unittest.TestCase.assertEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertGreater","title":"unittest.TestCase.assertGreater","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertIn","title":"unittest.TestCase.assertIn","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertIs","title":"unittest.TestCase.assertIs","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertIsInstance","title":"unittest.TestCase.assertIsInstance","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertIsNone","title":"unittest.TestCase.assertIsNone","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertItemsEqual","title":"unittest.TestCase.assertItemsEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertListEqual","title":"unittest.TestCase.assertListEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertMultiLineEqual","title":"unittest.TestCase.assertMultiLineEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertNotEqual","title":"unittest.TestCase.assertNotEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertNotRegexpMatches","title":"unittest.TestCase.assertNotRegexpMatches","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertRaises","title":"unittest.TestCase.assertRaises","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertRaisesRegexp","title":"unittest.TestCase.assertRaisesRegexp","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertRegexpMatches","title":"unittest.TestCase.assertRegexpMatches","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertSequenceEqual","title":"unittest.TestCase.assertSequenceEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertSetEqual","title":"unittest.TestCase.assertSetEqual","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.assertTrue","title":"unittest.TestCase.assertTrue","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.countTestCases","title":"unittest.TestCase.countTestCases","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.debug","title":"unittest.TestCase.debug","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.defaultTestResult","title":"unittest.TestCase.defaultTestResult","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.doCleanups","title":"unittest.TestCase.doCleanups","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.fail","title":"unittest.TestCase.fail","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.id","title":"unittest.TestCase.id","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.run","title":"unittest.TestCase.run","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.setUp","title":"unittest.TestCase.setUp","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.setUpClass","title":"unittest.TestCase.setUpClass","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.shortDescription","title":"unittest.TestCase.shortDescription","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.skipTest","title":"unittest.TestCase.skipTest","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.tearDown","title":"unittest.TestCase.tearDown","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestCase.tearDownClass","title":"unittest.TestCase.tearDownClass","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestLoader","title":"unittest.TestLoader","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestLoader.discover","title":"unittest.TestLoader.discover","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestLoader.getTestCaseNames","title":"unittest.TestLoader.getTestCaseNames","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestLoader.loadTestsFromModule","title":"unittest.TestLoader.loadTestsFromModule","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestLoader.loadTestsFromName","title":"unittest.TestLoader.loadTestsFromName","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestLoader.loadTestsFromNames","title":"unittest.TestLoader.loadTestsFromNames","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestLoader.loadTestsFromTestCase","title":"unittest.TestLoader.loadTestsFromTestCase","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult","title":"unittest.TestResult","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.addError","title":"unittest.TestResult.addError","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.addExpectedFailure","title":"unittest.TestResult.addExpectedFailure","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.addFailure","title":"unittest.TestResult.addFailure","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.addSkip","title":"unittest.TestResult.addSkip","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.addSuccess","title":"unittest.TestResult.addSuccess","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.addUnexpectedSuccess","title":"unittest.TestResult.addUnexpectedSuccess","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.startTest","title":"unittest.TestResult.startTest","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.startTestRun","title":"unittest.TestResult.startTestRun","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.stop","title":"unittest.TestResult.stop","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.stopTest","title":"unittest.TestResult.stopTest","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.stopTestRun","title":"unittest.TestResult.stopTestRun","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestResult.wasSuccessful","title":"unittest.TestResult.wasSuccessful","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestSuite","title":"unittest.TestSuite","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestSuite.__iter__","title":"unittest.TestSuite.__iter__","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestSuite.addTest","title":"unittest.TestSuite.addTest","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestSuite.addTests","title":"unittest.TestSuite.addTests","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestSuite.countTestCases","title":"unittest.TestSuite.countTestCases","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestSuite.debug","title":"unittest.TestSuite.debug","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TestSuite.run","title":"unittest.TestSuite.run","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TextTestResult","title":"unittest.TextTestResult","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TextTestRunner","title":"unittest.TextTestRunner","description":""},{"url":"http:\/\/docs.python.org\/library\/unittest.html#unittest.TextTestRunner._makeResult","title":"unittest.TextTestRunner._makeResult","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html","title":"bdb","description":"26.1. bdb &#8212; Debugger framework\u00b6 Source code: Lib\/bdb.py  The bdb module handles basic debugger functions, like setting breakpoints or managing execution via the debugger. The following exception is defined:   exception bdb.BdbQuit\u00b6 Exception raised by the Bdb class for quitting the debugger.  The bdb module also defines two classes:   class bdb.Breakpoint(self, file, line[, temporary=0[, cond=None[, funcname=None]]])\u00b6 This class implements temporary breakpoints, ignore counts, disabling and (re-)enabling, and conditionals. Breakpoints are indexed by number through a list called bpbynumber and by (file, line) pairs through bplist.  The former points to a single instance of class Breakpoint.  The latter points to a list of such instances since there may be more than one breakpoint per line. When creating a breakpoint, its associated filename should be in canonical form.  If a funcname is defined, a breakpoint hit will be counted when the first line of that function is executed.  A conditional breakpoint always counts a hit. Breakpoint instances have the following methods:   deleteMe()\u00b6 Delete the breakpoint from the list associated to a file\/line.  If it is the last breakpoint in that position, it also deletes the entry for the file\/line.    enable()\u00b6 Mark the breakpoint as enabled.    disable()\u00b6 Mark the breakpoint as disabled.    pprint([out])\u00b6 Print all the information about the breakpoint:  The breakpoint number. If it is temporary or not. Its file,line position. The condition that causes a break. If it must be ignored the next N times. The breakpoint hit count.        class bdb.Bdb(skip=None)\u00b6 The Bdb class acts as a generic Python debugger base class. This class takes care of the details of the trace facility; a derived class should implement user interaction.  The standard debugger class (pdb.Pdb) is an example. The skip argument, if given, must be an iterable of glob-style module name patterns.  The debugger will not step into frames that originate in a module that matches one of these patterns. Whether a frame is considered to originate in a certain module is determined by the __name__ in the frame globals.  New in version 2.7: The skip argument. The following methods of Bdb normally don&#8217;t need to be overridden.   canonic(filename)\u00b6 Auxiliary method for getting a filename in a canonical form, that is, as a case-normalized (on case-insensitive filesystems) absolute path, stripped of surrounding angle brackets.    reset()\u00b6 Set the botframe, stopframe, returnframe and quitting attributes with values ready to start debugging.    trace_dispatch(frame, event, arg)\u00b6 This function is installed as the trace function of debugged frames.  Its return value is the new trace function (in most cases, that is, itself). The default implementation decides how to dispatch a frame, depending on the type of event (passed as a string) that is about to be executed. event can be one of the following:  \"line\": A new line of code is going to be executed. \"call\": A function is about to be called, or another code block entered. \"return\": A function or other code block is about to return. \"exception\": An exception has occurred. \"c_call\": A C function is about to be called. \"c_return\": A C function has returned. \"c_exception\": A C function has raised an exception.  For the Python events, specialized functions (see below) are called.  For the C events, no action is taken. The arg parameter depends on the previous event. See the documentation for sys.settrace() for more information on the trace function.  For more information on code and frame objects, refer to The standard type hierarchy.     dispatch_line(frame)\u00b6 If the debugger should stop on the current line, invoke the user_line() method (which should be overridden in subclasses). Raise a BdbQuit exception if the Bdb.quitting flag is set (which can be set from user_line()).  Return a reference to the trace_dispatch() method for further tracing in that scope.    dispatch_call(frame, arg)\u00b6 If the debugger should stop on this function call, invoke the user_call() method (which should be overridden in subclasses). Raise a BdbQuit exception if the Bdb.quitting flag is set (which can be set from user_call()).  Return a reference to the trace_dispatch() method for further tracing in that scope.    dispatch_return(frame, arg)\u00b6 If the debugger should stop on this function return, invoke the user_return() method (which should be overridden in subclasses). Raise a BdbQuit exception if the Bdb.quitting flag is set (which can be set from user_return()).  Return a reference to the trace_dispatch() method for further tracing in that scope.    dispatch_exception(frame, arg)\u00b6 If the debugger should stop at this exception, invokes the user_exception() method (which should be overridden in subclasses). Raise a BdbQuit exception if the Bdb.quitting flag is set (which can be set from user_exception()).  Return a reference to the trace_dispatch() method for further tracing in that scope.  Normally derived classes don&#8217;t override the following methods, but they may if they want to redefine the definition of stopping and breakpoints.   stop_here(frame)\u00b6 This method checks if the frame is somewhere below botframe in the call stack.  botframe is the frame in which debugging started.    break_here(frame)\u00b6 This method checks if there is a breakpoint in the filename and line belonging to frame or, at least, in the current function.  If the breakpoint is a temporary one, this method deletes it.    break_anywhere(frame)\u00b6 This method checks if there is a breakpoint in the filename of the current frame.  Derived classes should override these methods to gain control over debugger operation.   user_call(frame, argument_list)\u00b6 This method is called from dispatch_call() when there is the possibility that a break might be necessary anywhere inside the called function.    user_line(frame)\u00b6 This method is called from dispatch_line() when either stop_here() or break_here() yields True.    user_return(frame, return_value)\u00b6 This method is called from dispatch_return() when stop_here() yields True.    user_exception(frame, exc_info)\u00b6 This method is called from dispatch_exception() when stop_here() yields True.    do_clear(arg)\u00b6 Handle how a breakpoint must be removed when it is a temporary one. This method must be implemented by derived classes.   Derived classes and clients can call the following methods to affect the stepping state.   set_step()\u00b6 Stop after one line of code.    set_next(frame)\u00b6 Stop on the next line in or below the given frame.    set_return(frame)\u00b6 Stop when returning from the given frame.    set_until(frame)\u00b6 Stop when the line with the line no greater than the current one is reached or when returning from current frame    set_trace([frame])\u00b6 Start debugging from frame.  If frame is not specified, debugging starts from caller&#8217;s frame.    set_continue()\u00b6 Stop only at breakpoints or when finished.  If there are no breakpoints, set the system trace function to None.    set_quit()\u00b6 Set the quitting attribute to True.  This raises BdbQuit in the next call to one of the dispatch_*() methods.  Derived classes and clients can call the following methods to manipulate breakpoints.  These methods return a string containing an error message if something went wrong, or None if all is well.   set_break(filename, lineno[, temporary=0[, cond[, funcname]]])\u00b6 Set a new breakpoint.  If the lineno line doesn&#8217;t exist for the filename passed as argument, return an error message.  The filename should be in canonical form, as described in the canonic() method.    clear_break(filename, lineno)\u00b6 Delete the breakpoints in filename and lineno.  If none were set, an error message is returned.    clear_bpbynumber(arg)\u00b6 Delete the breakpoint which has the index arg in the Breakpoint.bpbynumber.  If arg is not numeric or out of range, return an error message.    clear_all_file_breaks(filename)\u00b6 Delete all breakpoints in filename.  If none were set, an error message is returned.    clear_all_breaks()\u00b6 Delete all existing breakpoints.    get_break(filename, lineno)\u00b6 Check if there is a breakpoint for lineno of filename.    get_breaks(filename, lineno)\u00b6 Return all breakpoints for lineno in filename, or an empty list if none are set.    get_file_breaks(filename)\u00b6 Return all breakpoints in filename, or an empty list if none are set.    get_all_breaks()\u00b6 Return all breakpoints that are set.  Derived classes and clients can call the following methods to get a data structure representing a stack trace.   get_stack(f, t)\u00b6 Get a list of records for a frame and all higher (calling) and lower frames, and the size of the higher part.    format_stack_entry(frame_lineno[, lprefix=': '])\u00b6 Return a string with information about a stack entry, identified by a (frame, lineno) tuple:  The canonical form of the filename which contains the frame. The function name, or \"<lambda>\". The input arguments. The return value. The line of code (if it exists).    The following two methods can be called by clients to use a debugger to debug a statement, given as a string.   run(cmd[, globals[, locals]])\u00b6 Debug a statement executed via the exec statement.  globals defaults to __main__.__dict__, locals defaults to globals.    runeval(expr[, globals[, locals]])\u00b6 Debug an expression executed via the eval() function.  globals and locals have the same meaning as in run().    runctx(cmd, globals, locals)\u00b6 For backwards compatibility.  Calls the run() method.    runcall(func, *args, **kwds)\u00b6 Debug a single function call, and return its result.    Finally, the module defines the following functions:   bdb.checkfuncname(b, frame)\u00b6 Check whether we should break here, depending on the way the breakpoint b was set. If it was set via line number, it checks if b.line is the same as the one in the frame also passed as argument.  If the breakpoint was set via function name, we have to check we are in the right frame (the right function) and if we are in its first executable line.     bdb.effective(file, line, frame)\u00b6 Determine if there is an effective (active) breakpoint at this line of code. Return a tuple of the breakpoint and a boolean that indicates if it is ok to delete a temporary breakpoint.  Return (None, None) if there is no matching breakpoint.    bdb.set_trace()\u00b6 Start debugging with a Bdb instance from caller&#8217;s frame."},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb","title":"bdb.Bdb","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.break_anywhere","title":"bdb.Bdb.break_anywhere","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.break_here","title":"bdb.Bdb.break_here","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.canonic","title":"bdb.Bdb.canonic","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.clear_all_breaks","title":"bdb.Bdb.clear_all_breaks","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.clear_all_file_breaks","title":"bdb.Bdb.clear_all_file_breaks","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.clear_bpbynumber","title":"bdb.Bdb.clear_bpbynumber","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.clear_break","title":"bdb.Bdb.clear_break","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.dispatch_call","title":"bdb.Bdb.dispatch_call","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.dispatch_exception","title":"bdb.Bdb.dispatch_exception","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.dispatch_line","title":"bdb.Bdb.dispatch_line","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.dispatch_return","title":"bdb.Bdb.dispatch_return","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.do_clear","title":"bdb.Bdb.do_clear","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.format_stack_entry","title":"bdb.Bdb.format_stack_entry","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.get_all_breaks","title":"bdb.Bdb.get_all_breaks","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.get_break","title":"bdb.Bdb.get_break","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.get_breaks","title":"bdb.Bdb.get_breaks","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.get_file_breaks","title":"bdb.Bdb.get_file_breaks","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.get_stack","title":"bdb.Bdb.get_stack","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.reset","title":"bdb.Bdb.reset","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.run","title":"bdb.Bdb.run","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.runcall","title":"bdb.Bdb.runcall","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.runctx","title":"bdb.Bdb.runctx","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.runeval","title":"bdb.Bdb.runeval","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.set_break","title":"bdb.Bdb.set_break","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.set_continue","title":"bdb.Bdb.set_continue","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.set_next","title":"bdb.Bdb.set_next","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.set_quit","title":"bdb.Bdb.set_quit","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.set_return","title":"bdb.Bdb.set_return","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.set_step","title":"bdb.Bdb.set_step","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.set_trace","title":"bdb.Bdb.set_trace","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.set_until","title":"bdb.Bdb.set_until","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.stop_here","title":"bdb.Bdb.stop_here","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.trace_dispatch","title":"bdb.Bdb.trace_dispatch","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.user_call","title":"bdb.Bdb.user_call","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.user_exception","title":"bdb.Bdb.user_exception","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.user_line","title":"bdb.Bdb.user_line","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Bdb.user_return","title":"bdb.Bdb.user_return","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Breakpoint","title":"bdb.Breakpoint","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Breakpoint.deleteMe","title":"bdb.Breakpoint.deleteMe","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Breakpoint.disable","title":"bdb.Breakpoint.disable","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Breakpoint.enable","title":"bdb.Breakpoint.enable","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.Breakpoint.pprint","title":"bdb.Breakpoint.pprint","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.checkfuncname","title":"bdb.checkfuncname","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.effective","title":"bdb.effective","description":""},{"url":"http:\/\/docs.python.org\/library\/bdb.html#bdb.set_trace","title":"bdb.set_trace","description":""},{"url":"http:\/\/docs.python.org\/library\/pdb.html","title":"pdb","description":"26.2. pdb &#8212; The Python Debugger\u00b6 The module pdb defines an interactive source code debugger for Python programs.  It supports setting (conditional) breakpoints and single stepping at the source line level, inspection of stack frames, source code listing, and evaluation of arbitrary Python code in the context of any stack frame.  It also supports post-mortem debugging and can be called under program control. The debugger is extensible &#8212; it is actually defined as the class Pdb. This is currently undocumented but easily understood by reading the source.  The extension interface uses the modules bdb and cmd. The debugger&#8217;s prompt is (Pdb). Typical usage to run a program under control of the debugger is: >>> import pdb >>> import mymodule >>> pdb.run(&#39;mymodule.test()&#39;) > <string>(0)?() (Pdb) continue > <string>(1)?() (Pdb) continue NameError: &#39;spam&#39; > <string>(1)?() (Pdb)   pdb.py can also be invoked as a script to debug other scripts.  For example: python -m pdb myscript.py  When invoked as a script, pdb will automatically enter post-mortem debugging if the program being debugged exits abnormally. After post-mortem debugging (or after normal exit of the program), pdb will restart the program. Automatic restarting preserves pdb&#8217;s state (such as breakpoints) and in most cases is more useful than quitting the debugger upon program&#8217;s exit.  New in version 2.4: Restarting post-mortem behavior added. The typical usage to break into the debugger from a running program is to insert import pdb; pdb.set_trace()   at the location you want to break into the debugger.  You can then step through the code following this statement, and continue running without the debugger using the c command. The typical usage to inspect a crashed program is: >>> import pdb >>> import mymodule >>> mymodule.test() Traceback (most recent call last):   File \"<stdin>\", line 1, in ?   File \".\/mymodule.py\", line 4, in test     test2()   File \".\/mymodule.py\", line 3, in test2     print spam NameError: spam >>> pdb.pm() > .\/mymodule.py(3)test2() -> print spam (Pdb)   The module defines the following functions; each enters the debugger in a slightly different way:   pdb.run(statement[, globals[, locals]])\u00b6 Execute the statement (given as a string) under debugger control.  The debugger prompt appears before any code is executed; you can set breakpoints and type continue, or you can step through the statement using step or next (all these commands are explained below).  The optional globals and locals arguments specify the environment in which the code is executed; by default the dictionary of the module __main__ is used.  (See the explanation of the exec statement or the eval() built-in function.)    pdb.runeval(expression[, globals[, locals]])\u00b6 Evaluate the expression (given as a string) under debugger control.  When runeval() returns, it returns the value of the expression.  Otherwise this function is similar to run().    pdb.runcall(function[, argument, ...])\u00b6 Call the function (a function or method object, not a string) with the given arguments.  When runcall() returns, it returns whatever the function call returned.  The debugger prompt appears as soon as the function is entered.    pdb.set_trace()\u00b6 Enter the debugger at the calling stack frame.  This is useful to hard-code a breakpoint at a given point in a program, even if the code is not otherwise being debugged (e.g. when an assertion fails).    pdb.post_mortem([traceback])\u00b6 Enter post-mortem debugging of the given traceback object.  If no traceback is given, it uses the one of the exception that is currently being handled (an exception must be being handled if the default is to be used).    pdb.pm()\u00b6 Enter post-mortem debugging of the traceback found in sys.last_traceback.  The run* functions and set_trace() are aliases for instantiating the Pdb class and calling the method of the same name.  If you want to access further features, you have to do this yourself:   class pdb.Pdb(completekey='tab', stdin=None, stdout=None, skip=None)\u00b6 Pdb is the debugger class. The completekey, stdin and stdout arguments are passed to the underlying cmd.Cmd class; see the description there. The skip argument, if given, must be an iterable of glob-style module name patterns.  The debugger will not step into frames that originate in a module that matches one of these patterns. [1] Example call to enable tracing with skip: import pdb; pdb.Pdb(skip=[&#39;django.*&#39;]).set_trace()    New in version 2.7: The skip argument.   run(statement[, globals[, locals]])\u00b6  runeval(expression[, globals[, locals]])\u00b6  runcall(function[, argument, ...])\u00b6  set_trace()\u00b6 See the documentation for the functions explained above.     26.3. Debugger Commands\u00b6 The debugger recognizes the following commands.  Most commands can be abbreviated to one or two letters; e.g. h(elp) means that either h or help can be used to enter the help command (but not he or hel, nor H or Help or HELP).  Arguments to commands must be separated by whitespace (spaces or tabs).  Optional arguments are enclosed in square brackets ([]) in the command syntax; the square brackets must not be typed. Alternatives in the command syntax are separated by a vertical bar (|). Entering a blank line repeats the last command entered.  Exception: if the last command was a list command, the next 11 lines are listed. Commands that the debugger doesn&#8217;t recognize are assumed to be Python statements and are executed in the context of the program being debugged.  Python statements can also be prefixed with an exclamation point (!).  This is a powerful way to inspect the program being debugged; it is even possible to change a variable or call a function.  When an exception occurs in such a statement, the exception name is printed but the debugger&#8217;s state is not changed. Multiple commands may be entered on a single line, separated by ;;.  (A single ; is not used as it is the separator for multiple commands in a line that is passed to the Python parser.) No intelligence is applied to separating the commands; the input is split at the first ;; pair, even if it is in the middle of a quoted string. The debugger supports aliases.  Aliases can have parameters which allows one a certain level of adaptability to the context under examination. If a file .pdbrc  exists in the user&#8217;s home directory or in the current directory, it is read in and executed as if it had been typed at the debugger prompt. This is particularly useful for aliases.  If both files exist, the one in the home directory is read first and aliases defined there can be overridden by the local file.  h(elp) [command] Without argument, print the list of available commands.  With a command as argument, print help about that command.  help pdb displays the full documentation file; if the environment variable PAGER is defined, the file is piped through that command instead.  Since the command argument must be an identifier, help exec must be entered to get help on the ! command. w(here) Print a stack trace, with the most recent frame at the bottom.  An arrow indicates the current frame, which determines the context of most commands. d(own) Move the current frame one level down in the stack trace (to a newer frame). u(p) Move the current frame one level up in the stack trace (to an older frame). b(reak) [[filename:]lineno | function[, condition]] With a lineno argument, set a break there in the current file.  With a function argument, set a break at the first executable statement within that function. The line number may be prefixed with a filename and a colon, to specify a breakpoint in another file (probably one that hasn&#8217;t been loaded yet). The file is searched on sys.path. Note that each breakpoint is assigned a number to which all the other breakpoint commands refer. If a second argument is present, it is an expression which must evaluate to true before the breakpoint is honored. Without argument, list all breaks, including for each breakpoint, the number of times that breakpoint has been hit, the current ignore count, and the associated condition if any.  tbreak [[filename:]lineno | function[, condition]] Temporary breakpoint, which is removed automatically when it is first hit.  The arguments are the same as break. cl(ear) [filename:lineno | bpnumber [bpnumber ...]] With a filename:lineno argument, clear all the breakpoints at this line. With a space separated list of breakpoint numbers, clear those breakpoints. Without argument, clear all breaks (but first ask confirmation). disable [bpnumber [bpnumber ...]] Disables the breakpoints given as a space separated list of breakpoint numbers. Disabling a breakpoint means it cannot cause the program to stop execution, but unlike clearing a breakpoint, it remains in the list of breakpoints and can be (re-)enabled. enable [bpnumber [bpnumber ...]] Enables the breakpoints specified. ignore bpnumber [count] Sets the ignore count for the given breakpoint number.  If count is omitted, the ignore count is set to 0.  A breakpoint becomes active when the ignore count is zero.  When non-zero, the count is decremented each time the breakpoint is reached and the breakpoint is not disabled and any associated condition evaluates to true. condition bpnumber [condition] Condition is an expression which must evaluate to true before the breakpoint is honored.  If condition is absent, any existing condition is removed; i.e., the breakpoint is made unconditional. commands [bpnumber] Specify a list of commands for breakpoint number bpnumber.  The commands themselves appear on the following lines.  Type a line containing just &#8216;end&#8217; to terminate the commands. An example: (Pdb) commands 1 (com) print some_variable (com) end (Pdb)  To remove all commands from a breakpoint, type commands and follow it immediately with  end; that is, give no commands. With no bpnumber argument, commands refers to the last breakpoint set. You can use breakpoint commands to start your program up again. Simply use the continue command, or step, or any other command that resumes execution. Specifying any command resuming execution (currently continue, step, next, return, jump, quit and their abbreviations) terminates the command list (as if that command was immediately followed by end). This is because any time you resume execution (even with a simple next or step), you may encounter another breakpoint&#8211;which could have its own command list, leading to ambiguities about which list to execute. If you use the &#8216;silent&#8217; command in the command list, the usual message about stopping at a breakpoint is not printed.  This may be desirable for breakpoints that are to print a specific message and then continue.  If none of the other commands print anything, you see no sign that the breakpoint was reached.  New in version 2.5.  s(tep) Execute the current line, stop at the first possible occasion (either in a function that is called or on the next line in the current function). n(ext) Continue execution until the next line in the current function is reached or it returns.  (The difference between next and step is that step stops inside a called function, while next executes called functions at (nearly) full speed, only stopping at the next line in the current function.) unt(il) Continue execution until the line with the line number greater than the current one is reached or when returning from current frame.  New in version 2.6.  r(eturn) Continue execution until the current function returns. c(ont(inue)) Continue execution, only stop when a breakpoint is encountered. j(ump) lineno Set the next line that will be executed.  Only available in the bottom-most frame.  This lets you jump back and execute code again, or jump forward to skip code that you don&#8217;t want to run. It should be noted that not all jumps are allowed &#8212; for instance it is not possible to jump into the middle of a for loop or out of a finally clause.  l(ist) [first[, last]] List source code for the current file.  Without arguments, list 11 lines around the current line or continue the previous listing.  With one argument, list 11 lines around at that line.  With two arguments, list the given range; if the second argument is less than the first, it is interpreted as a count. a(rgs) Print the argument list of the current function. p expression Evaluate the expression in the current context and print its value.  Note print can also be used, but is not a debugger command &#8212; this executes the Python print statement.   pp expression Like the p command, except the value of the expression is pretty-printed using the pprint module. alias [name [command]] Creates an alias called name that executes command.  The command must not be enclosed in quotes.  Replaceable parameters can be indicated by %1, %2, and so on, while %* is replaced by all the parameters.  If no command is given, the current alias for name is shown. If no arguments are given, all aliases are listed. Aliases may be nested and can contain anything that can be legally typed at the pdb prompt.  Note that internal pdb commands can be overridden by aliases. Such a command is then hidden until the alias is removed.  Aliasing is recursively applied to the first word of the command line; all other words in the line are left alone. As an example, here are two useful aliases (especially when placed in the .pdbrc file): #Print instance variables (usage \"pi classInst\") alias pi for k in %1.__dict__.keys(): print \"%1.\",k,\"=\",%1.__dict__[k] #Print instance variables in self alias ps pi self   unalias name Deletes the specified alias. [!]statement Execute the (one-line) statement in the context of the current stack frame. The exclamation point can be omitted unless the first word of the statement resembles a debugger command. To set a global variable, you can prefix the assignment command with a global command on the same line, e.g.: (Pdb) global list_options; list_options = ['-l'] (Pdb)   run [args ...] Restart the debugged Python program. If an argument is supplied, it is split with &#8220;shlex&#8221; and the result is used as the new sys.argv. History, breakpoints, actions and debugger options are preserved. &#8220;restart&#8221; is an alias for &#8220;run&#8221;.  New in version 2.6.  q(uit) Quit from the debugger. The program being executed is aborted.  Footnotes    [1]Whether a frame is considered to originate in a certain module is determined by the __name__ in the frame globals."},{"url":"http:\/\/docs.python.org\/library\/pdb.html#pdb.Pdb","title":"pdb.Pdb","description":""},{"url":"http:\/\/docs.python.org\/library\/pdb.html#pdb.Pdb.run","title":"pdb.Pdb.run","description":""},{"url":"http:\/\/docs.python.org\/library\/pdb.html#pdb.pm","title":"pdb.pm","description":""},{"url":"http:\/\/docs.python.org\/library\/pdb.html#pdb.post_mortem","title":"pdb.post_mortem","description":""},{"url":"http:\/\/docs.python.org\/library\/pdb.html#pdb.run","title":"pdb.run","description":""},{"url":"http:\/\/docs.python.org\/library\/pdb.html#pdb.runcall","title":"pdb.runcall","description":""},{"url":"http:\/\/docs.python.org\/library\/pdb.html#pdb.runeval","title":"pdb.runeval","description":""},{"url":"http:\/\/docs.python.org\/library\/pdb.html#pdb.set_trace","title":"pdb.set_trace","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html","title":"","description":"26.4. The Python Profilers\u00b6 Source code: Lib\/profile.py and Lib\/pstats.py   26.4.1. Introduction to the profilers\u00b6 A profiler is a program that describes the run time performance of a program, providing a variety of statistics.  This documentation describes the profiler functionality provided in the modules cProfile, profile and pstats.  This profiler provides deterministic profiling of Python programs.  It also provides a series of report generation tools to allow users to rapidly examine the results of a profile operation. The Python standard library provides three different profilers:  cProfile is recommended for most users; it&#8217;s a C extension with reasonable overhead that makes it suitable for profiling long-running programs. Based on lsprof, contributed by Brett Rosen and Ted Czotter.  New in version 2.5.  profile, a pure Python module whose interface is imitated by cProfile.  Adds significant overhead to profiled programs. If you&#8217;re trying to extend the profiler in some way, the task might be easier with this module.  Changed in version 2.4: Now also reports the time spent in calls to built-in functions and methods.  hotshot was an experimental C module that focused on minimizing the overhead of profiling, at the expense of longer data post-processing times.  It is no longer maintained and may be dropped in a future version of Python.  Changed in version 2.5: The results should be more meaningful than in the past: the timing core contained a critical bug.   The profile and cProfile modules export the same interface, so they are mostly interchangeable; cProfile has a much lower overhead but is newer and might not be available on all systems. cProfile is really a compatibility layer on top of the internal _lsprof module.  The hotshot module is reserved for specialized usage.   26.4.2. Instant User&#8217;s Manual\u00b6 This section is provided for users that &#8220;don&#8217;t want to read the manual.&#8221; It provides a very brief overview, and allows a user to rapidly perform profiling on an existing application. To profile an application with a main entry point of foo(), you would add the following to your module: import cProfile cProfile.run(&#39;foo()&#39;)   (Use profile instead of cProfile if the latter is not available on your system.) The above action would cause foo() to be run, and a series of informative lines (the profile) to be printed.  The above approach is most useful when working with the interpreter.  If you would like to save the results of a profile into a file for later examination, you can supply a file name as the second argument to the run() function: import cProfile cProfile.run(&#39;foo()&#39;, &#39;fooprof&#39;)   The file cProfile.py can also be invoked as a script to profile another script.  For example: python -m cProfile myscript.py  cProfile.py accepts two optional arguments on the command line: cProfile.py [-o output_file] [-s sort_order]  -s only applies to standard output (-o is not supplied). Look in the Stats documentation for valid sort values. When you wish to review the profile, you should use the methods in the pstats module.  Typically you would load the statistics data as follows: import pstats p = pstats.Stats(&#39;fooprof&#39;)   The class Stats (the above code just created an instance of this class) has a variety of methods for manipulating and printing the data that was just read into p.  When you ran cProfile.run() above, what was printed was the result of three method calls: p.strip_dirs().sort_stats(-1).print_stats()   The first method removed the extraneous path from all the module names. The second method sorted all the entries according to the standard module\/line\/name string that is printed. The third method printed out all the statistics.  You might try the following sort calls: p.sort_stats(&#39;name&#39;) p.print_stats()   The first call will actually sort the list by function name, and the second call will print out the statistics.  The following are some interesting calls to experiment with: p.sort_stats(&#39;cumulative&#39;).print_stats(10)   This sorts the profile by cumulative time in a function, and then only prints the ten most significant lines.  If you want to understand what algorithms are taking time, the above line is what you would use. If you were looking to see what functions were looping a lot, and taking a lot of time, you would do: p.sort_stats(&#39;time&#39;).print_stats(10)   to sort according to time spent within each function, and then print the statistics for the top ten functions. You might also try: p.sort_stats(&#39;file&#39;).print_stats(&#39;__init__&#39;)   This will sort all the statistics by file name, and then print out statistics for only the class init methods (since they are spelled with __init__ in them).  As one final example, you could try: p.sort_stats(&#39;time&#39;, &#39;cum&#39;).print_stats(.5, &#39;init&#39;)   This line sorts statistics with a primary key of time, and a secondary key of cumulative time, and then prints out some of the statistics. To be specific, the list is first culled down to 50% (re: .5) of its original size, then only lines containing init are maintained, and that sub-sub-list is printed. If you wondered what functions called the above functions, you could now (p is still sorted according to the last criteria) do: p.print_callers(.5, &#39;init&#39;)   and you would get a list of callers for each of the listed functions. If you want more functionality, you&#8217;re going to have to read the manual, or guess what the following functions do: p.print_callees() p.add(&#39;fooprof&#39;)   Invoked as a script, the pstats module is a statistics browser for reading and examining profile dumps.  It has a simple line-oriented interface (implemented using cmd) and interactive help.   26.4.3. What Is Deterministic Profiling?\u00b6 Deterministic profiling is meant to reflect the fact that all function call, function return, and exception events are monitored, and precise timings are made for the intervals between these events (during which time the user&#8217;s code is executing).  In contrast, statistical profiling (which is not done by this module) randomly samples the effective instruction pointer, and deduces where time is being spent.  The latter technique traditionally involves less overhead (as the code does not need to be instrumented), but provides only relative indications of where time is being spent. In Python, since there is an interpreter active during execution, the presence of instrumented code is not required to do deterministic profiling.  Python automatically provides a hook (optional callback) for each event.  In addition, the interpreted nature of Python tends to add so much overhead to execution, that deterministic profiling tends to only add small processing overhead in typical applications.  The result is that deterministic profiling is not that expensive, yet provides extensive run time statistics about the execution of a Python program. Call count statistics can be used to identify bugs in code (surprising counts), and to identify possible inline-expansion points (high call counts).  Internal time statistics can be used to identify &#8220;hot loops&#8221; that should be carefully optimized.  Cumulative time statistics should be used to identify high level errors in the selection of algorithms.  Note that the unusual handling of cumulative times in this profiler allows statistics for recursive implementations of algorithms to be directly compared to iterative implementations.   26.4.4. Reference Manual &#8211; profile and cProfile\u00b6 The primary entry point for the profiler is the global function profile.run() (resp. cProfile.run()). It is typically used to create any profile information.  The reports are formatted and printed using methods of the class pstats.Stats.  The following is a description of all of these standard entry points and functions.  For a more in-depth view of some of the code, consider reading the later section on Profiler Extensions, which includes discussion of how to derive &#8220;better&#8221; profilers from the classes presented, or reading the source code for these modules.   cProfile.run(command[, filename])\u00b6 This function takes a single argument that can be passed to the exec statement, and an optional file name.  In all cases this routine attempts to exec its first argument, and gather profiling statistics from the execution. If no file name is present, then this function automatically prints a simple profiling report, sorted by the standard name string (file\/line\/function-name) that is presented in each line.  The following is a typical output from such a call:       2706 function calls (2004 primitive calls) in 4.504 CPU seconds  Ordered by: standard name  ncalls  tottime  percall  cumtime  percall filename:lineno(function)      2    0.006    0.003    0.953    0.477 pobject.py:75(save_objects)   43\/3    0.533    0.012    0.749    0.250 pobject.py:99(evaluate)  ...  The first line indicates that 2706 calls were monitored.  Of those calls, 2004 were primitive.  We define primitive to mean that the call was not induced via recursion. The next line: Ordered by: standard name, indicates that the text string in the far right column was used to sort the output. The column headings include:  ncalls for the number of calls, tottime for the total time spent in the given function (and excluding time made in calls to sub-functions), percall is the quotient of tottime divided by ncalls cumtime is the total time spent in this and all subfunctions (from invocation till exit). This figure is accurate even for recursive functions. percall is the quotient of cumtime divided by primitive calls filename:lineno(function) provides the respective data of each function  When there are two numbers in the first column (for example, 43\/3), then the latter is the number of primitive calls, and the former is the actual number of calls.  Note that when the function does not recurse, these two values are the same, and only the single figure is printed.     cProfile.runctx(command, globals, locals[, filename])\u00b6 This function is similar to run(), with added arguments to supply the globals and locals dictionaries for the command string.  Analysis of the profiler data is done using the Stats class.  Note The Stats class is defined in the pstats module.    class pstats.Stats(filename[, stream=sys.stdout[, ...]])\u00b6 This class constructor creates an instance of a &#8220;statistics object&#8221; from a filename (or set of filenames).  Stats objects are manipulated by methods, in order to print useful reports.  You may specify an alternate output stream by giving the keyword argument, stream. The file selected by the above constructor must have been created by the corresponding version of profile or cProfile.  To be specific, there is no file compatibility guaranteed with future versions of this profiler, and there is no compatibility with files produced by other profilers. If several files are provided, all the statistics for identical functions will be coalesced, so that an overall view of several processes can be considered in a single report.  If additional files need to be combined with data in an existing Stats object, the add() method can be used.  Changed in version 2.5: The stream parameter was added.    26.4.4.1. The Stats Class\u00b6 Stats objects have the following methods:   Stats.strip_dirs()\u00b6 This method for the Stats class removes all leading path information from file names.  It is very useful in reducing the size of the printout to fit within (close to) 80 columns.  This method modifies the object, and the stripped information is lost.  After performing a strip operation, the object is considered to have its entries in a &#8220;random&#8221; order, as it was just after object initialization and loading.  If strip_dirs() causes two function names to be indistinguishable (they are on the same line of the same filename, and have the same function name), then the statistics for these two entries are accumulated into a single entry.    Stats.add(filename[, ...])\u00b6 This method of the Stats class accumulates additional profiling information into the current profiling object.  Its arguments should refer to filenames created by the corresponding version of profile.run() or cProfile.run(). Statistics for identically named (re: file, line, name) functions are automatically accumulated into single function statistics.    Stats.dump_stats(filename)\u00b6 Save the data loaded into the Stats object to a file named filename. The file is created if it does not exist, and is overwritten if it already exists.  This is equivalent to the method of the same name on the profile.Profile and cProfile.Profile classes.  New in version 2.3.     Stats.sort_stats(key[, ...])\u00b6 This method modifies the Stats object by sorting it according to the supplied criteria.  The argument is typically a string identifying the basis of a sort (example: 'time' or 'name'). When more than one key is provided, then additional keys are used as secondary criteria when there is equality in all keys selected before them.  For example, sort_stats('name', 'file') will sort all the entries according to their function name, and resolve all ties (identical function names) by sorting by file name. Abbreviations can be used for any key names, as long as the abbreviation is unambiguous.  The following are the keys currently defined:       Valid Arg Meaning    'calls' call count  'cumulative' cumulative time  'file' file name  'module' file name  'pcalls' primitive call count  'line' line number  'name' function name  'nfl' name\/file\/line  'stdname' standard name  'time' internal time    Note that all sorts on statistics are in descending order (placing most time consuming items first), where as name, file, and line number searches are in ascending order (alphabetical). The subtle distinction between 'nfl' and 'stdname' is that the standard name is a sort of the name as printed, which means that the embedded line numbers get compared in an odd way.  For example, lines 3, 20, and 40 would (if the file names were the same) appear in the string order 20, 3 and 40.  In contrast, 'nfl' does a numeric compare of the line numbers.  In fact, sort_stats('nfl') is the same as sort_stats('name', 'file', 'line'). For backward-compatibility reasons, the numeric arguments -1, 0, 1, and 2 are permitted.  They are interpreted as 'stdname', 'calls', 'time', and 'cumulative' respectively.  If this old style format (numeric) is used, only one sort key (the numeric key) will be used, and additional arguments will be silently ignored.     Stats.reverse_order()\u00b6 This method for the Stats class reverses the ordering of the basic list within the object.  Note that by default ascending vs descending order is properly selected based on the sort key of choice.    Stats.print_stats([restriction, ...])\u00b6 This method for the Stats class prints out a report as described in the profile.run() definition. The order of the printing is based on the last sort_stats() operation done on the object (subject to caveats in add() and strip_dirs()). The arguments provided (if any) can be used to limit the list down to the significant entries.  Initially, the list is taken to be the complete set of profiled functions.  Each restriction is either an integer (to select a count of lines), or a decimal fraction between 0.0 and 1.0 inclusive (to select a percentage of lines), or a regular expression (to pattern match the standard name that is printed; as of Python 1.5b1, this uses the Perl-style regular expression syntax defined by the re module).  If several restrictions are provided, then they are applied sequentially.  For example: print_stats(.1, &#39;foo:&#39;)   would first limit the printing to first 10% of list, and then only print functions that were part of filename .*foo:.  In contrast, the command: print_stats(&#39;foo:&#39;, .1)   would limit the list to all functions having file names .*foo:, and then proceed to only print the first 10% of them.     Stats.print_callers([restriction, ...])\u00b6 This method for the Stats class prints a list of all functions that called each function in the profiled database.  The ordering is identical to that provided by print_stats(), and the definition of the restricting argument is also identical.  Each caller is reported on its own line.  The format differs slightly depending on the profiler that produced the stats:  With profile, a number is shown in parentheses after each caller to show how many times this specific call was made.  For convenience, a second non-parenthesized number repeats the cumulative time spent in the function at the right. With cProfile, each caller is preceded by three numbers: the number of times this specific call was made, and the total and cumulative times spent in the current function while it was invoked by this specific caller.      Stats.print_callees([restriction, ...])\u00b6 This method for the Stats class prints a list of all function that were called by the indicated function.  Aside from this reversal of direction of calls (re: called vs was called by), the arguments and ordering are identical to the print_callers() method.     26.4.5. Limitations\u00b6 One limitation has to do with accuracy of timing information. There is a fundamental problem with deterministic profilers involving accuracy.  The most obvious restriction is that the underlying &#8220;clock&#8221; is only ticking at a rate (typically) of about .001 seconds.  Hence no measurements will be more accurate than the underlying clock.  If enough measurements are taken, then the &#8220;error&#8221; will tend to average out. Unfortunately, removing this first error induces a second source of error. The second problem is that it &#8220;takes a while&#8221; from when an event is dispatched until the profiler&#8217;s call to get the time actually gets the state of the clock.  Similarly, there is a certain lag when exiting the profiler event handler from the time that the clock&#8217;s value was obtained (and then squirreled away), until the user&#8217;s code is once again executing.  As a result, functions that are called many times, or call many functions, will typically accumulate this error. The error that accumulates in this fashion is typically less than the accuracy of the clock (less than one clock tick), but it can accumulate and become very significant. The problem is more important with profile than with the lower-overhead cProfile.  For this reason, profile provides a means of calibrating itself for a given platform so that this error can be probabilistically (on the average) removed. After the profiler is calibrated, it will be more accurate (in a least square sense), but it will sometimes produce negative numbers (when call counts are exceptionally low, and the gods of probability work against you :-). )  Do not be alarmed by negative numbers in the profile.  They should only appear if you have calibrated your profiler, and the results are actually better than without calibration.   26.4.6. Calibration\u00b6 The profiler of the profile module subtracts a constant from each event handling time to compensate for the overhead of calling the time function, and socking away the results.  By default, the constant is 0. The following procedure can be used to obtain a better constant for a given platform (see discussion in section Limitations above). import profile pr = profile.Profile() for i in range(5):     print pr.calibrate(10000)   The method executes the number of Python calls given by the argument, directly and again under the profiler, measuring the time for both. It then computes the hidden overhead per profiler event, and returns that as a float.  For example, on an 800 MHz Pentium running Windows 2000, and using Python&#8217;s time.clock() as the timer, the magical number is about 12.5e-6. The object of this exercise is to get a fairly consistent result. If your computer is very fast, or your timer function has poor resolution, you might have to pass 100000, or even 1000000, to get consistent results. When you have a consistent answer, there are three ways you can use it: [1] import profile  # 1. Apply computed bias to all Profile instances created hereafter. profile.Profile.bias = your_computed_bias  # 2. Apply computed bias to a specific Profile instance. pr = profile.Profile() pr.bias = your_computed_bias  # 3. Specify computed bias in instance constructor. pr = profile.Profile(bias=your_computed_bias)   If you have a choice, you are better off choosing a smaller constant, and then your results will &#8220;less often&#8221; show up as negative in profile statistics.   26.4.7. Extensions &#8212; Deriving Better Profilers\u00b6 The Profile class of both modules, profile and cProfile, were written so that derived classes could be developed to extend the profiler. The details are not described here, as doing this successfully requires an expert understanding of how the Profile class works internally.  Study the source code of the module carefully if you want to pursue this. If all you want to do is change how current time is determined (for example, to force use of wall-clock time or elapsed process time), pass the timing function you want to the Profile class constructor: pr = profile.Profile(your_time_func)   The resulting profiler will then call your_time_func().  profile.Profile your_time_func() should return a single number, or a list of numbers whose sum is the current time (like what os.times() returns).  If the function returns a single time number, or the list of returned numbers has length 2, then you will get an especially fast version of the dispatch routine. Be warned that you should calibrate the profiler class for the timer function that you choose.  For most machines, a timer that returns a lone integer value will provide the best results in terms of low overhead during profiling. (os.times() is pretty bad, as it returns a tuple of floating point values).  If you want to substitute a better timer in the cleanest fashion, derive a class and hardwire a replacement dispatch method that best handles your timer call, along with the appropriate calibration constant.  cProfile.Profile your_time_func() should return a single number.  If it returns plain integers, you can also invoke the class constructor with a second argument specifying the real duration of one unit of time.  For example, if your_integer_time_func() returns times measured in thousands of seconds, you would construct the Profile instance as follows: pr = profile.Profile(your_integer_time_func, 0.001)   As the cProfile.Profile class cannot be calibrated, custom timer functions should be used with care and should be as fast as possible.  For the best results with a custom timer, it might be necessary to hard-code it in the C source of the internal _lsprof module.   Footnotes    [1]Updated and converted to LaTeX by Guido van Rossum. Further updated by Armin Rigo to integrate the documentation for the new cProfile module of Python 2.5.      [2]Prior to Python 2.2, it was necessary to edit the profiler source code to embed the bias as a literal number.  You still can, but that method is no longer described, because no longer needed."},{"url":"http:\/\/docs.python.org\/library\/profile.html#cProfile.run","title":"cProfile.run","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#cProfile.runctx","title":"cProfile.runctx","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats","title":"pstats.Stats","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats.add","title":"pstats.Stats.add","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats.dump_stats","title":"pstats.Stats.dump_stats","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats.print_callees","title":"pstats.Stats.print_callees","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats.print_callers","title":"pstats.Stats.print_callers","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats.print_stats","title":"pstats.Stats.print_stats","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats.reverse_order","title":"pstats.Stats.reverse_order","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats.sort_stats","title":"pstats.Stats.sort_stats","description":""},{"url":"http:\/\/docs.python.org\/library\/profile.html#pstats.Stats.strip_dirs","title":"pstats.Stats.strip_dirs","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html","title":"hotshot","description":"26.5. hotshot &#8212; High performance logging profiler\u00b6  New in version 2.2. This module provides a nicer interface to the _hotshot C module. Hotshot is a replacement for the existing profile module. As it&#8217;s written mostly in C, it should result in a much smaller performance impact than the existing profile module.  Note The hotshot module focuses on minimizing the overhead while profiling, at the expense of long data post-processing times. For common usage it is recommended to use cProfile instead. hotshot is not maintained and might be removed from the standard library in the future.   Changed in version 2.5: The results should be more meaningful than in the past: the timing core contained a critical bug.  Note The hotshot profiler does not yet work well with threads. It is useful to use an unthreaded script to run the profiler over the code you&#8217;re interested in measuring if at all possible.    class hotshot.Profile(logfile[, lineevents[, linetimings]])\u00b6 The profiler object. The argument logfile is the name of a log file to use for logged profile data. The argument lineevents specifies whether to generate events for every source line, or just on function call\/return. It defaults to 0 (only log function call\/return). The argument linetimings specifies whether to record timing information. It defaults to 1 (store timing information).   26.5.1. Profile Objects\u00b6 Profile objects have the following methods:   Profile.addinfo(key, value)\u00b6 Add an arbitrary labelled value to the profile output.    Profile.close()\u00b6 Close the logfile and terminate the profiler.    Profile.fileno()\u00b6 Return the file descriptor of the profiler&#8217;s log file.    Profile.run(cmd)\u00b6 Profile an exec-compatible string in the script environment. The globals from the __main__ module are used as both the globals and locals for the script.    Profile.runcall(func, *args, **keywords)\u00b6 Profile a single call of a callable. Additional positional and keyword arguments may be passed along; the result of the call is returned, and exceptions are allowed to propagate cleanly, while ensuring that profiling is disabled on the way out.    Profile.runctx(cmd, globals, locals)\u00b6 Evaluate an exec-compatible string in a specific environment. The string is compiled before profiling begins.    Profile.start()\u00b6 Start the profiler.    Profile.stop()\u00b6 Stop the profiler.    26.5.2. Using hotshot data\u00b6  New in version 2.2. This module loads hotshot profiling data into the standard pstats Stats objects.   hotshot.stats.load(filename)\u00b6 Load hotshot data from filename. Returns an instance of the pstats.Stats class.   See also  Module profile The profile module&#8217;s Stats class     26.5.3. Example Usage\u00b6 Note that this example runs the Python &#8220;benchmark&#8221; pystones.  It can take some time to run, and will produce large output files. >>> import hotshot, hotshot.stats, test.pystone >>> prof = hotshot.Profile(\"stones.prof\") >>> benchtime, stones = prof.runcall(test.pystone.pystones) >>> prof.close() >>> stats = hotshot.stats.load(\"stones.prof\") >>> stats.strip_dirs() >>> stats.sort_stats(&#39;time&#39;, &#39;calls&#39;) >>> stats.print_stats(20)          850004 function calls in 10.090 CPU seconds     Ordered by: internal time, call count     ncalls  tottime  percall  cumtime  percall filename:lineno(function)         1    3.295    3.295   10.090   10.090 pystone.py:79(Proc0)    150000    1.315    0.000    1.315    0.000 pystone.py:203(Proc7)     50000    1.313    0.000    1.463    0.000 pystone.py:229(Func2)  .  .  ."},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile","title":"hotshot.Profile","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile.addinfo","title":"hotshot.Profile.addinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile.close","title":"hotshot.Profile.close","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile.fileno","title":"hotshot.Profile.fileno","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile.run","title":"hotshot.Profile.run","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile.runcall","title":"hotshot.Profile.runcall","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile.runctx","title":"hotshot.Profile.runctx","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile.start","title":"hotshot.Profile.start","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.Profile.stop","title":"hotshot.Profile.stop","description":""},{"url":"http:\/\/docs.python.org\/library\/hotshot.html#hotshot.stats.load","title":"hotshot.stats.load","description":""},{"url":"http:\/\/docs.python.org\/library\/timeit.html","title":"timeit","description":"26.6. timeit &#8212; Measure execution time of small code snippets\u00b6  New in version 2.3. Source code: Lib\/timeit.py  This module provides a simple way to time small bits of Python code. It has both command line as well as callable interfaces.  It avoids a number of common traps for measuring execution times.  See also Tim Peters&#8217; introduction to the &#8220;Algorithms&#8221; chapter in the Python Cookbook, published by O&#8217;Reilly. The module defines the following public class:   class timeit.Timer([stmt='pass'[, setup='pass'[, timer=<timer function>]]])\u00b6 Class for timing execution speed of small code snippets. The constructor takes a statement to be timed, an additional statement used for setup, and a timer function.  Both statements default to 'pass'; the timer function is platform-dependent (see the module doc string).  stmt and setup may also contain multiple statements separated by ; or newlines, as long as they don&#8217;t contain multi-line string literals. To measure the execution time of the first statement, use the timeit() method.  The repeat() method is a convenience to call timeit() multiple times and return a list of results.  Changed in version 2.6: The stmt and setup parameters can now also take objects that are callable without arguments. This will embed calls to them in a timer function that will then be executed by timeit().  Note that the timing overhead is a little larger in this case because of the extra function calls.     Timer.print_exc([file=None])\u00b6 Helper to print a traceback from the timed code. Typical use: t = Timer(...)       # outside the try\/except try:     t.timeit(...)    # or t.repeat(...) except:     t.print_exc()   The advantage over the standard traceback is that source lines in the compiled template will be displayed. The optional file argument directs where the traceback is sent; it defaults to sys.stderr.     Timer.repeat([repeat=3[, number=1000000]])\u00b6 Call timeit() a few times. This is a convenience function that calls the timeit() repeatedly, returning a list of results.  The first argument specifies how many times to call timeit().  The second argument specifies the number argument for timeit().  Note It&#8217;s tempting to calculate mean and standard deviation from the result vector and report these.  However, this is not very useful.  In a typical case, the lowest value gives a lower bound for how fast your machine can run the given code snippet; higher values in the result vector are typically not caused by variability in Python&#8217;s speed, but by other processes interfering with your timing accuracy.  So the min() of the result is probably the only number you should be interested in.  After that, you should look at the entire vector and apply common sense rather than statistics.      Timer.timeit([number=1000000])\u00b6 Time number executions of the main statement. This executes the setup statement once, and then returns the time it takes to execute the main statement a number of times, measured in seconds as a float.  The argument is the number of times through the loop, defaulting to one million.  The main statement, the setup statement and the timer function to be used are passed to the constructor.  Note By default, timeit() temporarily turns off garbage collection during the timing.  The advantage of this approach is that it makes independent timings more comparable.  This disadvantage is that GC may be an important component of the performance of the function being measured. If so, GC can be re-enabled as the first statement in the setup string. For example: timeit.Timer(&#39;for i in xrange(10): oct(i)&#39;, &#39;gc.enable()&#39;).timeit()      Starting with version 2.6, the module also defines two convenience functions:   timeit.repeat(stmt[, setup[, timer[, repeat=3[, number=1000000]]]])\u00b6 Create a Timer instance with the given statement, setup code and timer function and run its repeat() method with the given repeat count and number executions.  New in version 2.6.     timeit.timeit(stmt[, setup[, timer[, number=1000000]]])\u00b6 Create a Timer instance with the given statement, setup code and timer function and run its timeit() method with number executions.  New in version 2.6.    26.6.1. Command Line Interface\u00b6 When called as a program from the command line, the following form is used: python -m timeit [-n N] [-r N] [-s S] [-t] [-c] [-h] [statement ...]  Where the following options are understood:   -n N, --number=N\u00b6 how many times to execute &#8216;statement&#8217;    -r N, --repeat=N\u00b6 how many times to repeat the timer (default 3)    -s S, --setup=S\u00b6 statement to be executed once initially (default pass)    -t, --time\u00b6 use time.time() (default on all platforms but Windows)    -c, --clock\u00b6 use time.clock() (default on Windows)    -v, --verbose\u00b6 print raw timing results; repeat for more digits precision    -h, --help\u00b6 print a short usage message and exit  A multi-line statement may be given by specifying each line as a separate statement argument; indented lines are possible by enclosing an argument in quotes and using leading spaces.  Multiple -s options are treated similarly. If -n is not given, a suitable number of loops is calculated by trying successive powers of 10 until the total time is at least 0.2 seconds. The default timer function is platform dependent.  On Windows, time.clock() has microsecond granularity but time.time()&#8216;s granularity is 1\/60th of a second; on Unix, time.clock() has 1\/100th of a second granularity and time.time() is much more precise.  On either platform, the default timer functions measure wall clock time, not the CPU time. This means that other processes running on the same computer may interfere with the timing.  The best thing to do when accurate timing is necessary is to repeat the timing a few times and use the best time.  The -r option is good for this; the default of 3 repetitions is probably enough in most cases.  On Unix, you can use time.clock() to measure CPU time.  Note There is a certain baseline overhead associated with executing a pass statement. The code here doesn&#8217;t try to hide it, but you should be aware of it.  The baseline overhead can be measured by invoking the program without arguments.  The baseline overhead differs between Python versions!  Also, to fairly compare older Python versions to Python 2.3, you may want to use Python&#8217;s -O option for the older versions to avoid timing SET_LINENO instructions.   26.6.2. Examples\u00b6 Here are two example sessions (one using the command line, one using the module interface) that compare the cost of using hasattr() vs. try\/except to test for missing and present object attributes. $ python -m timeit 'try:' '  str.__nonzero__' 'except AttributeError:' '  pass' 100000 loops, best of 3: 15.7 usec per loop $ python -m timeit 'if hasattr(str, \"__nonzero__\"): pass' 100000 loops, best of 3: 4.26 usec per loop $ python -m timeit 'try:' '  int.__nonzero__' 'except AttributeError:' '  pass' 1000000 loops, best of 3: 1.43 usec per loop $ python -m timeit 'if hasattr(int, \"__nonzero__\"): pass' 100000 loops, best of 3: 2.23 usec per loop  >>> import timeit >>> s = \"\"\"\\ ... try: ...     str.__nonzero__ ... except AttributeError: ...     pass ... \"\"\" >>> t = timeit.Timer(stmt=s) >>> print \"%.2f usec\/pass\"  (1000000 * t.timeit(number=100000)\/100000) 17.09 usec\/pass >>> s = \"\"\"\\ ... if hasattr(str, &#39;__nonzero__&#39;): pass ... \"\"\" >>> t = timeit.Timer(stmt=s) >>> print \"%.2f usec\/pass\"  (1000000 * t.timeit(number=100000)\/100000) 4.85 usec\/pass >>> s = \"\"\"\\ ... try: ...     int.__nonzero__ ... except AttributeError: ...     pass ... \"\"\" >>> t = timeit.Timer(stmt=s) >>> print \"%.2f usec\/pass\"  (1000000 * t.timeit(number=100000)\/100000) 1.97 usec\/pass >>> s = \"\"\"\\ ... if hasattr(int, &#39;__nonzero__&#39;): pass ... \"\"\" >>> t = timeit.Timer(stmt=s) >>> print \"%.2f usec\/pass\"  (1000000 * t.timeit(number=100000)\/100000) 3.15 usec\/pass   To give the timeit module access to functions you define, you can pass a setup parameter which contains an import statement: def test():     \"\"\"Stupid test function\"\"\"     L = []     for i in range(100):         L.append(i)  if __name__ == &#39;__main__&#39;:     from timeit import Timer     t = Timer(\"test()\", \"from __main__ import test\")     print t.timeit()"},{"url":"http:\/\/docs.python.org\/library\/timeit.html#timeit.repeat","title":"timeit.repeat","description":""},{"url":"http:\/\/docs.python.org\/library\/timeit.html#timeit.timeit","title":"timeit.timeit","description":""},{"url":"http:\/\/docs.python.org\/library\/timeit.html#timeit.Timer","title":"timeit.Timer","description":""},{"url":"http:\/\/docs.python.org\/library\/timeit.html#timeit.Timer.print_exc","title":"timeit.Timer.print_exc","description":""},{"url":"http:\/\/docs.python.org\/library\/timeit.html#timeit.Timer.repeat","title":"timeit.Timer.repeat","description":""},{"url":"http:\/\/docs.python.org\/library\/timeit.html#timeit.Timer.timeit","title":"timeit.Timer.timeit","description":""},{"url":"http:\/\/docs.python.org\/library\/__builtin__.html","title":"__builtin__","description":"27.3. __builtin__ &#8212; Built-in objects\u00b6 This module provides direct access to all &#8216;built-in&#8217; identifiers of Python; for example, __builtin__.open is the full name for the built-in function open().  See Built-in Functions and Built-in Constants for documentation. This module is not normally accessed explicitly by most applications, but can be useful in modules that provide objects with the same name as a built-in value, but in which the built-in of that name is also needed.  For example, in a module that wants to implement an open() function that wraps the built-in open(), this module can be used directly: import __builtin__  def open(path):     f = __builtin__.open(path, &#39;r&#39;)     return UpperCaser(f)  class UpperCaser:     &#39;&#39;&#39;Wrapper around a file that converts output to upper-case.&#39;&#39;&#39;      def __init__(self, f):         self._f = f      def read(self, count=-1):         return self._f.read(count).upper()      # ...    CPython implementation detail: Most modules have the name __builtins__ (note the 's') made available as part of their globals.  The value of __builtins__ is normally either this module or the value of this modules&#8217;s __dict__ attribute.  Since this is an implementation detail, it may not be used by alternate implementations of Python."},{"url":"http:\/\/docs.python.org\/library\/future_builtins.html","title":"future_builtins","description":"27.4. future_builtins &#8212; Python 3 builtins\u00b6  New in version 2.6. This module provides functions that exist in 2.x, but have different behavior in Python 3, so they cannot be put into the 2.x builtins namespace. Instead, if you want to write code compatible with Python 3 builtins, import them from this module, like this: from future_builtins import map, filter  ... code using Python 3-style map and filter ...   The 2to3 tool that ports Python 2 code to Python 3 will recognize this usage and leave the new builtins alone.  Note The Python 3 print() function is already in the builtins, but cannot be accessed from Python 2 code unless you use the appropriate future statement: from __future__ import print_function    Available builtins are:   future_builtins.ascii(object)\u00b6 Returns the same as repr().  In Python 3, repr() will return printable Unicode characters unescaped, while ascii() will always backslash-escape them.  Using future_builtins.ascii() instead of repr() in 2.6 code makes it clear that you need a pure ASCII return value.    future_builtins.filter(function, iterable)\u00b6 Works like itertools.ifilter().    future_builtins.hex(object)\u00b6 Works like the built-in hex(), but instead of __hex__() it will use the __index__() method on its argument to get an integer that is then converted to hexadecimal.    future_builtins.map(function, iterable, ...)\u00b6 Works like itertools.imap().    future_builtins.oct(object)\u00b6 Works like the built-in oct(), but instead of __oct__() it will use the __index__() method on its argument to get an integer that is then converted to octal.    future_builtins.zip(*iterables)\u00b6 Works like itertools.izip()."},{"url":"http:\/\/docs.python.org\/library\/future_builtins.html#future_builtins_future_builtins.ascii","title":"future_builtins.ascii","description":""},{"url":"http:\/\/docs.python.org\/library\/future_builtins.html#future_builtins_future_builtins.filter","title":"future_builtins.filter","description":""},{"url":"http:\/\/docs.python.org\/library\/future_builtins.html#future_builtins_future_builtins.hex","title":"future_builtins.hex","description":""},{"url":"http:\/\/docs.python.org\/library\/future_builtins.html#future_builtins_future_builtins.map","title":"future_builtins.map","description":""},{"url":"http:\/\/docs.python.org\/library\/future_builtins.html#future_builtins_future_builtins.oct","title":"future_builtins.oct","description":""},{"url":"http:\/\/docs.python.org\/library\/future_builtins.html#future_builtins_future_builtins.zip","title":"future_builtins.zip","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html","title":"sysconfig","description":"27.2. sysconfig &#8212; Provide access to Python&#8217;s configuration information\u00b6  New in version 2.7. Source code: Lib\/sysconfig.py  The sysconfig module provides access to Python&#8217;s configuration information like the list of installation paths and the configuration variables relevant for the current platform.  27.2.1. Configuration variables\u00b6 A Python distribution contains a Makefile and a pyconfig.h header file that are necessary to build both the Python binary itself and third-party C extensions compiled using distutils. sysconfig puts all variables found in these files in a dictionary that can be accessed using get_config_vars() or get_config_var(). Notice that on Windows, it&#8217;s a much smaller set.   sysconfig.get_config_vars(*args)\u00b6 With no arguments, return a dictionary of all configuration variables relevant for the current platform. With arguments, return a list of values that result from looking up each argument in the configuration variable dictionary. For each argument, if the value is not found, return None.     sysconfig.get_config_var(name)\u00b6 Return the value of a single variable name. Equivalent to get_config_vars().get(name). If name is not found, return None.   Example of usage: >>> import sysconfig >>> sysconfig.get_config_var(&#39;Py_ENABLE_SHARED&#39;) 0 >>> sysconfig.get_config_var(&#39;LIBDIR&#39;) &#39;\/usr\/local\/lib&#39; >>> sysconfig.get_config_vars(&#39;AR&#39;, &#39;CXX&#39;) [&#39;ar&#39;, &#39;g++&#39;]     27.2.2. Installation paths\u00b6 Python uses an installation scheme that differs depending on the platform and on the installation options.  These schemes are stored in sysconfig under unique identifiers based on the value returned by os.name. Every new component that is installed using distutils or a Distutils-based system will follow the same scheme to copy its file in the right places. Python currently supports seven schemes:  posix_prefix: scheme for Posix platforms like Linux or Mac OS X.  This is the default scheme used when Python or a component is installed. posix_home: scheme for Posix platforms used when a home option is used upon installation.  This scheme is used when a component is installed through Distutils with a specific home prefix. posix_user: scheme for Posix platforms used when a component is installed through Distutils and the user option is used.  This scheme defines paths located under the user home directory. nt: scheme for NT platforms like Windows. nt_user: scheme for NT platforms, when the user option is used. os2: scheme for OS\/2 platforms. os2_home: scheme for OS\/2 patforms, when the user option is used.  Each scheme is itself composed of a series of paths and each path has a unique identifier.  Python currently uses eight paths:  stdlib: directory containing the standard Python library files that are not platform-specific. platstdlib: directory containing the standard Python library files that are platform-specific. platlib: directory for site-specific, platform-specific files. purelib: directory for site-specific, non-platform-specific files. include: directory for non-platform-specific header files. platinclude: directory for platform-specific header files. scripts: directory for script files. data: directory for data files.  sysconfig provides some functions to determine these paths.   sysconfig.get_scheme_names()\u00b6 Return a tuple containing all schemes currently supported in sysconfig.    sysconfig.get_path_names()\u00b6 Return a tuple containing all path names currently supported in sysconfig.    sysconfig.get_path(name[, scheme[, vars[, expand]]])\u00b6 Return an installation path corresponding to the path name, from the install scheme named scheme. name has to be a value from the list returned by get_path_names(). sysconfig stores installation paths corresponding to each path name, for each platform, with variables to be expanded.  For instance the stdlib path for the nt scheme is: {base}\/Lib. get_path() will use the variables returned by get_config_vars() to expand the path.  All variables have default values for each platform so one may call this function and get the default value. If scheme is provided, it must be a value from the list returned by get_path_names().  Otherwise, the default scheme for the current platform is used. If vars is provided, it must be a dictionary of variables that will update the dictionary return by get_config_vars(). If expand is set to False, the path will not be expanded using the variables. If name is not found, return None.     sysconfig.get_paths([scheme[, vars[, expand]]])\u00b6 Return a dictionary containing all installation paths corresponding to an installation scheme. See get_path() for more information. If scheme is not provided, will use the default scheme for the current platform. If vars is provided, it must be a dictionary of variables that will update the dictionary used to expand the paths. If expand is set to False, the paths will not be expanded. If scheme is not an existing scheme, get_paths() will raise a KeyError.     27.2.3. Other functions\u00b6   sysconfig.get_python_version()\u00b6 Return the MAJOR.MINOR Python version number as a string.  Similar to sys.version[:3].    sysconfig.get_platform()\u00b6 Return a string that identifies the current platform. This is used mainly to distinguish platform-specific build directories and platform-specific built distributions.  Typically includes the OS name and version and the architecture (as supplied by os.uname()), although the exact information included depends on the OS; e.g. for IRIX the architecture isn&#8217;t particularly important (IRIX only runs on SGI hardware), but for Linux the kernel version isn&#8217;t particularly important. Examples of returned values:  linux-i586 linux-alpha (?) solaris-2.6-sun4u irix-5.3 irix64-6.2  Windows will return one of:  win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc) win-ia64 (64bit Windows on Itanium) win32 (all others - specifically, sys.platform is returned)  Mac OS X can return:  macosx-10.6-ppc macosx-10.4-ppc64 macosx-10.3-i386 macosx-10.4-fat  For other non-POSIX platforms, currently just returns sys.platform.     sysconfig.is_python_build()\u00b6 Return True if the current Python installation was built from source.    sysconfig.parse_config_h(fp[, vars])\u00b6 Parse a config.h-style file. fp is a file-like object pointing to the config.h-like file. A dictionary containing name\/value pairs is returned.  If an optional dictionary is passed in as the second argument, it is used instead of a new dictionary, and updated with the values read in the file.     sysconfig.get_config_h_filename()\u00b6 Return the path of pyconfig.h."},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_config_h_filename","title":"sysconfig.get_config_h_filename","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_config_var","title":"sysconfig.get_config_var","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_config_vars","title":"sysconfig.get_config_vars","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_path","title":"sysconfig.get_path","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_path_names","title":"sysconfig.get_path_names","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_paths","title":"sysconfig.get_paths","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_platform","title":"sysconfig.get_platform","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_python_version","title":"sysconfig.get_python_version","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.get_scheme_names","title":"sysconfig.get_scheme_names","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.is_python_build","title":"sysconfig.is_python_build","description":""},{"url":"http:\/\/docs.python.org\/library\/sysconfig.html#sysconfig.parse_config_h","title":"sysconfig.parse_config_h","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html","title":"sys","description":"27.1. sys &#8212; System-specific parameters and functions\u00b6 This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. It is always available.   sys.argv\u00b6 The list of command line arguments passed to a Python script. argv[0] is the script name (it is operating system dependent whether this is a full pathname or not).  If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'.  If no script name was passed to the Python interpreter, argv[0] is the empty string. To loop over the standard input, or the list of files given on the command line, see the fileinput module.     sys.byteorder\u00b6 An indicator of the native byte order.  This will have the value 'big' on big-endian (most-significant byte first) platforms, and 'little' on little-endian (least-significant byte first) platforms.  New in version 2.0.     sys.builtin_module_names\u00b6 A tuple of strings giving the names of all modules that are compiled into this Python interpreter.  (This information is not available in any other way &#8212; modules.keys() only lists the imported modules.)    sys.call_tracing(func, args)\u00b6 Call func(*args), while tracing is enabled.  The tracing state is saved, and restored afterwards.  This is intended to be called from a debugger from a checkpoint, to recursively debug some other code.    sys.copyright\u00b6 A string containing the copyright pertaining to the Python interpreter.    sys._clear_type_cache()\u00b6 Clear the internal type cache. The type cache is used to speed up attribute and method lookups. Use the function only to drop unnecessary references during reference leak debugging. This function should be used for internal and specialized purposes only.  New in version 2.6.     sys._current_frames()\u00b6 Return a dictionary mapping each thread&#8217;s identifier to the topmost stack frame currently active in that thread at the time the function is called. Note that functions in the traceback module can build the call stack given such a frame. This is most useful for debugging deadlock:  this function does not require the deadlocked threads&#8217; cooperation, and such threads&#8217; call stacks are frozen for as long as they remain deadlocked.  The frame returned for a non-deadlocked thread may bear no relationship to that thread&#8217;s current activity by the time calling code examines the frame. This function should be used for internal and specialized purposes only.  New in version 2.5.     sys.dllhandle\u00b6 Integer specifying the handle of the Python DLL. Availability: Windows.    sys.displayhook(value)\u00b6 If value is not None, this function prints it to sys.stdout, and saves it in __builtin__._. sys.displayhook is called on the result of evaluating an expression entered in an interactive Python session.  The display of these values can be customized by assigning another one-argument function to sys.displayhook.     sys.dont_write_bytecode\u00b6 If this is true, Python won&#8217;t try to write .pyc or .pyo files on the import of source modules.  This value is initially set to True or False depending on the -B command line option and the PYTHONDONTWRITEBYTECODE environment variable, but you can set it yourself to control bytecode file generation.  New in version 2.6.     sys.excepthook(type, value, traceback)\u00b6 This function prints out a given traceback and exception to sys.stderr. When an exception is raised and uncaught, the interpreter calls sys.excepthook with three arguments, the exception class, exception instance, and a traceback object.  In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits.  The handling of such top-level exceptions can be customized by assigning another three-argument function to sys.excepthook.     sys.__displayhook__\u00b6  sys.__excepthook__\u00b6 These objects contain the original values of displayhook and excepthook at the start of the program.  They are saved so that displayhook and excepthook can be restored in case they happen to get replaced with broken objects.    sys.exc_info()\u00b6 This function returns a tuple of three values that give information about the exception that is currently being handled.  The information returned is specific both to the current thread and to the current stack frame.  If the current stack frame is not handling an exception, the information is taken from the calling stack frame, or its caller, and so on until a stack frame is found that is handling an exception.  Here, &#8220;handling an exception&#8221; is defined as &#8220;executing or having executed an except clause.&#8221;  For any stack frame, only information about the most recently handled exception is accessible. If no exception is being handled anywhere on the stack, a tuple containing three None values is returned.  Otherwise, the values returned are (type, value, traceback).  Their meaning is: type gets the exception type of the exception being handled (a class object); value gets the exception parameter (its associated value or the second argument to raise, which is always a class instance if the exception type is a class object); traceback gets a traceback object (see the Reference Manual) which encapsulates the call stack at the point where the exception originally occurred. If exc_clear() is called, this function will return three None values until either another exception is raised in the current thread or the execution stack returns to a frame where another exception is being handled.  Warning Assigning the traceback return value to a local variable in a function that is handling an exception will cause a circular reference.  This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected.  Since most functions don&#8217;t need access to the traceback, the best solution is to use something like exctype, value = sys.exc_info()[:2] to extract only the exception type and value.  If you do need the traceback, make sure to delete it after use (best done with a try ... finally statement) or to call exc_info() in a function that does not itself handle an exception.   Note Beginning with Python 2.2, such cycles are automatically reclaimed when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles.      sys.exc_clear()\u00b6 This function clears all information relating to the current or last exception that occurred in the current thread.  After calling this function, exc_info() will return three None values until another exception is raised in the current thread or the execution stack returns to a frame where another exception is being handled. This function is only needed in only a few obscure situations.  These include logging and error handling systems that report information on the last or current exception.  This function can also be used to try to free resources and trigger object finalization, though no guarantee is made as to what objects will be freed, if any.  New in version 2.3.     sys.exc_type\u00b6  sys.exc_value\u00b6  sys.exc_traceback\u00b6  Deprecated since version 1.5: Use exc_info() instead. Since they are global variables, they are not specific to the current thread, so their use is not safe in a multi-threaded program.  When no exception is being handled, exc_type is set to None and the other two are undefined.     sys.exec_prefix\u00b6 A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '\/usr\/local'.  This can be set at build time with the --exec-prefix argument to the configure script.  Specifically, all configuration files (e.g. the pyconfig.h header file) are installed in the directory exec_prefix\/lib\/pythonX.Y\/config', and shared library modules are installed in :file:`exec_prefix\/lib\/pythonX.Y\/lib-dynload, where X.Y is the version number of Python, for example 2.7.    sys.executable\u00b6 A string giving the name of the executable binary for the Python interpreter, on systems where this makes sense.    sys.exit([arg])\u00b6 Exit from Python.  This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level. The optional argument arg can be an integer giving the exit status (defaulting to zero), or another type of object.  If it is an integer, zero is considered &#8220;successful termination&#8221; and any nonzero value is considered &#8220;abnormal termination&#8221; by shells and the like.  Most systems require it to be in the range 0-127, and produce undefined results otherwise.  Some systems have a convention for assigning specific meanings to specific exit codes, but these are generally underdeveloped; Unix programs generally use 2 for command line syntax errors and 1 for all other kind of errors.  If another type of object is passed, None is equivalent to passing zero, and any other object is printed to stderr and results in an exit code of 1.  In particular, sys.exit(\"some error message\") is a quick way to exit a program when an error occurs. Since exit() ultimately &#8220;only&#8221; raises an exception, it will only exit the process when called from the main thread, and the exception is not intercepted.     sys.exitfunc\u00b6 This value is not actually defined by the module, but can be set by the user (or by a program) to specify a clean-up action at program exit.  When set, it should be a parameterless function.  This function will be called when the interpreter exits.  Only one function may be installed in this way; to allow multiple functions which will be called at termination, use the atexit module.  Note The exit function is not called when the program is killed by a signal, when a Python fatal internal error is detected, or when os._exit() is called.   Deprecated since version 2.4: Use atexit instead.     sys.flags\u00b6 The struct sequence flags exposes the status of command line flags. The attributes are read only.       attribute flag    debug -d  py3k_warning -3  division_warning -Q  division_new -Qnew  inspect -i  interactive -i  optimize -O or -OO  dont_write_bytecode -B  no_user_site -s  no_site -S  ignore_environment -E  tabcheck -t or -tt  verbose -v  unicode -U  bytes_warning -b     New in version 2.6.     sys.float_info\u00b6 A structseq holding information about the float type. It contains low level information about the precision and internal representation.  The values correspond to the various floating-point constants defined in the standard header file float.h for the &#8216;C&#8217; programming language; see section 5.2.4.2.2 of the 1999 ISO\/IEC C standard [C99], &#8216;Characteristics of floating types&#8217;, for details.        attribute float.h macro explanation    epsilon DBL_EPSILON difference between 1 and the least value greater than 1 that is representable as a float  dig DBL_DIG maximum number of decimal digits that can be faithfully represented in a float;  see below  mant_dig DBL_MANT_DIG float precision: the number of base-radix digits in the significand of a float  max DBL_MAX maximum representable finite float  max_exp DBL_MAX_EXP maximum integer e such that radix**(e-1) is a representable finite float  max_10_exp DBL_MAX_10_EXP maximum integer e such that 10**e is in the range of representable finite floats  min DBL_MIN minimum positive normalized float  min_exp DBL_MIN_EXP minimum integer e such that radix**(e-1) is a normalized float  min_10_exp DBL_MIN_10_EXP minimum integer e such that 10**e is a normalized float  radix FLT_RADIX radix of exponent representation  rounds FLT_ROUNDS integer constant representing the rounding mode used for arithmetic operations.  This reflects the value of the system FLT_ROUNDS macro at interpreter startup time.  See section 5.2.4.2.2 of the C99 standard for an explanation of the possible values and their meanings.    The attribute sys.float_info.dig needs further explanation.  If s is any string representing a decimal number with at most sys.float_info.dig significant digits, then converting s to a float and back again will recover a string representing the same decimal value: >>> import sys >>> sys.float_info.dig 15 >>> s = &#39;3.14159265358979&#39;    # decimal string with 15 significant digits >>> format(float(s), &#39;.15g&#39;)  # convert to float and back -> same value &#39;3.14159265358979&#39;   But for strings with more than sys.float_info.dig significant digits, this isn&#8217;t always true: >>> s = &#39;9876543211234567&#39;    # 16 significant digits is too many! >>> format(float(s), &#39;.16g&#39;)  # conversion changes value &#39;9876543211234568&#39;    New in version 2.6.     sys.float_repr_style\u00b6 A string indicating how the repr() function behaves for floats.  If the string has value 'short' then for a finite float x, repr(x) aims to produce a short string with the property that float(repr(x)) == x.  This is the usual behaviour in Python 2.7 and later.  Otherwise, float_repr_style has value 'legacy' and repr(x) behaves in the same way as it did in versions of Python prior to 2.7.  New in version 2.7.     sys.getcheckinterval()\u00b6 Return the interpreter&#8217;s &#8220;check interval&#8221;; see setcheckinterval().  New in version 2.3.     sys.getdefaultencoding()\u00b6 Return the name of the current default string encoding used by the Unicode implementation.  New in version 2.0.     sys.getdlopenflags()\u00b6 Return the current value of the flags that are used for dlopen() calls. The flag constants are defined in the dl and DLFCN modules. Availability: Unix.  New in version 2.2.     sys.getfilesystemencoding()\u00b6 Return the name of the encoding used to convert Unicode filenames into system file names, or None if the system default encoding is used. The result value depends on the operating system:  On Mac OS X, the encoding is 'utf-8'. On Unix, the encoding is the user&#8217;s preference according to the result of nl_langinfo(CODESET), or None if the nl_langinfo(CODESET) failed. On Windows NT+, file names are Unicode natively, so no conversion is performed. getfilesystemencoding() still returns 'mbcs', as this is the encoding that applications should use when they explicitly want to convert Unicode strings to byte strings that are equivalent when used as file names. On Windows 9x, the encoding is 'mbcs'.   New in version 2.3.     sys.getrefcount(object)\u00b6 Return the reference count of the object.  The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to getrefcount().    sys.getrecursionlimit()\u00b6 Return the current value of the recursion limit, the maximum depth of the Python interpreter stack.  This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.  It can be set by setrecursionlimit().    sys.getsizeof(object[, default])\u00b6 Return the size of an object in bytes. The object can be any type of object. All built-in objects will return correct results, but this does not have to hold true for third-party extensions as it is implementation specific. If given, default will be returned if the object does not provide means to retrieve the size.  Otherwise a TypeError will be raised. getsizeof() calls the object&#8217;s __sizeof__ method and adds an additional garbage collector overhead if the object is managed by the garbage collector.  New in version 2.6.     sys._getframe([depth])\u00b6 Return a frame object from the call stack.  If optional integer depth is given, return the frame object that many calls below the top of the stack.  If that is deeper than the call stack, ValueError is raised.  The default for depth is zero, returning the frame at the top of the call stack.  CPython implementation detail: This function should be used for internal and specialized purposes only. It is not guaranteed to exist in all implementations of Python.      sys.getprofile()\u00b6 Get the profiler function as set by setprofile().  New in version 2.6.     sys.gettrace()\u00b6 Get the trace function as set by settrace().  CPython implementation detail: The gettrace() function is intended only for implementing debuggers, profilers, coverage tools and the like.  Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations.   New in version 2.6.     sys.getwindowsversion()\u00b6 Return a named tuple describing the Windows version currently running.  The named elements are major, minor, build, platform, service_pack, service_pack_minor, service_pack_major, suite_mask, and product_type. service_pack contains a string while all other values are integers. The components can also be accessed by name, so sys.getwindowsversion()[0] is equivalent to sys.getwindowsversion().major. For compatibility with prior versions, only the first 5 elements are retrievable by indexing. platform may be one of the following values:       Constant Platform    0 (VER_PLATFORM_WIN32s) Win32s on Windows 3.1  1 (VER_PLATFORM_WIN32_WINDOWS) Windows 95\/98\/ME  2 (VER_PLATFORM_WIN32_NT) Windows NT\/2000\/XP\/x64  3 (VER_PLATFORM_WIN32_CE) Windows CE    product_type may be one of the following values:       Constant Meaning    1 (VER_NT_WORKSTATION) The system is a workstation.  2 (VER_NT_DOMAIN_CONTROLLER) The system is a domain controller.  3 (VER_NT_SERVER) The system is a server, but not a domain controller.    This function wraps the Win32 GetVersionEx() function; see the Microsoft documentation on OSVERSIONINFOEX() for more information about these fields. Availability: Windows.  New in version 2.3.  Changed in version 2.7: Changed to a named tuple and added service_pack_minor, service_pack_major, suite_mask, and product_type.     sys.hexversion\u00b6 The version number encoded as a single integer.  This is guaranteed to increase with each version, including proper support for non-production releases.  For example, to test that the Python interpreter is at least version 1.5.2, use: if sys.hexversion >= 0x010502F0:     # use some advanced feature     ... else:     # use an alternative implementation or warn the user     ...   This is called hexversion since it only really looks meaningful when viewed as the result of passing it to the built-in hex() function.  The version_info value may be used for a more human-friendly encoding of the same information. The hexversion is a 32-bit number with the following layout:       Bits (big endian order) Meaning    1-8 PY_MAJOR_VERSION  (the 2 in 2.1.0a3)  9-16 PY_MINOR_VERSION  (the 1 in 2.1.0a3)  17-24 PY_MICRO_VERSION  (the 0 in 2.1.0a3)  25-28 PY_RELEASE_LEVEL  (0xA for alpha, 0xB for beta, 0xC for release candidate and 0xF for final)  29-32 PY_RELEASE_SERIAL  (the 3 in 2.1.0a3, zero for final releases)    Thus 2.1.0a3 is hexversion 0x020100a3.  New in version 1.5.2.     sys.long_info\u00b6 A struct sequence that holds information about Python&#8217;s internal representation of integers.  The attributes are read only.       Attribute Explanation    bits_per_digit number of bits held in each digit.  Python integers are stored internally in base 2**long_info.bits_per_digit  sizeof_digit size in bytes of the C type used to represent a digit     New in version 2.7.     sys.last_type\u00b6  sys.last_value\u00b6  sys.last_traceback\u00b6 These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback. Their intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error.  (Typical use is import pdb; pdb.pm() to enter the post-mortem debugger; see chapter pdb &#8212; The Python Debugger for more information.) The meaning of the variables is the same as that of the return values from exc_info() above.  (Since there is only one interactive thread, thread-safety is not a concern for these variables, unlike for exc_type etc.)     sys.maxint\u00b6 The largest positive integer supported by Python&#8217;s regular integer type.  This is at least 2**31-1.  The largest negative integer is -maxint-1 &#8212; the asymmetry results from the use of 2&#8217;s complement binary arithmetic.    sys.maxsize\u00b6 The largest positive integer supported by the platform&#8217;s Py_ssize_t type, and thus the maximum size lists, strings, dicts, and many other containers can have.    sys.maxunicode\u00b6 An integer giving the largest supported code point for a Unicode character.  The value of this depends on the configuration option that specifies whether Unicode characters are stored as UCS-2 or UCS-4.    sys.meta_path\u00b6 A list of finder objects that have their find_module() methods called to see if one of the objects can find the module to be imported. The find_module() method is called at least with the absolute name of the module being imported. If the module to be imported is contained in package then the parent package&#8217;s __path__ attribute is passed in as a second argument. The method returns None if the module cannot be found, else returns a loader. sys.meta_path is searched before any implicit default finders or sys.path. See PEP 302 for the original specification.     sys.modules\u00b6 This is a dictionary that maps module names to modules which have already been loaded.  This can be manipulated to force reloading of modules and other tricks. Note that removing a module from this dictionary is not the same as calling reload() on the corresponding module object.     sys.path\u00b6 A list of strings that specifies the search path for modules. Initialized from the environment variable PYTHONPATH, plus an installation-dependent default. As initialized upon program startup, the first item of this list, path[0], is the directory containing the script that was used to invoke the Python interpreter.  If the script directory is not available (e.g.  if the interpreter is invoked interactively or if the script is read from standard input), path[0] is the empty string, which directs Python to search modules in the current directory first.  Notice that the script directory is inserted before the entries inserted as a result of PYTHONPATH. A program is free to modify this list for its own purposes.  Changed in version 2.3: Unicode strings are no longer ignored.  See also Module site This describes how to use .pth files to extend sys.path.      sys.path_hooks\u00b6 A list of callables that take a path argument to try to create a finder for the path. If a finder can be created, it is to be returned by the callable, else raise ImportError. Originally specified in PEP 302.     sys.path_importer_cache\u00b6 A dictionary acting as a cache for finder objects. The keys are paths that have been passed to sys.path_hooks and the values are the finders that are found. If a path is a valid file system path but no explicit finder is found on sys.path_hooks then None is stored to represent the implicit default finder should be used. If the path is not an existing path then imp.NullImporter is set. Originally specified in PEP 302.     sys.platform\u00b6 This string contains a platform identifier that can be used to append platform-specific components to sys.path, for instance. For most Unix systems, this is the lowercased OS name as returned by uname -s with the first part of the version as returned by uname -r appended, e.g. 'sunos5', at the time when Python was built.  Unless you want to test for a specific system version, it is therefore recommended to use the following idiom: if sys.platform.startswith('freebsd'):     # FreeBSD-specific code here... elif sys.platform.startswith('linux'):     # Linux-specific code here...   Changed in version 2.7.3: Since lots of code check for sys.platform == 'linux2', and there is no essential change between Linux 2.x and 3.x, sys.platform is always set to 'linux2', even on Linux 3.x.  In Python 3.3 and later, the value will always be set to 'linux', so it is recommended to always use the startswith idiom presented above. For other systems, the values are:       System platform value    Linux (2.x and 3.x) 'linux2'  Windows 'win32'  Windows\/Cygwin 'cygwin'  Mac OS X 'darwin'  OS\/2 'os2'  OS\/2 EMX 'os2emx'  RiscOS 'riscos'  AtheOS 'atheos'     See also os.name has a coarser granularity.  os.uname() gives system-dependent version information. The platform module provides detailed checks for the system&#8217;s identity.      sys.prefix\u00b6 A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '\/usr\/local'.  This can be set at build time with the --prefix argument to the configure script.  The main collection of Python library modules is installed in the directory prefix\/lib\/pythonX.Y` while the platform independent header files (all except pyconfig.h) are stored in prefix\/include\/pythonX.Y`, where X.Y is the version number of Python, for example 2.7.    sys.ps1\u00b6  sys.ps2\u00b6 Strings specifying the primary and secondary prompt of the interpreter.  These are only defined if the interpreter is in interactive mode.  Their initial values in this case are '>>> ' and '... '.  If a non-string object is assigned to either variable, its str() is re-evaluated each time the interpreter prepares to read a new interactive command; this can be used to implement a dynamic prompt.     sys.py3kwarning\u00b6 Bool containing the status of the Python 3.0 warning flag. It&#8217;s True when Python is started with the -3 option.  (This should be considered read-only; setting it to a different value doesn&#8217;t have an effect on Python 3.0 warnings.)  New in version 2.6.     sys.setcheckinterval(interval)\u00b6 Set the interpreter&#8217;s &#8220;check interval&#8221;.  This integer value determines how often the interpreter checks for periodic things such as thread switches and signal handlers.  The default is 100, meaning the check is performed every 100 Python virtual instructions. Setting it to a larger value may increase performance for programs using threads.  Setting it to a value <= 0 checks every virtual instruction, maximizing responsiveness as well as overhead.    sys.setdefaultencoding(name)\u00b6 Set the current default string encoding used by the Unicode implementation.  If name does not match any available encoding, LookupError is raised. This function is only intended to be used by the site module implementation and, where needed, by sitecustomize.  Once used by the site module, it is removed from the sys module&#8217;s namespace.  New in version 2.0.     sys.setdlopenflags(n)\u00b6 Set the flags used by the interpreter for dlopen() calls, such as when the interpreter loads extension modules.  Among other things, this will enable a lazy resolving of symbols when importing a module, if called as sys.setdlopenflags(0).  To share symbols across extension modules, call as sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL).  Symbolic names for the flag modules can be either found in the dl module, or in the DLFCN module. If DLFCN is not available, it can be generated from \/usr\/include\/dlfcn.h using the h2py script. Availability: Unix.  New in version 2.2.     sys.setprofile(profilefunc)\u00b6 Set the system&#8217;s profile function, which allows you to implement a Python source code profiler in Python.  See chapter The Python Profilers for more information on the Python profiler.  The system&#8217;s profile function is called similarly to the system&#8217;s trace function (see settrace()), but it isn&#8217;t called for each executed line of code (only on call and return, but the return event is reported even when an exception has been set).  The function is thread-specific, but there is no way for the profiler to know about context switches between threads, so it does not make sense to use this in the presence of multiple threads. Also, its return value is not used, so it can simply return None.     sys.setrecursionlimit(limit)\u00b6 Set the maximum depth of the Python interpreter stack to limit.  This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python. The highest possible limit is platform-dependent.  A user may need to set the limit higher when she has a program that requires deep recursion and a platform that supports a higher limit.  This should be done with care, because a too-high limit can lead to a crash.     sys.settrace(tracefunc)\u00b6 Set the system&#8217;s trace function, which allows you to implement a Python source code debugger in Python.  The function is thread-specific; for a debugger to support multiple threads, it must be registered using settrace() for each thread being debugged. Trace functions should have three arguments: frame, event, and arg. frame is the current stack frame.  event is a string: 'call', 'line', 'return', 'exception', 'c_call', 'c_return', or 'c_exception'. arg depends on the event type. The trace function is invoked (with event set to 'call') whenever a new local scope is entered; it should return a reference to a local trace function to be used that scope, or None if the scope shouldn&#8217;t be traced. The local trace function should return a reference to itself (or to another function for further tracing in that scope), or None to turn off tracing in that scope. The events have the following meaning:  'call' A function is called (or some other code block entered).  The global trace function is called; arg is None; the return value specifies the local trace function. 'line' The interpreter is about to execute a new line of code or re-execute the condition of a loop.  The local trace function is called; arg is None; the return value specifies the new local trace function.  See Objects\/lnotab_notes.txt for a detailed explanation of how this works. 'return' A function (or other code block) is about to return.  The local trace function is called; arg is the value that will be returned, or None if the event is caused by an exception being raised.  The trace function&#8217;s return value is ignored. 'exception' An exception has occurred.  The local trace function is called; arg is a tuple (exception, value, traceback); the return value specifies the new local trace function. 'c_call' A C function is about to be called.  This may be an extension function or a built-in.  arg is the C function object. 'c_return' A C function has returned. arg is the C function object. 'c_exception' A C function has raised an exception.  arg is the C function object.  Note that as an exception is propagated down the chain of callers, an 'exception' event is generated at each level. For more information on code and frame objects, refer to The standard type hierarchy.  CPython implementation detail: The settrace() function is intended only for implementing debuggers, profilers, coverage tools and the like.  Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations.      sys.settscdump(on_flag)\u00b6 Activate dumping of VM measurements using the Pentium timestamp counter, if on_flag is true. Deactivate these dumps if on_flag is off. The function is available only if Python was compiled with --with-tsc. To understand the output of this dump, read Python\/ceval.c in the Python sources.  New in version 2.4.  CPython implementation detail: This function is intimately bound to CPython implementation details and thus not likely to be implemented elsewhere.      sys.stdin\u00b6  sys.stdout\u00b6  sys.stderr\u00b6 File objects corresponding to the interpreter&#8217;s standard input, output and error streams.  stdin is used for all interpreter input except for scripts but including calls to input() and raw_input().  stdout is used for the output of print and expression statements and for the prompts of input() and raw_input(). The interpreter&#8217;s own prompts and (almost all of) its error messages go to stderr.  stdout and stderr needn&#8217;t be built-in file objects: any object is acceptable as long as it has a write() method that takes a string argument.  (Changing these objects doesn&#8217;t affect the standard I\/O streams of processes executed by os.popen(), os.system() or the exec*() family of functions in the os module.)     sys.__stdin__\u00b6  sys.__stdout__\u00b6  sys.__stderr__\u00b6 These objects contain the original values of stdin, stderr and stdout at the start of the program.  They are used during finalization, and could be useful to print to the actual standard stream no matter if the sys.std* object has been redirected. It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object.  However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object.     sys.subversion\u00b6 A triple (repo, branch, version) representing the Subversion information of the Python interpreter. repo is the name of the repository, 'CPython'. branch is a string of one of the forms 'trunk', 'branches\/name' or 'tags\/name'. version is the output of svnversion, if the interpreter was built from a Subversion checkout; it contains the revision number (range) and possibly a trailing &#8216;M&#8217; if there were local modifications. If the tree was exported (or svnversion was not available), it is the revision of Include\/patchlevel.h if the branch is a tag. Otherwise, it is None.  New in version 2.5.  Note Python is now developed using Mercurial.  In recent Python 2.7 bugfix releases, subversion therefore contains placeholder information.  It is removed in Python 3.3.      sys.tracebacklimit\u00b6 When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs. The default is 1000.  When set to 0 or less, all traceback information is suppressed and only the exception type and value are printed.    sys.version\u00b6 A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.  This string is displayed when the interactive interpreter is started.  Do not extract version information out of it, rather, use version_info and the functions provided by the platform module.    sys.api_version\u00b6 The C API version for this interpreter.  Programmers may find this useful when debugging version conflicts between Python and extension modules.  New in version 2.3.     sys.version_info\u00b6 A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.  All values except releaselevel are integers; the release level is 'alpha', 'beta', 'candidate', or 'final'.  The version_info value corresponding to the Python version 2.0 is (2, 0, 0, 'final', 0).  The components can also be accessed by name, so sys.version_info[0] is equivalent to sys.version_info.major and so on.  New in version 2.0.  Changed in version 2.7: Added named component attributes     sys.warnoptions\u00b6 This is an implementation detail of the warnings framework; do not modify this value.  Refer to the warnings module for more information on the warnings framework.    sys.winver\u00b6 The version number used to form registry keys on Windows platforms. This is stored as string resource 1000 in the Python DLL.  The value is normally the first three characters of version.  It is provided in the sys module for informational purposes; modifying this value has no effect on the registry keys used by Python. Availability: Windows.  Citations    [C99]ISO\/IEC 9899:1999.  &#8220;Programming languages &#8211; C.&#8221;  A public draft of this standard is available at http:\/\/www.open-std.org\/jtc1\/sc22\/wg14\/www\/docs\/n1256.pdf ."},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys._clear_type_cache","title":"sys._clear_type_cache","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys._current_frames","title":"sys._current_frames","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys._getframe","title":"sys._getframe","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.call_tracing","title":"sys.call_tracing","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.displayhook","title":"sys.displayhook","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.exc_clear","title":"sys.exc_clear","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.exc_info","title":"sys.exc_info","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.excepthook","title":"sys.excepthook","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.exit","title":"sys.exit","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getcheckinterval","title":"sys.getcheckinterval","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getdefaultencoding","title":"sys.getdefaultencoding","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getdlopenflags","title":"sys.getdlopenflags","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getfilesystemencoding","title":"sys.getfilesystemencoding","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getprofile","title":"sys.getprofile","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getrecursionlimit","title":"sys.getrecursionlimit","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getrefcount","title":"sys.getrefcount","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getsizeof","title":"sys.getsizeof","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.gettrace","title":"sys.gettrace","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.getwindowsversion","title":"sys.getwindowsversion","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.setcheckinterval","title":"sys.setcheckinterval","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.setdefaultencoding","title":"sys.setdefaultencoding","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.setdlopenflags","title":"sys.setdlopenflags","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.setprofile","title":"sys.setprofile","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.setrecursionlimit","title":"sys.setrecursionlimit","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.settrace","title":"sys.settrace","description":""},{"url":"http:\/\/docs.python.org\/library\/sys.html#sys.settscdump","title":"sys.settscdump","description":""},{"url":"http:\/\/docs.python.org\/library\/__main__.html","title":"__main__","description":"27.5. __main__ &#8212; Top-level script environment\u00b6 This module represents the (otherwise anonymous) scope in which the interpreter&#8217;s main program executes &#8212; commands read either from standard input, from a script file, or from an interactive prompt.  It is this environment in which the idiomatic &#8220;conditional script&#8221; stanza causes a script to run: if __name__ == \"__main__\":     main()"},{"url":"http:\/\/docs.python.org\/library\/trace.html","title":"trace","description":"26.7. trace &#8212; Trace or track Python statement execution\u00b6 Source code: Lib\/trace.py  The trace module allows you to trace program execution, generate annotated statement coverage listings, print caller\/callee relationships and list functions executed during a program run.  It can be used in another program or from the command line.  26.7.1. Command-Line Usage\u00b6 The trace module can be invoked from the command line.  It can be as simple as python -m trace --count -C . somefile.py ...  The above will execute somefile.py and generate annotated listings of all Python modules imported during the execution into the current directory.   --help\u00b6 Display usage and exit.    --version\u00b6 Display the version of the module and exit.   26.7.1.1. Main options\u00b6 At least one of the following options must be specified when invoking trace.  The --listfuncs option is mutually exclusive with the --trace and --counts options . When --listfuncs is provided, neither --counts nor --trace are accepted, and vice versa.   -c, --count\u00b6 Produce a set of annotated listing files upon program completion that shows how many times each statement was executed.  See also --coverdir, --file and --no-report below.    -t, --trace\u00b6 Display lines as they are executed.    -l, --listfuncs\u00b6 Display the functions executed by running the program.    -r, --report\u00b6 Produce an annotated list from an earlier program run that used the --count and --file option.  This does not execute any code.    -T, --trackcalls\u00b6 Display the calling relationships exposed by running the program.    26.7.1.2. Modifiers\u00b6   -f, --file=<file>\u00b6 Name of a file to accumulate counts over several tracing runs.  Should be used with the --count option.    -C, --coverdir=<dir>\u00b6 Directory where the report files go.  The coverage report for package.module is written to file dir\/package\/module.cover.    -m, --missing\u00b6 When generating annotated listings, mark lines which were not executed with >>>>>>.    -s, --summary\u00b6 When using --count or --report, write a brief summary to stdout for each file processed.    -R, --no-report\u00b6 Do not generate annotated listings.  This is useful if you intend to make several runs with --count, and then produce a single set of annotated listings at the end.    -g, --timing\u00b6 Prefix each line with the time since the program started.  Only used while tracing.    26.7.1.3. Filters\u00b6 These options may be repeated multiple times.   --ignore-module=<mod>\u00b6 Ignore each of the given module names and its submodules (if it is a package).  The argument can be a list of names separated by a comma.    --ignore-dir=<dir>\u00b6 Ignore all modules and packages in the named directory and subdirectories. The argument can be a list of directories separated by os.pathsep.     26.7.2. Programmatic Interface\u00b6   class trace.Trace([count=1[, trace=1[, countfuncs=0[, countcallers=0[, ignoremods=()[, ignoredirs=()[, infile=None[, outfile=None[, timing=False]]]]]]]]])\u00b6 Create an object to trace execution of a single statement or expression.  All parameters are optional.  count enables counting of line numbers.  trace enables line execution tracing.  countfuncs enables listing of the functions called during the run.  countcallers enables call relationship tracking.  ignoremods is a list of modules or packages to ignore. ignoredirs is a list of directories whose modules or packages should be ignored.  infile is the name of the file from which to read stored count information.  outfile is the name of the file in which to write updated count information.  timing enables a timestamp relative to when tracing was started to be displayed.    run(cmd)\u00b6 Execute the command and gather statistics from the execution with the current tracing parameters.  cmd must be a string or code object, suitable for passing into exec().    runctx(cmd[, globals=None[, locals=None]])\u00b6 Execute the command and gather statistics from the execution with the current tracing parameters, in the defined global and local environments.  If not defined, globals and locals default to empty dictionaries.    runfunc(func, *args, **kwds)\u00b6 Call func with the given arguments under control of the Trace object with the current tracing parameters.    results()\u00b6 Return a CoverageResults object that contains the cumulative results of all previous calls to run, runctx and runfunc for the given Trace instance.  Does not reset the accumulated trace results.       class trace.CoverageResults\u00b6 A container for coverage results, created by Trace.results().  Should not be created directly by the user.    update(other)\u00b6 Merge in data from another CoverageResults object.    write_results([show_missing=True[, summary=False[, coverdir=None]]])\u00b6 Write coverage results.  Set show_missing to show lines that had no hits.  Set summary to include in the output the coverage summary per module.  coverdir specifies the directory into which the coverage result files will be output.  If None, the results for each source file are placed in its directory.     A simple example demonstrating the use of the programmatic interface: import sys import trace  # create a Trace object, telling it what to ignore, and whether to # do tracing or line-counting or both. tracer = trace.Trace(     ignoredirs=[sys.prefix, sys.exec_prefix],     trace=0,     count=1)  # run the new command using the given tracer tracer.run(&#39;main()&#39;)  # make a report, placing output in \/tmp r = tracer.results() r.write_results(show_missing=True, coverdir=\"\/tmp\")"},{"url":"http:\/\/docs.python.org\/library\/trace.html#trace.CoverageResults","title":"trace.CoverageResults","description":""},{"url":"http:\/\/docs.python.org\/library\/trace.html#trace.CoverageResults.update","title":"trace.CoverageResults.update","description":""},{"url":"http:\/\/docs.python.org\/library\/trace.html#trace.CoverageResults.write_results","title":"trace.CoverageResults.write_results","description":""},{"url":"http:\/\/docs.python.org\/library\/trace.html#trace.Trace","title":"trace.Trace","description":""},{"url":"http:\/\/docs.python.org\/library\/trace.html#trace.Trace.results","title":"trace.Trace.results","description":""},{"url":"http:\/\/docs.python.org\/library\/trace.html#trace.Trace.run","title":"trace.Trace.run","description":""},{"url":"http:\/\/docs.python.org\/library\/trace.html#trace.Trace.runctx","title":"trace.Trace.runctx","description":""},{"url":"http:\/\/docs.python.org\/library\/trace.html#trace.Trace.runfunc","title":"trace.Trace.runfunc","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html","title":"traceback","description":"27.10. traceback &#8212; Print or retrieve a stack traceback\u00b6 This module provides a standard interface to extract, format and print stack traces of Python programs.  It exactly mimics the behavior of the Python interpreter when it prints a stack trace.  This is useful when you want to print stack traces under program control, such as in a &#8220;wrapper&#8221; around the interpreter. The module uses traceback objects &#8212; this is the object type that is stored in the variables sys.exc_traceback (deprecated) and sys.last_traceback and returned as the third item from sys.exc_info(). The module defines the following functions:   traceback.print_tb(traceback[, limit[, file]])\u00b6 Print up to limit stack trace entries from traceback.  If limit is omitted or None, all entries are printed. If file is omitted or None, the output goes to sys.stderr; otherwise it should be an open file or file-like object to receive the output.    traceback.print_exception(type, value, traceback[, limit[, file]])\u00b6 Print exception information and up to limit stack trace entries from traceback to file. This differs from print_tb() in the following ways: (1) if traceback is not None, it prints a header Traceback (most recent call last):; (2) it prints the exception type and value after the stack trace; (3) if type is SyntaxError and value has the appropriate format, it prints the line where the syntax error occurred with a caret indicating the approximate position of the error.    traceback.print_exc([limit[, file]])\u00b6 This is a shorthand for print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file).  (In fact, it uses sys.exc_info() to retrieve the same information in a thread-safe way instead of using the deprecated variables.)    traceback.format_exc([limit])\u00b6 This is like print_exc(limit) but returns a string instead of printing to a file.  New in version 2.4.     traceback.print_last([limit[, file]])\u00b6 This is a shorthand for print_exception(sys.last_type, sys.last_value, sys.last_traceback, limit, file).  In general it will work only after an exception has reached an interactive prompt (see sys.last_type).    traceback.print_stack([f[, limit[, file]]])\u00b6 This function prints a stack trace from its invocation point.  The optional f argument can be used to specify an alternate stack frame to start.  The optional limit and file arguments have the same meaning as for print_exception().    traceback.extract_tb(traceback[, limit])\u00b6 Return a list of up to limit &#8220;pre-processed&#8221; stack trace entries extracted from the traceback object traceback.  It is useful for alternate formatting of stack traces.  If limit is omitted or None, all entries are extracted.  A &#8220;pre-processed&#8221; stack trace entry is a quadruple (filename, line number, function name, text) representing the information that is usually printed for a stack trace.  The text is a string with leading and trailing whitespace stripped; if the source is not available it is None.    traceback.extract_stack([f[, limit]])\u00b6 Extract the raw traceback from the current stack frame.  The return value has the same format as for extract_tb().  The optional f and limit arguments have the same meaning as for print_stack().    traceback.format_list(list)\u00b6 Given a list of tuples as returned by extract_tb() or extract_stack(), return a list of strings ready for printing.  Each string in the resulting list corresponds to the item with the same index in the argument list.  Each string ends in a newline; the strings may contain internal newlines as well, for those items whose source text line is not None.    traceback.format_exception_only(type, value)\u00b6 Format the exception part of a traceback.  The arguments are the exception type and value such as given by sys.last_type and sys.last_value.  The return value is a list of strings, each ending in a newline.  Normally, the list contains a single string; however, for SyntaxError exceptions, it contains several lines that (when printed) display detailed information about where the syntax error occurred.  The message indicating which exception occurred is the always last string in the list.    traceback.format_exception(type, value, tb[, limit])\u00b6 Format a stack trace and the exception information.  The arguments  have the same meaning as the corresponding arguments to print_exception().  The return value is a list of strings, each ending in a newline and some containing internal newlines.  When these lines are concatenated and printed, exactly the same text is printed as does print_exception().    traceback.format_tb(tb[, limit])\u00b6 A shorthand for format_list(extract_tb(tb, limit)).    traceback.format_stack([f[, limit]])\u00b6 A shorthand for format_list(extract_stack(f, limit)).    traceback.tb_lineno(tb)\u00b6 This function returns the current line number set in the traceback object.  This function was necessary because in versions of Python prior to 2.3 when the -O flag was passed to Python the tb.tb_lineno was not updated correctly.  This function has no use in versions past 2.3.   27.10.1. Traceback Examples\u00b6 This simple example implements a basic read-eval-print loop, similar to (but less useful than) the standard Python interactive interpreter loop.  For a more complete implementation of the interpreter loop, refer to the code module. import sys, traceback  def run_user_code(envdir):     source = raw_input(\">>> \")     try:         exec source in envdir     except:         print \"Exception in user code:\"         print &#39;-&#39;*60         traceback.print_exc(file=sys.stdout)         print &#39;-&#39;*60  envdir = {} while 1:     run_user_code(envdir)   The following example demonstrates the different ways to print and format the exception and traceback: import sys, traceback  def lumberjack():     bright_side_of_death()  def bright_side_of_death():     return tuple()[0]  try:     lumberjack() except IndexError:     exc_type, exc_value, exc_traceback = sys.exc_info()     print \"*** print_tb:\"     traceback.print_tb(exc_traceback, limit=1, file=sys.stdout)     print \"*** print_exception:\"     traceback.print_exception(exc_type, exc_value, exc_traceback,                               limit=2, file=sys.stdout)     print \"*** print_exc:\"     traceback.print_exc()     print \"*** format_exc, first and last line:\"     formatted_lines = traceback.format_exc().splitlines()     print formatted_lines[0]     print formatted_lines[-1]     print \"*** format_exception:\"     print repr(traceback.format_exception(exc_type, exc_value,                                           exc_traceback))     print \"*** extract_tb:\"     print repr(traceback.extract_tb(exc_traceback))     print \"*** format_tb:\"     print repr(traceback.format_tb(exc_traceback))     print \"*** tb_lineno:\", exc_traceback.tb_lineno   The output for the example would look similar to this: *** print_tb:   File \"<doctest...>\", line 10, in <module>     lumberjack() *** print_exception: Traceback (most recent call last):   File \"<doctest...>\", line 10, in <module>     lumberjack()   File \"<doctest...>\", line 4, in lumberjack     bright_side_of_death() IndexError: tuple index out of range *** print_exc: Traceback (most recent call last):   File \"<doctest...>\", line 10, in <module>     lumberjack()   File \"<doctest...>\", line 4, in lumberjack     bright_side_of_death() IndexError: tuple index out of range *** format_exc, first and last line: Traceback (most recent call last): IndexError: tuple index out of range *** format_exception: ['Traceback (most recent call last):\\n',  '  File \"<doctest...>\", line 10, in <module>\\n    lumberjack()\\n',  '  File \"<doctest...>\", line 4, in lumberjack\\n    bright_side_of_death()\\n',  '  File \"<doctest...>\", line 7, in bright_side_of_death\\n    return tuple()[0]\\n',  'IndexError: tuple index out of range\\n'] *** extract_tb: [('<doctest...>', 10, '<module>', 'lumberjack()'),  ('<doctest...>', 4, 'lumberjack', 'bright_side_of_death()'),  ('<doctest...>', 7, 'bright_side_of_death', 'return tuple()[0]')] *** format_tb: ['  File \"<doctest...>\", line 10, in <module>\\n    lumberjack()\\n',  '  File \"<doctest...>\", line 4, in lumberjack\\n    bright_side_of_death()\\n',  '  File \"<doctest...>\", line 7, in bright_side_of_death\\n    return tuple()[0]\\n'] *** tb_lineno: 10  The following example shows the different ways to print and format the stack: >>> import traceback >>> def another_function(): ...     lumberstack() ... >>> def lumberstack(): ...     traceback.print_stack() ...     print repr(traceback.extract_stack()) ...     print repr(traceback.format_stack()) ... >>> another_function()   File \"<doctest>\", line 10, in <module>     another_function()   File \"<doctest>\", line 3, in another_function     lumberstack()   File \"<doctest>\", line 6, in lumberstack     traceback.print_stack() [(&#39;<doctest>&#39;, 10, &#39;<module>&#39;, &#39;another_function()&#39;),  (&#39;<doctest>&#39;, 3, &#39;another_function&#39;, &#39;lumberstack()&#39;),  (&#39;<doctest>&#39;, 7, &#39;lumberstack&#39;, &#39;print repr(traceback.extract_stack())&#39;)] [&#39;  File \"<doctest>\", line 10, in <module>\\n    another_function()\\n&#39;,  &#39;  File \"<doctest>\", line 3, in another_function\\n    lumberstack()\\n&#39;,  &#39;  File \"<doctest>\", line 8, in lumberstack\\n    print repr(traceback.format_stack())\\n&#39;]   This last example demonstrates the final few formatting functions: >>> import traceback >>> traceback.format_list([(&#39;spam.py&#39;, 3, &#39;<module>&#39;, &#39;spam.eggs()&#39;), ...                        (&#39;eggs.py&#39;, 42, &#39;eggs&#39;, &#39;return \"bacon\"&#39;)]) [&#39;  File \"spam.py\", line 3, in <module>\\n    spam.eggs()\\n&#39;,  &#39;  File \"eggs.py\", line 42, in eggs\\n    return \"bacon\"\\n&#39;] >>> an_error = IndexError(&#39;tuple index out of range&#39;) >>> traceback.format_exception_only(type(an_error), an_error) [&#39;IndexError: tuple index out of range\\n&#39;]"},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.extract_stack","title":"traceback.extract_stack","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.extract_tb","title":"traceback.extract_tb","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.format_exc","title":"traceback.format_exc","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.format_exception","title":"traceback.format_exception","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.format_exception_only","title":"traceback.format_exception_only","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.format_list","title":"traceback.format_list","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.format_stack","title":"traceback.format_stack","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.format_tb","title":"traceback.format_tb","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.print_exc","title":"traceback.print_exc","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.print_exception","title":"traceback.print_exception","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.print_last","title":"traceback.print_last","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.print_stack","title":"traceback.print_stack","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.print_tb","title":"traceback.print_tb","description":""},{"url":"http:\/\/docs.python.org\/library\/traceback.html#traceback.tb_lineno","title":"traceback.tb_lineno","description":""},{"url":"http:\/\/docs.python.org\/library\/atexit.html","title":"atexit","description":"27.9. atexit &#8212; Exit handlers\u00b6  New in version 2.0. Source code: Lib\/atexit.py  The atexit module defines a single function to register cleanup functions.  Functions thus registered are automatically executed upon normal interpreter termination.  The order in which the functions are called is not defined; if you have cleanup operations that depend on each other, you should wrap them in a function and register that one.  This keeps atexit simple. Note: the functions registered via this module are not called when the program is killed by a signal not handled by Python, when a Python fatal internal error is detected, or when os._exit() is called. This is an alternate interface to the functionality provided by the sys.exitfunc variable. Note: This module is unlikely to work correctly when used with other code that sets sys.exitfunc.  In particular, other core Python modules are free to use atexit without the programmer&#8217;s knowledge.  Authors who use sys.exitfunc should convert their code to use atexit instead.  The simplest way to convert code that sets sys.exitfunc is to import atexit and register the function that had been bound to sys.exitfunc.   atexit.register(func[, *args[, **kargs]])\u00b6 Register func as a function to be executed at termination.  Any optional arguments that are to be passed to func must be passed as arguments to register(). At normal program termination (for instance, if sys.exit() is called or the main module&#8217;s execution completes), all functions registered are called in last in, first out order.  The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later. If an exception is raised during execution of the exit handlers, a traceback is printed (unless SystemExit is raised) and the exception information is saved.  After all exit handlers have had a chance to run the last exception to be raised is re-raised.  Changed in version 2.6: This function now returns func which makes it possible to use it as a decorator without binding the original name to None.    See also  Module readline Useful example of atexit to read and write readline history files.    27.9.1. atexit Example\u00b6 The following simple example demonstrates how a module can initialize a counter from a file when it is imported and save the counter&#8217;s updated value automatically when the program terminates without relying on the application making an explicit call into this module at termination. try:     _count = int(open(\"\/tmp\/counter\").read()) except IOError:     _count = 0  def incrcounter(n):     global _count     _count = _count + n  def savecounter():     open(\"\/tmp\/counter\", \"w\").write(\"%d\"  _count)  import atexit atexit.register(savecounter)   Positional and keyword arguments may also be passed to register() to be passed along to the registered function when it is called: def goodbye(name, adjective):     print &#39;Goodbye, %s, it was %s to meet you.&#39;  (name, adjective)  import atexit atexit.register(goodbye, &#39;Donny&#39;, &#39;nice&#39;)  # or: atexit.register(goodbye, adjective=&#39;nice&#39;, name=&#39;Donny&#39;)   Usage as a decorator: import atexit  @atexit.register def goodbye():     print \"You are now leaving the Python sector.\"   This obviously only works with functions that don&#8217;t take arguments."},{"url":"http:\/\/docs.python.org\/library\/atexit.html#atexit.register","title":"atexit.register","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html","title":"warnings","description":"27.6. warnings &#8212; Warning control\u00b6  New in version 2.1. Source code: Lib\/warnings.py  Warning messages are typically issued in situations where it is useful to alert the user of some condition in a program, where that condition (normally) doesn&#8217;t warrant raising an exception and terminating the program.  For example, one might want to issue a warning when a program uses an obsolete module. Python programmers issue warnings by calling the warn() function defined in this module.  (C programmers use PyErr_WarnEx(); see Exception Handling for details). Warning messages are normally written to sys.stderr, but their disposition can be changed flexibly, from ignoring all warnings to turning them into exceptions.  The disposition of warnings can vary based on the warning category (see below), the text of the warning message, and the source location where it is issued.  Repetitions of a particular warning for the same source location are typically suppressed. There are two stages in warning control: first, each time a warning is issued, a determination is made whether a message should be issued or not; next, if a message is to be issued, it is formatted and printed using a user-settable hook. The determination whether to issue a warning message is controlled by the warning filter, which is a sequence of matching rules and actions. Rules can be added to the filter by calling filterwarnings() and reset to its default state by calling resetwarnings(). The printing of warning messages is done by calling showwarning(), which may be overridden; the default implementation of this function formats the message by calling formatwarning(), which is also available for use by custom implementations.  See also logging.captureWarnings() allows you to handle all warnings with the standard logging infrastructure.   27.6.1. Warning Categories\u00b6 There are a number of built-in exceptions that represent warning categories. This categorization is useful to be able to filter out groups of warnings.  The following warnings category classes are currently defined:       Class Description    Warning This is the base class of all warning category classes.  It is a subclass of Exception.  UserWarning The default category for warn().  DeprecationWarning Base category for warnings about deprecated features (ignored by default).  SyntaxWarning Base category for warnings about dubious syntactic features.  RuntimeWarning Base category for warnings about dubious runtime features.  FutureWarning Base category for warnings about constructs that will change semantically in the future.  PendingDeprecationWarning Base category for warnings about features that will be deprecated in the future (ignored by default).  ImportWarning Base category for warnings triggered during the process of importing a module (ignored by default).  UnicodeWarning Base category for warnings related to Unicode.    While these are technically built-in exceptions, they are documented here, because conceptually they belong to the warnings mechanism. User code can define additional warning categories by subclassing one of the standard warning categories.  A warning category must always be a subclass of the Warning class.  Changed in version 2.7: DeprecationWarning is ignored by default.   27.6.2. The Warnings Filter\u00b6 The warnings filter controls whether warnings are ignored, displayed, or turned into errors (raising an exception). Conceptually, the warnings filter maintains an ordered list of filter specifications; any specific warning is matched against each filter specification in the list in turn until a match is found; the match determines the disposition of the match.  Each entry is a tuple of the form (action, message, category, module, lineno), where:  action is one of the following strings:       Value  Disposition     \"error\"  turn matching warnings into exceptions   \"ignore\"  never print matching warnings   \"always\"  always print matching warnings   \"default\"  print the first occurrence of matching warnings for each location where the warning is issued   \"module\"  print the first occurrence of matching warnings for each module where the warning is issued   \"once\"  print only the first occurrence of matching warnings, regardless of location      message is a string containing a regular expression that the warning message must match (the match is compiled to always be case-insensitive).  category is a class (a subclass of Warning) of which the warning category must be a subclass in order to match.  module is a string containing a regular expression that the module name must match (the match is compiled to be case-sensitive).  lineno is an integer that the line number where the warning occurred must match, or 0 to match all line numbers.   Since the Warning class is derived from the built-in Exception class, to turn a warning into an error we simply raise category(message). The warnings filter is initialized by -W options passed to the Python interpreter command line.  The interpreter saves the arguments for all -W options without interpretation in sys.warnoptions; the warnings module parses these when it is first imported (invalid options are ignored, after printing a message to sys.stderr).  27.6.2.1. Default Warning Filters\u00b6 By default, Python installs several warning filters, which can be overridden by the command-line options passed to -W and calls to filterwarnings().  PendingDeprecationWarning, and ImportWarning are ignored. BytesWarning is ignored unless the -b option is given once or twice; in this case this warning is either printed (-b) or turned into an exception (-bb).     27.6.3. Temporarily Suppressing Warnings\u00b6 If you are using code that you know will raise a warning, such as a deprecated function, but do not want to see the warning, then it is possible to suppress the warning using the catch_warnings context manager: import warnings  def fxn():     warnings.warn(\"deprecated\", DeprecationWarning)  with warnings.catch_warnings():     warnings.simplefilter(\"ignore\")     fxn()   While within the context manager all warnings will simply be ignored. This allows you to use known-deprecated code without having to see the warning while not suppressing the warning for other code that might not be aware of its use of deprecated code.  Note: this can only be guaranteed in a single-threaded application. If two or more threads use the catch_warnings context manager at the same time, the behavior is undefined.   27.6.4. Testing Warnings\u00b6 To test warnings raised by code, use the catch_warnings context manager. With it you can temporarily mutate the warnings filter to facilitate your testing. For instance, do the following to capture all raised warnings to check: import warnings  def fxn():     warnings.warn(\"deprecated\", DeprecationWarning)  with warnings.catch_warnings(record=True) as w:     # Cause all warnings to always be triggered.     warnings.simplefilter(\"always\")     # Trigger a warning.     fxn()     # Verify some things     assert len(w) == 1     assert issubclass(w[-1].category, DeprecationWarning)     assert \"deprecated\" in str(w[-1].message)   One can also cause all warnings to be exceptions by using error instead of always. One thing to be aware of is that if a warning has already been raised because of a once\/default rule, then no matter what filters are set the warning will not be seen again unless the warnings registry related to the warning has been cleared. Once the context manager exits, the warnings filter is restored to its state when the context was entered. This prevents tests from changing the warnings filter in unexpected ways between tests and leading to indeterminate test results. The showwarning() function in the module is also restored to its original value.  Note: this can only be guaranteed in a single-threaded application. If two or more threads use the catch_warnings context manager at the same time, the behavior is undefined. When testing multiple operations that raise the same kind of warning, it is important to test them in a manner that confirms each operation is raising a new warning (e.g. set warnings to be raised as exceptions and check the operations raise exceptions, check that the length of the warning list continues to increase after each operation, or else delete the previous entries from the warnings list before each new operation).   27.6.5. Updating Code For New Versions of Python\u00b6 Warnings that are only of interest to the developer are ignored by default. As such you should make sure to test your code with typically ignored warnings made visible. You can do this from the command-line by passing -Wd to the interpreter (this is shorthand for -W default).  This enables default handling for all warnings, including those that are ignored by default. To change what action is taken for encountered warnings you simply change what argument is passed to -W, e.g. -W error. See the -W flag for more details on what is possible. To programmatically do the same as -Wd, use: warnings.simplefilter(&#39;default&#39;)   Make sure to execute this code as soon as possible. This prevents the registering of what warnings have been raised from unexpectedly influencing how future warnings are treated. Having certain warnings ignored by default is done to prevent a user from seeing warnings that are only of interest to the developer. As you do not necessarily have control over what interpreter a user uses to run their code, it is possible that a new version of Python will be released between your release cycles.  The new interpreter release could trigger new warnings in your code that were not there in an older interpreter, e.g. DeprecationWarning for a module that you are using. While you as a developer want to be notified that your code is using a deprecated module, to a user this information is essentially noise and provides no benefit to them.   27.6.6. Available Functions\u00b6   warnings.warn(message[, category[, stacklevel]])\u00b6 Issue a warning, or maybe ignore it or raise an exception.  The category argument, if given, must be a warning category class (see above); it defaults to UserWarning.  Alternatively message can be a Warning instance, in which case category will be ignored and message.__class__ will be used. In this case the message text will be str(message). This function raises an exception if the particular warning issued is changed into an error by the warnings filter see above.  The stacklevel argument can be used by wrapper functions written in Python, like this: def deprecation(message):     warnings.warn(message, DeprecationWarning, stacklevel=2)   This makes the warning refer to deprecation()&#8216;s caller, rather than to the source of deprecation() itself (since the latter would defeat the purpose of the warning message).     warnings.warn_explicit(message, category, filename, lineno[, module[, registry[, module_globals]]])\u00b6 This is a low-level interface to the functionality of warn(), passing in explicitly the message, category, filename and line number, and optionally the module name and the registry (which should be the __warningregistry__ dictionary of the module).  The module name defaults to the filename with .py stripped; if no registry is passed, the warning is never suppressed. message must be a string and category a subclass of Warning or message may be a Warning instance, in which case category will be ignored. module_globals, if supplied, should be the global namespace in use by the code for which the warning is issued.  (This argument is used to support displaying source for modules found in zipfiles or other non-filesystem import sources).  Changed in version 2.5: Added the module_globals parameter.     warnings.warnpy3k(message[, category[, stacklevel]])\u00b6 Issue a warning related to Python 3.x deprecation. Warnings are only shown when Python is started with the -3 option. Like warn() message must be a string and category a subclass of Warning. warnpy3k() is using DeprecationWarning as default warning class.  New in version 2.6.     warnings.showwarning(message, category, filename, lineno[, file[, line]])\u00b6 Write a warning to a file.  The default implementation calls formatwarning(message, category, filename, lineno, line) and writes the resulting string to file, which defaults to sys.stderr.  You may replace this function with an alternative implementation by assigning to warnings.showwarning. line is a line of source code to be included in the warning message; if line is not supplied, showwarning() will try to read the line specified by filename and lineno.  Changed in version 2.7: The line argument is required to be supported.     warnings.formatwarning(message, category, filename, lineno[, line])\u00b6 Format a warning the standard way.  This returns a string which may contain embedded newlines and ends in a newline.  line is a line of source code to be included in the warning message; if line is not supplied, formatwarning() will try to read the line specified by filename and lineno.  Changed in version 2.6: Added the line argument.     warnings.filterwarnings(action[, message[, category[, module[, lineno[, append]]]]])\u00b6 Insert an entry into the list of warnings filter specifications.  The entry is inserted at the front by default; if append is true, it is inserted at the end.  This checks the types of the arguments, compiles the message and module regular expressions, and inserts them as a tuple in the list of warnings filters.  Entries closer to the front of the list override entries later in the list, if both match a particular warning.  Omitted arguments default to a value that matches everything.    warnings.simplefilter(action[, category[, lineno[, append]]])\u00b6 Insert a simple entry into the list of warnings filter specifications.  The meaning of the function parameters is as for filterwarnings(), but regular expressions are not needed as the filter inserted always matches any message in any module as long as the category and line number match.    warnings.resetwarnings()\u00b6 Reset the warnings filter.  This discards the effect of all previous calls to filterwarnings(), including that of the -W command line options and calls to simplefilter().    27.6.7. Available Context Managers\u00b6   class warnings.catch_warnings([*, record=False, module=None])\u00b6 A context manager that copies and, upon exit, restores the warnings filter and the showwarning() function. If the record argument is False (the default) the context manager returns None on entry. If record is True, a list is returned that is progressively populated with objects as seen by a custom showwarning() function (which also suppresses output to sys.stdout). Each object in the list has attributes with the same names as the arguments to showwarning(). The module argument takes a module that will be used instead of the module returned when you import warnings whose filter will be protected. This argument exists primarily for testing the warnings module itself.  Note The catch_warnings manager works by replacing and then later restoring the module&#8217;s showwarning() function and internal list of filter specifications.  This means the context manager is modifying global state and therefore is not thread-safe.   Note In Python 3.0, the arguments to the constructor for catch_warnings are keyword-only arguments.   New in version 2.6."},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.catch_warnings","title":"warnings.catch_warnings","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.filterwarnings","title":"warnings.filterwarnings","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.formatwarning","title":"warnings.formatwarning","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.resetwarnings","title":"warnings.resetwarnings","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.showwarning","title":"warnings.showwarning","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.simplefilter","title":"warnings.simplefilter","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.warn","title":"warnings.warn","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.warn_explicit","title":"warnings.warn_explicit","description":""},{"url":"http:\/\/docs.python.org\/library\/warnings.html#warnings.warnpy3k","title":"warnings.warnpy3k","description":""},{"url":"http:\/\/docs.python.org\/library\/abc.html","title":"abc","description":"27.8. abc &#8212; Abstract Base Classes\u00b6  New in version 2.6. Source code: Lib\/abc.py  This module provides the infrastructure for defining abstract base classes (ABCs) in Python, as outlined in PEP 3119; see the PEP for why this was added to Python. (See also PEP 3141 and the numbers module regarding a type hierarchy for numbers based on ABCs.) The collections module has some concrete classes that derive from ABCs; these can, of course, be further derived. In addition the collections module has some ABCs that can be used to test whether a class or instance provides a particular interface, for example, is it hashable or a mapping. This module provides the following class:   class abc.ABCMeta\u00b6 Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC.  An ABC can be subclassed directly, and then acts as a mix-in class.  You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as &#8220;virtual subclasses&#8221; &#8211; these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won&#8217;t show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). [1] Classes created with a metaclass of ABCMeta have the following method:   register(subclass)\u00b6 Register subclass as a &#8220;virtual subclass&#8221; of this ABC. For example: from abc import ABCMeta  class MyABC:     __metaclass__ = ABCMeta  MyABC.register(tuple)  assert issubclass(tuple, MyABC) assert isinstance((), MyABC)     You can also override this method in an abstract base class:   __subclasshook__(subclass)\u00b6 (Must be defined as a class method.) Check whether subclass is considered a subclass of this ABC.  This means that you can customize the behavior of issubclass further without the need to call register() on every class you want to consider a subclass of the ABC.  (This class method is called from the __subclasscheck__() method of the ABC.) This method should return True, False or NotImplemented.  If it returns True, the subclass is considered a subclass of this ABC. If it returns False, the subclass is not considered a subclass of this ABC, even if it would normally be one.  If it returns NotImplemented, the subclass check is continued with the usual mechanism.   For a demonstration of these concepts, look at this example ABC definition: class Foo(object):     def __getitem__(self, index):         ...     def __len__(self):         ...     def get_iterator(self):         return iter(self)  class MyIterable:     __metaclass__ = ABCMeta      @abstractmethod     def __iter__(self):         while False:             yield None      def get_iterator(self):         return self.__iter__()      @classmethod     def __subclasshook__(cls, C):         if cls is MyIterable:             if any(\"__iter__\" in B.__dict__ for B in C.__mro__):                 return True         return NotImplemented  MyIterable.register(Foo)   The ABC MyIterable defines the standard iterable method, __iter__(), as an abstract method.  The implementation given here can still be called from subclasses.  The get_iterator() method is also part of the MyIterable abstract base class, but it does not have to be overridden in non-abstract derived classes. The __subclasshook__() class method defined here says that any class that has an __iter__() method in its __dict__ (or in that of one of its base classes, accessed via the __mro__ list) is considered a MyIterable too. Finally, the last line makes Foo a virtual subclass of MyIterable, even though it does not define an __iter__() method (it uses the old-style iterable protocol, defined in terms of __len__() and __getitem__()).  Note that this will not make get_iterator available as a method of Foo, so it is provided separately.   It also provides the following decorators:   abc.abstractmethod(function)\u00b6 A decorator indicating abstract methods. Using this decorator requires that the class&#8217;s metaclass is ABCMeta or is derived from it. A class that has a metaclass derived from ABCMeta cannot be instantiated unless all of its abstract methods and properties are overridden. The abstract methods can be called using any of the normal &#8216;super&#8217; call mechanisms. Dynamically adding abstract methods to a class, or attempting to modify the abstraction status of a method or class once it is created, are not supported.  The abstractmethod() only affects subclasses derived using regular inheritance; &#8220;virtual subclasses&#8221; registered with the ABC&#8217;s register() method are not affected. Usage: class C:     __metaclass__ = ABCMeta     @abstractmethod     def my_abstract_method(self, ...):         ...    Note Unlike Java abstract methods, these abstract methods may have an implementation. This implementation can be called via the super() mechanism from the class that overrides it.  This could be useful as an end-point for a super-call in a framework that uses cooperative multiple-inheritance.      abc.abstractproperty([fget[, fset[, fdel[, doc]]]])\u00b6 A subclass of the built-in property(), indicating an abstract property. Using this function requires that the class&#8217;s metaclass is ABCMeta or is derived from it. A class that has a metaclass derived from ABCMeta cannot be instantiated unless all of its abstract methods and properties are overridden. The abstract properties can be called using any of the normal &#8216;super&#8217; call mechanisms. Usage: class C:     __metaclass__ = ABCMeta     @abstractproperty     def my_abstract_property(self):         ...   This defines a read-only property; you can also define a read-write abstract property using the &#8216;long&#8217; form of property declaration: class C:     __metaclass__ = ABCMeta     def getx(self): ...     def setx(self, value): ...     x = abstractproperty(getx, setx)     Footnotes    [1]C++ programmers should note that Python&#8217;s virtual base class concept is not the same as C++&#8217;s."},{"url":"http:\/\/docs.python.org\/library\/abc.html#abc.ABCMeta","title":"abc.ABCMeta","description":""},{"url":"http:\/\/docs.python.org\/library\/abc.html#abc.ABCMeta.__subclasshook__","title":"abc.ABCMeta.__subclasshook__","description":""},{"url":"http:\/\/docs.python.org\/library\/abc.html#abc.ABCMeta.register","title":"abc.ABCMeta.register","description":""},{"url":"http:\/\/docs.python.org\/library\/abc.html#abc.abstractmethod","title":"abc.abstractmethod","description":""},{"url":"http:\/\/docs.python.org\/library\/abc.html#abc.abstractproperty","title":"abc.abstractproperty","description":""},{"url":"http:\/\/docs.python.org\/library\/__future__.html","title":"__future__","description":"27.11. __future__ &#8212; Future statement definitions\u00b6 Source code: Lib\/__future__.py  __future__ is a real module, and serves three purposes:  To avoid confusing existing tools that analyze import statements and expect to find the modules they&#8217;re importing. To ensure that future statements run under releases prior to 2.1 at least yield runtime exceptions (the import of __future__ will fail, because there was no module of that name prior to 2.1). To document when incompatible changes were introduced, and when they will be &#8212; or were &#8212; made mandatory.  This is a form of executable documentation, and can be inspected programmatically via importing __future__ and examining its contents.  Each statement in __future__.py is of the form: FeatureName = _Feature(OptionalRelease, MandatoryRelease,                        CompilerFlag)   where, normally, OptionalRelease is less than MandatoryRelease, and both are 5-tuples of the same form as sys.version_info: (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int  PY_MINOR_VERSION, # the 1; an int  PY_MICRO_VERSION, # the 0; an int  PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string  PY_RELEASE_SERIAL # the 3; an int )   OptionalRelease records the first release in which the feature was accepted. In the case of a MandatoryRelease that has not yet occurred, MandatoryRelease predicts the release in which the feature will become part of the language. Else MandatoryRelease records when the feature became part of the language; in releases at or after that, modules no longer need a future statement to use the feature in question, but may continue to use such imports. MandatoryRelease may also be None, meaning that a planned feature got dropped. Instances of class _Feature have two corresponding methods, getOptionalRelease() and getMandatoryRelease(). CompilerFlag is the (bitfield) flag that should be passed in the fourth argument to the built-in function compile() to enable the feature in dynamically compiled code.  This flag is stored in the compiler_flag attribute on _Feature instances. No feature description will ever be deleted from __future__. Since its introduction in Python 2.1 the following features have found their way into the language using this mechanism:         feature optional in mandatory in effect    nested_scopes 2.1.0b1 2.2 PEP 227: Statically Nested Scopes  generators 2.2.0a1 2.3 PEP 255: Simple Generators  division 2.2.0a2 3.0 PEP 238: Changing the Division Operator  absolute_import 2.5.0a1 2.7 PEP 328: Imports: Multi-Line and Absolute\/Relative  with_statement 2.5.0a1 2.6 PEP 343: The &#8220;with&#8221; Statement  print_function 2.6.0a2 3.0 PEP 3105: Make print a function  unicode_literals 2.6.0a2 3.0 PEP 3112: Bytes literals in Python 3000     See also  Future statements How the compiler treats future imports."},{"url":"http:\/\/docs.python.org\/library\/contextlib.html","title":"contextlib","description":"27.7. contextlib &#8212; Utilities for with-statement contexts\u00b6  New in version 2.5. Source code: Lib\/contextlib.py  This module provides utilities for common tasks involving the with statement. For more information see also Context Manager Types and With Statement Context Managers. Functions provided:   contextlib.contextmanager(func)\u00b6 This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods. A simple example (this is not recommended as a real way of generating HTML!): from contextlib import contextmanager  @contextmanager def tag(name):     print \"<%s>\" % name     yield     print \"<\/%s>\" % name  >>> with tag(\"h1\"): ...    print \"foo\" ... <h1> foo <\/h1>  The function being decorated must return a generator-iterator when called. This iterator must yield exactly one value, which will be bound to the targets in the with statement&#8217;s as clause, if any. At the point where the generator yields, the block nested in the with statement is executed.  The generator is then resumed after the block is exited. If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred.  Thus, you can use a try...except...finally statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the with statement that the exception has been handled, and execution will resume with the statement immediately following the with statement.     contextlib.nested(mgr1[, mgr2[, ...]])\u00b6 Combine multiple context managers into a single nested context manager. This function has been deprecated in favour of the multiple manager form of the with statement. The one advantage of this function over the multiple manager form of the with statement is that argument unpacking allows it to be used with a variable number of context managers as follows: from contextlib import nested  with nested(*managers):     do_something()   Note that if the __exit__() method of one of the nested context managers indicates an exception should be suppressed, no exception information will be passed to any remaining outer context managers. Similarly, if the __exit__() method of one of the nested managers raises an exception, any previous exception state will be lost; the new exception will be passed to the __exit__() methods of any remaining outer context managers. In general, __exit__() methods should avoid raising exceptions, and in particular they should not re-raise a passed-in exception. This function has two major quirks that have led to it being deprecated. Firstly, as the context managers are all constructed before the function is invoked, the __new__() and __init__() methods of the inner context managers are not actually covered by the scope of the outer context managers. That means, for example, that using nested() to open two files is a programming error as the first file will not be closed promptly if an exception is thrown when opening the second file. Secondly, if the __enter__() method of one of the inner context managers raises an exception that is caught and suppressed by the __exit__() method of one of the outer context managers, this construct will raise RuntimeError rather than skipping the body of the with statement. Developers that need to support nesting of a variable number of context managers can either use the warnings module to suppress the DeprecationWarning raised by this function or else use this function as a model for an application specific implementation.  Deprecated since version 2.7: The with-statement now supports this functionality directly (without the confusing error prone quirks).     contextlib.closing(thing)\u00b6 Return a context manager that closes thing upon completion of the block.  This is basically equivalent to: from contextlib import contextmanager  @contextmanager def closing(thing):     try:         yield thing     finally:         thing.close()   And lets you write code like this: from contextlib import closing import urllib  with closing(urllib.urlopen(&#39;http:\/\/www.python.org&#39;)) as page:     for line in page:         print line   without needing to explicitly close page.  Even if an error occurs, page.close() will be called when the with block is exited.    See also  PEP 0343 - The &#8220;with&#8221; statement The specification, background, and examples for the Python with statement."},{"url":"http:\/\/docs.python.org\/library\/contextlib.html#contextlib.closing","title":"contextlib.closing","description":""},{"url":"http:\/\/docs.python.org\/library\/contextlib.html#contextlib.contextmanager","title":"contextlib.contextmanager","description":""},{"url":"http:\/\/docs.python.org\/library\/contextlib.html#contextlib.nested","title":"contextlib.nested","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html","title":"gc","description":"27.12. gc &#8212; Garbage Collector interface\u00b6 This module provides an interface to the optional garbage collector.  It provides the ability to disable the collector, tune the collection frequency, and set debugging options.  It also provides access to unreachable objects that the collector found but cannot free.  Since the collector supplements the reference counting already used in Python, you can disable the collector if you are sure your program does not create reference cycles.  Automatic collection can be disabled by calling gc.disable().  To debug a leaking program call gc.set_debug(gc.DEBUG_LEAK). Notice that this includes gc.DEBUG_SAVEALL, causing garbage-collected objects to be saved in gc.garbage for inspection. The gc module provides the following functions:   gc.enable()\u00b6 Enable automatic garbage collection.    gc.disable()\u00b6 Disable automatic garbage collection.    gc.isenabled()\u00b6 Returns true if automatic collection is enabled.    gc.collect([generation])\u00b6 With no arguments, run a full collection.  The optional argument generation may be an integer specifying which generation to collect (from 0 to 2).  A ValueError is raised if the generation number  is invalid. The number of unreachable objects found is returned.  Changed in version 2.5: The optional generation argument was added.  Changed in version 2.6: The free lists maintained for a number of built-in types are cleared whenever a full collection or collection of the highest generation (2) is run.  Not all items in some free lists may be freed due to the particular implementation, in particular int and float.     gc.set_debug(flags)\u00b6 Set the garbage collection debugging flags. Debugging information will be written to sys.stderr.  See below for a list of debugging flags which can be combined using bit operations to control debugging.    gc.get_debug()\u00b6 Return the debugging flags currently set.    gc.get_objects()\u00b6 Returns a list of all objects tracked by the collector, excluding the list returned.  New in version 2.2.     gc.set_threshold(threshold0[, threshold1[, threshold2]])\u00b6 Set the garbage collection thresholds (the collection frequency). Setting threshold0 to zero disables collection. The GC classifies objects into three generations depending on how many collection sweeps they have survived.  New objects are placed in the youngest generation (generation 0).  If an object survives a collection it is moved into the next older generation.  Since generation 2 is the oldest generation, objects in that generation remain there after a collection.  In order to decide when to run, the collector keeps track of the number object allocations and deallocations since the last collection.  When the number of allocations minus the number of deallocations exceeds threshold0, collection starts.  Initially only generation 0 is examined.  If generation 0 has been examined more than threshold1 times since generation 1 has been examined, then generation 1 is examined as well.  Similarly, threshold2 controls the number of collections of generation 1 before collecting generation 2.     gc.get_count()\u00b6 Return the current collection  counts as a tuple of (count0, count1, count2).  New in version 2.5.     gc.get_threshold()\u00b6 Return the current collection thresholds as a tuple of (threshold0, threshold1, threshold2).    gc.get_referrers(*objs)\u00b6 Return the list of objects that directly refer to any of objs. This function will only locate those containers which support garbage collection; extension types which do refer to other objects but do not support garbage collection will not be found. Note that objects which have already been dereferenced, but which live in cycles and have not yet been collected by the garbage collector can be listed among the resulting referrers.  To get only currently live objects, call collect() before calling get_referrers(). Care must be taken when using objects returned by get_referrers() because some of them could still be under construction and hence in a temporarily invalid state. Avoid using get_referrers() for any purpose other than debugging.  New in version 2.2.     gc.get_referents(*objs)\u00b6 Return a list of objects directly referred to by any of the arguments. The referents returned are those objects visited by the arguments&#8217; C-level tp_traverse methods (if any), and may not be all objects actually directly reachable.  tp_traverse methods are supported only by objects that support garbage collection, and are only required to visit objects that may be involved in a cycle.  So, for example, if an integer is directly reachable from an argument, that integer object may or may not appear in the result list.  New in version 2.3.     gc.is_tracked(obj)\u00b6 Returns True if the object is currently tracked by the garbage collector, False otherwise.  As a general rule, instances of atomic types aren&#8217;t tracked and instances of non-atomic types (containers, user-defined objects...) are.  However, some type-specific optimizations can be present in order to suppress the garbage collector footprint of simple instances (e.g. dicts containing only atomic keys and values): >>> gc.is_tracked(0) False >>> gc.is_tracked(\"a\") False >>> gc.is_tracked([]) True >>> gc.is_tracked({}) False >>> gc.is_tracked({\"a\": 1}) False >>> gc.is_tracked({\"a\": []}) True    New in version 2.7.   The following variable is provided for read-only access (you can mutate its value but should not rebind it):   gc.garbage\u00b6 A list of objects which the collector found to be unreachable but could not be freed (uncollectable objects).  By default, this list contains only objects with __del__() methods. [1] Objects that have __del__() methods and are part of a reference cycle cause the entire reference cycle to be uncollectable, including objects not necessarily in the cycle but reachable only from it. Python doesn&#8217;t collect such cycles automatically because, in general, it isn&#8217;t possible for Python to guess a safe order in which to run the __del__() methods.  If you know a safe order, you can force the issue by examining the garbage list, and explicitly breaking cycles due to your objects within the list.  Note that these objects are kept alive even so by virtue of being in the garbage list, so they should be removed from garbage too.  For example, after breaking cycles, do del gc.garbage[:] to empty the list.  It&#8217;s generally better to avoid the issue by not creating cycles containing objects with __del__() methods, and garbage can be examined in that case to verify that no such cycles are being created. If DEBUG_SAVEALL is set, then all unreachable objects will be added to this list rather than freed.   The following constants are provided for use with set_debug():   gc.DEBUG_STATS\u00b6 Print statistics during collection.  This information can be useful when tuning the collection frequency.    gc.DEBUG_COLLECTABLE\u00b6 Print information on collectable objects found.    gc.DEBUG_UNCOLLECTABLE\u00b6 Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).  These objects will be added to the garbage list.    gc.DEBUG_INSTANCES\u00b6 When DEBUG_COLLECTABLE or DEBUG_UNCOLLECTABLE is set, print information about instance objects found.    gc.DEBUG_OBJECTS\u00b6 When DEBUG_COLLECTABLE or DEBUG_UNCOLLECTABLE is set, print information about objects other than instance objects found.    gc.DEBUG_SAVEALL\u00b6 When set, all unreachable objects found will be appended to garbage rather than being freed.  This can be useful for debugging a leaking program.    gc.DEBUG_LEAK\u00b6 The debugging flags necessary for the collector to print information about a leaking program (equal to DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | DEBUG_INSTANCES | DEBUG_OBJECTS | DEBUG_SAVEALL).  Footnotes    [1]Prior to Python 2.2, the list contained all instance objects in unreachable cycles,  not only those with __del__() methods."},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.collect","title":"gc.collect","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.disable","title":"gc.disable","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.enable","title":"gc.enable","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.get_count","title":"gc.get_count","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.get_debug","title":"gc.get_debug","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.get_objects","title":"gc.get_objects","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.get_referents","title":"gc.get_referents","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.get_referrers","title":"gc.get_referrers","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.get_threshold","title":"gc.get_threshold","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.is_tracked","title":"gc.is_tracked","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.isenabled","title":"gc.isenabled","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.set_debug","title":"gc.set_debug","description":""},{"url":"http:\/\/docs.python.org\/library\/gc.html#gc.set_threshold","title":"gc.set_threshold","description":""},{"url":"http:\/\/docs.python.org\/library\/user.html","title":"user","description":"27.15. user &#8212; User-specific configuration hook\u00b6  Deprecated since version 2.6: The user module has been removed in Python 3.0. As a policy, Python doesn&#8217;t run user-specified code on startup of Python programs.  (Only interactive sessions execute the script specified in the PYTHONSTARTUP environment variable if it exists). However, some programs or sites may find it convenient to allow users to have a standard customization file, which gets run when a program requests it.  This module implements such a mechanism.  A program that wishes to use the mechanism must execute the statement import user   The user module looks for a file .pythonrc.py in the user&#8217;s home directory and if it can be opened, executes it (using execfile()) in its own (the module user&#8216;s) global namespace.  Errors during this phase are not caught; that&#8217;s up to the program that imports the user module, if it wishes.  The home directory is assumed to be named by the HOME environment variable; if this is not set, the current directory is used. The user&#8217;s .pythonrc.py could conceivably test for sys.version if it wishes to do different things depending on the Python version. A warning to users: be very conservative in what you place in your .pythonrc.py file.  Since you don&#8217;t know which programs will use it, changing the behavior of standard modules or functions is generally not a good idea. A suggestion for programmers who wish to use this mechanism: a simple way to let users specify options for your package is to have them define variables in their .pythonrc.py file that you test in your module.  For example, a module spam that has a verbosity level can look for a variable user.spam_verbose, as follows: import user  verbose = bool(getattr(user, \"spam_verbose\", 0))   (The three-argument form of getattr() is used in case the user has not defined spam_verbose in their .pythonrc.py file.) Programs with extensive customization needs are better off reading a program-specific customization file. Programs with security or privacy concerns should not import this module; a user can easily break into a program by placing arbitrary code in the .pythonrc.py file. Modules for general use should not import this module; it may interfere with the operation of the importing program.  See also  Module site Site-wide customization mechanism."},{"url":"http:\/\/docs.python.org\/library\/site.html","title":"site","description":"27.14. site &#8212; Site-specific configuration hook\u00b6 Source code: Lib\/site.py  This module is automatically imported during initialization. The automatic import can be suppressed using the interpreter&#8217;s -S option. Importing this module will append site-specific paths to the module search path and add a few builtins. It starts by constructing up to four directories from a head and a tail part. For the head part, it uses sys.prefix and sys.exec_prefix; empty heads are skipped.  For the tail part, it uses the empty string and then lib\/site-packages (on Windows) or lib\/python|version|\/site-packages and then lib\/site-python (on Unix and Macintosh).  For each of the distinct head-tail combinations, it sees if it refers to an existing directory, and if so, adds it to sys.path and also inspects the newly added path for configuration files. A path configuration file is a file whose name has the form name.pth and exists in one of the four directories mentioned above; its contents are additional items (one per line) to be added to sys.path.  Non-existing items are never added to sys.path, and no check is made that the item refers to a directory rather than a file.  No item is added to sys.path more than once.  Blank lines and lines beginning with # are skipped.  Lines starting with import (followed by space or tab) are executed.  Changed in version 2.6: A space or tab is now required after the import keyword. For example, suppose sys.prefix and sys.exec_prefix are set to \/usr\/local.  The Python X.Y library is then installed in \/usr\/local\/lib\/pythonX.Y.  Suppose this has a subdirectory \/usr\/local\/lib\/pythonX.Y\/site-packages with three subsubdirectories, foo, bar and spam, and two path configuration files, foo.pth and bar.pth.  Assume foo.pth contains the following: # foo package configuration  foo bar bletch   and bar.pth contains: # bar package configuration  bar   Then the following version-specific directories are added to sys.path, in this order: \/usr\/local\/lib\/pythonX.Y\/site-packages\/bar \/usr\/local\/lib\/pythonX.Y\/site-packages\/foo   Note that bletch is omitted because it doesn&#8217;t exist; the bar directory precedes the foo directory because bar.pth comes alphabetically before foo.pth; and spam is omitted because it is not mentioned in either path configuration file. After these path manipulations, an attempt is made to import a module named sitecustomize, which can perform arbitrary site-specific customizations. It is typically created by a system administrator in the site-packages directory.  If this import fails with an ImportError exception, it is silently ignored. After this, an attempt is made to import a module named usercustomize, which can perform arbitrary user-specific customizations, if ENABLE_USER_SITE is true.  This file is intended to be created in the user site-packages directory (see below), which is part of sys.path unless disabled by -s.  An ImportError will be silently ignored. Note that for some non-Unix systems, sys.prefix and sys.exec_prefix are empty, and the path manipulations are skipped; however the import of sitecustomize and usercustomize is still attempted.   site.PREFIXES\u00b6 A list of prefixes for site-packages directories.  New in version 2.6.     site.ENABLE_USER_SITE\u00b6 Flag showing the status of the user site-packages directory.  True means that it is enabled and was added to sys.path.  False means that it was disabled by user request (with -s or PYTHONNOUSERSITE).  None means it was disabled for security reasons (mismatch between user or group id and effective id) or by an administrator.  New in version 2.6.     site.USER_SITE\u00b6 Path to the user site-packages for the running Python.  Can be None if getusersitepackages() hasn&#8217;t been called yet.  Default value is ~\/.local\/lib\/pythonX.Y\/site-packages for UNIX and non-framework Mac OS X builds, ~\/Library\/Python\/X.Y\/lib\/python\/site-packages for Mac framework builds, and \\Python\\PythonXY\\site-packages on Windows.  This directory is a site directory, which means that .pth files in it will be processed.  New in version 2.6.     site.USER_BASE\u00b6 Path to the base directory for the user site-packages.  Can be None if getuserbase() hasn&#8217;t been called yet.  Default value is ~\/.local for UNIX and Mac OS X non-framework builds, ~\/Library\/Python\/X.Y for Mac framework builds, and \\Python for Windows.  This value is used by Distutils to compute the installation directories for scripts, data files, Python modules, etc. for the user installation scheme.  See also PYTHONUSERBASE.  New in version 2.6.     site.addsitedir(sitedir, known_paths=None)\u00b6 Add a directory to sys.path and process its .pth files.  Typically used in sitecustomize or usercustomize (see above).    site.getsitepackages()\u00b6 Return a list containing all global site-packages directories (and possibly site-python).  New in version 2.7.     site.getuserbase()\u00b6 Return the path of the user base directory, USER_BASE.  If it is not initialized yet, this function will also set it, respecting PYTHONUSERBASE.  New in version 2.7.     site.getusersitepackages()\u00b6 Return the path of the user-specific site-packages directory, USER_SITE.  If it is not initialized yet, this function will also set it, respecting PYTHONNOUSERSITE and USER_BASE.  New in version 2.7.   The site module also provides a way to get the user directories from the command line: $ python3 -m site --user-site \/home\/user\/.local\/lib\/python3.3\/site-packages   If it is called without arguments, it will print the contents of sys.path on the standard output, followed by the value of USER_BASE and whether the directory exists, then the same thing for USER_SITE, and finally the value of ENABLE_USER_SITE.   --user-base\u00b6 Print the path to the user base directory.    --user-site\u00b6 Print the path to the user site-packages directory.  If both options are given, user base and user site will be printed (always in this order), separated by os.pathsep. If any option is given, the script will exit with one of these values: O if the user site-packages directory is enabled, 1 if it was disabled by the user, 2 if it is disabled for security reasons or by an administrator, and a value greater than 2 if there is an error.  See also PEP 370 &#8211; Per user site-packages directory"},{"url":"http:\/\/docs.python.org\/library\/site.html#site.addsitedir","title":"site.addsitedir","description":""},{"url":"http:\/\/docs.python.org\/library\/site.html#site.getsitepackages","title":"site.getsitepackages","description":""},{"url":"http:\/\/docs.python.org\/library\/site.html#site.getuserbase","title":"site.getuserbase","description":""},{"url":"http:\/\/docs.python.org\/library\/site.html#site.getusersitepackages","title":"site.getusersitepackages","description":""},{"url":"http:\/\/docs.python.org\/library\/distutils.html","title":"distutils","description":"27.17. distutils &#8212; Building and installing Python modules\u00b6 The distutils package provides support for building and installing additional modules into a Python installation.  The new modules may be either 100%-pure Python, or may be extension modules written in C, or may be collections of Python packages which include modules coded in both Python and C. This package is discussed in two separate chapters:  See also  Distributing Python Modules The manual for developers and packagers of Python modules.  This describes how to prepare distutils-based packages so that they may be easily installed into an existing Python installation. Installing Python Modules An &#8220;administrators&#8221; manual which includes information on installing modules into an existing Python installation. You do not need to be a Python programmer to read this manual."},{"url":"http:\/\/docs.python.org\/library\/fpectl.html","title":"fpectl","description":"27.16. fpectl &#8212; Floating point exception control\u00b6 Platforms: Unix  Note The fpectl module is not built by default, and its usage is discouraged and may be dangerous except in the hands of experts.  See also the section Limitations and other considerations on limitations for more details.  Most computers carry out floating point operations in conformance with the so-called IEEE-754 standard. On any real computer, some floating point operations produce results that cannot be expressed as a normal floating point value. For example, try >>> import math >>> math.exp(1000) inf >>> math.exp(1000) \/ math.exp(1000) nan   (The example above will work on many platforms. DEC Alpha may be one exception.) &#8220;Inf&#8221; is a special, non-numeric value in IEEE-754 that stands for &#8220;infinity&#8221;, and &#8220;nan&#8221; means &#8220;not a number.&#8221; Note that, other than the non-numeric results, nothing special happened when you asked Python to carry out those calculations. That is in fact the default behaviour prescribed in the IEEE-754 standard, and if it works for you, stop reading now. In some circumstances, it would be better to raise an exception and stop processing at the point where the faulty operation was attempted. The fpectl module is for use in that situation. It provides control over floating point units from several hardware manufacturers, allowing the user to turn on the generation of SIGFPE whenever any of the IEEE-754 exceptions Division by Zero, Overflow, or Invalid Operation occurs. In tandem with a pair of wrapper macros that are inserted into the C code comprising your python system, SIGFPE is trapped and converted into the Python FloatingPointError exception. The fpectl module defines the following functions and may raise the given exception:   fpectl.turnon_sigfpe()\u00b6 Turn on the generation of SIGFPE, and set up an appropriate signal handler.    fpectl.turnoff_sigfpe()\u00b6 Reset default handling of floating point exceptions.    exception fpectl.FloatingPointError\u00b6 After turnon_sigfpe() has been executed, a floating point operation that raises one of the IEEE-754 exceptions Division by Zero, Overflow, or Invalid operation will in turn raise this standard Python exception.   27.16.1. Example\u00b6 The following example demonstrates how to start up and test operation of the fpectl module. >>> import fpectl >>> import fpetest >>> fpectl.turnon_sigfpe() >>> fpetest.test() overflow        PASS FloatingPointError: Overflow  div by 0        PASS FloatingPointError: Division by zero   [ more output from test elided ] >>> import math >>> math.exp(1000) Traceback (most recent call last):   File \"<stdin>\", line 1, in ? FloatingPointError: in math_1     27.16.2. Limitations and other considerations\u00b6 Setting up a given processor to trap IEEE-754 floating point errors currently requires custom code on a per-architecture basis. You may have to modify fpectl to control your particular hardware. Conversion of an IEEE-754 exception to a Python exception requires that the wrapper macros PyFPE_START_PROTECT and PyFPE_END_PROTECT be inserted into your code in an appropriate fashion.  Python itself has been modified to support the fpectl module, but many other codes of interest to numerical analysts have not. The fpectl module is not thread-safe.  See also Some files in the source distribution may be interesting in learning more about how this module operates. The include file Include\/pyfpe.h discusses the implementation of this module at some length. Modules\/fpetestmodule.c gives several examples of use. Many additional examples can be found in Objects\/floatobject.c."},{"url":"http:\/\/docs.python.org\/library\/fpectl.html#fpectl.turnoff_sigfpe","title":"fpectl.turnoff_sigfpe","description":""},{"url":"http:\/\/docs.python.org\/library\/fpectl.html#fpectl.turnon_sigfpe","title":"fpectl.turnon_sigfpe","description":""},{"url":"http:\/\/docs.python.org\/library\/bastion.html","title":"Bastion","description":"29.2. Bastion &#8212; Restricting access to objects\u00b6  Deprecated since version 2.6: The Bastion module has been removed in Python 3.0.  Changed in version 2.3: Disabled module.  Note The documentation has been left in place to help in reading old code that uses the module.  According to the dictionary, a bastion is &#8220;a fortified area or position&#8221;, or &#8220;something that is considered a stronghold.&#8221;  It&#8217;s a suitable name for this module, which provides a way to forbid access to certain attributes of an object.  It must always be used with the rexec module, in order to allow restricted-mode programs access to certain safe attributes of an object, while denying access to other, unsafe attributes.   Bastion.Bastion(object[, filter[, name[, class]]])\u00b6 Protect the object object, returning a bastion for the object.  Any attempt to access one of the object&#8217;s attributes will have to be approved by the filter function; if the access is denied an AttributeError exception will be raised. If present, filter must be a function that accepts a string containing an attribute name, and returns true if access to that attribute will be permitted; if filter returns false, the access is denied.  The default filter denies access to any function beginning with an underscore ('_').  The bastion&#8217;s string representation will be <Bastion for name> if a value for name is provided; otherwise, repr(object) will be used. class, if present, should be a subclass of BastionClass;  see the code in bastion.py for the details.  Overriding the default BastionClass will rarely be required.     class Bastion.BastionClass(getfunc, name)\u00b6 Class which actually implements bastion objects.  This is the default class used by Bastion().  The getfunc parameter is a function which returns the value of an attribute which should be exposed to the restricted execution environment when called with the name of the attribute as the only parameter. name is used to construct the repr() of the BastionClass instance."},{"url":"http:\/\/docs.python.org\/library\/bastion.html#Bastion.Bastion","title":"Bastion.Bastion","description":""},{"url":"http:\/\/docs.python.org\/library\/bastion.html#Bastion.BastionClass","title":"Bastion.BastionClass","description":""},{"url":"http:\/\/docs.python.org\/library\/codeop.html","title":"codeop","description":"28.2. codeop &#8212; Compile Python code\u00b6 The codeop module provides utilities upon which the Python read-eval-print loop can be emulated, as is done in the code module.  As a result, you probably don&#8217;t want to use the module directly; if you want to include such a loop in your program you probably want to use the code module instead. There are two parts to this job:  Being able to tell if a line of input completes a Python  statement: in short, telling whether to print &#8216;>>>&#8216; or &#8216;...&#8216; next. Remembering which future statements the user has entered, so  subsequent input can be compiled with these in effect.  The codeop module provides a way of doing each of these things, and a way of doing them both. To do just the former:   codeop.compile_command(source[, filename[, symbol]])\u00b6 Tries to compile source, which should be a string of Python code and return a code object if source is valid Python code. In that case, the filename attribute of the code object will be filename, which defaults to '<input>'. Returns None if source is not valid Python code, but is a prefix of valid Python code. If there is a problem with source, an exception will be raised. SyntaxError is raised if there is invalid Python syntax, and OverflowError or ValueError if there is an invalid literal. The symbol argument determines whether source is compiled as a statement ('single', the default) or as an expression ('eval').  Any other value will cause ValueError to  be raised.  Note It is possible (but not likely) that the parser stops parsing with a successful outcome before reaching the end of the source; in this case, trailing symbols may be ignored instead of causing an error.  For example, a backslash followed by two newlines may be followed by arbitrary garbage. This will be fixed once the API for the parser is better.      class codeop.Compile\u00b6 Instances of this class have __call__() methods identical in signature to the built-in function compile(), but with the difference that if the instance compiles program text containing a __future__ statement, the instance &#8216;remembers&#8217; and compiles all subsequent program texts with the statement in force.    class codeop.CommandCompiler\u00b6 Instances of this class have __call__() methods identical in signature to compile_command(); the difference is that if the instance compiles program text containing a __future__ statement, the instance &#8216;remembers&#8217; and compiles all subsequent program texts with the statement in force.  A note on version compatibility: the Compile and CommandCompiler are new in Python 2.2.  If you want to enable the future-tracking features of 2.2 but also retain compatibility with 2.1 and earlier versions of Python you can either write try:     from codeop import CommandCompiler     compile_command = CommandCompiler()     del CommandCompiler except ImportError:     from codeop import compile_command   which is a low-impact change, but introduces possibly unwanted global state into your program, or you can write: try:     from codeop import CommandCompiler except ImportError:     def CommandCompiler():         from codeop import compile_command         return compile_command   and then call CommandCompiler every time you need a fresh compiler object."},{"url":"http:\/\/docs.python.org\/library\/codeop.html#codeop.CommandCompiler","title":"codeop.CommandCompiler","description":""},{"url":"http:\/\/docs.python.org\/library\/codeop.html#codeop.Compile","title":"codeop.Compile","description":""},{"url":"http:\/\/docs.python.org\/library\/codeop.html#codeop.compile_command","title":"codeop.compile_command","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html","title":"code","description":"28.1. code &#8212; Interpreter base classes\u00b6 The code module provides facilities to implement read-eval-print loops in Python.  Two classes and convenience functions are included which can be used to build applications which provide an interactive interpreter prompt.   class code.InteractiveInterpreter([locals])\u00b6 This class deals with parsing and interpreter state (the user&#8217;s namespace); it does not deal with input buffering or prompting or input file naming (the filename is always passed in explicitly). The optional locals argument specifies the dictionary in which code will be executed; it defaults to a newly created dictionary with key '__name__' set to '__console__' and key '__doc__' set to None.    class code.InteractiveConsole([locals[, filename]])\u00b6 Closely emulate the behavior of the interactive Python interpreter. This class builds on InteractiveInterpreter and adds prompting using the familiar sys.ps1 and sys.ps2, and input buffering.    code.interact([banner[, readfunc[, local]]])\u00b6 Convenience function to run a read-eval-print loop.  This creates a new instance of InteractiveConsole and sets readfunc to be used as the raw_input() method, if provided.  If local is provided, it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop.  The interact() method of the instance is then run with banner passed as the banner to use, if provided.  The console object is discarded after use.    code.compile_command(source[, filename[, symbol]])\u00b6 This function is useful for programs that want to emulate Python&#8217;s interpreter main loop (a.k.a. the read-eval-print loop).  The tricky part is to determine when the user has entered an incomplete command that can be completed by entering more text (as opposed to a complete command or a syntax error).  This function almost always makes the same decision as the real interpreter main loop. source is the source string; filename is the optional filename from which source was read, defaulting to '<input>'; and symbol is the optional grammar start symbol, which should be either 'single' (the default) or 'eval'. Returns a code object (the same as compile(source, filename, symbol)) if the command is complete and valid; None if the command is incomplete; raises SyntaxError if the command is complete and contains a syntax error, or raises OverflowError or ValueError if the command contains an invalid literal.    28.1.1. Interactive Interpreter Objects\u00b6   InteractiveInterpreter.runsource(source[, filename[, symbol]])\u00b6 Compile and run some source in the interpreter. Arguments are the same as for compile_command(); the default for filename is '<input>', and for symbol is 'single'.  One several things can happen:  The input is incorrect; compile_command() raised an exception (SyntaxError or OverflowError).  A syntax traceback will be printed by calling the showsyntaxerror() method.  runsource() returns False. The input is incomplete, and more input is required; compile_command() returned None. runsource() returns True. The input is complete; compile_command() returned a code object.  The code is executed by calling the runcode() (which also handles run-time exceptions, except for SystemExit). runsource() returns False.  The return value can be used to decide whether to use sys.ps1 or sys.ps2 to prompt the next line.     InteractiveInterpreter.runcode(code)\u00b6 Execute a code object. When an exception occurs, showtraceback() is called to display a traceback.  All exceptions are caught except SystemExit, which is allowed to propagate. A note about KeyboardInterrupt: this exception may occur elsewhere in this code, and may not always be caught.  The caller should be prepared to deal with it.     InteractiveInterpreter.showsyntaxerror([filename])\u00b6 Display the syntax error that just occurred.  This does not display a stack trace because there isn&#8217;t one for syntax errors. If filename is given, it is stuffed into the exception instead of the default filename provided by Python&#8217;s parser, because it always uses '<string>' when reading from a string. The output is written by the write() method.    InteractiveInterpreter.showtraceback()\u00b6 Display the exception that just occurred.  We remove the first stack item because it is within the interpreter object implementation. The output is written by the write() method.    InteractiveInterpreter.write(data)\u00b6 Write a string to the standard error stream (sys.stderr). Derived classes should override this to provide the appropriate output handling as needed.    28.1.2. Interactive Console Objects\u00b6 The InteractiveConsole class is a subclass of InteractiveInterpreter, and so offers all the methods of the interpreter objects as well as the following additions.   InteractiveConsole.interact([banner])\u00b6 Closely emulate the interactive Python console. The optional banner argument specify the banner to print before the first interaction; by default it prints a banner similar to the one printed by the standard Python interpreter, followed by the class name of the console object in parentheses (so as not to confuse this with the real interpreter &#8211; since it&#8217;s so close!).    InteractiveConsole.push(line)\u00b6 Push a line of source text to the interpreter. The line should not have a trailing newline; it may have internal newlines.  The line is appended to a buffer and the interpreter&#8217;s runsource() method is called with the concatenated contents of the buffer as source.  If this indicates that the command was executed or invalid, the buffer is reset; otherwise, the command is incomplete, and the buffer is left as it was after the line was appended.  The return value is True if more input is required, False if the line was dealt with in some way (this is the same as runsource()).    InteractiveConsole.resetbuffer()\u00b6 Remove any unhandled source text from the input buffer.    InteractiveConsole.raw_input([prompt])\u00b6 Write a prompt and read a line.  The returned line does not include the trailing newline.  When the user enters the EOF key sequence, EOFError is raised. The base implementation uses the built-in function raw_input(); a subclass may replace this with a different implementation."},{"url":"http:\/\/docs.python.org\/library\/code.html#code.compile_command","title":"code.compile_command","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.interact","title":"code.interact","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveConsole","title":"code.InteractiveConsole","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveConsole.interact","title":"code.InteractiveConsole.interact","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveConsole.push","title":"code.InteractiveConsole.push","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveConsole.raw_input","title":"code.InteractiveConsole.raw_input","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveConsole.resetbuffer","title":"code.InteractiveConsole.resetbuffer","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveInterpreter","title":"code.InteractiveInterpreter","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveInterpreter.runcode","title":"code.InteractiveInterpreter.runcode","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveInterpreter.runsource","title":"code.InteractiveInterpreter.runsource","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveInterpreter.showsyntaxerror","title":"code.InteractiveInterpreter.showsyntaxerror","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveInterpreter.showtraceback","title":"code.InteractiveInterpreter.showtraceback","description":""},{"url":"http:\/\/docs.python.org\/library\/code.html#code.InteractiveInterpreter.write","title":"code.InteractiveInterpreter.write","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html","title":"inspect","description":null},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.cleandoc","title":"inspect.cleandoc","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.currentframe","title":"inspect.currentframe","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.formatargspec","title":"inspect.formatargspec","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.formatargvalues","title":"inspect.formatargvalues","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getargspec","title":"inspect.getargspec","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getargvalues","title":"inspect.getargvalues","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getcallargs","title":"inspect.getcallargs","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getclasstree","title":"inspect.getclasstree","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getcomments","title":"inspect.getcomments","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getdoc","title":"inspect.getdoc","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getfile","title":"inspect.getfile","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getframeinfo","title":"inspect.getframeinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getinnerframes","title":"inspect.getinnerframes","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getmembers","title":"inspect.getmembers","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getmodule","title":"inspect.getmodule","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getmoduleinfo","title":"inspect.getmoduleinfo","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getmodulename","title":"inspect.getmodulename","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getmro","title":"inspect.getmro","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getouterframes","title":"inspect.getouterframes","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getsource","title":"inspect.getsource","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getsourcefile","title":"inspect.getsourcefile","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.getsourcelines","title":"inspect.getsourcelines","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isabstract","title":"inspect.isabstract","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isbuiltin","title":"inspect.isbuiltin","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isclass","title":"inspect.isclass","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.iscode","title":"inspect.iscode","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isdatadescriptor","title":"inspect.isdatadescriptor","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isframe","title":"inspect.isframe","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isfunction","title":"inspect.isfunction","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isgenerator","title":"inspect.isgenerator","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isgeneratorfunction","title":"inspect.isgeneratorfunction","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isgetsetdescriptor","title":"inspect.isgetsetdescriptor","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.ismemberdescriptor","title":"inspect.ismemberdescriptor","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.ismethod","title":"inspect.ismethod","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.ismethoddescriptor","title":"inspect.ismethoddescriptor","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.ismodule","title":"inspect.ismodule","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.isroutine","title":"inspect.isroutine","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.istraceback","title":"inspect.istraceback","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.stack","title":"inspect.stack","description":""},{"url":"http:\/\/docs.python.org\/library\/inspect.html#inspect.trace","title":"inspect.trace","description":""},{"url":"http:\/\/docs.python.org\/library\/importlib.html","title":"importlib","description":"30.2. importlib &#8211; Convenience wrappers for __import__()\u00b6  New in version 2.7. This module is a minor subset of what is available in the more full-featured package of the same name from Python 3.1 that provides a complete implementation of import. What is here has been provided to help ease in transitioning from 2.7 to 3.1.   importlib.import_module(name, package=None)\u00b6 Import a module. The name argument specifies what module to import in absolute or relative terms (e.g. either pkg.mod or ..mod). If the name is specified in relative terms, then the package argument must be specified to the package which is to act as the anchor for resolving the package name (e.g. import_module('..mod', 'pkg.subpkg') will import pkg.mod).  The specified module will be inserted into sys.modules and returned."},{"url":"http:\/\/docs.python.org\/library\/importlib.html#importlib.import_module","title":"importlib.import_module","description":""},{"url":"http:\/\/docs.python.org\/library\/zipimport.html","title":"zipimport","description":"30.4. zipimport &#8212; Import modules from Zip archives\u00b6  New in version 2.3. This module adds the ability to import Python modules (*.py, *.py[co]) and packages from ZIP-format archives. It is usually not needed to use the zipimport module explicitly; it is automatically used by the built-in import mechanism for sys.path items that are paths to ZIP archives. Typically, sys.path is a list of directory names as strings.  This module also allows an item of sys.path to be a string naming a ZIP file archive. The ZIP archive can contain a subdirectory structure to support package imports, and a path within the archive can be specified to only import from a subdirectory.  For example, the path \/tmp\/example.zip\/lib\/ would only import from the lib\/ subdirectory within the archive. Any files may be present in the ZIP archive, but only files .py and .py[co] are available for import.  ZIP import of dynamic modules (.pyd, .so) is disallowed. Note that if an archive only contains .py files, Python will not attempt to modify the archive by adding the corresponding .pyc or .pyo file, meaning that if a ZIP archive doesn&#8217;t contain .pyc files, importing may be rather slow. Using the built-in reload() function will fail if called on a module loaded from a ZIP archive; it is unlikely that reload() would be needed, since this would imply that the ZIP has been altered during runtime. ZIP archives with an archive comment are currently not supported.  See also  PKZIP Application Note Documentation on the ZIP file format by Phil Katz, the creator of the format and algorithms used. PEP 273 - Import Modules from Zip Archives Written by James C. Ahlstrom, who also provided an implementation. Python 2.3 follows the specification in PEP 273, but uses an implementation written by Just van Rossum that uses the import hooks described in PEP 302. PEP 302 - New Import Hooks The PEP to add the import hooks that help this module work.   This module defines an exception:   exception zipimport.ZipImportError\u00b6 Exception raised by zipimporter objects. It&#8217;s a subclass of ImportError, so it can be caught as ImportError, too.   30.4.1. zipimporter Objects\u00b6 zipimporter is the class for importing ZIP files.   class zipimport.zipimporter(archivepath)\u00b6 Create a new zipimporter instance. archivepath must be a path to a ZIP file, or to a specific path within a ZIP file.  For example, an archivepath of foo\/bar.zip\/lib will look for modules in the lib directory inside the ZIP file foo\/bar.zip (provided that it exists). ZipImportError is raised if archivepath doesn&#8217;t point to a valid ZIP archive.   find_module(fullname[, path])\u00b6 Search for a module specified by fullname. fullname must be the fully qualified (dotted) module name. It returns the zipimporter instance itself if the module was found, or None if it wasn&#8217;t. The optional path argument is ignored&#8212;it&#8217;s there for compatibility with the importer protocol.    get_code(fullname)\u00b6 Return the code object for the specified module. Raise ZipImportError if the module couldn&#8217;t be found.    get_data(pathname)\u00b6 Return the data associated with pathname. Raise IOError if the file wasn&#8217;t found.    get_filename(fullname)\u00b6 Return the value __file__ would be set to if the specified module was imported. Raise ZipImportError if the module couldn&#8217;t be found.   New in version 2.7.   get_source(fullname)\u00b6 Return the source code for the specified module. Raise ZipImportError if the module couldn&#8217;t be found, return None if the archive does contain the module, but has no source for it.    is_package(fullname)\u00b6 Return True if the module specified by fullname is a package. Raise ZipImportError if the module couldn&#8217;t be found.    load_module(fullname)\u00b6 Load the module specified by fullname. fullname must be the fully qualified (dotted) module name. It returns the imported module, or raises ZipImportError if it wasn&#8217;t found.    archive\u00b6 The file name of the importer&#8217;s associated ZIP file, without a possible subpath.    prefix\u00b6 The subpath within the ZIP file where modules are searched.  This is the empty string for zipimporter objects which point to the root of the ZIP file.  The archive and prefix attributes, when combined with a slash, equal the original archivepath argument given to the zipimporter constructor.     30.4.2. Examples\u00b6 Here is an example that imports a module from a ZIP archive - note that the zipimport module is not explicitly used. $ unzip -l \/tmp\/example.zip Archive:  \/tmp\/example.zip   Length     Date   Time    Name  --------    ----   ----    ----      8467  11-26-02 22:30   jwzthreading.py  --------                   -------      8467                   1 file $ .\/python Python 2.3 (#1, Aug 1 2003, 19:54:32) >>> import sys >>> sys.path.insert(0, '\/tmp\/example.zip')  # Add .zip file to front of path >>> import jwzthreading >>> jwzthreading.__file__ '\/tmp\/example.zip\/jwzthreading.py'"},{"url":"http:\/\/docs.python.org\/library\/zipimport.html#zipimport.zipimporter","title":"zipimport.zipimporter","description":""},{"url":"http:\/\/docs.python.org\/library\/zipimport.html#zipimport.zipimporter.find_module","title":"zipimport.zipimporter.find_module","description":""},{"url":"http:\/\/docs.python.org\/library\/zipimport.html#zipimport.zipimporter.get_code","title":"zipimport.zipimporter.get_code","description":""},{"url":"http:\/\/docs.python.org\/library\/zipimport.html#zipimport.zipimporter.get_data","title":"zipimport.zipimporter.get_data","description":""},{"url":"http:\/\/docs.python.org\/library\/zipimport.html#zipimport.zipimporter.get_filename","title":"zipimport.zipimporter.get_filename","description":""},{"url":"http:\/\/docs.python.org\/library\/zipimport.html#zipimport.zipimporter.get_source","title":"zipimport.zipimporter.get_source","description":""},{"url":"http:\/\/docs.python.org\/library\/zipimport.html#zipimport.zipimporter.is_package","title":"zipimport.zipimporter.is_package","description":""},{"url":"http:\/\/docs.python.org\/library\/zipimport.html#zipimport.zipimporter.load_module","title":"zipimport.zipimporter.load_module","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html","title":"imp","description":"30.1. imp &#8212; Access the import internals\u00b6 This module provides an interface to the mechanisms used to implement the import statement.  It defines the following constants and functions:   imp.get_magic()\u00b6 Return the magic string value used to recognize byte-compiled code files (.pyc files).  (This value may be different for each Python version.)     imp.get_suffixes()\u00b6 Return a list of 3-element tuples, each describing a particular type of module. Each triple has the form (suffix, mode, type), where suffix is a string to be appended to the module name to form the filename to search for, mode is the mode string to pass to the built-in open() function to open the file (this can be 'r' for text files or 'rb' for binary files), and type is the file type, which has one of the values PY_SOURCE, PY_COMPILED, or C_EXTENSION, described below.    imp.find_module(name[, path])\u00b6 Try to find the module name.  If path is omitted or None, the list of directory names given by sys.path is searched, but first a few special places are searched: the function tries to find a built-in module with the given name (C_BUILTIN), then a frozen module (PY_FROZEN), and on some systems some other places are looked in as well (on Windows, it looks in the registry which may point to a specific file). Otherwise, path must be a list of directory names; each directory is searched for files with any of the suffixes returned by get_suffixes() above.  Invalid names in the list are silently ignored (but all list items must be strings). If search is successful, the return value is a 3-element tuple (file, pathname, description): file is an open file object positioned at the beginning, pathname is the pathname of the file found, and description is a 3-element tuple as contained in the list returned by get_suffixes() describing the kind of module found. If the module does not live in a file, the returned file is None, pathname is the empty string, and the description tuple contains empty strings for its suffix and mode; the module type is indicated as given in parentheses above.  If the search is unsuccessful, ImportError is raised.  Other exceptions indicate problems with the arguments or environment. If the module is a package, file is None, pathname is the package path and the last item in the description tuple is PKG_DIRECTORY. This function does not handle hierarchical module names (names containing dots).  In order to find P.*M*, that is, submodule M of package P, use find_module() and load_module() to find and load package P, and then use find_module() with the path argument set to P.__path__. When P itself has a dotted name, apply this recipe recursively.     imp.load_module(name, file, pathname, description)\u00b6 Load a module that was previously found by find_module() (or by an otherwise conducted search yielding compatible results).  This function does more than importing the module: if the module was already imported, it is equivalent to a reload()!  The name argument indicates the full module name (including the package name, if this is a submodule of a package).  The file argument is an open file, and pathname is the corresponding file name; these can be None and '', respectively, when the module is a package or not being loaded from a file.  The description argument is a tuple, as would be returned by get_suffixes(), describing what kind of module must be loaded. If the load is successful, the return value is the module object; otherwise, an exception (usually ImportError) is raised. Important: the caller is responsible for closing the file argument, if it was not None, even when an exception is raised.  This is best done using a try ... finally statement.     imp.new_module(name)\u00b6 Return a new empty module object called name.  This object is not inserted in sys.modules.    imp.lock_held()\u00b6 Return True if the import lock is currently held, else False. On platforms without threads, always return False. On platforms with threads, a thread executing an import holds an internal lock until the import is complete. This lock blocks other threads from doing an import until the original import completes, which in turn prevents other threads from seeing incomplete module objects constructed by the original thread while in the process of completing its import (and the imports, if any, triggered by that).     imp.acquire_lock()\u00b6 Acquire the interpreter&#8217;s import lock for the current thread.  This lock should be used by import hooks to ensure thread-safety when importing modules. Once a thread has acquired the import lock, the same thread may acquire it again without blocking; the thread must release it once for each time it has acquired it. On platforms without threads, this function does nothing.  New in version 2.3.     imp.release_lock()\u00b6 Release the interpreter&#8217;s import lock. On platforms without threads, this function does nothing.  New in version 2.3.   The following constants with integer values, defined in this module, are used to indicate the search result of find_module().   imp.PY_SOURCE\u00b6 The module was found as a source file.    imp.PY_COMPILED\u00b6 The module was found as a compiled code object file.    imp.C_EXTENSION\u00b6 The module was found as dynamically loadable shared library.    imp.PKG_DIRECTORY\u00b6 The module was found as a package directory.    imp.C_BUILTIN\u00b6 The module was found as a built-in module.    imp.PY_FROZEN\u00b6 The module was found as a frozen module (see init_frozen()).  The following constant and functions are obsolete; their functionality is available through find_module() or load_module(). They are kept around for backward compatibility:   imp.SEARCH_ERROR\u00b6 Unused.    imp.init_builtin(name)\u00b6 Initialize the built-in module called name and return its module object along with storing it in sys.modules.  If the module was already initialized, it will be initialized again.  Re-initialization involves the copying of the built-in module&#8217;s __dict__ from the cached module over the module&#8217;s entry in sys.modules.  If there is no built-in module called name, None is returned.    imp.init_frozen(name)\u00b6 Initialize the frozen module called name and return its module object.  If the module was already initialized, it will be initialized again.  If there is no frozen module called name, None is returned.  (Frozen modules are modules written in Python whose compiled byte-code object is incorporated into a custom-built Python interpreter by Python&#8217;s freeze utility. See Tools\/freeze\/ for now.)    imp.is_builtin(name)\u00b6 Return 1 if there is a built-in module called name which can be initialized again.  Return -1 if there is a built-in module called name which cannot be initialized again (see init_builtin()).  Return 0 if there is no built-in module called name.    imp.is_frozen(name)\u00b6 Return True if there is a frozen module (see init_frozen()) called name, or False if there is no such module.    imp.load_compiled(name, pathname[, file])\u00b6 Load and initialize a module implemented as a byte-compiled code file and return its module object.  If the module was already initialized, it will be initialized again.  The name argument is used to create or access a module object.  The pathname argument points to the byte-compiled code file.  The file argument is the byte-compiled code file, open for reading in binary mode, from the beginning. It must currently be a real file object, not a user-defined class emulating a file.     imp.load_dynamic(name, pathname[, file])\u00b6 Load and initialize a module implemented as a dynamically loadable shared library and return its module object.  If the module was already initialized, it will be initialized again. Re-initialization involves copying the __dict__ attribute of the cached instance of the module over the value used in the module cached in sys.modules.  The pathname argument must point to the shared library.  The name argument is used to construct the name of the initialization function: an external C function called initname() in the shared library is called.  The optional file argument is ignored.  (Note: using shared libraries is highly system dependent, and not all systems support it.)    imp.load_source(name, pathname[, file])\u00b6 Load and initialize a module implemented as a Python source file and return its module object.  If the module was already initialized, it will be initialized again.  The name argument is used to create or access a module object.  The pathname argument points to the source file.  The file argument is the source file, open for reading as text, from the beginning. It must currently be a real file object, not a user-defined class emulating a file.  Note that if a properly matching byte-compiled file (with suffix .pyc or .pyo) exists, it will be used instead of parsing the given source file.    class imp.NullImporter(path_string)\u00b6 The NullImporter type is a PEP 302 import hook that handles non-directory path strings by failing to find any modules.  Calling this type with an existing directory or empty string raises ImportError. Otherwise, a NullImporter instance is returned. Python adds instances of this type to sys.path_importer_cache for any path entries that are not directories and are not handled by any other path hooks on sys.path_hooks.  Instances have only one method:   find_module(fullname[, path])\u00b6 This method always returns None, indicating that the requested module could not be found.   New in version 2.5.    30.1.1. Examples\u00b6 The following function emulates what was the standard import statement up to Python 1.4 (no hierarchical module names).  (This implementation wouldn&#8217;t work in that version, since find_module() has been extended and load_module() has been added in 1.4.) import imp import sys  def __import__(name, globals=None, locals=None, fromlist=None):     # Fast path: see if the module has already been imported.     try:         return sys.modules[name]     except KeyError:         pass      # If any of the following calls raises an exception,     # there&#39;s a problem we can&#39;t handle -- let the caller handle it.      fp, pathname, description = imp.find_module(name)      try:         return imp.load_module(name, fp, pathname, description)     finally:         # Since we may exit via an exception, close fp explicitly.         if fp:             fp.close()   A more complete example that implements hierarchical module names and includes a reload() function can be found in the module knee.  The knee module can be found in Demo\/imputil\/ in the Python source distribution."},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.acquire_lock","title":"imp.acquire_lock","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.find_module","title":"imp.find_module","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.get_magic","title":"imp.get_magic","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.get_suffixes","title":"imp.get_suffixes","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.init_builtin","title":"imp.init_builtin","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.init_frozen","title":"imp.init_frozen","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.is_builtin","title":"imp.is_builtin","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.is_frozen","title":"imp.is_frozen","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.load_compiled","title":"imp.load_compiled","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.load_dynamic","title":"imp.load_dynamic","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.load_module","title":"imp.load_module","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.load_source","title":"imp.load_source","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.lock_held","title":"imp.lock_held","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.new_module","title":"imp.new_module","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.NullImporter","title":"imp.NullImporter","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.NullImporter.find_module","title":"imp.NullImporter.find_module","description":""},{"url":"http:\/\/docs.python.org\/library\/imp.html#imp.release_lock","title":"imp.release_lock","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html","title":"rexec","description":"29.1. rexec &#8212; Restricted execution framework\u00b6  Deprecated since version 2.6: The rexec module has been removed in Python 3.0.  Changed in version 2.3: Disabled module.  Warning The documentation has been left in place to help in reading old code that uses the module.  This module contains the RExec class, which supports r_eval(), r_execfile(), r_exec(), and r_import() methods, which are restricted versions of the standard Python functions eval(), execfile() and the exec and import statements. Code executed in this restricted environment will only have access to modules and functions that are deemed safe; you can subclass RExec to add or remove capabilities as desired.  Warning While the rexec module is designed to perform as described below, it does have a few known vulnerabilities which could be exploited by carefully written code.  Thus it should not be relied upon in situations requiring &#8220;production ready&#8221; security.  In such situations, execution via sub-processes or very careful &#8220;cleansing&#8221; of both code and data to be processed may be necessary. Alternatively, help in patching known rexec vulnerabilities would be welcomed.   Note The RExec class can prevent code from performing unsafe operations like reading or writing disk files, or using TCP\/IP sockets.  However, it does not protect against code using extremely large amounts of memory or processor time.    class rexec.RExec([hooks[, verbose]])\u00b6 Returns an instance of the RExec class. hooks is an instance of the RHooks class or a subclass of it. If it is omitted or None, the default RHooks class is instantiated. Whenever the rexec module searches for a module (even a built-in one) or reads a module&#8217;s code, it doesn&#8217;t actually go out to the file system itself. Rather, it calls methods of an RHooks instance that was passed to or created by its constructor.  (Actually, the RExec object doesn&#8217;t make these calls &#8212; they are made by a module loader object that&#8217;s part of the RExec object.  This allows another level of flexibility, which can be useful when changing the mechanics of import within the restricted environment.) By providing an alternate RHooks object, we can control the file system accesses made to import a module, without changing the actual algorithm that controls the order in which those accesses are made.  For instance, we could substitute an RHooks object that passes all filesystem requests to a file server elsewhere, via some RPC mechanism such as ILU.  Grail&#8217;s applet loader uses this to support importing applets from a URL for a directory. If verbose is true, additional debugging output may be sent to standard output.   It is important to be aware that code running in a restricted environment can still call the sys.exit() function.  To disallow restricted code from exiting the interpreter, always protect calls that cause restricted code to run with a try\/except statement that catches the SystemExit exception.  Removing the sys.exit() function from the restricted environment is not sufficient &#8212; the restricted code could still use raise SystemExit.  Removing SystemExit is not a reasonable option; some library code makes use of this and would break were it not available.  See also  Grail Home Page Grail is a Web browser written entirely in Python.  It uses the rexec module as a foundation for supporting Python applets, and can be used as an example usage of this module.    29.1.1. RExec Objects\u00b6 RExec instances support the following methods:   RExec.r_eval(code)\u00b6 code must either be a string containing a Python expression, or a compiled code object, which will be evaluated in the restricted environment&#8217;s __main__ module.  The value of the expression or code object will be returned.    RExec.r_exec(code)\u00b6 code must either be a string containing one or more lines of Python code, or a compiled code object, which will be executed in the restricted environment&#8217;s __main__ module.    RExec.r_execfile(filename)\u00b6 Execute the Python code contained in the file filename in the restricted environment&#8217;s __main__ module.  Methods whose names begin with s_ are similar to the functions beginning with r_, but the code will be granted access to restricted versions of the standard I\/O streams sys.stdin, sys.stderr, and sys.stdout.   RExec.s_eval(code)\u00b6 code must be a string containing a Python expression, which will be evaluated in the restricted environment.    RExec.s_exec(code)\u00b6 code must be a string containing one or more lines of Python code, which will be executed in the restricted environment.    RExec.s_execfile(code)\u00b6 Execute the Python code contained in the file filename in the restricted environment.  RExec objects must also support various methods which will be implicitly called by code executing in the restricted environment. Overriding these methods in a subclass is used to change the policies enforced by a restricted environment.   RExec.r_import(modulename[, globals[, locals[, fromlist]]])\u00b6 Import the module modulename, raising an ImportError exception if the module is considered unsafe.    RExec.r_open(filename[, mode[, bufsize]])\u00b6 Method called when open() is called in the restricted environment.  The arguments are identical to those of open(), and a file object (or a class instance compatible with file objects) should be returned.  RExec&#8216;s default behaviour is allow opening any file for reading, but forbidding any attempt to write a file.  See the example below for an implementation of a less restrictive r_open().    RExec.r_reload(module)\u00b6 Reload the module object module, re-parsing and re-initializing it.    RExec.r_unload(module)\u00b6 Unload the module object module (remove it from the restricted environment&#8217;s sys.modules dictionary).  And their equivalents with access to restricted standard I\/O streams:   RExec.s_import(modulename[, globals[, locals[, fromlist]]])\u00b6 Import the module modulename, raising an ImportError exception if the module is considered unsafe.    RExec.s_reload(module)\u00b6 Reload the module object module, re-parsing and re-initializing it.    RExec.s_unload(module)\u00b6 Unload the module object module.    29.1.2. Defining restricted environments\u00b6 The RExec class has the following class attributes, which are used by the __init__() method.  Changing them on an existing instance won&#8217;t have any effect; instead, create a subclass of RExec and assign them new values in the class definition. Instances of the new class will then use those new values.  All these attributes are tuples of strings.   RExec.nok_builtin_names\u00b6 Contains the names of built-in functions which will not be available to programs running in the restricted environment.  The value for RExec is ('open', 'reload', '__import__'). (This gives the exceptions, because by far the majority of built-in functions are harmless.  A subclass that wants to override this variable should probably start with the value from the base class and concatenate additional forbidden functions &#8212; when new dangerous built-in functions are added to Python, they will also be added to this module.)    RExec.ok_builtin_modules\u00b6 Contains the names of built-in modules which can be safely imported. The value for RExec is ('audioop', 'array', 'binascii', 'cmath', 'errno', 'imageop', 'marshal', 'math', 'md5', 'operator', 'parser', 'regex', 'select', 'sha', '_sre', 'strop', 'struct', 'time').  A similar remark about overriding this variable applies &#8212; use the value from the base class as a starting point.    RExec.ok_path\u00b6 Contains the directories which will be searched when an import is performed in the restricted environment.   The value for RExec is the same as sys.path (at the time the module is loaded) for unrestricted code.    RExec.ok_posix_names\u00b6 Contains the names of the functions in the os module which will be available to programs running in the restricted environment.  The value for RExec is ('error', 'fstat', 'listdir', 'lstat', 'readlink', 'stat', 'times', 'uname', 'getpid', 'getppid', 'getcwd', 'getuid', 'getgid', 'geteuid', 'getegid').    RExec.ok_sys_names\u00b6 Contains the names of the functions and variables in the sys module which will be available to programs running in the restricted environment.  The value for RExec is ('ps1', 'ps2', 'copyright', 'version', 'platform', 'exit', 'maxint').    RExec.ok_file_types\u00b6 Contains the file types from which modules are allowed to be loaded. Each file type is an integer constant defined in the imp module. The meaningful values are PY_SOURCE, PY_COMPILED, and C_EXTENSION. The value for RExec is (C_EXTENSION, PY_SOURCE).  Adding PY_COMPILED in subclasses is not recommended; an attacker could exit the restricted execution mode by putting a forged byte-compiled file (.pyc) anywhere in your file system, for example by writing it to \/tmp or uploading it to the \/incoming directory of your public FTP server.    29.1.3. An example\u00b6 Let us say that we want a slightly more relaxed policy than the standard RExec class.  For example, if we&#8217;re willing to allow files in \/tmp to be written, we can subclass the RExec class: class TmpWriterRExec(rexec.RExec):     def r_open(self, file, mode=&#39;r&#39;, buf=-1):         if mode in (&#39;r&#39;, &#39;rb&#39;):             pass         elif mode in (&#39;w&#39;, &#39;wb&#39;, &#39;a&#39;, &#39;ab&#39;):             # check filename : must begin with \/tmp\/             if file[:5]!=&#39;\/tmp\/&#39;:                 raise IOError(\"can&#39;t write outside \/tmp\")             elif (string.find(file, &#39;\/..\/&#39;) >= 0 or                  file[:3] == &#39;..\/&#39; or file[-3:] == &#39;\/..&#39;):                 raise IOError(\"&#39;..&#39; in filename forbidden\")         else: raise IOError(\"Illegal open() mode\")         return open(file, mode, buf)   Notice that the above code will occasionally forbid a perfectly valid filename; for example, code in the restricted environment won&#8217;t be able to open a file called \/tmp\/foo\/..\/bar.  To fix this, the r_open() method would have to simplify the filename to \/tmp\/bar, which would require splitting apart the filename and performing various operations on it.  In cases where security is at stake, it may be preferable to write simple code which is sometimes overly restrictive, instead of more general code that is also more complex and may harbor a subtle security hole."},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec","title":"rexec.RExec","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.r_eval","title":"rexec.RExec.r_eval","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.r_exec","title":"rexec.RExec.r_exec","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.r_execfile","title":"rexec.RExec.r_execfile","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.r_import","title":"rexec.RExec.r_import","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.r_open","title":"rexec.RExec.r_open","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.r_reload","title":"rexec.RExec.r_reload","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.r_unload","title":"rexec.RExec.r_unload","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.s_eval","title":"rexec.RExec.s_eval","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.s_exec","title":"rexec.RExec.s_exec","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.s_execfile","title":"rexec.RExec.s_execfile","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.s_import","title":"rexec.RExec.s_import","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.s_reload","title":"rexec.RExec.s_reload","description":""},{"url":"http:\/\/docs.python.org\/library\/rexec.html#rexec.RExec.s_unload","title":"rexec.RExec.s_unload","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html","title":"imputil","description":"30.3. imputil &#8212; Import utilities\u00b6  Deprecated since version 2.6: The imputil module has been removed in Python 3.0. This module provides a very handy and useful mechanism for custom import hooks. Compared to the older ihooks module, imputil takes a dramatically simpler and more straight-forward approach to custom import functions.   class imputil.ImportManager([fs_imp])\u00b6 Manage the import process.   install([namespace])\u00b6 Install this ImportManager into the specified namespace.    uninstall()\u00b6 Restore the previous import mechanism.    add_suffix(suffix, importFunc)\u00b6 Undocumented.      class imputil.Importer\u00b6 Base class for replacing standard import functions.   import_top(name)\u00b6 Import a top-level module.    get_code(parent, modname, fqname)\u00b6 Find and retrieve the code for the given module. parent specifies a parent module to define a context for importing. It may be None, indicating no particular context for the search. modname specifies a single module (not dotted) within the parent. fqname specifies the fully-qualified module name. This is a (potentially) dotted name from the &#8220;root&#8221; of the module namespace down to the modname. If there is no parent, then modname==fqname. This method should return None, or a 3-tuple.   If the module was not found, then None should be returned. The first item of the 2- or 3-tuple should be the integer 0 or 1, specifying whether the module that was found is a package or not. The second item is the code object for the module (it will be executed within the new module&#8217;s namespace). This item can also be a fully-loaded module object (e.g. loaded from a shared lib). The third item is a dictionary of name\/value pairs that will be inserted into new module before the code object is executed. This is provided in case the module&#8217;s code expects certain values (such as where the module was found). When the second item is a module object, then these names\/values will be inserted after the module has been loaded\/initialized.         class imputil.BuiltinImporter\u00b6 Emulate the import mechanism for built-in and frozen modules.  This is a sub-class of the Importer class.   get_code(parent, modname, fqname)\u00b6 Undocumented.      imputil.py_suffix_importer(filename, finfo, fqname)\u00b6 Undocumented.    class imputil.DynLoadSuffixImporter([desc])\u00b6 Undocumented.   import_file(filename, finfo, fqname)\u00b6 Undocumented.     30.3.1. Examples\u00b6 This is a re-implementation of hierarchical module import. This code is intended to be read, not executed.  However, it does work &#8211; all you need to do to enable it is &#8220;import knee&#8221;. (The name is a pun on the clunkier predecessor of this module, &#8220;ni&#8221;.) import sys, imp, __builtin__  # Replacement for __import__() def import_hook(name, globals=None, locals=None, fromlist=None):     parent = determine_parent(globals)     q, tail = find_head_package(parent, name)     m = load_tail(q, tail)     if not fromlist:         return q     if hasattr(m, \"__path__\"):         ensure_fromlist(m, fromlist)     return m  def determine_parent(globals):     if not globals or  not globals.has_key(\"__name__\"):         return None     pname = globals[&#39;__name__&#39;]     if globals.has_key(\"__path__\"):         parent = sys.modules[pname]         assert globals is parent.__dict__         return parent     if &#39;.&#39; in pname:         i = pname.rfind(&#39;.&#39;)         pname = pname[:i]         parent = sys.modules[pname]         assert parent.__name__ == pname         return parent     return None  def find_head_package(parent, name):     if &#39;.&#39; in name:         i = name.find(&#39;.&#39;)         head = name[:i]         tail = name[i+1:]     else:         head = name         tail = \"\"     if parent:         qname = \"%s.%s\"  (parent.__name__, head)     else:         qname = head     q = import_module(head, qname, parent)     if q: return q, tail     if parent:         qname = head         parent = None         q = import_module(head, qname, parent)         if q: return q, tail     raise ImportError(\"No module named \" + qname)  def load_tail(q, tail):     m = q     while tail:         i = tail.find(&#39;.&#39;)         if i < 0: i = len(tail)         head, tail = tail[:i], tail[i+1:]         mname = \"%s.%s\"  (m.__name__, head)         m = import_module(head, mname, m)         if not m:             raise ImportError(\"No module named \" + mname)     return m  def ensure_fromlist(m, fromlist, recursive=0):     for sub in fromlist:         if sub == \"*\":             if not recursive:                 try:                     all = m.__all__                 except AttributeError:                     pass                 else:                     ensure_fromlist(m, all, 1)             continue         if sub != \"*\" and not hasattr(m, sub):             subname = \"%s.%s\"  (m.__name__, sub)             submod = import_module(sub, subname, m)             if not submod:                 raise ImportError(\"No module named \" + subname)  def import_module(partname, fqname, parent):     try:         return sys.modules[fqname]     except KeyError:         pass     try:         fp, pathname, stuff = imp.find_module(partname,                                               parent and parent.__path__)     except ImportError:         return None     try:         m = imp.load_module(fqname, fp, pathname, stuff)     finally:         if fp: fp.close()     if parent:         setattr(parent, partname, m)     return m   # Replacement for reload() def reload_hook(module):     name = module.__name__     if &#39;.&#39; not in name:         return import_module(name, name, None)     i = name.rfind(&#39;.&#39;)     pname = name[:i]     parent = sys.modules[pname]     return import_module(name[i+1:], name, parent)   # Save the original hooks original_import = __builtin__.__import__ original_reload = __builtin__.reload  # Now install our hooks __builtin__.__import__ = import_hook __builtin__.reload = reload_hook   Also see the importers module (which can be found in Demo\/imputil\/ in the Python source distribution) for additional examples."},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.BuiltinImporter","title":"imputil.BuiltinImporter","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.BuiltinImporter.get_code","title":"imputil.BuiltinImporter.get_code","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.DynLoadSuffixImporter","title":"imputil.DynLoadSuffixImporter","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.DynLoadSuffixImporter.import_file","title":"imputil.DynLoadSuffixImporter.import_file","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.Importer","title":"imputil.Importer","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.Importer.get_code","title":"imputil.Importer.get_code","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.Importer.import_top","title":"imputil.Importer.import_top","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.ImportManager","title":"imputil.ImportManager","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.ImportManager.add_suffix","title":"imputil.ImportManager.add_suffix","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.ImportManager.install","title":"imputil.ImportManager.install","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.ImportManager.uninstall","title":"imputil.ImportManager.uninstall","description":""},{"url":"http:\/\/docs.python.org\/library\/imputil.html#imputil.py_suffix_importer","title":"imputil.py_suffix_importer","description":""},{"url":"http:\/\/docs.python.org\/library\/modulefinder.html","title":"modulefinder","description":"30.6. modulefinder &#8212; Find modules used by a script\u00b6  New in version 2.3. Source code: Lib\/modulefinder.py  This module provides a ModuleFinder class that can be used to determine the set of modules imported by a script. modulefinder.py can also be run as a script, giving the filename of a Python script as its argument, after which a report of the imported modules will be printed.   modulefinder.AddPackagePath(pkg_name, path)\u00b6 Record that the package named pkg_name can be found in the specified path.    modulefinder.ReplacePackage(oldname, newname)\u00b6 Allows specifying that the module named oldname is in fact the package named newname.  The most common usage would be  to handle how the _xmlplus package replaces the xml package.    class modulefinder.ModuleFinder([path=None, debug=0, excludes=[], replace_paths=[]])\u00b6 This class provides run_script() and report() methods to determine the set of modules imported by a script. path can be a list of directories to search for modules; if not specified, sys.path is used.  debug sets the debugging level; higher values make the class print  debugging messages about what it&#8217;s doing. excludes is a list of module names to exclude from the analysis. replace_paths is a list of (oldpath, newpath) tuples that will be replaced in module paths.   report()\u00b6 Print a report to standard output that lists the modules imported by the script and their paths, as well as modules that are missing or seem to be missing.    run_script(pathname)\u00b6 Analyze the contents of the pathname file, which must contain Python code.    modules\u00b6 A dictionary mapping module names to modules. See Example usage of ModuleFinder     30.6.1. Example usage of ModuleFinder\u00b6 The script that is going to get analyzed later on (bacon.py): import re, itertools  try:     import baconhameggs except ImportError:     pass  try:     import guido.python.ham except ImportError:     pass   The script that will output the report of bacon.py: from modulefinder import ModuleFinder  finder = ModuleFinder() finder.run_script(&#39;bacon.py&#39;)  print &#39;Loaded modules:&#39; for name, mod in finder.modules.iteritems():     print &#39;%s: &#39;  name,     print &#39;,&#39;.join(mod.globalnames.keys()[:3])  print &#39;-&#39;*50 print &#39;Modules not imported:&#39; print &#39;\\n&#39;.join(finder.badmodules.iterkeys())   Sample output (may vary depending on the architecture): Loaded modules: _types: copy_reg:  _inverted_registry,_slotnames,__all__ sre_compile:  isstring,_sre,_optimize_unicode _sre: sre_constants:  REPEAT_ONE,makedict,AT_END_LINE sys: re:  __module__,finditer,_expand itertools: __main__:  re,itertools,baconhameggs sre_parse:  __getslice__,_PATTERNENDERS,SRE_FLAG_UNICODE array: types:  __module__,IntType,TypeType --------------------------------------------------- Modules not imported: guido.python.ham baconhameggs"},{"url":"http:\/\/docs.python.org\/library\/modulefinder.html#modulefinder.AddPackagePath","title":"modulefinder.AddPackagePath","description":""},{"url":"http:\/\/docs.python.org\/library\/modulefinder.html#modulefinder.ModuleFinder","title":"modulefinder.ModuleFinder","description":""},{"url":"http:\/\/docs.python.org\/library\/modulefinder.html#modulefinder.ModuleFinder.report","title":"modulefinder.ModuleFinder.report","description":""},{"url":"http:\/\/docs.python.org\/library\/modulefinder.html#modulefinder.ModuleFinder.run_script","title":"modulefinder.ModuleFinder.run_script","description":""},{"url":"http:\/\/docs.python.org\/library\/modulefinder.html#modulefinder.ReplacePackage","title":"modulefinder.ReplacePackage","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html","title":"pkgutil","description":"30.5. pkgutil &#8212; Package extension utility\u00b6  New in version 2.3. Source code: Lib\/pkgutil.py  This module provides utilities for the import system, in particular package support.   pkgutil.extend_path(path, name)\u00b6 Extend the search path for the modules which comprise a package.  Intended use is to place the following code in a package&#8217;s __init__.py: from pkgutil import extend_path __path__ = extend_path(__path__, __name__)   This will add to the package&#8217;s __path__ all subdirectories of directories on sys.path named after the package.  This is useful if one wants to distribute different parts of a single logical package as multiple directories. It also looks for *.pkg files beginning where * matches the name argument.  This feature is similar to *.pth files (see the site module for more information), except that it doesn&#8217;t special-case lines starting with import.  A *.pkg file is trusted at face value: apart from checking for duplicates, all entries found in a *.pkg file are added to the path, regardless of whether they exist on the filesystem.  (This is a feature.) If the input path is not a list (as is the case for frozen packages) it is returned unchanged.  The input path is not modified; an extended copy is returned.  Items are only appended to the copy at the end. It is assumed that sys.path is a sequence.  Items of sys.path that are not (Unicode or 8-bit) strings referring to existing directories are ignored.  Unicode items on sys.path that cause errors when used as filenames may cause this function to raise an exception (in line with os.path.isdir() behavior).     class pkgutil.ImpImporter(dirname=None)\u00b6 PEP 302 Importer that wraps Python&#8217;s &#8220;classic&#8221; import algorithm. If dirname is a string, a PEP 302 importer is created that searches that directory.  If dirname is None, a PEP 302 importer is created that searches the current sys.path, plus any modules that are frozen or built-in. Note that ImpImporter does not currently support being used by placement on sys.meta_path.     class pkgutil.ImpLoader(fullname, file, filename, etc)\u00b6 PEP 302 Loader that wraps Python&#8217;s &#8220;classic&#8221; import algorithm.    pkgutil.find_loader(fullname)\u00b6 Find a PEP 302 &#8220;loader&#8221; object for fullname. If fullname contains dots, path must be the containing package&#8217;s __path__.  Returns None if the module cannot be found or imported. This function uses iter_importers(), and is thus subject to the same limitations regarding platform-specific special import locations such as the Windows registry.     pkgutil.get_importer(path_item)\u00b6 Retrieve a PEP 302 importer for the given path_item. The returned importer is cached in sys.path_importer_cache if it was newly created by a path hook. If there is no importer, a wrapper around the basic import machinery is returned.  This wrapper is never inserted into the importer cache (None is inserted instead). The cache (or part of it) can be cleared manually if a rescan of sys.path_hooks is necessary.     pkgutil.get_loader(module_or_name)\u00b6 Get a PEP 302 &#8220;loader&#8221; object for module_or_name. If the module or package is accessible via the normal import mechanism, a wrapper around the relevant part of that machinery is returned.  Returns None if the module cannot be found or imported.  If the named module is not already imported, its containing package (if any) is imported, in order to establish the package __path__. This function uses iter_importers(), and is thus subject to the same limitations regarding platform-specific special import locations such as the Windows registry.     pkgutil.iter_importers(fullname='')\u00b6 Yield PEP 302 importers for the given module name. If fullname contains a &#8216;.&#8217;, the importers will be for the package containing fullname, otherwise they will be importers for sys.meta_path, sys.path, and Python&#8217;s &#8220;classic&#8221; import machinery, in that order.  If the named module is in a package, that package is imported as a side effect of invoking this function. Non-PEP 302 mechanisms (e.g. the Windows registry) used by the standard import machinery to find files in alternative locations are partially supported, but are searched after sys.path.  Normally, these locations are searched before sys.path, preventing sys.path entries from shadowing them. For this to cause a visible difference in behaviour, there must be a module or package name that is accessible via both sys.path and one of the non-PEP 302 file system mechanisms.  In this case, the emulation will find the former version, while the builtin import mechanism will find the latter. Items of the following types can be affected by this discrepancy: imp.C_EXTENSION, imp.PY_SOURCE, imp.PY_COMPILED, imp.PKG_DIRECTORY.     pkgutil.iter_modules(path=None, prefix='')\u00b6 Yields (module_loader, name, ispkg) for all submodules on path, or, if path is None, all top-level modules on sys.path. path should be either None or a list of paths to look for modules in. prefix is a string to output on the front of every module name on output.     pkgutil.walk_packages(path=None, prefix='', onerror=None)\u00b6 Yields (module_loader, name, ispkg) for all modules recursively on path, or, if path is None, all accessible modules. path should be either None or a list of paths to look for modules in. prefix is a string to output on the front of every module name on output. Note that this function must import all packages (not all modules!) on the given path, in order to access the __path__ attribute to find submodules. onerror is a function which gets called with one argument (the name of the package which was being imported) if any exception occurs while trying to import a package.  If no onerror function is supplied, ImportErrors are caught and ignored, while all other exceptions are propagated, terminating the search. Examples: # list all modules python can access walk_packages()  # list all submodules of ctypes walk_packages(ctypes.__path__, ctypes.__name__ + &#39;.&#39;)       pkgutil.get_data(package, resource)\u00b6 Get a resource from a package. This is a wrapper for the PEP 302 loader get_data() API.  The package argument should be the name of a package, in standard module format (foo.bar).  The resource argument should be in the form of a relative filename, using \/ as the path separator.  The parent directory name .. is not allowed, and nor is a rooted name (starting with a \/). The function returns a binary string that is the contents of the specified resource. For packages located in the filesystem, which have already been imported, this is the rough equivalent of: d = os.path.dirname(sys.modules[package].__file__) data = open(os.path.join(d, resource), &#39;rb&#39;).read()   If the package cannot be located or loaded, or it uses a PEP 302 loader which does not support get_data(), then None is returned.  New in version 2.6."},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.extend_path","title":"pkgutil.extend_path","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.find_loader","title":"pkgutil.find_loader","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.get_data","title":"pkgutil.get_data","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.get_importer","title":"pkgutil.get_importer","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.get_loader","title":"pkgutil.get_loader","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.ImpImporter","title":"pkgutil.ImpImporter","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.ImpLoader","title":"pkgutil.ImpLoader","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.iter_importers","title":"pkgutil.iter_importers","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.iter_modules","title":"pkgutil.iter_modules","description":""},{"url":"http:\/\/docs.python.org\/library\/pkgutil.html#pkgutil.walk_packages","title":"pkgutil.walk_packages","description":""},{"url":"http:\/\/docs.python.org\/library\/runpy.html","title":"runpy","description":"30.7. runpy &#8212; Locating and executing Python modules\u00b6  New in version 2.5. Source code: Lib\/runpy.py  The runpy module is used to locate and run Python modules without importing them first. Its main use is to implement the -m command line switch that allows scripts to be located using the Python module namespace rather than the filesystem. The runpy module provides two functions:   runpy.run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)\u00b6 Execute the code of the specified module and return the resulting module globals dictionary. The module&#8217;s code is first located using the standard import mechanism (refer to PEP 302 for details) and then executed in a fresh module namespace. If the supplied module name refers to a package rather than a normal module, then that package is imported and the __main__ submodule within that package is then executed and the resulting module globals dictionary returned. The optional dictionary argument init_globals may be used to pre-populate the module&#8217;s globals dictionary before the code is executed. The supplied dictionary will not be modified. If any of the special global variables below are defined in the supplied dictionary, those definitions are overridden by run_module(). The special global variables __name__, __file__, __loader__ and __package__ are set in the globals dictionary before the module code is executed (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implementation detail). __name__ is set to run_name if this optional argument is not None, to mod_name + '.__main__' if the named module is a package and to the mod_name argument otherwise. __file__ is set to the name provided by the module loader. If the loader does not make filename information available, this variable is set to None. __loader__ is set to the PEP 302 module loader used to retrieve the code for the module (This loader may be a wrapper around the standard import mechanism). __package__ is set to mod_name if the named module is a package and to mod_name.rpartition('.')[0] otherwise. If the argument alter_sys is supplied and evaluates to True, then sys.argv[0] is updated with the value of __file__ and sys.modules[__name__] is updated with a temporary module object for the module being executed. Both sys.argv[0] and sys.modules[__name__] are restored to their original values before the function returns. Note that this manipulation of sys is not thread-safe. Other threads may see the partially initialised module, as well as the altered list of arguments. It is recommended that the sys module be left alone when invoking this function from threaded code.  Changed in version 2.7: Added ability to execute packages by looking for a __main__ submodule     runpy.run_path(file_path, init_globals=None, run_name=None)\u00b6 Execute the code at the named filesystem location and return the resulting module globals dictionary. As with a script name supplied to the CPython command line, the supplied path may refer to a Python source file, a compiled bytecode file or a valid sys.path entry containing a __main__ module (e.g. a zipfile containing a top-level __main__.py file). For a simple script, the specified code is simply executed in a fresh module namespace. For a valid sys.path entry (typically a zipfile or directory), the entry is first added to the beginning of sys.path. The function then looks for and executes a __main__ module using the updated path. Note that there is no special protection against invoking an existing __main__ entry located elsewhere on sys.path if there is no such module at the specified location. The optional dictionary argument init_globals may be used to pre-populate the module&#8217;s globals dictionary before the code is executed. The supplied dictionary will not be modified. If any of the special global variables below are defined in the supplied dictionary, those definitions are overridden by run_path(). The special global variables __name__, __file__, __loader__ and __package__ are set in the globals dictionary before the module code is executed (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implementation detail). __name__ is set to run_name if this optional argument is not None and to '<run_path>' otherwise. __file__ is set to the name provided by the module loader. If the loader does not make filename information available, this variable is set to None. For a simple script, this will be set to file_path. __loader__ is set to the PEP 302 module loader used to retrieve the code for the module (This loader may be a wrapper around the standard import mechanism). For a simple script, this will be set to None. __package__ is set to __name__.rpartition('.')[0]. A number of alterations are also made to the sys module. Firstly, sys.path may be altered as described above. sys.argv[0] is updated with the value of file_path and sys.modules[__name__] is updated with a temporary module object for the module being executed. All modifications to items in sys are reverted before the function returns. Note that, unlike run_module(), the alterations made to sys are not optional in this function as these adjustments are essential to allowing the execution of sys.path entries. As the thread-safety limitations still apply, use of this function in threaded code should be either serialised with the import lock or delegated to a separate process.  New in version 2.7.    See also  PEP 338 - Executing modules as scripts PEP written and implemented by Nick Coghlan. PEP 366 - Main module explicit relative imports PEP written and implemented by Nick Coghlan.  Command line and environment - CPython command line details"},{"url":"http:\/\/docs.python.org\/library\/runpy.html#runpy.run_module","title":"runpy.run_module","description":""},{"url":"http:\/\/docs.python.org\/library\/runpy.html#runpy.run_path","title":"runpy.run_path","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html","title":"parser","description":"31.1. parser &#8212; Access Python parse trees\u00b6 The parser module provides an interface to Python&#8217;s internal parser and byte-code compiler.  The primary purpose for this interface is to allow Python code to edit the parse tree of a Python expression and create executable code from this.  This is better than trying to parse and modify an arbitrary Python code fragment as a string because parsing is performed in a manner identical to the code forming the application.  It is also faster.  Note From Python 2.5 onward, it&#8217;s much more convenient to cut in at the Abstract Syntax Tree (AST) generation and compilation stage, using the ast module. The parser module exports the names documented here also with &#8220;st&#8221; replaced by &#8220;ast&#8221;; this is a legacy from the time when there was no other AST and has nothing to do with the AST found in Python 2.5.  This is also the reason for the functions&#8217; keyword arguments being called ast, not st. The &#8220;ast&#8221; functions will be removed in Python 3.0.  There are a few things to note about this module which are important to making use of the data structures created.  This is not a tutorial on editing the parse trees for Python code, but some examples of using the parser module are presented. Most importantly, a good understanding of the Python grammar processed by the internal parser is required.  For full information on the language syntax, refer to The Python Language Reference.  The parser itself is created from a grammar specification defined in the file Grammar\/Grammar in the standard Python distribution.  The parse trees stored in the ST objects created by this module are the actual output from the internal parser when created by the expr() or suite() functions, described below.  The ST objects created by sequence2st() faithfully simulate those structures.  Be aware that the values of the sequences which are considered &#8220;correct&#8221; will vary from one version of Python to another as the formal grammar for the language is revised.  However, transporting code from one Python version to another as source text will always allow correct parse trees to be created in the target version, with the only restriction being that migrating to an older version of the interpreter will not support more recent language constructs.  The parse trees are not typically compatible from one version to another, whereas source code has always been forward-compatible. Each element of the sequences returned by st2list() or st2tuple() has a simple form.  Sequences representing non-terminal elements in the grammar always have a length greater than one.  The first element is an integer which identifies a production in the grammar.  These integers are given symbolic names in the C header file Include\/graminit.h and the Python module symbol.  Each additional element of the sequence represents a component of the production as recognized in the input string: these are always sequences which have the same form as the parent.  An important aspect of this structure which should be noted is that keywords used to identify the parent node type, such as the keyword if in an if_stmt, are included in the node tree without any special treatment.  For example, the if keyword is represented by the tuple (1, 'if'), where 1 is the numeric value associated with all NAME tokens, including variable and function names defined by the user.  In an alternate form returned when line number information is requested, the same token might be represented as (1, 'if', 12), where the 12 represents the line number at which the terminal symbol was found. Terminal elements are represented in much the same way, but without any child elements and the addition of the source text which was identified.  The example of the if keyword above is representative.  The various types of terminal symbols are defined in the C header file Include\/token.h and the Python module token. The ST objects are not required to support the functionality of this module, but are provided for three purposes: to allow an application to amortize the cost of processing complex parse trees, to provide a parse tree representation which conserves memory space when compared to the Python list or tuple representation, and to ease the creation of additional modules in C which manipulate parse trees.  A simple &#8220;wrapper&#8221; class may be created in Python to hide the use of ST objects. The parser module defines functions for a few distinct purposes.  The most important purposes are to create ST objects and to convert ST objects to other representations such as parse trees and compiled code objects, but there are also functions which serve to query the type of parse tree represented by an ST object.  See also  Module symbol Useful constants representing internal nodes of the parse tree. Module token Useful constants representing leaf nodes of the parse tree and functions for testing node values.    31.1.1. Creating ST Objects\u00b6 ST objects may be created from source code or from a parse tree. When creating an ST object from source, different functions are used to create the 'eval' and 'exec' forms.   parser.expr(source)\u00b6 The expr() function parses the parameter source as if it were an input to compile(source, 'file.py', 'eval').  If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is raised.    parser.suite(source)\u00b6 The suite() function parses the parameter source as if it were an input to compile(source, 'file.py', 'exec').  If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is raised.    parser.sequence2st(sequence)\u00b6 This function accepts a parse tree represented as a sequence and builds an internal representation if possible.  If it can validate that the tree conforms to the Python grammar and all nodes are valid node types in the host version of Python, an ST object is created from the internal representation and returned to the called.  If there is a problem creating the internal representation, or if the tree cannot be validated, a ParserError exception is raised.  An ST object created this way should not be assumed to compile correctly; normal exceptions raised by compilation may still be initiated when the ST object is passed to compilest().  This may indicate problems not related to syntax (such as a MemoryError exception), but may also be due to constructs such as the result of parsing del f(0), which escapes the Python parser but is checked by the bytecode compiler. Sequences representing terminal tokens may be represented as either two-element lists of the form (1, 'name') or as three-element lists of the form (1, 'name', 56).  If the third element is present, it is assumed to be a valid line number.  The line number may be specified for any subset of the terminal symbols in the input tree.     parser.tuple2st(sequence)\u00b6 This is the same function as sequence2st().  This entry point is maintained for backward compatibility.    31.1.2. Converting ST Objects\u00b6 ST objects, regardless of the input used to create them, may be converted to parse trees represented as list- or tuple- trees, or may be compiled into executable code objects.  Parse trees may be extracted with or without line numbering information.   parser.st2list(ast[, line_info])\u00b6 This function accepts an ST object from the caller in ast and returns a Python list representing the equivalent parse tree.  The resulting list representation can be used for inspection or the creation of a new parse tree in list form.  This function does not fail so long as memory is available to build the list representation.  If the parse tree will only be used for inspection, st2tuple() should be used instead to reduce memory consumption and fragmentation.  When the list representation is required, this function is significantly faster than retrieving a tuple representation and converting that to nested lists. If line_info is true, line number information will be included for all terminal tokens as a third element of the list representing the token.  Note that the line number provided specifies the line on which the token ends. This information is omitted if the flag is false or omitted.     parser.st2tuple(ast[, line_info])\u00b6 This function accepts an ST object from the caller in ast and returns a Python tuple representing the equivalent parse tree.  Other than returning a tuple instead of a list, this function is identical to st2list(). If line_info is true, line number information will be included for all terminal tokens as a third element of the list representing the token.  This information is omitted if the flag is false or omitted.     parser.compilest(ast[, filename='<syntax-tree>'])\u00b6 The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of an exec statement or a call to the built-in eval() function. This function provides the interface to the compiler, passing the internal parse tree from ast to the parser, using the source file name specified by the filename parameter. The default value supplied for filename indicates that the source was an ST object. Compiling an ST object may result in exceptions related to compilation; an example would be a SyntaxError caused by the parse tree for del f(0): this statement is considered legal within the formal grammar for Python but is not a legal language construct.  The SyntaxError raised for this condition is actually generated by the Python byte-compiler normally, which is why it can be raised at this point by the parser module.  Most causes of compilation failure can be diagnosed programmatically by inspection of the parse tree.     31.1.3. Queries on ST Objects\u00b6 Two functions are provided which allow an application to determine if an ST was created as an expression or a suite.  Neither of these functions can be used to determine if an ST was created from source code via expr() or suite() or from a parse tree via sequence2st().   parser.isexpr(ast)\u00b6 When ast represents an 'eval' form, this function returns true, otherwise it returns false.  This is useful, since code objects normally cannot be queried for this information using existing built-in functions.  Note that the code objects created by compilest() cannot be queried like this either, and are identical to those created by the built-in compile() function.     parser.issuite(ast)\u00b6 This function mirrors isexpr() in that it reports whether an ST object represents an 'exec' form, commonly known as a &#8220;suite.&#8221;  It is not safe to assume that this function is equivalent to not isexpr(ast), as additional syntactic fragments may be supported in the future.    31.1.4. Exceptions and Error Handling\u00b6 The parser module defines a single exception, but may also pass other built-in exceptions from other portions of the Python runtime environment.  See each function for information about the exceptions it can raise.   exception parser.ParserError\u00b6 Exception raised when a failure occurs within the parser module.  This is generally produced for validation failures rather than the built-in SyntaxError raised during normal parsing. The exception argument is either a string describing the reason of the failure or a tuple containing a sequence causing the failure from a parse tree passed to sequence2st() and an explanatory string.  Calls to sequence2st() need to be able to handle either type of exception, while calls to other functions in the module will only need to be aware of the simple string values.  Note that the functions compilest(), expr(), and suite() may raise exceptions which are normally raised by the parsing and compilation process.  These include the built in exceptions MemoryError, OverflowError, SyntaxError, and SystemError.  In these cases, these exceptions carry all the meaning normally associated with them. Refer to the descriptions of each function for detailed information.   31.1.5. ST Objects\u00b6 Ordered and equality comparisons are supported between ST objects. Pickling of ST objects (using the pickle module) is also supported.   parser.STType\u00b6 The type of the objects returned by expr(), suite() and sequence2st().  ST objects have the following methods:   ST.compile([filename])\u00b6 Same as compilest(st, filename).    ST.isexpr()\u00b6 Same as isexpr(st).    ST.issuite()\u00b6 Same as issuite(st).    ST.tolist([line_info])\u00b6 Same as st2list(st, line_info).    ST.totuple([line_info])\u00b6 Same as st2tuple(st, line_info).    31.1.6. Example: Emulation of compile()\u00b6 While many useful operations may take place between parsing and bytecode generation, the simplest operation is to do nothing.  For this purpose, using the parser module to produce an intermediate data structure is equivalent to the code >>> code = compile(&#39;a + 5&#39;, &#39;file.py&#39;, &#39;eval&#39;) >>> a = 5 >>> eval(code) 10   The equivalent operation using the parser module is somewhat longer, and allows the intermediate internal parse tree to be retained as an ST object: >>> import parser >>> st = parser.expr(&#39;a + 5&#39;) >>> code = st.compile(&#39;file.py&#39;) >>> a = 5 >>> eval(code) 10   An application which needs both ST and code objects can package this code into readily available functions: import parser  def load_suite(source_string):     st = parser.suite(source_string)     return st, st.compile()  def load_expression(source_string):     st = parser.expr(source_string)     return st, st.compile()"},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.compilest","title":"parser.compilest","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.expr","title":"parser.expr","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.isexpr","title":"parser.isexpr","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.issuite","title":"parser.issuite","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.sequence2st","title":"parser.sequence2st","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.ST.compile","title":"parser.ST.compile","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.ST.isexpr","title":"parser.ST.isexpr","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.ST.issuite","title":"parser.ST.issuite","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.ST.tolist","title":"parser.ST.tolist","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.ST.totuple","title":"parser.ST.totuple","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.st2list","title":"parser.st2list","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.st2tuple","title":"parser.st2tuple","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.suite","title":"parser.suite","description":""},{"url":"http:\/\/docs.python.org\/library\/parser.html#parser.tuple2st","title":"parser.tuple2st","description":""},{"url":"http:\/\/docs.python.org\/library\/symbol.html","title":"symbol","description":"31.4. symbol &#8212; Constants used with Python parse trees\u00b6 Source code: Lib\/symbol.py  This module provides constants which represent the numeric values of internal nodes of the parse tree.  Unlike most Python constants, these use lower-case names.  Refer to the file Grammar\/Grammar in the Python distribution for the definitions of the names in the context of the language grammar.  The specific numeric values which the names map to may change between Python versions. This module also provides one additional data object:   symbol.sym_name\u00b6 Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated."},{"url":"http:\/\/docs.python.org\/library\/ast.html","title":"ast","description":"31.2. ast &#8212; Abstract Syntax Trees\u00b6  New in version 2.5: The low-level _ast module containing only the node classes.  New in version 2.6: The high-level ast module containing all helpers. Source code: Lib\/ast.py  The ast module helps Python applications to process trees of the Python abstract syntax grammar.  The abstract syntax itself might change with each Python release; this module helps to find out programmatically what the current grammar looks like. An abstract syntax tree can be generated by passing ast.PyCF_ONLY_AST as a flag to the compile() built-in function, or using the parse() helper provided in this module.  The result will be a tree of objects whose classes all inherit from ast.AST.  An abstract syntax tree can be compiled into a Python code object using the built-in compile() function.  31.2.1. Node classes\u00b6   class ast.AST\u00b6 This is the base of all AST node classes.  The actual node classes are derived from the Parser\/Python.asdl file, which is reproduced below.  They are defined in the _ast C module and re-exported in ast. There is one class defined for each left-hand side symbol in the abstract grammar (for example, ast.stmt or ast.expr).  In addition, there is one class defined for each constructor on the right-hand side; these classes inherit from the classes for the left-hand side trees.  For example, ast.BinOp inherits from ast.expr.  For production rules with alternatives (aka &#8220;sums&#8221;), the left-hand side class is abstract: only instances of specific constructor nodes are ever created.   _fields\u00b6 Each concrete class has an attribute _fields which gives the names of all child nodes. Each instance of a concrete class has one attribute for each child node, of the type as defined in the grammar.  For example, ast.BinOp instances have an attribute left of type ast.expr. If these attributes are marked as optional in the grammar (using a question mark), the value might be None.  If the attributes can have zero-or-more values (marked with an asterisk), the values are represented as Python lists.  All possible attributes must be present and have valid values when compiling an AST with compile().     lineno\u00b6  col_offset\u00b6 Instances of ast.expr and ast.stmt subclasses have lineno and col_offset attributes.  The lineno is the line number of source text (1-indexed so the first line is line 1) and the col_offset is the UTF-8 byte offset of the first token that generated the node.  The UTF-8 offset is recorded because the parser uses UTF-8 internally.  The constructor of a class ast.T parses its arguments as follows:  If there are positional arguments, there must be as many as there are items in T._fields; they will be assigned as attributes of these names. If there are keyword arguments, they will set the attributes of the same names to the given values.  For example, to create and populate an ast.UnaryOp node, you could use node = ast.UnaryOp() node.op = ast.USub() node.operand = ast.Num() node.operand.n = 5 node.operand.lineno = 0 node.operand.col_offset = 0 node.lineno = 0 node.col_offset = 0   or the more compact node = ast.UnaryOp(ast.USub(), ast.Num(5, lineno=0, col_offset=0),                    lineno=0, col_offset=0)    New in version 2.6: The constructor as explained above was added.  In Python 2.5 nodes had to be created by calling the class constructor without arguments and setting the attributes afterwards.     31.2.2. Abstract Grammar\u00b6 The module defines a string constant __version__ which is the decimal Subversion revision number of the file shown below. The abstract grammar is currently defined as follows: -- ASDL's five builtin types are identifier, int, string, object, bool  module Python version \"$Revision$\" { \tmod = Module(stmt* body) \t    | Interactive(stmt* body) \t    | Expression(expr body)  \t    -- not really an actual node but useful in Jython's typesystem. \t    | Suite(stmt* body)  \tstmt = FunctionDef(identifier name, arguments args,                              stmt* body, expr* decorator_list) \t      | ClassDef(identifier name, expr* bases, stmt* body, expr* decorator_list) \t      | Return(expr? value)  \t      | Delete(expr* targets) \t      | Assign(expr* targets, expr value) \t      | AugAssign(expr target, operator op, expr value)  \t      -- not sure if bool is allowed, can always use int  \t      | Print(expr? dest, expr* values, bool nl)  \t      -- use 'orelse' because else is a keyword in target languages \t      | For(expr target, expr iter, stmt* body, stmt* orelse) \t      | While(expr test, stmt* body, stmt* orelse) \t      | If(expr test, stmt* body, stmt* orelse) \t      | With(expr context_expr, expr? optional_vars, stmt* body)  \t      -- 'type' is a bad name \t      | Raise(expr? type, expr? inst, expr? tback) \t      | TryExcept(stmt* body, excepthandler* handlers, stmt* orelse) \t      | TryFinally(stmt* body, stmt* finalbody) \t      | Assert(expr test, expr? msg)  \t      | Import(alias* names) \t      | ImportFrom(identifier? module, alias* names, int? level)  \t      -- Doesn't capture requirement that locals must be \t      -- defined if globals is \t      -- still supports use as a function! \t      | Exec(expr body, expr? globals, expr? locals)  \t      | Global(identifier* names) \t      | Expr(expr value) \t      | Pass | Break | Continue  \t      -- XXX Jython will be different \t      -- col_offset is the byte offset in the utf8 string the parser uses \t      attributes (int lineno, int col_offset)  \t      -- BoolOp() can use left & right? \texpr = BoolOp(boolop op, expr* values) \t     | BinOp(expr left, operator op, expr right) \t     | UnaryOp(unaryop op, expr operand) \t     | Lambda(arguments args, expr body) \t     | IfExp(expr test, expr body, expr orelse) \t     | Dict(expr* keys, expr* values) \t     | Set(expr* elts) \t     | ListComp(expr elt, comprehension* generators) \t     | SetComp(expr elt, comprehension* generators) \t     | DictComp(expr key, expr value, comprehension* generators) \t     | GeneratorExp(expr elt, comprehension* generators) \t     -- the grammar constrains where yield expressions can occur \t     | Yield(expr? value) \t     -- need sequences for compare to distinguish between \t     -- x < 4 < 3 and (x < 4) < 3 \t     | Compare(expr left, cmpop* ops, expr* comparators) \t     | Call(expr func, expr* args, keyword* keywords, \t\t\t expr? starargs, expr? kwargs) \t     | Repr(expr value) \t     | Num(object n) -- a number as a PyObject. \t     | Str(string s) -- need to specify raw, unicode, etc? \t     -- other literals? bools?  \t     -- the following expression can appear in assignment context \t     | Attribute(expr value, identifier attr, expr_context ctx) \t     | Subscript(expr value, slice slice, expr_context ctx) \t     | Name(identifier id, expr_context ctx) \t     | List(expr* elts, expr_context ctx)  \t     | Tuple(expr* elts, expr_context ctx)  \t      -- col_offset is the byte offset in the utf8 string the parser uses \t      attributes (int lineno, int col_offset)  \texpr_context = Load | Store | Del | AugLoad | AugStore | Param  \tslice = Ellipsis | Slice(expr? lower, expr? upper, expr? step)  \t      | ExtSlice(slice* dims)  \t      | Index(expr value)   \tboolop = And | Or   \toperator = Add | Sub | Mult | Div | Mod | Pow | LShift                   | RShift | BitOr | BitXor | BitAnd | FloorDiv  \tunaryop = Invert | Not | UAdd | USub  \tcmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn  \tcomprehension = (expr target, expr iter, expr* ifs)  \t-- not sure what to call the first argument for raise and except \texcepthandler = ExceptHandler(expr? type, expr? name, stmt* body) \t                attributes (int lineno, int col_offset)  \targuments = (expr* args, identifier? vararg,  \t\t     identifier? kwarg, expr* defaults)          -- keyword arguments supplied to call         keyword = (identifier arg, expr value)          -- import name with optional 'as' alias.         alias = (identifier name, identifier? asname) }     31.2.3. ast Helpers\u00b6  New in version 2.6. Apart from the node classes, ast module defines these utility functions and classes for traversing abstract syntax trees:   ast.parse(source, filename='<unknown>', mode='exec')\u00b6 Parse the source into an AST node.  Equivalent to compile(source, filename, mode, ast.PyCF_ONLY_AST).    ast.literal_eval(node_or_string)\u00b6 Safely evaluate an expression node or a string containing a Python expression.  The string or node provided may only consist of the following Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and None. This can be used for safely evaluating strings containing Python expressions from untrusted sources without the need to parse the values oneself.     ast.get_docstring(node, clean=True)\u00b6 Return the docstring of the given node (which must be a FunctionDef, ClassDef or Module node), or None if it has no docstring.  If clean is true, clean up the docstring&#8217;s indentation with inspect.cleandoc().    ast.fix_missing_locations(node)\u00b6 When you compile a node tree with compile(), the compiler expects lineno and col_offset attributes for every node that supports them.  This is rather tedious to fill in for generated nodes, so this helper adds these attributes recursively where not already set, by setting them to the values of the parent node.  It works recursively starting at node.    ast.increment_lineno(node, n=1)\u00b6 Increment the line number of each node in the tree starting at node by n. This is useful to &#8220;move code&#8221; to a different location in a file.    ast.copy_location(new_node, old_node)\u00b6 Copy source location (lineno and col_offset) from old_node to new_node if possible, and return new_node.    ast.iter_fields(node)\u00b6 Yield a tuple of (fieldname, value) for each field in node._fields that is present on node.    ast.iter_child_nodes(node)\u00b6 Yield all direct child nodes of node, that is, all fields that are nodes and all items of fields that are lists of nodes.    ast.walk(node)\u00b6 Recursively yield all descendant nodes in the tree starting at node (including node itself), in no specified order.  This is useful if you only want to modify nodes in place and don&#8217;t care about the context.    class ast.NodeVisitor\u00b6 A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.  This function may return a value which is forwarded by the visit() method. This class is meant to be subclassed, with the subclass adding visitor methods.   visit(node)\u00b6 Visit a node.  The default implementation calls the method called self.visit_classname where classname is the name of the node class, or generic_visit() if that method doesn&#8217;t exist.    generic_visit(node)\u00b6 This visitor calls visit() on all children of the node. Note that child nodes of nodes that have a custom visitor method won&#8217;t be visited unless the visitor calls generic_visit() or visits them itself.   Don&#8217;t use the NodeVisitor if you want to apply changes to nodes during traversal.  For this a special visitor exists (NodeTransformer) that allows modifications.     class ast.NodeTransformer\u00b6 A NodeVisitor subclass that walks the abstract syntax tree and allows modification of nodes. The NodeTransformer will walk the AST and use the return value of the visitor methods to replace or remove the old node.  If the return value of the visitor method is None, the node will be removed from its location, otherwise it is replaced with the return value.  The return value may be the original node in which case no replacement takes place. Here is an example transformer that rewrites all occurrences of name lookups (foo) to data['foo']: class RewriteName(NodeTransformer):      def visit_Name(self, node):         return copy_location(Subscript(             value=Name(id=&#39;data&#39;, ctx=Load()),             slice=Index(value=Str(s=node.id)),             ctx=node.ctx         ), node)   Keep in mind that if the node you&#8217;re operating on has child nodes you must either transform the child nodes yourself or call the generic_visit() method for the node first. For nodes that were part of a collection of statements (that applies to all statement nodes), the visitor may also return a list of nodes rather than just a single node. Usually you use the transformer like this: node = YourTransformer().visit(node)       ast.dump(node, annotate_fields=True, include_attributes=False)\u00b6 Return a formatted dump of the tree in node.  This is mainly useful for debugging purposes.  The returned string will show the names and the values for fields.  This makes the code impossible to evaluate, so if evaluation is wanted annotate_fields must be set to False.  Attributes such as line numbers and column offsets are not dumped by default.  If this is wanted, include_attributes can be set to True."},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.AST","title":"ast.AST","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.copy_location","title":"ast.copy_location","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.dump","title":"ast.dump","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.fix_missing_locations","title":"ast.fix_missing_locations","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.get_docstring","title":"ast.get_docstring","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.increment_lineno","title":"ast.increment_lineno","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.iter_child_nodes","title":"ast.iter_child_nodes","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.iter_fields","title":"ast.iter_fields","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.literal_eval","title":"ast.literal_eval","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.NodeTransformer","title":"ast.NodeTransformer","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.NodeVisitor","title":"ast.NodeVisitor","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.NodeVisitor.generic_visit","title":"ast.NodeVisitor.generic_visit","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.NodeVisitor.visit","title":"ast.NodeVisitor.visit","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.parse","title":"ast.parse","description":""},{"url":"http:\/\/docs.python.org\/library\/ast.html#ast.walk","title":"ast.walk","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html","title":"symtable","description":"31.3. symtable &#8212; Access to the compiler&#8217;s symbol tables\u00b6 Symbol tables are generated by the compiler from AST just before bytecode is generated.  The symbol table is responsible for calculating the scope of every identifier in the code.  symtable provides an interface to examine these tables.  31.3.1. Generating Symbol Tables\u00b6   symtable.symtable(code, filename, compile_type)\u00b6 Return the toplevel SymbolTable for the Python source code. filename is the name of the file containing the code.  compile_type is like the mode argument to compile().    31.3.2. Examining Symbol Tables\u00b6   class symtable.SymbolTable\u00b6 A namespace table for a block.  The constructor is not public.   get_type()\u00b6 Return the type of the symbol table.  Possible values are 'class', 'module', and 'function'.    get_id()\u00b6 Return the table&#8217;s identifier.    get_name()\u00b6 Return the table&#8217;s name.  This is the name of the class if the table is for a class, the name of the function if the table is for a function, or 'top' if the table is global (get_type() returns 'module').    get_lineno()\u00b6 Return the number of the first line in the block this table represents.    is_optimized()\u00b6 Return True if the locals in this table can be optimized.    is_nested()\u00b6 Return True if the block is a nested class or function.    has_children()\u00b6 Return True if the block has nested namespaces within it.  These can be obtained with get_children().    has_exec()\u00b6 Return True if the block uses exec.    has_import_star()\u00b6 Return True if the block uses a starred from-import.    get_identifiers()\u00b6 Return a list of names of symbols in this table.    lookup(name)\u00b6 Lookup name in the table and return a Symbol instance.    get_symbols()\u00b6 Return a list of Symbol instances for names in the table.    get_children()\u00b6 Return a list of the nested symbol tables.      class symtable.Function\u00b6 A namespace for a function or method.  This class inherits SymbolTable.   get_parameters()\u00b6 Return a tuple containing names of parameters to this function.    get_locals()\u00b6 Return a tuple containing names of locals in this function.    get_globals()\u00b6 Return a tuple containing names of globals in this function.    get_frees()\u00b6 Return a tuple containing names of free variables in this function.      class symtable.Class\u00b6 A namespace of a class.  This class inherits SymbolTable.   get_methods()\u00b6 Return a tuple containing the names of methods declared in the class.      class symtable.Symbol\u00b6 An entry in a SymbolTable corresponding to an identifier in the source.  The constructor is not public.   get_name()\u00b6 Return the symbol&#8217;s name.    is_referenced()\u00b6 Return True if the symbol is used in its block.    is_imported()\u00b6 Return True if the symbol is created from an import statement.    is_parameter()\u00b6 Return True if the symbol is a parameter.    is_global()\u00b6 Return True if the symbol is global.    is_declared_global()\u00b6 Return True if the symbol is declared global with a global statement.    is_local()\u00b6 Return True if the symbol is local to its block.    is_free()\u00b6 Return True if the symbol is referenced in its block, but not assigned to.    is_assigned()\u00b6 Return True if the symbol is assigned to in its block.    is_namespace()\u00b6 Return True if name binding introduces new namespace. If the name is used as the target of a function or class statement, this will be true. For example: >>> table = symtable.symtable(\"def some_func(): pass\", \"string\", \"exec\") >>> table.lookup(\"some_func\").is_namespace() True   Note that a single name can be bound to multiple objects.  If the result is True, the name may also be bound to other objects, like an int or list, that does not introduce a new namespace.     get_namespaces()\u00b6 Return a list of namespaces bound to this name.    get_namespace()\u00b6 Return the namespace bound to this name.  If more than one namespace is bound, a ValueError is raised."},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Class","title":"symtable.Class","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Class.get_methods","title":"symtable.Class.get_methods","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Function","title":"symtable.Function","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Function.get_frees","title":"symtable.Function.get_frees","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Function.get_globals","title":"symtable.Function.get_globals","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Function.get_locals","title":"symtable.Function.get_locals","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Function.get_parameters","title":"symtable.Function.get_parameters","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol","title":"symtable.Symbol","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.get_name","title":"symtable.Symbol.get_name","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.get_namespace","title":"symtable.Symbol.get_namespace","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.get_namespaces","title":"symtable.Symbol.get_namespaces","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_assigned","title":"symtable.Symbol.is_assigned","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_declared_global","title":"symtable.Symbol.is_declared_global","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_free","title":"symtable.Symbol.is_free","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_global","title":"symtable.Symbol.is_global","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_imported","title":"symtable.Symbol.is_imported","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_local","title":"symtable.Symbol.is_local","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_namespace","title":"symtable.Symbol.is_namespace","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_parameter","title":"symtable.Symbol.is_parameter","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.Symbol.is_referenced","title":"symtable.Symbol.is_referenced","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable","title":"symtable.SymbolTable","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.get_children","title":"symtable.SymbolTable.get_children","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.get_id","title":"symtable.SymbolTable.get_id","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.get_identifiers","title":"symtable.SymbolTable.get_identifiers","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.get_lineno","title":"symtable.SymbolTable.get_lineno","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.get_name","title":"symtable.SymbolTable.get_name","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.get_symbols","title":"symtable.SymbolTable.get_symbols","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.get_type","title":"symtable.SymbolTable.get_type","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.has_children","title":"symtable.SymbolTable.has_children","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.has_exec","title":"symtable.SymbolTable.has_exec","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.has_import_star","title":"symtable.SymbolTable.has_import_star","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.is_nested","title":"symtable.SymbolTable.is_nested","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.is_optimized","title":"symtable.SymbolTable.is_optimized","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.SymbolTable.lookup","title":"symtable.SymbolTable.lookup","description":""},{"url":"http:\/\/docs.python.org\/library\/symtable.html#symtable.symtable","title":"symtable.symtable","description":""},{"url":"http:\/\/docs.python.org\/library\/keyword.html","title":"keyword","description":"31.6. keyword &#8212; Testing for Python keywords\u00b6 Source code: Lib\/keyword.py  This module allows a Python program to determine if a string is a keyword.   keyword.iskeyword(s)\u00b6 Return true if s is a Python keyword.    keyword.kwlist\u00b6 Sequence containing all the keywords defined for the interpreter.  If any keywords are defined to only be active when particular __future__ statements are in effect, these will be included as well."},{"url":"http:\/\/docs.python.org\/library\/keyword.html#keyword.iskeyword","title":"keyword.iskeyword","description":""},{"url":"http:\/\/docs.python.org\/library\/token.html","title":"token","description":"31.5. token &#8212; Constants used with Python parse trees\u00b6 Source code: Lib\/token.py  This module provides constants which represent the numeric values of leaf nodes of the parse tree (terminal tokens).  Refer to the file Grammar\/Grammar in the Python distribution for the definitions of the names in the context of the language grammar.  The specific numeric values which the names map to may change between Python versions. The module also provides a mapping from numeric codes to names and some functions.  The functions mirror definitions in the Python C header files.   token.tok_name\u00b6 Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.    token.ISTERMINAL(x)\u00b6 Return true for terminal token values.    token.ISNONTERMINAL(x)\u00b6 Return true for non-terminal token values.    token.ISEOF(x)\u00b6 Return true if x is the marker indicating the end of input.  The token constants are:   token.ENDMARKER\u00b6  token.NAME\u00b6  token.NUMBER\u00b6  token.STRING\u00b6  token.NEWLINE\u00b6  token.INDENT\u00b6  token.DEDENT\u00b6  token.LPAR\u00b6  token.RPAR\u00b6  token.LSQB\u00b6  token.RSQB\u00b6  token.COLON\u00b6  token.COMMA\u00b6  token.SEMI\u00b6  token.PLUS\u00b6  token.MINUS\u00b6  token.STAR\u00b6  token.SLASH\u00b6  token.VBAR\u00b6  token.AMPER\u00b6  token.LESS\u00b6  token.GREATER\u00b6  token.EQUAL\u00b6  token.DOT\u00b6  token.PERCENT\u00b6  token.BACKQUOTE\u00b6  token.LBRACE\u00b6  token.RBRACE\u00b6  token.EQEQUAL\u00b6  token.NOTEQUAL\u00b6  token.LESSEQUAL\u00b6  token.GREATEREQUAL\u00b6  token.TILDE\u00b6  token.CIRCUMFLEX\u00b6  token.LEFTSHIFT\u00b6  token.RIGHTSHIFT\u00b6  token.DOUBLESTAR\u00b6  token.PLUSEQUAL\u00b6  token.MINEQUAL\u00b6  token.STAREQUAL\u00b6  token.SLASHEQUAL\u00b6  token.PERCENTEQUAL\u00b6  token.AMPEREQUAL\u00b6  token.VBAREQUAL\u00b6  token.CIRCUMFLEXEQUAL\u00b6  token.LEFTSHIFTEQUAL\u00b6  token.RIGHTSHIFTEQUAL\u00b6  token.DOUBLESTAREQUAL\u00b6  token.DOUBLESLASH\u00b6  token.DOUBLESLASHEQUAL\u00b6  token.AT\u00b6  token.OP\u00b6  token.ERRORTOKEN\u00b6  token.N_TOKENS\u00b6  token.NT_OFFSET\u00b6    See also  Module parser The second example for the parser module shows how to use the symbol module."},{"url":"http:\/\/docs.python.org\/library\/token.html#token.ISEOF","title":"token.ISEOF","description":""},{"url":"http:\/\/docs.python.org\/library\/token.html#token.ISNONTERMINAL","title":"token.ISNONTERMINAL","description":""},{"url":"http:\/\/docs.python.org\/library\/token.html#token.ISTERMINAL","title":"token.ISTERMINAL","description":""},{"url":"http:\/\/docs.python.org\/library\/tabnanny.html","title":"tabnanny","description":"31.8. tabnanny &#8212; Detection of ambiguous indentation\u00b6 Source code: Lib\/tabnanny.py  For the time being this module is intended to be called as a script. However it is possible to import it into an IDE and use the function check() described below.  Note The API provided by this module is likely to change in future releases; such changes may not be backward compatible.    tabnanny.check(file_or_dir)\u00b6 If file_or_dir is a directory and not a symbolic link, then recursively descend the directory tree named by file_or_dir, checking all .py files along the way.  If file_or_dir is an ordinary Python source file, it is checked for whitespace related problems.  The diagnostic messages are written to standard output using the print statement.    tabnanny.verbose\u00b6 Flag indicating whether to print verbose messages. This is incremented by the -v option if called as a script.    tabnanny.filename_only\u00b6 Flag indicating whether to print only the filenames of files containing whitespace related problems.  This is set to true by the -q option if called as a script.    exception tabnanny.NannyNag\u00b6 Raised by tokeneater() if detecting an ambiguous indent. Captured and handled in check().    tabnanny.tokeneater(type, token, start, end, line)\u00b6 This function is used by check() as a callback parameter to the function tokenize.tokenize().   See also  Module tokenize Lexical scanner for Python source code."},{"url":"http:\/\/docs.python.org\/library\/tabnanny.html#tabnanny.check","title":"tabnanny.check","description":""},{"url":"http:\/\/docs.python.org\/library\/tabnanny.html#tabnanny.tokeneater","title":"tabnanny.tokeneater","description":""},{"url":"http:\/\/docs.python.org\/library\/pyclbr.html","title":"pyclbr","description":"31.9. pyclbr &#8212; Python class browser support\u00b6 Source code: Lib\/pyclbr.py  The pyclbr module can be used to determine some limited information about the classes, methods and top-level functions defined in a module.  The information provided is sufficient to implement a traditional three-pane class browser.  The information is extracted from the source code rather than by importing the module, so this module is safe to use with untrusted code.  This restriction makes it impossible to use this module with modules not implemented in Python, including all standard and optional extension modules.   pyclbr.readmodule(module[, path=None])\u00b6 Read a module and return a dictionary mapping class names to class descriptor objects.  The parameter module should be the name of a module as a string; it may be the name of a module within a package.  The path parameter should be a sequence, and is used to augment the value of sys.path, which is used to locate module source code.    pyclbr.readmodule_ex(module[, path=None])\u00b6 Like readmodule(), but the returned dictionary, in addition to mapping class names to class descriptor objects, also maps top-level function names to function descriptor objects.  Moreover, if the module being read is a package, the key '__path__' in the returned dictionary has as its value a list which contains the package search path.   31.9.1. Class Objects\u00b6 The Class objects used as values in the dictionary returned by readmodule() and readmodule_ex() provide the following data attributes:   Class.module\u00b6 The name of the module defining the class described by the class descriptor.    Class.name\u00b6 The name of the class.    Class.super\u00b6 A list of Class objects which describe the immediate base classes of the class being described.  Classes which are named as superclasses but which are not discoverable by readmodule() are listed as a string with the class name instead of as Class objects.    Class.methods\u00b6 A dictionary mapping method names to line numbers.    Class.file\u00b6 Name of the file containing the class statement defining the class.    Class.lineno\u00b6 The line number of the class statement within the file named by file.    31.9.2. Function Objects\u00b6 The Function objects used as values in the dictionary returned by readmodule_ex() provide the following attributes:   Function.module\u00b6 The name of the module defining the function described by the function descriptor.    Function.name\u00b6 The name of the function.    Function.file\u00b6 Name of the file containing the def statement defining the function.    Function.lineno\u00b6 The line number of the def statement within the file named by file."},{"url":"http:\/\/docs.python.org\/library\/pyclbr.html#pyclbr.readmodule","title":"pyclbr.readmodule","description":""},{"url":"http:\/\/docs.python.org\/library\/pyclbr.html#pyclbr.readmodule_ex","title":"pyclbr.readmodule_ex","description":""},{"url":"http:\/\/docs.python.org\/library\/py_compile.html","title":"py_compile","description":"31.10. py_compile &#8212; Compile Python source files\u00b6 Source code: Lib\/py_compile.py  The py_compile module provides a function to generate a byte-code file from a source file, and another function used when the module source file is invoked as a script. Though not often needed, this function can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte-code cache files in the directory containing the source code.   exception py_compile.PyCompileError\u00b6 Exception raised when an error occurs while attempting to compile the file.    py_compile.compile(file[, cfile[, dfile[, doraise]]])\u00b6 Compile a source file to byte-code and write out the byte-code cache  file.  The source code is loaded from the file name file.  The  byte-code is written to cfile, which defaults to file + 'c' ('o' if optimization is enabled in the current interpreter).  If dfile is specified, it is used as the name of the source file in error messages instead of file.  If doraise is true, a PyCompileError is raised when an error is encountered while compiling file. If doraise is false (the default), an error string is written to sys.stderr, but no exception is raised.    py_compile.main([args])\u00b6 Compile several source files.  The files named in args (or on the command line, if args is not specified) are compiled and the resulting bytecode is cached in the normal manner.  This function does not search a directory structure to locate source files; it only compiles files named explicitly. If '-' is the only parameter in args, the list of files is taken from standard input.  Changed in version 2.7: Added support for '-'.   When this module is run as a script, the main() is used to compile all the files named on the command line.  The exit status is nonzero if one of the files could not be compiled.  Changed in version 2.6: Added the nonzero exit status when module is run as a script.  See also  Module compileall Utilities to compile all Python source files in a directory tree."},{"url":"http:\/\/docs.python.org\/library\/py_compile.html#py_compile_py_compile.compile","title":"py_compile.compile","description":""},{"url":"http:\/\/docs.python.org\/library\/py_compile.html#py_compile_py_compile.main","title":"py_compile.main","description":""},{"url":"http:\/\/docs.python.org\/library\/tokenize.html","title":"tokenize","description":"31.7. tokenize &#8212; Tokenizer for Python source\u00b6 Source code: Lib\/tokenize.py  The tokenize module provides a lexical scanner for Python source code, implemented in Python.  The scanner in this module returns comments as tokens as well, making it useful for implementing &#8220;pretty-printers,&#8221; including colorizers for on-screen displays. The primary entry point is a generator:   tokenize.generate_tokens(readline)\u00b6 The generate_tokens() generator requires one argument, readline, which must be a callable object which provides the same interface as the readline() method of built-in file objects (see section File Objects).  Each call to the function should return one line of input as a string. The generator produces 5-tuples with these members: the token type; the token string; a 2-tuple (srow, scol) of ints specifying the row and column where the token begins in the source; a 2-tuple (erow, ecol) of ints specifying the row and column where the token ends in the source; and the line on which the token was found.  The line passed (the last tuple item) is the logical line; continuation lines are included.  New in version 2.2.   An older entry point is retained for backward compatibility:   tokenize.tokenize(readline[, tokeneater])\u00b6 The tokenize() function accepts two parameters: one representing the input stream, and one providing an output mechanism for tokenize(). The first parameter, readline, must be a callable object which provides the same interface as the readline() method of built-in file objects (see section File Objects).  Each call to the function should return one line of input as a string. Alternately, readline may be a callable object that signals completion by raising StopIteration.  Changed in version 2.5: Added StopIteration support. The second parameter, tokeneater, must also be a callable object.  It is called once for each token, with five arguments, corresponding to the tuples generated by generate_tokens().   All constants from the token module are also exported from tokenize, as are two additional token type values that might be passed to the tokeneater function by tokenize():   tokenize.COMMENT\u00b6 Token value used to indicate a comment.    tokenize.NL\u00b6 Token value used to indicate a non-terminating newline.  The NEWLINE token indicates the end of a logical line of Python code; NL tokens are generated when a logical line of code is continued over multiple physical lines.  Another function is provided to reverse the tokenization process. This is useful for creating tools that tokenize a script, modify the token stream, and write back the modified script.   tokenize.untokenize(iterable)\u00b6 Converts tokens back into Python source code.  The iterable must return sequences with at least two elements, the token type and the token string.  Any additional sequence elements are ignored. The reconstructed script is returned as a single string.  The result is guaranteed to tokenize back to match the input so that the conversion is lossless and round-trips are assured.  The guarantee applies only to the token type and token string as the spacing between tokens (column positions) may change.  New in version 2.5.   Example of a script re-writer that transforms float literals into Decimal objects: def decistmt(s):     \"\"\"Substitute Decimals for floats in a string of statements.      >>> from decimal import Decimal     >>> s = &#39;print +21.3e-5*-.1234\/81.7&#39;     >>> decistmt(s)     \"print +Decimal (&#39;21.3e-5&#39;)*-Decimal (&#39;.1234&#39;)\/Decimal (&#39;81.7&#39;)\"      >>> exec(s)     -3.21716034272e-007     >>> exec(decistmt(s))     -3.217160342717258261933904529E-7      \"\"\"     result = []     g = generate_tokens(StringIO(s).readline)   # tokenize the string     for toknum, tokval, _, _, _  in g:         if toknum == NUMBER and &#39;.&#39; in tokval:  # replace NUMBER tokens             result.extend([                 (NAME, &#39;Decimal&#39;),                 (OP, &#39;(&#39;),                 (STRING, repr(tokval)),                 (OP, &#39;)&#39;)             ])         else:             result.append((toknum, tokval))     return untokenize(result)"},{"url":"http:\/\/docs.python.org\/library\/tokenize.html#tokenize.generate_tokens","title":"tokenize.generate_tokens","description":""},{"url":"http:\/\/docs.python.org\/library\/tokenize.html#tokenize.tokenize","title":"tokenize.tokenize","description":""},{"url":"http:\/\/docs.python.org\/library\/tokenize.html#tokenize.untokenize","title":"tokenize.untokenize","description":""},{"url":"http:\/\/docs.python.org\/library\/compileall.html","title":"compileall","description":"31.11. compileall &#8212; Byte-compile Python libraries\u00b6 This module provides some utility functions to support installing Python libraries.  These functions compile Python source files in a directory tree. This module can be used to create the cached byte-code files at library installation time, which makes them available for use even by users who don&#8217;t have write permission to the library directories.  31.11.1. Command-line use\u00b6 This module can work as a script (using python -m compileall) to compile Python sources.   [directory|file]... Positional arguments are files to compile or directories that contain source files, traversed recursively.  If no argument is given, behave as if the command line was -l <directories from sys.path>.    -l\u00b6 Do not recurse into subdirectories, only compile source code files directly contained in the named or implied directories.    -f\u00b6 Force rebuild even if timestamps are up-to-date.    -q\u00b6 Do not print the list of files compiled, print only error messages.    -d destdir\u00b6 Directory prepended to the path to each file being compiled.  This will appear in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed.    -x regex\u00b6 regex is used to search the full path to each file considered for compilation, and if the regex produces a match, the file is skipped.    -i list\u00b6 Read the file list and add each line that it contains to the list of files and directories to compile.  If list is -, read lines from stdin.   Changed in version 2.7: Added the -i  option.   31.11.2. Public functions\u00b6   compileall.compile_dir(dir[, maxlevels[, ddir[, force[, rx[, quiet]]]]])\u00b6 Recursively descend the directory tree named by dir, compiling all .py files along the way. The maxlevels parameter is used to limit the depth of the recursion; it defaults to 10. If ddir is given, it is prepended to the path to each file being compiled for use in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed. If force is true, modules are re-compiled even if the timestamps are up to date. If rx is given, its search method is called on the complete path to each file considered for compilation, and if it returns a true value, the file is skipped. If quiet is true, nothing is printed to the standard output unless errors occur.     compileall.compile_file(fullname[, ddir[, force[, rx[, quiet]]]])\u00b6 Compile the file with path fullname. If ddir is given, it is prepended to the path to the file being compiled for use in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed. If rx is given, its search method is passed the full path name to the file being compiled, and if it returns a true value, the file is not compiled and True is returned. If quiet is true, nothing is printed to the standard output unless errors occur.  New in version 2.7.     compileall.compile_path([skip_curdir[, maxlevels[, force]]])\u00b6 Byte-compile all the .py files found along sys.path. If skip_curdir is true (the default), the current directory is not included in the search.  All other parameters are passed to the compile_dir() function.  Note that unlike the other compile functions, maxlevels defaults to 0.  To force a recompile of all the .py files in the Lib\/ subdirectory and all its subdirectories: import compileall  compileall.compile_dir(&#39;Lib\/&#39;, force=True)  # Perform same compilation, excluding files in .svn directories. import re compileall.compile_dir(&#39;Lib\/&#39;, rx=re.compile(&#39;\/[.]svn&#39;), force=True)    See also  Module py_compile Byte-compile a single source file."},{"url":"http:\/\/docs.python.org\/library\/compileall.html#compileall.compile_dir","title":"compileall.compile_dir","description":""},{"url":"http:\/\/docs.python.org\/library\/compileall.html#compileall.compile_file","title":"compileall.compile_file","description":""},{"url":"http:\/\/docs.python.org\/library\/compileall.html#compileall.compile_path","title":"compileall.compile_path","description":""},{"url":"http:\/\/docs.python.org\/library\/pickletools.html","title":"pickletools","description":"31.13. pickletools &#8212; Tools for pickle developers\u00b6  New in version 2.3. Source code: Lib\/pickletools.py  This module contains various constants relating to the intimate details of the pickle module, some lengthy comments about the implementation, and a few useful functions for analyzing pickled data.  The contents of this module are useful for Python core developers who are working on the pickle and cPickle implementations; ordinary users of the pickle module probably won&#8217;t find the pickletools module relevant.   pickletools.dis(pickle[, out=None, memo=None, indentlevel=4])\u00b6 Outputs a symbolic disassembly of the pickle to the file-like object out, defaulting to sys.stdout.  pickle can be a string or a file-like object. memo can be a Python dictionary that will be used as the pickle&#8217;s memo; it can be used to perform disassemblies across multiple pickles created by the same pickler. Successive levels, indicated by MARK opcodes in the stream, are indented by indentlevel spaces.    pickletools.genops(pickle)\u00b6 Provides an iterator over all of the opcodes in a pickle, returning a sequence of (opcode, arg, pos) triples.  opcode is an instance of an OpcodeInfo class; arg is the decoded value, as a Python object, of the opcode&#8217;s argument; pos is the position at which this opcode is located. pickle can be a string or a file-like object.    pickletools.optimize(picklestring)\u00b6 Returns a new equivalent pickle string after eliminating unused PUT opcodes. The optimized pickle is shorter, takes less transmission time, requires less storage space, and unpickles more efficiently.  New in version 2.6."},{"url":"http:\/\/docs.python.org\/library\/pickletools.html#pickletools.dis","title":"pickletools.dis","description":""},{"url":"http:\/\/docs.python.org\/library\/pickletools.html#pickletools.genops","title":"pickletools.genops","description":""},{"url":"http:\/\/docs.python.org\/library\/pickletools.html#pickletools.optimize","title":"pickletools.optimize","description":""},{"url":"http:\/\/docs.python.org\/library\/dis.html","title":"dis","description":"31.12. dis &#8212; Disassembler for Python bytecode\u00b6 Source code: Lib\/dis.py  The dis module supports the analysis of CPython bytecode by disassembling it. The CPython bytecode which this module takes as an input is defined in the file Include\/opcode.h and used by the compiler and the interpreter.  CPython implementation detail: Bytecode is an implementation detail of the CPython interpreter!  No guarantees are made that bytecode will not be added, removed, or changed between versions of Python.  Use of this module should not be considered to work across Python VMs or Python releases.  Example: Given the function myfunc(): def myfunc(alist):     return len(alist)   the following command can be used to get the disassembly of myfunc(): >>> dis.dis(myfunc)   2           0 LOAD_GLOBAL              0 (len)               3 LOAD_FAST                0 (alist)               6 CALL_FUNCTION            1               9 RETURN_VALUE   (The &#8220;2&#8221; is a line number). The dis module defines the following functions and constants:   dis.dis([bytesource])\u00b6 Disassemble the bytesource object. bytesource can denote either a module, a class, a method, a function, or a code object.   For a module, it disassembles all functions.  For a class, it disassembles all methods.  For a single code sequence, it prints one line per bytecode instruction.  If no object is provided, it disassembles the last traceback.    dis.distb([tb])\u00b6 Disassembles the top-of-stack function of a traceback, using the last traceback if none was passed.  The instruction causing the exception is indicated.    dis.disassemble(code[, lasti])\u00b6 Disassembles a code object, indicating the last instruction if lasti was provided.  The output is divided in the following columns:  the line number, for the first instruction of each line the current instruction, indicated as -->, a labelled instruction, indicated with >>, the address of the instruction, the operation code name, operation parameters, and interpretation of the parameters in parentheses.  The parameter interpretation recognizes local and global variable names, constant values, branch targets, and compare operators.     dis.disco(code[, lasti])\u00b6 A synonym for disassemble().  It is more convenient to type, and kept for compatibility with earlier Python releases.    dis.findlinestarts(code)\u00b6 This generator function uses the co_firstlineno and co_lnotab attributes of the code object code to find the offsets which are starts of lines in the source code.  They are generated as (offset, lineno) pairs.    dis.findlabels(code)\u00b6 Detect all offsets in the code object code which are jump targets, and return a list of these offsets.    dis.opname\u00b6 Sequence of operation names, indexable using the bytecode.    dis.opmap\u00b6 Dictionary mapping operation names to bytecodes.    dis.cmp_op\u00b6 Sequence of all compare operation names.    dis.hasconst\u00b6 Sequence of bytecodes that have a constant parameter.    dis.hasfree\u00b6 Sequence of bytecodes that access a free variable.    dis.hasname\u00b6 Sequence of bytecodes that access an attribute by name.    dis.hasjrel\u00b6 Sequence of bytecodes that have a relative jump target.    dis.hasjabs\u00b6 Sequence of bytecodes that have an absolute jump target.    dis.haslocal\u00b6 Sequence of bytecodes that access a local variable.    dis.hascompare\u00b6 Sequence of bytecodes of Boolean operations.   31.12.1. Python Bytecode Instructions\u00b6 The Python compiler currently generates the following bytecode instructions.   STOP_CODE()\u00b6 Indicates end-of-code to the compiler, not used by the interpreter.    NOP()\u00b6 Do nothing code.  Used as a placeholder by the bytecode optimizer.    POP_TOP()\u00b6 Removes the top-of-stack (TOS) item.    ROT_TWO()\u00b6 Swaps the two top-most stack items.    ROT_THREE()\u00b6 Lifts second and third stack item one position up, moves top down to position three.    ROT_FOUR()\u00b6 Lifts second, third and forth stack item one position up, moves top down to position four.    DUP_TOP()\u00b6 Duplicates the reference on top of the stack.  Unary Operations take the top of the stack, apply the operation, and push the result back on the stack.   UNARY_POSITIVE()\u00b6 Implements TOS = +TOS.    UNARY_NEGATIVE()\u00b6 Implements TOS = -TOS.    UNARY_NOT()\u00b6 Implements TOS = not TOS.    UNARY_CONVERT()\u00b6 Implements TOS = `TOS`.    UNARY_INVERT()\u00b6 Implements TOS = ~TOS.    GET_ITER()\u00b6 Implements TOS = iter(TOS).  Binary operations remove the top of the stack (TOS) and the second top-most stack item (TOS1) from the stack.  They perform the operation, and put the result back on the stack.   BINARY_POWER()\u00b6 Implements TOS = TOS1 ** TOS.    BINARY_MULTIPLY()\u00b6 Implements TOS = TOS1 * TOS.    BINARY_DIVIDE()\u00b6 Implements TOS = TOS1 \/ TOS when from __future__ import division is not in effect.    BINARY_FLOOR_DIVIDE()\u00b6 Implements TOS = TOS1 \/\/ TOS.    BINARY_TRUE_DIVIDE()\u00b6 Implements TOS = TOS1 \/ TOS when from __future__ import division is in effect.    BINARY_MODULO()\u00b6 Implements TOS = TOS1  TOS.    BINARY_ADD()\u00b6 Implements TOS = TOS1 + TOS.    BINARY_SUBTRACT()\u00b6 Implements TOS = TOS1 - TOS.    BINARY_SUBSCR()\u00b6 Implements TOS = TOS1[TOS].    BINARY_LSHIFT()\u00b6 Implements TOS = TOS1 << TOS.    BINARY_RSHIFT()\u00b6 Implements TOS = TOS1 >> TOS.    BINARY_AND()\u00b6 Implements TOS = TOS1 & TOS.    BINARY_XOR()\u00b6 Implements TOS = TOS1 ^ TOS.    BINARY_OR()\u00b6 Implements TOS = TOS1 | TOS.  In-place operations are like binary operations, in that they remove TOS and TOS1, and push the result back on the stack, but the operation is done in-place when TOS1 supports it, and the resulting TOS may be (but does not have to be) the original TOS1.   INPLACE_POWER()\u00b6 Implements in-place TOS = TOS1 ** TOS.    INPLACE_MULTIPLY()\u00b6 Implements in-place TOS = TOS1 * TOS.    INPLACE_DIVIDE()\u00b6 Implements in-place TOS = TOS1 \/ TOS when from __future__ import division is not in effect.    INPLACE_FLOOR_DIVIDE()\u00b6 Implements in-place TOS = TOS1 \/\/ TOS.    INPLACE_TRUE_DIVIDE()\u00b6 Implements in-place TOS = TOS1 \/ TOS when from __future__ import division is in effect.    INPLACE_MODULO()\u00b6 Implements in-place TOS = TOS1  TOS.    INPLACE_ADD()\u00b6 Implements in-place TOS = TOS1 + TOS.    INPLACE_SUBTRACT()\u00b6 Implements in-place TOS = TOS1 - TOS.    INPLACE_LSHIFT()\u00b6 Implements in-place TOS = TOS1 << TOS.    INPLACE_RSHIFT()\u00b6 Implements in-place TOS = TOS1 >> TOS.    INPLACE_AND()\u00b6 Implements in-place TOS = TOS1 & TOS.    INPLACE_XOR()\u00b6 Implements in-place TOS = TOS1 ^ TOS.    INPLACE_OR()\u00b6 Implements in-place TOS = TOS1 | TOS.  The slice opcodes take up to three parameters.   SLICE+0()\u00b6 Implements TOS = TOS[:].    SLICE+1()\u00b6 Implements TOS = TOS1[TOS:].    SLICE+2()\u00b6 Implements TOS = TOS1[:TOS].    SLICE+3()\u00b6 Implements TOS = TOS2[TOS1:TOS].  Slice assignment needs even an additional parameter.  As any statement, they put nothing on the stack.   STORE_SLICE+0()\u00b6 Implements TOS[:] = TOS1.    STORE_SLICE+1()\u00b6 Implements TOS1[TOS:] = TOS2.    STORE_SLICE+2()\u00b6 Implements TOS1[:TOS] = TOS2.    STORE_SLICE+3()\u00b6 Implements TOS2[TOS1:TOS] = TOS3.    DELETE_SLICE+0()\u00b6 Implements del TOS[:].    DELETE_SLICE+1()\u00b6 Implements del TOS1[TOS:].    DELETE_SLICE+2()\u00b6 Implements del TOS1[:TOS].    DELETE_SLICE+3()\u00b6 Implements del TOS2[TOS1:TOS].    STORE_SUBSCR()\u00b6 Implements TOS1[TOS] = TOS2.    DELETE_SUBSCR()\u00b6 Implements del TOS1[TOS].  Miscellaneous opcodes.   PRINT_EXPR()\u00b6 Implements the expression statement for the interactive mode.  TOS is removed from the stack and printed.  In non-interactive mode, an expression statement is terminated with POP_STACK.    PRINT_ITEM()\u00b6 Prints TOS to the file-like object bound to sys.stdout.  There is one such instruction for each item in the print statement.    PRINT_ITEM_TO()\u00b6 Like PRINT_ITEM, but prints the item second from TOS to the file-like object at TOS.  This is used by the extended print statement.    PRINT_NEWLINE()\u00b6 Prints a new line on sys.stdout.  This is generated as the last operation of a print statement, unless the statement ends with a comma.    PRINT_NEWLINE_TO()\u00b6 Like PRINT_NEWLINE, but prints the new line on the file-like object on the TOS.  This is used by the extended print statement.    BREAK_LOOP()\u00b6 Terminates a loop due to a break statement.    CONTINUE_LOOP(target)\u00b6 Continues a loop due to a continue statement.  target is the address to jump to (which should be a FOR_ITER instruction).    LIST_APPEND(i)\u00b6 Calls list.append(TOS[-i], TOS).  Used to implement list comprehensions. While the appended value is popped off, the list object remains on the stack so that it is available for further iterations of the loop.    LOAD_LOCALS()\u00b6 Pushes a reference to the locals of the current scope on the stack. This is used in the code for a class definition: After the class body is evaluated, the locals are passed to the class definition.    RETURN_VALUE()\u00b6 Returns with TOS to the caller of the function.    YIELD_VALUE()\u00b6 Pops TOS and yields it from a generator.    IMPORT_STAR()\u00b6 Loads all symbols not starting with '_' directly from the module TOS to the local namespace. The module is popped after loading all names. This opcode implements from module import *.    EXEC_STMT()\u00b6 Implements exec TOS2,TOS1,TOS.  The compiler fills missing optional parameters with None.    POP_BLOCK()\u00b6 Removes one block from the block stack.  Per frame, there is a  stack of blocks, denoting nested loops, try statements, and such.    END_FINALLY()\u00b6 Terminates a finally clause.  The interpreter recalls whether the exception has to be re-raised, or whether the function returns, and continues with the outer-next block.    BUILD_CLASS()\u00b6 Creates a new class object.  TOS is the methods dictionary, TOS1 the tuple of the names of the base classes, and TOS2 the class name.    SETUP_WITH(delta)\u00b6 This opcode performs several operations before a with block starts.  First, it loads __exit__() from the context manager and pushes it onto the stack for later use by WITH_CLEANUP.  Then, __enter__() is called, and a finally block pointing to delta is pushed.  Finally, the result of calling the enter method is pushed onto the stack.  The next opcode will either ignore it (POP_TOP), or store it in (a) variable(s) (STORE_FAST, STORE_NAME, or UNPACK_SEQUENCE).    WITH_CLEANUP()\u00b6 Cleans up the stack when a with statement block exits.  On top of the stack are 1&#8211;3 values indicating how\/why the finally clause was entered:  TOP = None (TOP, SECOND) = (WHY_{RETURN,CONTINUE}), retval TOP = WHY_*; no retval below it (TOP, SECOND, THIRD) = exc_info()  Under them is EXIT, the context manager&#8217;s __exit__() bound method. In the last case, EXIT(TOP, SECOND, THIRD) is called, otherwise EXIT(None, None, None). EXIT is removed from the stack, leaving the values above it in the same order. In addition, if the stack represents an exception, and the function call returns a &#8216;true&#8217; value, this information is &#8220;zapped&#8221;, to prevent END_FINALLY from re-raising the exception.  (But non-local gotos should still be resumed.)   All of the following opcodes expect arguments.  An argument is two bytes, with the more significant byte last.   STORE_NAME(namei)\u00b6 Implements name = TOS. namei is the index of name in the attribute co_names of the code object. The compiler tries to use STORE_FAST or STORE_GLOBAL if possible.    DELETE_NAME(namei)\u00b6 Implements del name, where namei is the index into co_names attribute of the code object.    UNPACK_SEQUENCE(count)\u00b6 Unpacks TOS into count individual values, which are put onto the stack right-to-left.    DUP_TOPX(count)\u00b6 Duplicate count items, keeping them in the same order. Due to implementation limits, count should be between 1 and 5 inclusive.    STORE_ATTR(namei)\u00b6 Implements TOS.name = TOS1, where namei is the index of name in co_names.    DELETE_ATTR(namei)\u00b6 Implements del TOS.name, using namei as index into co_names.    STORE_GLOBAL(namei)\u00b6 Works as STORE_NAME, but stores the name as a global.    DELETE_GLOBAL(namei)\u00b6 Works as DELETE_NAME, but deletes a global name.    LOAD_CONST(consti)\u00b6 Pushes co_consts[consti] onto the stack.    LOAD_NAME(namei)\u00b6 Pushes the value associated with co_names[namei] onto the stack.    BUILD_TUPLE(count)\u00b6 Creates a tuple consuming count items from the stack, and pushes the resulting tuple onto the stack.    BUILD_LIST(count)\u00b6 Works as BUILD_TUPLE, but creates a list.    BUILD_MAP(count)\u00b6 Pushes a new dictionary object onto the stack.  The dictionary is pre-sized to hold count entries.    LOAD_ATTR(namei)\u00b6 Replaces TOS with getattr(TOS, co_names[namei]).    COMPARE_OP(opname)\u00b6 Performs a Boolean operation.  The operation name can be found in cmp_op[opname].    IMPORT_NAME(namei)\u00b6 Imports the module co_names[namei].  TOS and TOS1 are popped and provide the fromlist and level arguments of __import__().  The module object is pushed onto the stack.  The current namespace is not affected: for a proper import statement, a subsequent STORE_FAST instruction modifies the namespace.    IMPORT_FROM(namei)\u00b6 Loads the attribute co_names[namei] from the module found in TOS. The resulting object is pushed onto the stack, to be subsequently stored by a STORE_FAST instruction.    JUMP_FORWARD(delta)\u00b6 Increments bytecode counter by delta.    POP_JUMP_IF_TRUE(target)\u00b6 If TOS is true, sets the bytecode counter to target.  TOS is popped.    POP_JUMP_IF_FALSE(target)\u00b6 If TOS is false, sets the bytecode counter to target.  TOS is popped.    JUMP_IF_TRUE_OR_POP(target)\u00b6 If TOS is true, sets the bytecode counter to target and leaves TOS on the stack.  Otherwise (TOS is false), TOS is popped.    JUMP_IF_FALSE_OR_POP(target)\u00b6 If TOS is false, sets the bytecode counter to target and leaves TOS on the stack.  Otherwise (TOS is true), TOS is popped.    JUMP_ABSOLUTE(target)\u00b6 Set bytecode counter to target.    FOR_ITER(delta)\u00b6 TOS is an iterator.  Call its next() method.  If this yields a new value, push it on the stack (leaving the iterator below it).  If the iterator indicates it is exhausted TOS is popped, and the bytecode counter is incremented by delta.    LOAD_GLOBAL(namei)\u00b6 Loads the global named co_names[namei] onto the stack.    SETUP_LOOP(delta)\u00b6 Pushes a block for a loop onto the block stack.  The block spans from the current instruction with a size of delta bytes.    SETUP_EXCEPT(delta)\u00b6 Pushes a try block from a try-except clause onto the block stack. delta points to the first except block.    SETUP_FINALLY(delta)\u00b6 Pushes a try block from a try-except clause onto the block stack. delta points to the finally block.    STORE_MAP()\u00b6 Store a key and value pair in a dictionary.  Pops the key and value while leaving the dictionary on the stack.    LOAD_FAST(var_num)\u00b6 Pushes a reference to the local co_varnames[var_num] onto the stack.    STORE_FAST(var_num)\u00b6 Stores TOS into the local co_varnames[var_num].    DELETE_FAST(var_num)\u00b6 Deletes local co_varnames[var_num].    LOAD_CLOSURE(i)\u00b6 Pushes a reference to the cell contained in slot i of the cell and free variable storage.  The name of the variable is  co_cellvars[i] if i is less than the length of co_cellvars.  Otherwise it is  co_freevars[i - len(co_cellvars)].    LOAD_DEREF(i)\u00b6 Loads the cell contained in slot i of the cell and free variable storage. Pushes a reference to the object the cell contains on the stack.    STORE_DEREF(i)\u00b6 Stores TOS into the cell contained in slot i of the cell and free variable storage.    SET_LINENO(lineno)\u00b6 This opcode is obsolete.    RAISE_VARARGS(argc)\u00b6 Raises an exception. argc indicates the number of parameters to the raise statement, ranging from 0 to 3.  The handler will find the traceback as TOS2, the parameter as TOS1, and the exception as TOS.    CALL_FUNCTION(argc)\u00b6 Calls a function.  The low byte of argc indicates the number of positional parameters, the high byte the number of keyword parameters. On the stack, the opcode finds the keyword parameters first.  For each keyword argument, the value is on top of the key.  Below the keyword parameters, the positional parameters are on the stack, with the right-most parameter on top.  Below the parameters, the function object to call is on the stack.  Pops all function arguments, and the function itself off the stack, and pushes the return value.    MAKE_FUNCTION(argc)\u00b6 Pushes a new function object on the stack.  TOS is the code associated with the function.  The function object is defined to have argc default parameters, which are found below TOS.    MAKE_CLOSURE(argc)\u00b6 Creates a new function object, sets its func_closure slot, and pushes it on the stack.  TOS is the code associated with the function, TOS1 the tuple containing cells for the closure&#8217;s free variables.  The function also has argc default parameters, which are found below the cells.    BUILD_SLICE(argc)\u00b6 Pushes a slice object on the stack.  argc must be 2 or 3.  If it is 2, slice(TOS1, TOS) is pushed; if it is 3, slice(TOS2, TOS1, TOS) is pushed. See the slice() built-in function for more information.     EXTENDED_ARG(ext)\u00b6 Prefixes any opcode which has an argument too big to fit into the default two bytes.  ext holds two additional bytes which, taken together with the subsequent opcode&#8217;s argument, comprise a four-byte argument, ext being the two most-significant bytes.    CALL_FUNCTION_VAR(argc)\u00b6 Calls a function. argc is interpreted as in CALL_FUNCTION. The top element on the stack contains the variable argument list, followed by keyword and positional arguments.    CALL_FUNCTION_KW(argc)\u00b6 Calls a function. argc is interpreted as in CALL_FUNCTION. The top element on the stack contains the keyword arguments dictionary,  followed by explicit keyword and positional arguments.    CALL_FUNCTION_VAR_KW(argc)\u00b6 Calls a function. argc is interpreted as in CALL_FUNCTION.  The top element on the stack contains the keyword arguments dictionary, followed by the variable-arguments tuple, followed by explicit keyword and positional arguments.    HAVE_ARGUMENT()\u00b6 This is not really an opcode.  It identifies the dividing line between opcodes which don&#8217;t take arguments < HAVE_ARGUMENT and those which do >= HAVE_ARGUMENT."},{"url":"http:\/\/docs.python.org\/library\/dis.html#dis.dis","title":"dis.dis","description":""},{"url":"http:\/\/docs.python.org\/library\/dis.html#dis.disassemble","title":"dis.disassemble","description":""},{"url":"http:\/\/docs.python.org\/library\/dis.html#dis.disco","title":"dis.disco","description":""},{"url":"http:\/\/docs.python.org\/library\/dis.html#dis.distb","title":"dis.distb","description":""},{"url":"http:\/\/docs.python.org\/library\/dis.html#dis.findlabels","title":"dis.findlabels","description":""},{"url":"http:\/\/docs.python.org\/library\/dis.html#dis.findlinestarts","title":"dis.findlinestarts","description":""}]