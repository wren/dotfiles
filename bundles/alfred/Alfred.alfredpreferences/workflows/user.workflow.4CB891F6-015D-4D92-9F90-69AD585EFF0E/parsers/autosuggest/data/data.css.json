[{"url":"https:\/\/developer.mozilla.org\/en\/CSS","title":"CSS","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation","title":"animation","description":"The animation property is a shorthand property for animation-name , animation-duration , animation-timing-function , animation-delay , animation-iteration-count  and animation-direction . A list of CSS properties that can be animated is available; it's worth noting that these are the same properties supported by CSS transitions.  Initial value : 0 Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax animation:  [ <animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> ||               <animation-iteration-count> || <animation-direction>]              [, [<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> ||               <animation-iteration-count> || <animation-direction>] ]*    Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10 -ms -- 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? 5.0 (5.0)  -moz ? -- iOS 2.0 -webkit     Specifications   CSS Animations Module Level 3: animationWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes   See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/CSS_Reference\/Mozilla_Extensions","title":"Mozilla CSS Extensions","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-delay","title":"animation-delay","description":"The animation-delay property specifies when the animation should start. This lets the animation sequence begin some time after it's applied to an element. A value of 0 (the default) indicates that the animation should begin as soon as it's applied. Otherwise, the value specifies an offset from the moment the animation is applied to the element; animation will begin that amount of time after being applied. Specifying a negative value for the animation delay causes the animation to begin executing immediately. However, it will appear to have begun executing partway through its cycle. For example, if you specify -1s as the animation delay time, the animation will begin immediately but will start 1 second into the animation sequence. If you specify a negative value for the animation delay, but the starting value is implicit, the starting value is taken from the moment the animation is applied to the element. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : 0 Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-delay: <time> [, <time>]*  Values  <time> The time offset from the time at which the animation is applied to the element at which the animation should begin. This may be specified in either seconds (by specifying \"s\" as the unit) or milliseconds (by specifying \"ms\" as the unit). If you don't specify a unit, seconds are assumed. Values  <time> The time offset from the time at which the animation is applied to the element at which the animation should begin. This may be specified in either seconds (by specifying \"s\" as the unit) or milliseconds (by specifying \"ms\" as the unit). If you don't specify a unit, seconds are assumed. Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-delayWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-direction","title":"animation-direction","description":"The animation-direction CSS property indicates whether the animation should play in reverse on alternate cycles. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : normal Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-direction: normal | alternate [, normal | alternate]*  Values  normal The animation should play forward each cycle. In other words, each time the animation cycles, the animation will reset to the beginning state and start over again. This is the default animation direction setting. alternate The animation should reverse direction each cycle. When playing in reverse, the animation steps are performed backward. In addition, timing functions are also reversed; for example, an ease-in animation is replaced with an ease-out animation when played in reverse.  Values  normal The animation should play forward each cycle. In other words, each time the animation cycles, the animation will reset to the beginning state and start over again. This is the default animation direction setting. alternate The animation should reverse direction each cycle. When playing in reverse, the animation steps are performed backward. In addition, timing functions are also reversed; for example, an ease-in animation is replaced with an ease-out animation when played in reverse.  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-directionWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-duration","title":"animation-duration","description":"The animation-duration CSS property specifies the length of time that an animation should take to complete one cycle. A value of 0 (the default) indicates that no animation should occur. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : 0 Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-duration: <time> [, <time>]*  Values  <time> The duration that an animation should take to complete one cycle. This may be specified in either seconds (by specifying \"s\" as the unit) or milliseconds (by specifying \"ms\" as the unit). If you don't specify a unit, seconds are assumed.  Note: Negative values are treated as 0. Values  <time> The duration that an animation should take to complete one cycle. This may be specified in either seconds (by specifying \"s\" as the unit) or milliseconds (by specifying \"ms\" as the unit). If you don't specify a unit, seconds are assumed.  Note: Negative values are treated as 0. Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 3.0 -webkit 5.0 (5.0)  -moz 10  -ms [1] -- 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 2.0 -webkit 5.0 (5.0)  -moz -- -- 4.2 -webkit     Specifications   CSS Animations Module Level 3: animation-durationWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-fill-mode","title":"animation-fill-mode","description":"The animation-fill-mode property specifies how a CSS animation should apply styles to its target before and after it is executing.  Initial value : none Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-fill-mode: none | forwards | backwards | both [, none | forwards | backwards | both]*  Values  none The animation will not apply any styles to the target before or after it is executing. forwards The target will retain the computed values set by the last keyframe encountered during execution. This is usually the '100%' or 'to' keyframe, unless animation-direction  is 'alternate' and animation-iteration-count  is set to an even number, in which case it is the '0%' or 'to' keyframe. backwards The animation will apply the values defined in the '0%' or 'from' keyframe as soon as it is applied to the target, and retain this during the animation-delay  period. both The animation will follow the rules for both forwards and backwards, thus extending the animation properties in both directions.  Values  none The animation will not apply any styles to the target before or after it is executing. forwards The target will retain the computed values set by the last keyframe encountered during execution. This is usually the '100%' or 'to' keyframe, unless animation-direction  is 'alternate' and animation-iteration-count  is set to an even number, in which case it is the '0%' or 'to' keyframe. backwards The animation will apply the values defined in the '0%' or 'from' keyframe as soon as it is applied to the target, and retain this during the animation-delay  period. both The animation will follow the rules for both forwards and backwards, thus extending the animation properties in both directions.  Examples \r           h1 {   animation-fill-mode: forwards; }\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-fill-modeED  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-name","title":"animation-name","description":"The animation-name CSS property specifies a list of animations that should be applied to the selected element. Each name indicates a @keyframes  at-rule that defines the property values for the animation sequence. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : none Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-name: none | <name> [, none | <name>]*  Values  <name> A string identifying the animation.  Values  <name> A string identifying the animation.  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-nameWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-iteration-count","title":"animation-iteration-count","description":"The animation-iteration-count CSS property defines the number of times an animation cycle should be played before stopping. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : 1 Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-iteration-count: infinite | <number> [, infinite | <number>]*  Values  infinite The animation will repeat forever. <number> The number of times the animation should repeat; this is 1 by default. Negative values are treated like 0. You may specify non-integer values to play part of an animation cycle (for example 0.5 will play half of the animation cycle).  Values  infinite The animation will repeat forever. <number> The number of times the animation should repeat; this is 1 by default. Negative values are treated like 0. You may specify non-integer values to play part of an animation cycle (for example 0.5 will play half of the animation cycle).  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-iteration-countWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-play-state","title":"animation-play-state","description":"The animation-play-state CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation. Note: At this time, this property is being considered for removal from the specification, since its functionality can be simulated by other means. Resuming a paused animation will start the animation from where it left off at the time it was paused, rather than starting over from the beginning of the animation sequence.  Initial value : running Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified  Syntax  animation-play-state: running | paused [, running | paused]*  Values  running The animation is currently playing. paused The animation is currently paused.  Values  running The animation is currently playing. paused The animation is currently paused.  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz ? ? (Supported) -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-play-stateWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/animation-timing-function","title":"animation-timing-function","description":"The animation-timing-function property specifies how a CSS animation should progress over the duration of each cycle. The possible values are one or several <timing-function>  . For keyframed animations, the timing function applies between keyframes rather than over the entire animation. In other words, the timing function is applied at the start of the keyframe and at the end of the keyframe. An animation timing function defined within a keyframe block applies to that keyframe; otherwise. If no timing function is specified for the keyframe, the timing function specified for the overall animation is used. It is often convenient to use the shorthand property animation  to set all animation properties at once.  Initial value : ease Applies to: block-level and inline-level elements Inherited : no Media: visual   Computed value : as specified Syntax animation-timing-function: <timing-function> [, <timing-function>]*  where:  Each <timing-function>   represents the timing function to link to the corresponding property to animate, as defined in animation-property . Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: animation-timing-functionWD  See also  CSS animations AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/backface-visibility","title":"backface-visibility","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background","title":"background","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-attachment","title":"background-attachment","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-clip","title":"background-clip | -moz-background-clip","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-color","title":"background-color","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-image","title":"background-image","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-origin","title":"background-origin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-position","title":"background-position","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-repeat","title":"background-repeat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border","title":"border","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/background-size","title":"background-size","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom","title":"border-bottom","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-color","title":"border-bottom-color","description":"The border-bottom-color CSS property sets the color of the bottom border of an element. See border-top-color  for more and detailed information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-right-radius","title":"border-bottom-right-radius","description":"The CSS property border-bottom-right-radius sets the rounding of the bottom-right corner of the border. Previous to Gecko 2.0 (Firefox 4.0) this was named  -moz-border-radius-bottomright.  See the border-top-left-radius  and border-radius  properties for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-left-radius","title":"border-bottom-left-radius","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-style","title":"border-bottom-style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-collapse","title":"border-collapse","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-bottom-width","title":"border-bottom-width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-color","title":"border-color","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-image","title":"border-image","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-left","title":"border-left","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-left-color","title":"border-left-color","description":"The border-left-color CSS property sets the color of the left border of an element. See border-top-color  for more and detailed information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-left-style","title":"border-left-style","description":"border-left-style sets the line style of the left border of a box. See the border-bottom-style  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-left-width","title":"border-left-width","description":"border-left-width sets the width of the left border of a box. See the border-bottom-width property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-radius","title":"border-radius","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-right","title":"border-right","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-right-color","title":"border-right-color","description":"border-right-color sets the color of the right border of an element. See the border-top-color  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-right-style","title":"border-right-style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-top-left-radius","title":"border-top-left-radius","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-top-width","title":"border-top-width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-top-right-radius","title":"border-top-right-radius","description":"The CSS property border-top-right-radius sets the rounding of the top-right corner of the border. Previous to Gecko 2.0 (Firefox 4.0) this was named  -moz-border-radius-topright.  See the border-top-left-radius and border-radius properties for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-top-style","title":"border-top-style","description":"border-top-style sets the line style of the top border of a box. See the border-bottom-style  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/border-width","title":"border-width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/bottom","title":"bottom","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/box-shadow","title":"box-shadow","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/box-sizing","title":"box-sizing","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/caption-side","title":"caption-side","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/clear","title":"clear","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/clip","title":"clip","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/clip-path","title":"clip-path","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/color","title":"color","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/columns","title":"columns","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-count","title":"column-count","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-gap","title":"column-gap","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-rule","title":"column-rule","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-rule-color","title":"column-rule-color","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-rule-style","title":"column-rule-style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-rule-width","title":"column-rule-width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/column-width","title":"column-width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/content","title":"content","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/counter-increment","title":"counter-increment","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/counter-reset","title":"counter-reset","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/cursor","title":"CSS cursor","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/direction","title":"direction","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/display","title":"display","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/empty-cells","title":"empty-cells","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/float","title":"float","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font","title":"font","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-family","title":"font-family","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-size","title":"font-size","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-size-adjust","title":"font-size-adjust","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-stretch","title":"font-stretch","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-style","title":"font-style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-variant","title":"font-variant","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/font-weight","title":"font-weight","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/height","title":"height","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/hyphens","title":"hyphens","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/image-rendering","title":"image-rendering","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/ime-mode","title":"ime-mode","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/left","title":"left","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/letter-spacing","title":"letter-spacing","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/line-height","title":"line-height","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/list-style","title":"list-style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/list-style-image","title":"list-style-image","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/list-style-position","title":"list-style-position","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/list-style-type","title":"list-style-type","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin","title":"margin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin-bottom","title":"margin-bottom","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin-left","title":"margin-left","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin-right","title":"margin-right","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin-top","title":"margin-top","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/marks","title":"marks","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/marker-offset","title":"marker-offset","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/mask","title":"mask","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/max-height","title":"max-height","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/max-width","title":"max-width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/min-height","title":"min-height","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/min-width","title":"min-width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/opacity","title":"opacity","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/orphans","title":"orphans","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline","title":"outline","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline-style","title":"outline-style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline-color","title":"outline-color","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline-width","title":"outline-width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/outline-offset","title":"outline-offset","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/overflow","title":"overflow","description":"The overflow CSS property specifies whether to clip content, render scroll bars or display overflow content of a block-level element.  Initial value : visible  Applies to: block and inline-block elements, table cells Inherited : no Media: visual   Computed value : as specified  Syntax  overflow:  visible | hidden | scroll | auto | inherit  Values  visible Default value. Content is not clipped, it may be rendered outside the content box. hidden The content is clipped and no scrollbars are provided. scroll The content is clipped and desktop browsers use scrollbars, whether or not any content is clipped. This avoids any problem with scrollbars appearing and disappearing in a dynamic environment. Printers may print overflowing content. auto Depends on the user agent. Desktop browsers like Firefox provide scrollbars if content overflows.  Mozilla Extensions  -moz-scrollbars-none   Obsolete Use overflow:hidden instead. -moz-scrollbars-horizontal   Deprecated   Use of overflow-x  and overflow-y  is preferred. -moz-scrollbars-vertical   Deprecated   Use of overflow-x  and overflow-y  is preferred. -moz-hidden-unscrollable Is intended mainly for internal use and by themes. Disables scrolling of XML root elements and <html>, <body> by arrow keys and mouse wheel. Mozilla Extensions  -moz-scrollbars-none   Obsolete Use overflow:hidden instead. -moz-scrollbars-horizontal   Deprecated   Use of overflow-x  and overflow-y  is preferred. -moz-scrollbars-vertical   Deprecated   Use of overflow-x  and overflow-y  is preferred. -moz-hidden-unscrollable Is intended mainly for internal use and by themes. Disables scrolling of XML root elements and <html>, <body> by arrow keys and mouse wheel. Examples  p {        width: 12em;      border: dotted;      overflow: auto;   \/* append scrollbars if necessary *\/  } overflow: hidden Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium. overflow: scroll Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium. overflow: auto Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium. overflow: auto short text visible (default) Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium. Notes Through Gecko 1.9.2 (Firefox 3.6), the overflow property is incorrectly applied to table-group elements (<thead> , <tbody> , <tfoot>). This behavior is corrected in later versions.Browser compatibility    Browser Lowest version   Internet Explorer 4.0 [*]    Firefox (Gecko) 1.0 (1.0)   Opera 4.0-7.0   Safari (WebKit) 1.0 (85)    [*] IE 4-6 enlarges an element with overflow:visible (default value) to fit the content in it. height\/width behaves like min-height\/min-width. Specifications  CSS 2.1 Visual effects #overflow  See also  Related CSS properties: text-overflow , white-space , overflow-x , overflow-y , clip , display"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/overflow-x","title":"overflow-x","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding","title":"padding","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding-bottom","title":"padding-bottom","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding-left","title":"padding-left","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding-right","title":"padding-right","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/page-break-after","title":"page-break-after","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/padding-top","title":"padding-top","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/page-break-before","title":"page-break-before","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/page-break-inside","title":"page-break-inside","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/perspective","title":"perspective","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/perspective-origin","title":"perspective-origin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/pointer-events","title":"pointer-events","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/position","title":"position","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/quotes","title":"quotes","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/resize","title":"resize","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/right","title":"right","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/table-layout","title":"table-layout","description":"table-layout property defines the algorithm to be used to layout the table cells, rows, and columns.  Initial value : auto  Applies to: 'table' and 'inline-table' elements Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax table-layout: inherit | auto | fixed   Values  inherit  auto  An automatic table layout algorithm is commonly used by most browsers for table layout. The width of the table and its cells depends on the content thereof.  fixed Table and column widths are set by the widths of table and col elements or by the width of the first row of cells. Cells in subsequent rows do not affect column widths.  Under the \"fixed\" layout method, the entire table can be rendered once the first table row has been downloaded and analyzed. This can speed up rendering time over the \"automatic\" layout method, but subsequent cell content may not fit in the column widths provided. Any cell that has content that overflows uses the overflow  property to determine whether to clip the overflow content. Examples  View Live Examples .contentbox {   table-layout: fixed; }  Specifications  CSS 2.1 #table-layout  Browser compatibility    Browser Lowest Version   Internet Explorer 5.0   Firefox 1.0   Opera 7.0   Safari 1.0    See also   caption-side , table-layout , border-collapse , border-spacing , empty-cells"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/tab-size","title":"tab-size","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-align","title":"text-align","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-decoration","title":"text-decoration","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-decoration-color","title":"text-decoration-color","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-decoration-line","title":"text-decoration-line","description":"The text-decoration-line CSS property sets what kind of line decorations are added to an element.  Initial value : none Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  text-decoration-line: none | underline || overline || line-through  Values Accepts one or more whitespace separated values:  none Produces no text decoration. underline Each line of text is underlined. overline Each line of text has a line above it. line-through Each line of text has a line through the middle. -moz-anchor-decoration Mozilla CSS Extension, not suitable for web content.  Notes In contrast to text-decoration , the -moz-text-decoration-line property does not accept the blink value. You might use -moz-text-blink  instead. Examples  .example {      text-decoration-line: underline;     text-decoration-style: wavy;     text-decoration-color: red; }  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 6.0 (6.0)   (prefixed with -moz-) ? ? ? ?         Feature Firefox Mobile (Gecko) Android IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 3 Text #text-decoration-line (Editor's Draft)  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-decoration-style","title":"text-decoration-style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-overflow","title":"text-overflow","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-indent","title":"text-indent","description":"The text-indent CSS property specifies how much horizontal space should be left before beginning of the first line of the text content of an element. Horizontal spacing is with respect to the left (or right, for right-to-left layout) edge of the containing block element's box.  Initial value : 0 Applies to: block and inline-block elements, table cells Inherited : yes Percentages: refer to width of containing block Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  text-indent:  <length> | <percentage>  Values  <length> Indentation is specified as fixed  <length> . Negative Values are allowed. See  <length>  values for possible units. <percentage> Indentation is a <percentage>  of the containing block width.  Examples  p { text-indent: 2em }   Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Browser compatibility    Browser Lowest version   Internet Explorer 3.0   Firefox (Gecko) 1.0 (1.0)   Opera 3.5   Safari (WebKit) 1.0 (85)    Specifications  CSS 2.1 Text #text-indent  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-rendering","title":"text-rendering","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-shadow","title":"text-shadow","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/text-transform","title":"text-transform","description":"The text-transform CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.  Initial value : none  Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax text-transform:  capitalize | uppercase | lowercase | none | inherit   Values  capitalize First letter of each word is converted to uppercase. Other letters are unchanged; that is, they retain their original case as written in the element's text. uppercase All letters are converted to uppercase. lowercase All letters are converted to lowercase. none Case of all letters is unchanged.  Examples p { text-transform: none; }  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. p { text-transform: capitalize; }  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. p { text-transform: uppercase; }  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. p { text-transform: lowercase; }  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  4.0 3.5 1.0 (85)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications  CSS 2.1 Text #text-transform  See also  font-variant    text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/top","title":"top","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transform","title":"transform","description":"The transform CSS property lets you modify the coordinate space of the CSS visual formatting model. Using it, elements can be translated, rotated, scaled, and skewed as this text.  Initial value : none Applies to: all block level and inline level elements Inherited : no Media: visual   Computed value :  Syntax  transform:  <transform-function> [<transform-function>]* | none Vendor prefixes: See the compatibility table below for detail on the vendor prefixes you'll need to use for this feature. Values  transform-function One or more of the CSS transform functions to be applied, see below. none Specifies that no transform should be applied.  Examples See Using CSS transforms. Live Example  pre {      width: 33em;      border: solid red;      -moz-transform: translate(100px) rotate(20deg);     -moz-transform-origin: 60% 100%;      -webkit-transform: translate(100px) rotate(20deg);     -webkit-transform-origin: 60% 100%;      -o-transform:translate(100px) rotate(20deg);      -o-transform-origin:60% 100%;      -ms-transform: translate(100px) rotate(20deg);     -ms-transform-origin: 60% 100%;      transform: translate(100px) rotate(20deg);     transform-origin: 60% 100%; }  Live Example  pre {      width: 33em;      border: solid red;      -moz-transform: translate(100px) rotate(20deg);     -moz-transform-origin: 60% 100%;      -webkit-transform: translate(100px) rotate(20deg);     -webkit-transform-origin: 60% 100%;      -o-transform:translate(100px) rotate(20deg);      -o-transform-origin:60% 100%;      -ms-transform: translate(100px) rotate(20deg);     -ms-transform-origin: 60% 100%;      transform: translate(100px) rotate(20deg);     transform-origin: 60% 100%; }  CSS transform functions The transform CSS property allows the coordinate system used by an element to be manipulated using transform functions. These functions are described below. matrix  transform:  matrix(a, c, b, d, tx, ty)  \/* Where a, b, c, d build the transformation matrix     &#9484;     &#9488;     &#9474; a b &#9474;    &#9474; c d &#9474;    &#9492;     &#9496;    and tx, ty are the translate values.  *\/  Specifies a 2D transformation matrix comprised of the specified six values. This is the equivalent to applying the transformation matrix [a b c d tx ty]. Note: Gecko (Firefox) accepts a  <length>  value for tx and ty. Webkit (Safari, Chrome) and Opera currently support a unitless <number>  for tx and ty. Live Examples   background: gold;  width: 30em;      -moz-transform: matrix(1, -0.2, 0, 1, 0, 0);  -webkit-transform: matrix(1, -0.2, 0, 1, 0, 0);       -o-transform: matrix(1, -0.2, 0, 1, 0, 0);      -ms-transform: matrix(1, -0.2, 0, 1, 0, 0);          transform: matrix(1, -0.2, 0, 1, 0, 0);    background: wheat;  max-width: intrinsic;      -moz-transform: matrix(1, 0, 0.6, 1, 15em, 0);  -webkit-transform: matrix(1, 0, 0.6, 1,  250, 0);       -o-transform: matrix(1, 0, 0.6, 1,  250, 0);      -ms-transform: matrix(1, 0, 0.6, 1,  250, 0);          transform: matrix(1, 0, 0.6, 1,  250, 0);  See also  Examples of linear transformation matrices Wikipedia Coordinate transformation matrices mathamazement.com Microsoft's matrix filter MSDN  rotate  transform:  rotate(angle);       \/* an <angle>, e.g.  rotate(30deg) *\/ Rotates the element clockwise around its origin (as specified by the transform-origin  property) by the specified angle. The operation corresponds to the matrix [cos(angle) sin(angle) -sin(angle) cos(angle) 0 0]. scale  transform:  scale(sx[, sy]);     \/* one or two unitless <number>s, e.g.  scale(2.1,4) *\/ Specifies a 2D scaling operation described by [sx, sy]. If sy isn't specified, it is assumed to be equal to sx. scaleX  transform:  scaleX(sx);          \/* a unitless <number>, e.g.  scaleX(2.7) *\/ Specifies a scale operation using the vector [sx, 1]. scaleY  transform:  scaleY(sy)           \/* a unitless <number>, e.g.  scaleY(0.3) *\/ Specifies a scale operation using the vector [1, sy]. skew  transform:  skew(ax[, ay])       \/* one or two <angle>s, e.g.  skew(30deg,-10deg) *\/ Skews the element around the X and Y axes by the specified angles. If ay isn't provided, no skew is performed on the Y axis. skewX  transform:  skewX(angle)         \/* an <angle>, e.g.  skewX(-30deg) *\/ Skews the element around the X axis by the given angle. skewY  transform:  skewY(angle)         \/* an <angle>, e.g.  skewY(4deg) *\/ Skews the element around the Y axis by the given angle. translate  transform:  translate(tx[, ty])  \/* one or two <length> values *\/ Specifies a 2D translation by the vector [tx, ty]. If ty isn't specified, its value is assumed to be zero. translateX  transform:  translateX(tx)       \/* see <length> for possible values *\/ Translates the element by the given amount along the X axis. translateY  transform:  translateY(ty)       \/* see <length> for possible values *\/ Translates the element by the given amount along the Y axis. matrix  transform:  matrix(a, c, b, d, tx, ty)  \/* Where a, b, c, d build the transformation matrix     &#9484;     &#9488;     &#9474; a b &#9474;    &#9474; c d &#9474;    &#9492;     &#9496;    and tx, ty are the translate values.  *\/  Specifies a 2D transformation matrix comprised of the specified six values. This is the equivalent to applying the transformation matrix [a b c d tx ty]. Note: Gecko (Firefox) accepts a  <length>  value for tx and ty. Webkit (Safari, Chrome) and Opera currently support a unitless <number>  for tx and ty. Live Examples   background: gold;  width: 30em;      -moz-transform: matrix(1, -0.2, 0, 1, 0, 0);  -webkit-transform: matrix(1, -0.2, 0, 1, 0, 0);       -o-transform: matrix(1, -0.2, 0, 1, 0, 0);      -ms-transform: matrix(1, -0.2, 0, 1, 0, 0);          transform: matrix(1, -0.2, 0, 1, 0, 0);    background: wheat;  max-width: intrinsic;      -moz-transform: matrix(1, 0, 0.6, 1, 15em, 0);  -webkit-transform: matrix(1, 0, 0.6, 1,  250, 0);       -o-transform: matrix(1, 0, 0.6, 1,  250, 0);      -ms-transform: matrix(1, 0, 0.6, 1,  250, 0);          transform: matrix(1, 0, 0.6, 1,  250, 0);  See also  Examples of linear transformation matrices Wikipedia Coordinate transformation matrices mathamazement.com Microsoft's matrix filter MSDN  Live Examples   background: gold;  width: 30em;      -moz-transform: matrix(1, -0.2, 0, 1, 0, 0);  -webkit-transform: matrix(1, -0.2, 0, 1, 0, 0);       -o-transform: matrix(1, -0.2, 0, 1, 0, 0);      -ms-transform: matrix(1, -0.2, 0, 1, 0, 0);          transform: matrix(1, -0.2, 0, 1, 0, 0);    background: wheat;  max-width: intrinsic;      -moz-transform: matrix(1, 0, 0.6, 1, 15em, 0);  -webkit-transform: matrix(1, 0, 0.6, 1,  250, 0);       -o-transform: matrix(1, 0, 0.6, 1,  250, 0);      -ms-transform: matrix(1, 0, 0.6, 1,  250, 0);          transform: matrix(1, 0, 0.6, 1,  250, 0);  See also  Examples of linear transformation matrices Wikipedia Coordinate transformation matrices mathamazement.com Microsoft's matrix filter MSDN  rotate  transform:  rotate(angle);       \/* an <angle>, e.g.  rotate(30deg) *\/ Rotates the element clockwise around its origin (as specified by the transform-origin  property) by the specified angle. The operation corresponds to the matrix [cos(angle) sin(angle) -sin(angle) cos(angle) 0 0]. scale  transform:  scale(sx[, sy]);     \/* one or two unitless <number>s, e.g.  scale(2.1,4) *\/ Specifies a 2D scaling operation described by [sx, sy]. If sy isn't specified, it is assumed to be equal to sx. scaleX  transform:  scaleX(sx);          \/* a unitless <number>, e.g.  scaleX(2.7) *\/ Specifies a scale operation using the vector [sx, 1]. scaleY  transform:  scaleY(sy)           \/* a unitless <number>, e.g.  scaleY(0.3) *\/ Specifies a scale operation using the vector [1, sy]. skew  transform:  skew(ax[, ay])       \/* one or two <angle>s, e.g.  skew(30deg,-10deg) *\/ Skews the element around the X and Y axes by the specified angles. If ay isn't provided, no skew is performed on the Y axis. skewX  transform:  skewX(angle)         \/* an <angle>, e.g.  skewX(-30deg) *\/ Skews the element around the X axis by the given angle. skewY  transform:  skewY(angle)         \/* an <angle>, e.g.  skewY(4deg) *\/ Skews the element around the Y axis by the given angle. translate  transform:  translate(tx[, ty])  \/* one or two <length> values *\/ Specifies a 2D translation by the vector [tx, ty]. If ty isn't specified, its value is assumed to be zero. translateX  transform:  translateX(tx)       \/* see <length> for possible values *\/ Translates the element by the given amount along the X axis. translateY  transform:  translateY(ty)       \/* see <length> for possible values *\/ Translates the element by the given amount along the Y axis. Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.5 (1.9.1)  -moz yes  -webkit 9.0 -ms 10.5 -o 3.1 -webkit   3D Support 10.0 -moz 12.0 -webkit 10.0 -ms no 4.0 -webkit         Feature iOS Safari Opera Mini Opera Mobile Android Browser   Basic support ? ? ? ?     Notes Internet Explorer 5.5 or later supports a proprietary Matrix Filter which can be used to achieve the similar effect. Notes Internet Explorer 5.5 or later supports a proprietary Matrix Filter which can be used to achieve the similar effect. Specifications   CSS 2D Transforms Module Level 3: transformWD  See also  transform-origin  Using CSS transforms More info on CSS3 Rotation \/ Matrix Filter issues in the comments on Paul Irish's blog. A cross-browser 2D transform plugin for jQuery"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transform-origin","title":"transform-origin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transform-style","title":"transform-style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition","title":"transition","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition-delay","title":"transition-delay","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition-duration","title":"transition-duration","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition-property","title":"transition-property","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/transition-timing-function","title":"transition-timing-function","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/unicode-bidi","title":"unicode-bidi","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/white-space","title":"white-space","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/vertical-align","title":"vertical-align","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/widows","title":"widows","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/visibility","title":"visibility","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/width","title":"width","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/word-spacing","title":"word-spacing","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/word-wrap","title":"word-wrap","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/z-index","title":"z-index","description":"The z-index CSS property specifies the z-order of an element and its descendants. When elements overlap, z-order determines which one covers the other. An element with a larger z-index generally covers an element with a lower one. For a positioned box, the z-index property specifies:  The stack level of the box in the current stacking context. Whether the box establishes a local stacking context.   Initial value : auto  Applies to: positioned elements  Inherited : no Media: visual   Computed value : as specified  Syntax  z-index:  auto | <integer> | inherit Values  auto The box does not establish a new local stacking context. The stack level of the generated box in the current stacking context is the same as its parent's box. <integer> This integer is the stack level of the generated box in the current stacking context. The box also establishes a local stacking context in which its stack level is 0. This means that the z-indexes of descendants are not compared to the z-indexes of elements outside this element.   Examples position:relative; z-index:1; position:absolute; z-index:3; left:20em; top:-25px; opacity:0.9 position:absolute; z-index:2; left:60px; top:3em; Notes Negative z-index values are supported correctly starting in Gecko 1.9 \/ Firefox 3. Previous versions implemented the CSS 2 behavior, not the CSS 2.1 behavior that is compatible with other browsers. Specifications  CSS 2.1 Visual formatting #z-index  Browser compatibility    Browser Lowest Version   Internet Explorer 4.0   Firefox (Gecko) 1.0 (1.0)   Opera 4.0   Safari (WebKit) 1.0 (85)    See also  CSS position  property Understanding CSS z-indexes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/angle","title":"angle","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/auto","title":"auto","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/counter","title":"counter","description":"Specifications http:\/\/www.w3.org\/TR\/CSS21\/syndata.html#counter"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/color_value","title":"color value","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/frequency","title":"frequency","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/gradient","title":"gradient","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/identifier","title":"identifier","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/image","title":"image","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/initial","title":"initial | -moz-initial","description":"The -moz-initial CSS keyword is a Mozilla implementation of CSS3 initial. Applies the initial value of a property to an element. -moz-initial (initial) is allowed on every CSS property. It causes the element for which it is specified to use the initial value of the property. Examples   \/* give headers a green border *\/  h2 { border: medium solid green }   \/* but make those in the sidebar use the value of the \"color\" property *\/  #sidebar h2 { border-color: -moz-initial; border-color: initial; }    <p style=\"color:red\">      this text is red         <em style=\"color:-moz-initial; color:initial\">            this text is in the initial color (e.g. black)        <\/em>     this is red again  <\/p>  Browser compatibility    Browser Lowest version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0-3.0 (1.0-1.9) [*] -moz-initial   Opera --- ---   Safari (WebKit) 1.2 (125) initial    [*] Increasing support in each version, almost complete in Firefox 3.0  Support for quotes  since Firefox 3.5 (Gecko 1.9.1) Support for -moz-border-*-colors  since Firefox 3.6 (Gecko 1.9.2)  Specifications    Specification Status Comment     CSS Values and Units Level 3 Working Draft  Defines the keyword   CSS Cascade And Inheritance Level 3 Working Draft  Defines what an initial value is    See also Initial value, inherit"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/inherit","title":"inherit","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/integer","title":"integer","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/length","title":"length","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/none","title":"none","description":"none is a common value for most CSS properties. It is often the default value, but can always be considered as a sort of \"standard\" value. It is comparable to the value normal  , used in a similar manner for other properties. Used in  float  The element doesn't float. text-decoration  Doesn't decorate the element. max-height  \/ max-width  Doesn't bound the height \/ width with a particular value.   background-image  border-style  clear  content  counter-increment  counter-reset  display  list-style-type  quotes  text-transform"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/normal","title":"normal","description":"normal is a common value for some CSS properties. It is often the default value, but can always be considered as a sort of \"standard\" value. It is comparable to the value none , used in a similar manner for other properties. Used in   font-weight  Gives the font standard weight (400). That is, the text is not noticeably bold or light. font-style  Does not apply any italic or oblique to the font. word-spacing  Uses the standard spacing between words, specified by the font.  Also used in:  font-variant  letter-spacing  white-space  speak  unicode-bidi  line-height  content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/number","title":"number","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/percentage","title":"percentage","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/ratio","title":"ratio","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/resolution","title":"resolution","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/shape","title":"shape","description":"The <shape> CSS data type denotes the specific form of a region. This region is used to define on which part of an element some properties like clip  do apply. In the current specification, a <shape>, though designed to denote any kind of form, can only represents a rectangular region, defined using the rect() functional notation.The rect() function The rect() functional notation produces a region in the form of a rectangle. Syntax rect(top, right, bottom, left)  where:  top Is a  <length>  representing the offset for the top of the rectangle relative to the top border of the element's box.   right Is a  <length>  representing the offset for the right of the rectangle relative to the left border of the element's box.   bottom Is a  <length>  representing the offset for the bottom of the rectangle relative to the top border of the element's box.   left Is a  <length>  representing the offset for the left of the rectangle relative to the left border of the element's box. Interpolation Values of the <shape> CSS data type which are rectangles can be interpolated in order to allow animations. In that case they are interpolated over their top, right, bottom and left component, each treated as a real, floating-point, number. [1] The speed of the interpolation is determined by the timing function associated with the animation. Examples   img.clip04 {     clip: rect(10px, 20px, 20px, 10px);  }  Syntax rect(top, right, bottom, left)  where:  top Is a  <length>  representing the offset for the top of the rectangle relative to the top border of the element's box.   right Is a  <length>  representing the offset for the right of the rectangle relative to the left border of the element's box.   bottom Is a  <length>  representing the offset for the bottom of the rectangle relative to the top border of the element's box.   left Is a  <length>  representing the offset for the left of the rectangle relative to the left border of the element's box. Interpolation Values of the <shape> CSS data type which are rectangles can be interpolated in order to allow animations. In that case they are interpolated over their top, right, bottom and left component, each treated as a real, floating-point, number. [1] The speed of the interpolation is determined by the timing function associated with the animation. Examples   img.clip04 {     clip: rect(10px, 20px, 20px, 10px);  }  Specifications    Specification Status Comment     CSS Level 2 (Revision 1) Recommendation  Defined with the clip  property    Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1.0 1.0 (1.7 or earlier)  5.5[*] 9.5 1.3         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     [*] From IE 5.5 to IE 7 included, the IE supported syntax of the rect() didn't allow the comma as the parameter separator, but a space. From IE 8, the standard syntax (only commas) is supported.See also  Related CSS properties: clip  The -moz-image-rect() function with similar coordinate than rect(). CSS Reference index CSS Data Types : <angle>, <color>, <frequency>, <gradient>, <identifier>, <image>, <integer>, <length>, <number>, <percentage>, <ratio>, <resolution>, <shape>, <string>, <time>, <timing-function>, <uri>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/string","title":"string","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/time","title":"time","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/timing-function","title":"timing-function","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Universal_selectors","title":"Universal selectors","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Type_selectors","title":"Type selectors","description":"CSS type selectors match elements by node name. Used alone, therefore, a type selector for a particular node name selects all elements of that type - that is, with that node name - in the document. Syntax  nodeName { style properties }  Examples \r           span {   background-color: DodgerBlue; }\r          ...where... \r           <span>Here's a span with some text.<\/span>   <p>Here's a p with some text.<\/p>\r          ... should look like ... Here's a span with some text. Here's a p with some text. Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/uri","title":"uri","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Attribute_selectors","title":"Attribute selectors","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Adjacent_sibling_selectors","title":"Adjacent sibling selectors","description":"The + combinator matches the second element only if it is immediately following the first element. Syntax element + element { style properties }  Examples \r           li + li {   color: red; }\r          ...where... \r           <ul>     <li>One<\/li>     <li>Two<\/li>     <li>Three<\/li>   <\/ul>\r          ... should look like ...  One Two Three  Another use case might be styling of \"caption span\"s of the following <img>  elements: \r           img + span.caption {   font-style: italic; }\r          will match the following <span>  elements: \r           <img src=\"photo1.jpg\"><span class=\"caption\">The first photo<\/span> <img src=\"photo2.jpg\"><span class=\"caption\">The second photo<\/span>\r          See also  General sibling selectors   Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Child_selectors","title":"Child selectors","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Descendant_selectors","title":"Descendant selectors","description":"The &#9251; combinator (that's meant to represent a space, or more properly one or more whitespace characters) combines two selectors such that the combined selector matches only those elements matching the second selector for which there is an ancestor element matching the first selector. Descendant selectors are similar to child selectors, but they do not require that the relationship between matched elements be strictly parent-child. Syntax  selector1 selector2 { style properties }  Examples \r           span { background-color: white; } div span { background-color: DodgerBlue; }\r          ...where... \r           <div>   <span>Span 1.     <span>Span 2.<\/span>   <\/span> <\/div> <span>Span 3.<\/span>\r          ... should look like ... Span 1. Span 2. Span 3. Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Pseudo-elements","title":"Pseudo-elements","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aafter","title":":after | ::after","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Abefore","title":":before  | ::before","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A%3Afirst-letter","title":"::first-letter | :first-letter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A%3Afirst-line","title":"::first-line | :first-line","description":"The :first-line CSS pseudo-element applies styles to the first line of a element. However, the selector :first-line does not match any real HTML element. Examples  \/* change the letters of the first line of every paragraph to uppercase *\/  p:first-line { text-transform: uppercase }  Browser compatibility    Browser Lowest version Support of   Internet Explorer 5.5 :first-line   Firefox (Gecko) 1.0 (1.0) :first-line   1.0 (1.5) :first-line | ::first-line   Opera 3.5 :first-line   7.0 :first-line | ::first-line   Safari (WebKit) 1.0 (85) :first-line | ::first-line    For compatibility with IE 5.5-8 avoid CSS3 notation ::first-line (use CSS2 notation :first-line). Specifications  CSS 2.1 Selectors #first-line CSS 3 Selectors #first-line Working draft"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A%3Aselection","title":"::-moz-selection | ::selection","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A%3A-moz-progress-bar","title":"::-moz-progress-bar","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Pseudo-classes","title":"Pseudo-classes","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Avisited","title":":visited","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aactive","title":":active","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Alink","title":":link","description":"The :link pseudo-class lets you select only links that have not yet been visited. Examples a:link {color:slaygrate;} .external:link {background-color:lightblue;} Specifications  CSS 2.1 Selectors #link CSS 3 Selectors #links  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1 1.0 (1.7 or earlier)  3.0 3.5 1.0         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 1.5 1.0 (1.9.2)  ? ? 3.2"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Ahover","title":":hover","description":"The :hover CSS pseudo-class matches when the user designates an element with a pointing device, but does not necessarily activate it. Visual user agents, like Firefox, Internet Explorer, Safari, Opera or Chrome, apply the associated style when the cursor (mouse pointer) hovers over an element. Usage Note: on touch screens :hover is problematic or impossible. The :hover pseudo-class never matches, or matches for a short moment after touching an element. As touchscreen devices are very common, it is important for web developer not to have content accessible only when hovering over it, as this content would be hidden for users of such devices.Examples :link:hover { outline: dotted red; }  .foo:hover { background: gold; } Specifications  CSS 2.1 Selectors #dynamic-pseudo-classes  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   for <a> elements 0.2 1.0 (1.7 or earlier)  4.0 4.0 2.0.4 (419) various bugs before   for all elements 0.2 1.0 (1.7 or earlier)  7.0 7.0 2.0.4 (419) various bugs before         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Afocus","title":":focus","description":"Specifications  CSS 2.1 Selectors #dynamic-pseudo-classes CSS 3 Selectors #useraction-pseudos  Browser compatibility    Browser Lowest Version   Internet Explorer 8.0   Firefox 1.0   Opera 7.0   Safari (1.0 ?)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Alang","title":":lang","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anot","title":":not()","description":"The negation pseudo-class, :not(X), is a functional notation taking a simple selector X as an argument. It matches an element that is not represented by the argument. X must not contain another negation selector, or any pseudo-elements. The specificity of the :not pseudo-class is the specificity of its argument. The :not pseudo-class does not add to the selector specificity, unlike other pseudo-classes. Notes:  Useless selectors can be written using this pseudo-class. E.g. :not(*) matching any element which is not any element will never be applied. It is possible to rewrite other rules. E.g. foo:not(bar)will match the same element than the simple foo. Nevertheless the specificity of the first one is higher.  Syntax  :not(selector) { style properties } Examples Usage Example  p:not(.classy) { color: red; } :not(p) { color: green; } ...where...  <p>Some text.<\/p> <p class=\"classy\">Some other text.<\/p> <span>One more text<span>  ...should look like... Some text. Some other text. One more text Usage Example  p:not(.classy) { color: red; } :not(p) { color: green; } ...where...  <p>Some text.<\/p> <p class=\"classy\">Some other text.<\/p> <span>One more text<span>  ...should look like... Some text. Some other text. One more text Specifications  CSS 3 Selectors #negation    Browser compatibility    Browser Lowest Version   Internet Explorer 9.0   Firefox (Gecko) 1.0 (1.0)   Opera 9.5   Safari (WebKit) 1.0 (85)"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Afirst","title":":first","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aleft","title":":left","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aright","title":":right","description":"The :right page pseudo-class matches any right page when printing a page. It allows to describe the styling of right-side page. Whether the page is left or right is decided by the major writing direction of the document. For example, if the first page has a major writing direction of left-to-right then it will be a :right page and if it has a major writing direction of right-to-left then it will be a :left page. Note: You can't change all CSS properties. You can only change the the margin, padding, border, and background properties of the page box. All other CSS properties will be ignored, and only the page box, not the document content on the page, will be affected.Examples \r           @page :right {   margin: 2in 3in; }\r          Specifications CSS 2.1 Paged media #page-selectors Browser compatibility    Browser Lowest Version   Internet Explorer   8.0   Firefox (Gecko) ---   Opera   9.2   Safari (WebKit) ---   See also  @page  :first  :left"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aroot","title":":root","description":"The :root pseudo-class matches the root element of a tree representing the document. In HTML, :root represents the <html>  element and is identical to the selector html, except that its specifity is higher.Specifications  CSS 3 Selectors #root-pseudo  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1 1.0 (1.7)  9 9.5 1.0         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anth-child","title":":nth-child","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anth-last-child","title":":nth-last-child","description":"The :nth-last-child pseudo-class matches an element that has an+b-1 siblings after it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child  for a more thorough description of the syntax of its argument.Syntax element:nth-last-child(an + b) { style properties }  Examples Example selectors tr:nth-last-child(-n+4) Matches the last four rows of an HTML table. span:nth-last-child(even) Matches the even elements in their parent element, starting at the last element and working backward.  Example selectors tr:nth-last-child(-n+4) Matches the last four rows of an HTML table. span:nth-last-child(even) Matches the even elements in their parent element, starting at the last element and working backward.  See also  :nth-child  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anth-of-type","title":":nth-of-type","description":"The :nth-of-type pseudo-class matches an element that has an+b-1 siblings with the same element name before it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child  for a more thorough description of the syntax of its argument.Syntax element:nth-of-type(an + b) { style properties }  Examples Example This example causes the positions of floated images to alternate between right and left. \r           img:nth-of-type(2n+1) { float: right; } img:nth-of-type(2n) { float: left; }\r          Example This example causes the positions of floated images to alternate between right and left. \r           img:nth-of-type(2n+1) { float: right; } img:nth-of-type(2n) { float: left; }\r          See also  :nth-child  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Anth-last-of-type","title":":nth-last-of-type","description":"The :nth-last-of-type pseudo-class matches an element that has an+b-1 siblings with the same element name after it in the document tree, for a given positive or zero value for n, and has a parent element. See :nth-child  for a more thorough description of the syntax of its argument.Syntax element:nth-last-of-type(an + b) { style properties }  See also  :last-of-type  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Afirst-child","title":":first-child","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Alast-child","title":":last-child","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Afirst-of-type","title":":first-of-type","description":"The :first-of-type pseudo-class represents the first sibling of the given type in the list of children of its parent element.Syntax element:first-of-type { style properties }  Example To match the first data cell in a table row, you can use this: \r           tr > td:first-of-type\r          See also  :nth-of-type  :last-of-type  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aonly-child","title":":only-child","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Alast-of-type","title":":last-of-type","description":"The :last-of-type pseudo-class represents the last sibling of the given type in the list of children of its parent element.Syntax element:last-of-type { style properties }  Example To match the last data cell in a table row, you can use this: \r           tr > td:last-of-type\r          See also  :nth-last-of-type  :first-of-type  :nth-of-type  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aonly-of-type","title":":only-of-type","description":"The :only-of-type pseudo-class represents any element that have no siblings of the given type. Syntax element:only-of-type { style properties }  See also  :nth-of-type  :first-of-type  :last-of-type  CSS3 Reference"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aempty","title":":empty","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Atarget","title":":target","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Achecked","title":":checked","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Adefault","title":":default","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aenabled","title":":enabled","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aindeterminate","title":":indeterminate","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Adisabled","title":":disabled","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Aoptional","title":":optional","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Ainvalid","title":":invalid","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Arequired","title":":required","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3Avalid","title":":valid","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@charset","title":"@charset","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@import","title":"@import","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@font-face","title":"@font-face","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@keyframes","title":"@keyframes","description":"@keyframes lets authors control the intermediate steps in a CSS animation sequence by establishing keyframes (or waypoints) along the animation sequence that must be reached by certain points during the animation. This gives you more specific control over the intermediate steps of the animation sequence than you get when letting the browser handle everything automatically. To use keyframes, you create a @keyframes rule with a name that is then used by the animation-name  property to match an animation to its keyframe list. Each @keyframes rule contains a style list of keyframe selectors, each of which is comprised of a percentage along the animation at which the keyframe occurs as well as a block containing the style information for that keyframe. You can list the keyframes in any order; they will be handled in the order in which their specified percentages indicate they should occur. Valid keyframe lists In order for a keyframe list to be valid, it must include rules for at least the times 0% (or from) and 100% (or to) (that is, the starting and ending states of the animation). If both of these time offsets aren't specified, the keyframe declaration is invalid and can't be used for animation. If you include properties that can't be animated in your keyframe rules, they get ignored, but the supported properties will still be animated. Duplicate resolution If multiple keyframe sets exist for a given name, the last one encountered is used. @keyframes rules don't cascade, so animations never drive keyframes from more than one rule set. If a given animation time offset is duplicated, the last keyframe in the @keyframes rule for that percentage is used for that frame. There's no cascading within a @keyframes rule if multiple keyframes specify the same percentage values. When properties are left out of some keyframes Any properties that you don't specify in every keyframe are interpolated (with the exception of those that can't be interpolated, which are instead dropped from the animation entirely). For example: \r           @keyframes identifier {   0% { top: 0; left: 0; }   30% { top: 50px; }   68%, 72% { left: 50px; }   100% { top: 100px; left: 100%; } }\r          Here, the top  property animates using the 0%, 30%, and 100% keyframes, and left  animates using the 0%, 70%, and 100% keyframes. Only properties that are specified in both the 0% and 100% keyframes will be animated; any property not included in both of those keyframes will retain their starting value for the duration of the animation sequence. Valid keyframe lists In order for a keyframe list to be valid, it must include rules for at least the times 0% (or from) and 100% (or to) (that is, the starting and ending states of the animation). If both of these time offsets aren't specified, the keyframe declaration is invalid and can't be used for animation. If you include properties that can't be animated in your keyframe rules, they get ignored, but the supported properties will still be animated. Duplicate resolution If multiple keyframe sets exist for a given name, the last one encountered is used. @keyframes rules don't cascade, so animations never drive keyframes from more than one rule set. If a given animation time offset is duplicated, the last keyframe in the @keyframes rule for that percentage is used for that frame. There's no cascading within a @keyframes rule if multiple keyframes specify the same percentage values. When properties are left out of some keyframes Any properties that you don't specify in every keyframe are interpolated (with the exception of those that can't be interpolated, which are instead dropped from the animation entirely). For example: \r           @keyframes identifier {   0% { top: 0; left: 0; }   30% { top: 50px; }   68%, 72% { left: 50px; }   100% { top: 100px; left: 100%; } }\r          Here, the top  property animates using the 0%, 30%, and 100% keyframes, and left  animates using the 0%, 70%, and 100% keyframes. Only properties that are specified in both the 0% and 100% keyframes will be animated; any property not included in both of those keyframes will retain their starting value for the duration of the animation sequence. Syntax @keyframes <identifier> {   [ [ from | to | <percentage> ] [, from | to | <percentage> ]* block ]* }  Values  <identifier> A name identifying the keyframe list. This must match the identifier production in CSS syntax. from A starting offset of 0%. to An ending offset of 100%. <percentage>  A percentage of the time through the animation sequence at which the specified keyframe should occur.  Values  <identifier> A name identifying the keyframe list. This must match the identifier production in CSS syntax. from A starting offset of 0%. to An ending offset of 100%. <percentage>  A percentage of the time through the animation sequence at which the specified keyframe should occur.  Examples See CSS animations for examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Supported) -webkit 5.0 (5.0)  -moz 10  -ms [1] ? 4.0 -webkit         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specifications   CSS Animations Module Level 3: KeyframesWD  See also  CSS animations CSS Reference CSS at-rules: @charset, @font-face, @import, @keyframes, @media, @page. AnimationEvent  animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@media","title":"@media","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Comments","title":"Comments","description":"Comments are used to add explanatory notes or prevent the browser from interpreting parts of the stylesheet. Syntax  \/* Comment *\/ Examples \r           \/* A single line comment *\/  \/* A comment which stretches over several lines *\/\r          Notes The \/* *\/ comment syntax is used for both single and multi line comments. There is no other way to specify comments in external stylesheets. However, when using the <style> element, you may use <!-- --> to hide CSS from older browsers, although this is not recommended. As in most programming languages that use the \/* *\/ comment syntax, comments cannot be nested. In other words, the first instance of *\/ that follows an instance of \/* closes the comment. Specifications  CSS 2.1 Syntax and basic data types #comments"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@page","title":"@page","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Media_queries","title":"CSS media queries","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS_Counters","title":"CSS Counters","description":"Using counters To use a CSS counter, it must first be reset to a value, 0 by default. To add the value of a counter to an element, use the counter() function. The following example adds to the beginning of each h1 element \"Section <the value of the counter>:\". \r           body {   counter-reset: section;           \/* Set the section counter to 0 *\/ } h1:before {   counter-increment: section;      \/* Increment the section counter *\/   content: \"Section \" counter(section) \": \"; \/* Display the counter *\/ }\r          Nesting counters A CSS counter can be especially useful to make outlined lists because a new instance of a CSS counter is automatically created in child elements. Using the counters() function, a string can be inserted between different levels of nested counters: \r           ol {   counter-reset: section;                \/* Creates a new instance of the                                             section counter with each ol                                             element *\/   list-style-type: none; } li:before {   counter-increment: section;            \/* Increments only this instance                                             of the section counter *\/   content: counters(section, \".\") \" \";   \/* Adds the value of all instances                                             of the section counter separated                                             by a \".\". *\/ }\r          With the following HTML: \r           <ol>   <li>item<\/li>          <!-- 1     -->   <li>item               <!-- 2     -->     <ol>       <li>item<\/li>      <!-- 2.1   -->       <li>item<\/li>      <!-- 2.2   -->       <li>item           <!-- 2.3   -->         <ol>           <li>item<\/li>  <!-- 2.3.1 -->           <li>item<\/li>  <!-- 2.3.2 -->         <\/ol>         <ol>           <li>item<\/li>  <!-- 2.3.1 -->           <li>item<\/li>  <!-- 2.3.2 -->           <li>item<\/li>  <!-- 2.3.3 -->         <\/ol>       <\/li>       <li>item<\/li>      <!-- 2.4   -->     <\/ol>   <\/li>   <li>item<\/li>          <!-- 3     -->   <li>item<\/li>          <!-- 4     --> <\/ol> <ol>   <li>item<\/li>          <!-- 1     -->   <li>item<\/li>          <!-- 2     --> <\/ol>\r          Specifications  CSS 2.1  See also  counter-reset counter-increment  There is an additional example available at http:\/\/www.mezzoblue.com\/archives\/20...\/counter_intu\/. This blog entry was posted on November 01, 2006, but appears to be accurate."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Using_CSS_gradients","title":"Using CSS gradients","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Specificity","title":"Specificity","description":"See also  CSS selectors spec: http:\/\/www.w3.org\/TR\/css3-selectors\/#specificity CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/initial_value","title":"initial value","description":"The initial value given in the summary of the definition of each CSS property has different meaning for inherited and non-inherited properties. For inherited properties, the initial value is used, for the root element only, when no value is specified for the element. For non-inherited properties the initial value is used, for any element, when no value is specified for the element. An initial keyword is being added in CSS3 to allow authors to explicitly specify this initial value. See Also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values.  initial"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/inheritance","title":"inheritance","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/specified_value","title":"specified value","description":"The specified value of a CSS property is set in one out of three ways.  If the document's stylesheet has specified a value for the property then it will be used. For example; if the color  property is set to green then the text color of the corresponding element will be green. If the document's stylesheet has not specified a value then it will be inherited form the parent element (if possible). For example; if we have a paragraph (<p> ) inside a <div>  and the <div>  has a CSS font property value of \"Arial\" and the <p>  doesn't have a font property defined then it will inherit the Arial font. If none of the above are available, the initial value for the element as specified by the CSS specification is applied.  Specifications  CSS 2.1 Assigning property values #specified-value"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/used_value","title":"used value","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/computed_value","title":"Computed value","description":"The computed value of a CSS property is computed from the specified value by:  handling the special values inherit  and initial , and doing the computation needed to reach the value described in the \"Computed value\" line in the property's summary.  The computation needed to reach the \"Computed value\" for the property typically involves converting relative values (such as those in em units or percentages) to absolute values. For example, if an element has specified values font-size:16px and padding-top:2em, then the computed value of padding-top is 32px (double the font size). However, for some properties (those where percentages are relative to something that may require layout to determine, such as width, margin-right, text-indent, and top), percentage specified values turn into percentage computed values. Additionally, unitless numbers specified on the line-height property become the computed value, as specified. These relative values that remain in the computed value become absolute when the used value is determined. The main use of the computed value (other than as a step between the specified value and used value) is inheritance, including the inherit  keyword. Notes The getComputedStyle DOM API returns the used value, not the computed value. Specifications  CSS 21 Assigning property values #computed-value   See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/actual_value","title":"actual value","description":"The actual value of a CSS property is the used value after all approximations have been applied. For example; a user agent may only be able to render borders with a integer pixel value and may be forced to approximate the computed width of the border. Specifications  CSS 2.1 Assigning property values #actual-value  See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/box_model","title":"Box model","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started","title":"Getting Started","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/margin_collapsing","title":"Margin collapsing","description":"Top and bottom margins of blocks are sometimes combined (collapsed) into a single margin whose size is the largest of the margins combined into it, a behavior known as margin collapsing. Margin collapsing occurs in three basic cases:  Adjacent siblings The margins of adjacent siblings are collapsed (except when the later sibling needs to be cleared past floats). For example:   <p>The bottom margin of this paragraph is collapsed...<\/p>  <p>...with the top margin of this paragraph.<p>   Parent and first\/last child If there is no border, padding, inline content, or clearance to separate the margin-top of a block with the margin-top of its first child block, or no border, padding, inline content, height, min-height, or max-height to separate the margin-bottom of a block with the margin-bottom of its last child, then those margins collapse. The collapsed margin ends up outside the parent. Empty blocks If there is no border, padding, inline content, height, or min-height to separate a block's margin-top from its margin-bottom, then its top and bottom margins collapse.  More complex margin collapsing (of more than two margins) occurs when these cases are combined. These rules apply even to margins that are zero, so the margin of a first\/last child ends up outside its parent (according to the rules above) whether or not the parent's margin is zero. When negative margins are involved, the size of the collapsed margin is the sum of the largest positive margin and the smallest (most negative) negative margin. Margins of floating and absolutely positioned elements never collapse. Specifications  CSS 2.1 Box #Collapsing_margins  See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values.   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding   See also  CSS Reference CSS Key Concepts: specificity and inheritance, the box model and margin collapsing, or the initial, computed, used and actual values.   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/block_formatting_context","title":"block formatting context","description":"Summary  A block formatting context is a part of a visual CSS rendering of a Web page. It is the region in which the layout of block boxes occurs and in which floats interact with each other. A block formatting context is created by one of the following:   the root element or something that contains it  floats (elements where float is not none)  absolutely positioned elements (elements where position is absolute or fixed)  inline-blocks (elements with display: inline-block)  table cells (elements with display: table-cell, which is the default for HTML table cells)  table captions (elements with display: table-caption, which is the default for HTML table captions)  elements where overflow has a value other than visible  A block formatting context contains everything inside of the element creating it that is not also inside a descendant element that creates a new block formatting context. Block formatting contexts are important for the positioning (see float) and clearing (see clear) of floats. The rules for positioning and clearing of floats apply only to things within the same block formatting context. Floats do not affect the layout of things in other block formatting contexts, and clear only clears past floats in the same block formatting context.   Specifications   CSS 2.1   See Also  float, clear"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/CSS_transitions","title":"CSS transitions","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/CSS_animations","title":"CSS animations","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/CSS_animations\/Detecting_CSS_animation_support","title":"Detecting CSS animation support","description":"Testing for CSS animation support This code will check to see if CSS animation support is available: \r           var animation = false,     animationstring = 'animation',     keyframeprefix = '',     domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),     pfx  = '';  if( elm.style.animationName ) { animation = true; }      if( animation === false ) {   for( var i = 0; i < domPrefixes.length; i++ ) {     if( elm.style[ domPrefixes[i] + 'AnimationName' ] !== undefined ) {       pfx = domPrefixes[ i ];       animationstring = pfx + 'Animation';       keyframeprefix = '-' + pfx.toLowerCase() + '-';       animation = true;       break;     }   } }\r          For starters we define a few variables. We assume that animation is not supported by setting animation to false. We set the animationstring to animation which is the property we want to set later on. We create an array of browser prefixes to loop over and we set pfx to an empty string. Then we check if the CSS animationName  property on the style collection for the element specified by the variable elm is set. This means the browser supports CSS animation without any prefix, which, to date, none of them do. If the browser does not support non-prefixed animation and animation is still false, we iterate over all the possible prefixes, since all the major browsers are currently prefixing this property and changing its name to AnimationName instead. Once this code is finished running, the value of animation will be false if CSS animation support isn't available, or it will be true. If it is true then both the animation property name and the keyframe prefix will be the right ones. So if you use a new Firefox, the property will be MozAnimation and the keyframe prefix -moz- and with Chrome it'll be WebkitAnimation and -webkit-. Notice browsers don't make it easy with the switching between camelCase and hyphen-ation. Animating using the correct syntax for different browsers Now that you know if CSS animation is supported or not, we can animate. \r           if( animation === false ) {    \/\/ animate in JavaScript fallback  } else {   elm.style[ animationstring ] = 'rotate 1s linear infinite';    var keyframes = '@' + keyframeprefix + 'keyframes rotate { '+                     'from {' + keyframeprefix + 'transform:rotate( 0deg ) }'+                     'to {' + keyframeprefix + 'transform:rotate( 360deg ) }'+                   '}';    if( document.styleSheets && document.styleSheets.length ) {        document.styleSheets[0].insertRule( keyframes, 0 );    } else {      var s = document.createElement( 'style' );     s.innerHTML = keyframes;     document.getElementsByTagName( 'head' )[ 0 ].appendChild( s );    }    }\r          This code looks at the value of animation; if it's false, we know we need to use our JavaScript fallback code to perform our animation. Otherwise, we can use JavaScript to create the desired CSS animation effects. Setting the animation property is easy; simply update its value in the style collection. However, adding keyframes is trickier, since they're not defined using traditional CSS syntax (which makes them more flexible, but harder to define from script). To define our keyframes using JavaScript, we need to write them out as a CSS string. All we do is set up a keyframes variable is set up, prefixing each attribute as it's constructed. This variable, once constructed, contains the complete description of all the keyframes needed by our animation sequence. The next task is to actually add the keyframes to the page's CSS. The first thing to do is look to see if there's already a style sheet on the document; if so, we simply insert the keyframe description into that stylesheet; this is done in lines 13-15. If there isn't already a style sheet, a new <style>  element is created, and its content is set to the value of keyframes. Then the new <style>  element is inserted into the document's <head> , thereby adding the new style sheet to the document.  View on jsFiddle  See also  CSS animations animation , animation-delay , animation-direction , animation-duration , animation-fill-mode , animation-iteration-count , animation-name , animation-play-state , animation-timing-function , @keyframes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Using_CSS_multi-column_layouts","title":"Using CSS multi-column layouts","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-appearance","title":"-moz-appearance","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-background-inline-policy","title":"-moz-background-inline-policy","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-binding","title":"-moz-binding","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-border-bottom-colors","title":"-moz-border-bottom-colors","description":"In Mozilla applications like Firefox, -moz-border-bottom-colors sets a list of colors for the bottom border. See the -moz-border-top-colors  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-border-left-colors","title":"-moz-border-left-colors","description":"In Mozilla applications like Firefox, the -moz-border-left-colors sets a list of colors for the left border. See the -moz-border-top-colors  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-border-right-colors","title":"-moz-border-right-colors","description":"In Mozilla applications like Firefox, -moz-border-right-colors sets a list of colors for the right border. See the -moz-border-top-colors  property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-border-top-colors","title":"-moz-border-top-colors","description":"In Mozilla applications like Firefox, the -moz-border-top-colors  CSS property sets a list of colors for the top border. When an element has a border that is larger than a single CSS pixel, each line of pixels uses the next color specified in this property, from the outside in. This eliminates the need for nested boxes. If the border is wider than the number of specified colors, the remaining part of the border is the innermost color specified.  Initial value: none Applies to: all elements Inherited: no  It does not apply  if border-style  is dashed or dotted. to tables with border-collapse: collapse.  Syntax -moz-border-top-colors:  [<color>]* <color> | none  Values Accepts a white-space separated list of color values. <color>Specifies the color of a line of pixels in the bottom border. transparent is valid. See <color>  values for possible units.noneDefault, no colors are drawn or border-color  is used, if specified. Related properties  -moz-border-right-colors  sets colors for the right border -moz-border-bottom-colors  sets colors for the bottom border -moz-border-left-colors  sets colors for the left border  Examples  \/*  Other browsers use a \"inset gold 10px\" border  *\/  border: inset gold 10px;  color:gold;  background:gray;  padding:1em; -moz-border-top-colors:    #e00 #c30 #c50 #c60 #c70 #c80 #c90 #ca0 #cb0 #cc0; -moz-border-right-colors:   red #f60 #f80 #f90 #fa0 #fb0 #fc0 #fd0 #fe0 #ff0; -moz-border-bottom-colors:  red #f60 #f80 #f90 #fa0 #fb0 #fc0 #fd0 #fe0 #ff0; -moz-border-left-colors:   #e00 #c30 #c50 #c60 #c70 #c80 #c90 #ca0 #cb0 #cc0;   \/*  Other browsers use a \"solid 1.5em\" border  *\/  border: solid 1.5em;  -moz-border-radius:1.5em;  border-radius:1.5em; -moz-border-top-colors:    maroon maroon khaki maroon khaki maroon maroon transparent; -moz-border-right-colors:  maroon maroon khaki maroon khaki maroon maroon magenta; -moz-border-bottom-colors: maroon maroon khaki maroon khaki maroon maroon transparent; -moz-border-left-colors:   maroon maroon khaki maroon khaki maroon maroon transparent; Specifications Non-standard      Browser compatibility Supported since Gecko 1.0 (Firefox 1.0), no support in other major browsers. See also border-color"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-align","title":"box-align","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-direction","title":"box-direction","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-flex","title":"box-flex","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-ordinal-group","title":"-moz-box-ordinal-group","description":"Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group. Values Values must be integers greater than zero. The default value for this property is 1. Examples \r           <style type=\"text\/css\">   #Flexbox {     display: -ms-box;     display: -moz-box;     display: -webkit-box;   }     #text1 {     background: red;     -ms-box-ordinal-group: 4;     -moz-box-ordinal-group: 4;     -webkit-box-ordinal-group: 4;   }     #text2 {     background: green;     -ms-box-ordinal-group: 3;     -moz-box-ordinal-group: 3;     -webkit-box-ordinal-group: 3;   }     #text3 {     background: blue;     -ms-box-ordinal-group: 2;     -moz-box-ordinal-group: 2;     -webkit-box-ordinal-group: 2;   }     #text4 {     background: orange;   } <\/style>  <div id=\"Flexbox\">       <div id=\"text1\">text 1<\/div>       <div id=\"text2\">text 2<\/div>       <div id=\"text3\">text 3<\/div>       <div id=\"text4\">text 4<\/div> <\/div>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-orient","title":"box-orient","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-box-pack","title":"box-pack","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-filter","title":"-moz-filter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-float-edge","title":"-moz-float-edge","description":"Related bugs    bug 432891"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-font-feature-settings","title":"-moz-font-feature-settings","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-force-broken-image-icon","title":"-moz-force-broken-image-icon","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-image-region","title":"-moz-image-region","description":"For certain XUL elements and pseudo-elements that use an image from the list-style-image  property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance. The syntax is similar to the clip  property. All four values are relative to the upper left corner of the image.  Initial value : auto  Applies to: XUL image  elements and :-moz-tree-image , :-moz-tree-twisty , and :-moz-tree-checkbox  pseudo-elements Inherited : yes Percentages: n\/a Media: visual   Computed value : For rect() values, a rect consisting of four computed lengths; otherwise as specified.  Syntax -moz-image-region: rect(top, right, bottom, left);  Examples #example-button {   \/* display only the 4x4 area from the top left of this image *\/   list-style-image: url(\"chrome:\/\/example\/skin\/example.png\");   -moz-image-region: rect(0px, 4px, 4px, 0px); } #example-button:hover {   \/* use the 4x4 area to the right of the first for the hovered button *\/   -moz-image-region: rect(0px, 8px, 4px, 4px); }"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-margin-end","title":"-moz-margin-end","description":"In left to right (LTR) situations, the -moz-margin-end CSS property specifies the right margin and is synonymous with margin-right . In RTL cases it sets the left margin (same as margin-left ). In Right to Left (RTL) situations -moz-margin-end flips the elements margin without having to specify absolute left or right.  Initial value : 0 Applies to: all elements except those with table display types other than table-caption, table, and inline-table Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : The percentage as specified or the absolute length  Syntax  -moz-margin-end:   <length> | <percentage> | inherit | auto   Values  <length>  Specifies a fixed width.  <percentage>  A percentage with respect to the width of the containing block.   Examples    .content {-moz-margin-end: 5%}    .sidebox {-moz-margin-end: 10px}  Specifications Not (yet) candidate for specifications.  CSS 3 box  Browser compatibility    Browser Lowest Version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0 (1.7) -moz-margin-end   Opera --- ---   Safari (WebKit) --- ---    See also   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-margin-start","title":"-moz-margin-start","description":"In left to right (LTR) situations the -moz-margin-start CSS property specifies the left margin and is synonymous with margin-left . In RTL cases it sets the right margin (same as margin-right ). In Right to Left (RTL) situations -moz-margin-start flips the elements margin without having to specify absolute left or right.  Initial value : 0 Applies to: all elements except those with table display types other than table-caption, table, and inline-table Inherited : no Percentages: refer to width  of closest block-level ancestor Media: visual   Computed value : the percentage as specified or the absolute length  Syntax  -moz-margin-start:   <length> | <percentage> | inherit | auto   Values  <length>  Specifies a fixed width.  <percentage>  a percentage with respect to the width of the containing block.   Examples -moz-margin-start:33%; -webkit-margin-start:33%; direction:rtl; -moz-margin-start:33%; -webkit-margin-start:33%; Specifications Not (yet) candidate for specifications.  CSS 3 Box model #margins Working draft  Browser compatibility    Browser Lowest Version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0 (1.7) -moz-margin-start   Opera --- ---   Safari (WebKit) 2.0 (412) -khtml-margin-start   3.0 (522) -khtml-margin-start | -webkit-margin-start    See also   margin , margin-top , margin-right , margin-bottom , margin-left , -moz-margin-start , -moz-margin-end , border , padding"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-orient","title":"-moz-orient","description":"Specifies the orientation of the element to which it's applied.  Initial value : horizontal Applies to: <progress>  Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  orient:  horizontal | vertical  Values  horizontal The element is rendered horizontally. vertical The element is rendered vertically. Examples This example displays two progress bars; one horizontal and one vertical. \r           <html> <head>   <title>orient example<\/title>   <style type=\"text\/css\">     .vert {       -moz-orient: vertical;       width: 16px;       height: 150px;     }   <\/style> <\/head> <body>   <p>The following progress meter is horizontal (the default):<\/p>   <progress max=\"100\" value=\"75\"><\/progress>   <p>The following progress meter is vertical:<\/p>   <progress class=\"vert\" max=\"100\" value=\"75\"><\/progress> <\/body> <\/html>\r           View the live example  Specifications  Not part of any specification; currently, this is a Mozilla-specific extension (that is, -moz-orient).  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support -- 6.0 (6.0)  -- -- --         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support -- 6.0 (6.0)  -- -- --     Gecko notes In Gecko 6.0 (Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3) , there's a bug that causes vertical <progress>  elements to render with the dimensions of a horizontal bar. This is fixed in Gecko 7.0 (Firefox 7.0 \/ Thunderbird 7.0 \/ SeaMonkey 2.4) . Gecko notes In Gecko 6.0 (Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3) , there's a bug that causes vertical <progress>  elements to render with the dimensions of a horizontal bar. This is fixed in Gecko 7.0 (Firefox 7.0 \/ Thunderbird 7.0 \/ SeaMonkey 2.4) . See also  box-orient"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius","title":"-moz-outline-radius","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius-bottomleft","title":"-moz-outline-radius-bottomleft","description":"Summary  In Mozilla applications, -moz-outline-radius-bottomleft sets the rounding of the bottom-left corner of the outline. See the -moz-outline-radius property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius-bottomright","title":"-moz-outline-radius-bottomright","description":"Summary  In Mozilla applications, -moz-outline-radius-bottomright sets the rounding of the bottom-right corner of the outline. See the -moz-outline-radius property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius-topleft","title":"-moz-outline-radius-topleft","description":"Summary  In Mozilla applications, -moz-outline-radius-topleft sets the rounding of the top-left corner of the outline. See the -moz-outline-radius property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-outline-radius-topright","title":"-moz-outline-radius-topright","description":"Summary  In Mozilla applications, -moz-outline-radius-topright sets the rounding of the top-right corner of the outline. See the -moz-outline-radius property for more information."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-padding-end","title":"-moz-padding-end","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-padding-start","title":"-moz-padding-start","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-stack-sizing","title":"-moz-stack-sizing","description":"-moz-stack-sizing is an extended CSS property. Normally, a stack  will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible. If you wish to prevent the stack from resizing automatically to accommodate its children, you can set -moz-stack-sizing to ignore on the child element. The property is set not on the stack itself, but on the stack's children. This lets you ignore certain children, but not others.  Initial value : stretch-to-fit Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified  Syntax  -moz-stack-sizing: ignore | stretch-to-fit  Values  stretch-to-fit The child will influence the stack's size. ignore The stack won't consider this child when calculating the its size.  Examples  View Live Examples (not available, please check later)   .mainsheet{ \t-moz-stack-sizing: ignore; }  Notes In previous versions of Gecko it was possible to work around the problem by setting very large negative bottom and right margins on the stack element and equally large positive bottom and right margins on the children whose size you didn't want to ignore. (The problem does not affect children moved above or to the left of the stack.) Bugzilla   bug 346189"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-text-blink","title":"-moz-text-blink","description":"The -moz-text-blink non-standard Mozilla CSS extension specifies the blink mode.  Initial value : none Applies to: all elements Inherited : no Percentages: n\/a Media: visual   Computed value : as specified  Syntax  -moz-text-blink: none | blink Values  none Produces no blinking. blink Text blinks. Note that not blinking the text is one technique to satisfy checkpoint 3.3 of WAI-UAAG.  Examples  .example {      -moz-text-blink: blink; }  Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 6.0 (6.0)  -- -- -- --         Feature Firefox Mobile (Gecko) Android IE Phone Opera Mobile Safari Mobile   Basic support ? -- -- -- --     Specifications  Old CSS 3 Text specification #text-blink  See also   text-align , text-indent  text-decoration , text-decoration-color , text-decoration-line ,text-decoration-style  letter-spacing , word-spacing ,white-space  text-transform , text-rendering , text-shadow"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-user-input","title":"-moz-user-input","description":"In Mozilla applications, -moz-user-input determines if an element will accept user input.  Initial value : none  Applies to: all elements Inherited : yes Percentages: n\/a Media: visual   Computed value : as specified   -moz-user-input was one of the proposals leading to the proposed CSS 3 user-input  property, which has not yet reached Candidate Recommendation (call for implementations). For elements that normally take user input, such as a textarea, the initial value of -moz-user-input is enabled. Syntax  -moz-user-input: none | enabled | disabled | inherit  Values  none The element does not respond to user input, and it does not become :active . enabled The element accepts user input. For textboxes, this is the default behavior. disabled The element does not accept user input. However, this is not the same as setting disabled  to true, in that the element is drawn normally.  Related properties  -moz-user-focus controls what happens when an element is given focus. -moz-user-modify controls if a user can read or write in an element. -moz-user-select controls how an element is selected.  Examples  input.example {   \/* the user will be able to select the text, but not change it. *\/   -moz-user-input: disabled; }"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-user-modify","title":"-moz-user-modify","description":"The -moz-user-modify property determines whether or not the content of an element can be edited by a user. This property is related to the contentEditable attribute.  Initial value : read-only Applies to: all elements Inherited : yes Percentages: n\/a Media: interactive Computed value : as specified  Syntax  -moz-user-modify: read-only | read-write | write-only Values  read-only Default value. Contents are read-only. read-write The user is able to read and write contents. write-only The user is able to edit the content, but not to read it.  Example  .readwrite {   -moz-user-modify: read-write;   -webkit-user-modify: read-write; }  <div class=\"readwrite\">The user is able to change this text.<\/div>  Browser compatibility    Browser Version Support of   Internet Explorer --- ---   Firefox (Gecko) 1.0 (1.0) -moz-user-modify   Opera --- ---   Safari (WebKit) 3.0 (522) -webkit-user-modify [*]    [*] Also supported: -webkit-user-modify: read-write-plaintext-only (Richtext will be lost).  This property was called -khtml-user-modify in Safari 2.0. Specification  CSS 3 User Interface #user-modify (Working Draft February 2000, now superseded by CSS 3 Basic User Interface)  See also  -moz-user-focus -moz-user-input -moz-user-select"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-user-select","title":"user-select","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-window-shadow","title":"-moz-window-shadow","description":"-moz-window-shadow specifies whether a window will have a shadow. Currently it only works on Mac OS X.  Initial value : default  Applies to: all elements that create native windows, e.g. window, panel Inherited : no Percentages: n\/a Media: visual   Computed value :  Firefox 3 added support for transparent windows on Mac OS X. However, for these windows shadows were turned off and there was no way of turning them on. In Firefox 3.5 we changed the default; all windows now have a shadow. We introduced the -moz-window-shadow CSS property to provide a way to turn off unwanted shadows. Syntax  -moz-window-shadow: default | menu | tooltip | sheet | none  Values  default The window will have a shadow with the default window shadow style. menu  Requires Gecko 2.0  The window will have the shadow style that's appropriate for menus. tooltip  Requires Gecko 2.0  The window will have the shadow style that's appropriate for tooltips. sheet  Requires Gecko 2.0  The window will have the shadow style that's appropriate for sheet windows. none The window won't have a shadow.  Examples  .KUI-panel {   -moz-window-shadow: none; }"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-linear-gradient","title":"linear-gradient","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-element","title":"element","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-radial-gradient","title":"radial-gradient","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-image-rect","title":"-moz-image-rect","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/-moz-calc","title":"calc","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-any","title":":any","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-broken","title":":-moz-broken","description":":-moz-broken matches elements representing broken image links. This selector is intended for use mainly by theme developers. Bugzilla   bug 11011  See also  -moz-alt-content"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-drag-over","title":":-moz-drag-over","description":"The :-moz-drag-over pseudo-class is used to edit an element when a drag-over event is called on it. Syntax  element:-moz-drag-over { style properties }   Examples   td:-moz-drag-over { color:red; }  ...where...   <table border=\"1\">   <tr>     <td width=\"100px\" height=\"100px\">Drag Over<\/td>   <\/tr> <\/table>  ...result... ..."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-first-node","title":":-moz-first-node","description":"The :-moz-first-node pseudo-class represents any element that is the first child node of some other element. It differs from :first-child  because it does not match a first child element with (non-whitespace) text before it. Syntax  span:-moz-first-node { style properties }     Examples   span:-moz-first-node {     background-color: lime; }  ...where...   <div>   <span>:-moz-first-node<\/span>   <span>:-moz-last-node<\/span> <\/div>   Notes  Any white space at the start of an element is ignored for the determination of :-moz-first-node."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-focusring","title":":-moz-focusring","description":":-moz-focusring is specified on an element if and only if it's currently focused and should have a focus ring drawn about it. The precise behavior may vary from platform to platform, depending on that platform's particular focus best practices. Note: Keep in mind that not all focused elements will have this pseudo-selector specified; it's only applied when the element is both focused and should render a focus indicator. Syntax  :-moz-focusring Example To specify the appearance of an element when it's focused, you can use this pseudo-selector like this: \r           mybutton:-moz-focusring {   outline: 2px dotted; }\r          See also    bug 418521"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-full-screen","title":":-moz-full-screen","description":"The :-moz-full-screen CSS pseudo-class applies to any element that's currently being displayed in full-screen mode. See Using full-screen mode for details. Examples Needs example. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Supported) -webkit 9.0 (9.0)  -moz ? ? (Supported) -webkit         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification Though not yet part of any formal specification, the Mozilla proposal has been discussed at the WhatWG and other vendors started to implement it, with their own prefix.See also  Using full-screen mode element.mozRequestFullScreen()  document.mozCancelFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled    mozallowfullscreen  :-moz-full-screen-ancestor"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-handler-blocked","title":":-moz-handler-blocked","description":":-moz-handler-blocked matches elements that cannot be displayed because their handlers have been blocked. This is primarily useful for theme developers. See also  :-moz-handler-crashed  :-moz-handler-disabled"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-handler-crashed","title":":-moz-handler-crashed","description":":-moz-handler-crashed matches elements that cannot be displayed because the plugin responsible for drawing them has crashed. This is primarily useful for theme developers. See also  :-moz-handler-blocked  :-moz-handler-disabled"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-handler-disabled","title":":-moz-handler-disabled","description":":-moz-handler-disabled matches elements that cannot be displayed because their handlers have been disabled by the user. This is primarily useful for theme developers. See also  :-moz-handler-blocked  :-moz-handler-crashed"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-last-node","title":":-moz-last-node","description":"The :-moz-last-node pseudo-class matches an element that is the last child node of some other element. It differs from :last-child  because it does not match a last child element with (non-whitespace) text after it. Syntax  span:-moz-last-node { style properties }   Examples   span:-moz-last-node {     background-color: lime; }  ...where...   <div>   <span>:-moz-first-node<\/span>   <span>:-moz-last-node<\/span> <\/div>   Notes  Any white space at the end of an element is ignored for the determination of :-moz-last-node."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-list-bullet","title":"::-moz-list-bullet","description":"The ::-moz-list-bullet pseudo-class is used to edit the bullet of a list element. Syntax li::-moz-list-bullet { style properties }  Examples .liste li::-moz-list-bullet{ font-size:36px }  ...where... <ul> <li>Number 1<\/li> <li>Number 2<\/li> <li>Number 3<\/li> <\/ul> <ul class=\"liste\"> <li>Number 1<\/li> <li>Number 2<\/li> <li>Number 3<\/li> <\/ul>  ...result..."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-list-number","title":":-moz-list-number","description":"The ::-moz-list-number pseudo-class lets you customize the appearance of numbers on list items (<li> ) occurring in ordered lists (<ol> ). Syntax  li::-moz-list-number { style properties }  Examples \r           <style type=\"text\/css\">     li::-moz-list-number {       font-style: italic;       font-weight: bold;     }   <\/style>    <ol>     <li>First item<\/li>     <li>Second item<\/li>     <li>Third item<\/li>   <\/ol>\r          Gives the following result:   View the live example"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-loading","title":":-moz-loading","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-locale-dir(ltr)","title":":-moz-locale-dir(ltr)","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-locale-dir(rtl)","title":":-moz-locale-dir(rtl)","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-lwtheme","title":":-moz-lwtheme","description":"The :-moz-lwtheme pseudo-class matches in chrome documents when the root element's lightweightthemes  attribute is true and a theme is selected.See also  :-moz-lwtheme-darktext  :-moz-lwtheme-brighttext  Lightweight themes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-lwtheme-brighttext","title":":-moz-lwtheme-brighttext","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-lwtheme-darktext","title":":-moz-lwtheme-darktext","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-only-whitespace","title":":-moz-only-whitespace","description":"Summary  The :-moz-only-whitespace pseudo-class matches an element that has no child nodes at all or empty text nodes or text nodes that have only white-space in them. Only when there are element nodes or text nodes with one or more characters inside the element, the element doesn't match this pseudo-class anymore.   Syntax  span:-moz-only-whitespace { style properties }   Examples   span:-moz-only-whitespace::before {     background-color: lime; }  ...where...     <span> <\/span>   Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-placeholder","title":":-moz-placeholder","description":"The :-moz-placeholder pseudo-class represents any form element displaying placeholder text. This allows web developers and theme designers to customize the appearance of placeholder text, which is a light grey color by default. This may not work well if you've changed the background color of your form fields to be a similar color, for example, so you can use this pseudo-class to change the placeholder text color.Example This example styles the placeholder text by making it green. \r           <!doctype html> <html> <head>   <title>Placeholder demo<\/title>   <style type=\"text\/css\">     input:-moz-placeholder {       color: green;     }   <\/style> <\/head> <body>   <input id=\"test\" placeholder=\"Placeholder text!\"> <\/body> <\/html>\r          View this example live. Bugzilla   bug 457801  Notes Note: This was previously incorrectly documented as having been created for Gecko 1.9 (Firefox 3) , for an entirely different purpose.  See also  Forms in HTML5 <input>  <textarea>"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-suppressed","title":":-moz-suppressed","description":":-moz-suppressed matches elements representing images that were not loaded because loading images from that site has been blocked. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(mac-graphite-theme)","title":":-moz-system-metric(mac-graphite-theme)","description":":-moz-system-metric(mac-graphite-theme) will match an element if the user has chosen the \"Graphite\" appearance in the \"Appearance\" prefpane of the Mac OS X System Preferences. This selector is intended for use mainly by theme developers. Examples Demo Bugzilla   bug 448767"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(images-in-menus)","title":":-moz-system-metric(images-in-menus)","description":"Summary  :-moz-system-metric(images-in-menus) will match an element if the computer's user interface supports images in menus. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-submit-invalid","title":":-moz-submit-invalid","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-end-backward)","title":":-moz-system-metric(scrollbar-end-backward)","description":"Summary  :-moz-system-metric(scrollbar-end-backward) will match an element if the computer's user interface includes a backward arrow button at the end of scrollbars. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-end-forward)","title":":-moz-system-metric(scrollbar-end-forward)","description":"Summary  :-moz-system-metric(scrollbar-end-forward) will match an element if the computer's user interface includes a forward arrow button at the end of scrollbars. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-start-forward)","title":":-moz-system-metric(scrollbar-start-forward)","description":"Summary  :-moz-system-metric(scrollbar-start-foreward) will match an element if the computer's user interface includes a forward arrow button at the start of scrollbars. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-start-backward)","title":":-moz-system-metric(scrollbar-start-backward)","description":":-moz-system-metric(scrollbar-start-backward) will match an element if the computer's user interface includes a backward arrow button at the start of scrollbars. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(scrollbar-thumb-proportional)","title":":-moz-system-metric(scrollbar-thumb-proportional)","description":"Summary  :-moz-system-metric(scrollbar-thumb-proportional) will match an element if the computer's user interface uses proportional scrollbar thumbs; that is, the draggable thumb on the scrollbar resizes to indicate the relative size of the visible area of the document. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(touch-enabled)","title":":-moz-system-metric(touch-enabled)","description":":-moz-system-metric(touch-enabled) will match an element if the device on which the content is being rendered offers a supported touch-screen interface. Note: This is not intended for use in web content. Use the -moz-touch-enabled media query instead."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-system-metric(windows-default-theme)","title":":-moz-system-metric(windows-default-theme)","description":"Summary  :-moz-system-metric(windows-default-theme) will match an element if the user is currently using one of the following themes in Windows: Luna, Royale, Zune, or Aero (i.e., Vista Basic, Vista Standard, or Aero Glass). This will exclude Windows Classic themes as well as third-party themes. This selector is intended for use mainly by theme developers.   Examples  Demo   Bugzilla    bug 426660    bug 429176"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-cell-text(hover)","title":":-moz-tree-cell-text(hover)","description":":-moz-tree-cell-text(hover) will match an element if the mouse cursor is presently hovering over text in a tree cell. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-cell-text","title":":-moz-tree-cell-text","description":"Associated Elements  treecell  Style Properties  font visibility color text-decoration"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-cell","title":":-moz-tree-cell","description":"Associated Elements  treecell  Style Properties  background border margin outline padding visibility  See also  Styling a Tree"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-column","title":":-moz-tree-column","description":"Associated Elements  treecol  Style Properties  margin visibility text style"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-drop-feedback","title":":-moz-tree-drop-feedback","description":"Associated Elements  treerow  Style Properties  margin visibility"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-image","title":":-moz-tree-image","description":"Associated Elements  treeitem treecell  Style Properties  margin list style position  Examples Bookmark icons in the Places window - Mozillazine Forum"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-indentation","title":":-moz-tree-indentation","description":"Associated Elements  treeitem  Style Properties  position"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-progressmeter","title":":-moz-tree-progressmeter","description":"Associated Elements  treecell  Style Properties  margin color"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-line","title":":-moz-tree-line","description":"Associated Elements  treeitem  Style Properties  border visibility"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-row","title":":-moz-tree-row","description":"-moz-tree-row is used to select rows and apply style to tree rows. Associated Elements  treerow  Associated Elements  treerow  Syntax  treechildren::-moz-tree-row { style properties }  Style Properties  background border margin outline padding display -moz-appearance  Style Properties  background border margin outline padding display -moz-appearance  Examples  treechildren::-moz-tree-row( foo bar ) {     margin: 2%; }  ...where...    <treerow properties=\"foo\">...<\/treerow>  Notes"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-row(hover)","title":":-moz-tree-row(hover)","description":"Summary  :-moz-tree-row(hover) will match an element if the mouse cursor is presently hovering over a tree row. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-twisty","title":":-moz-tree-twisty","description":"Associated Elements  treecell  Style Properties  border margin padding display list style position -moz-appearance"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-tree-separator","title":":-moz-tree-separator","description":"Associated Elements  treeseparator  Style Properties  border display -moz-appearance"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-ui-valid","title":":-moz-ui-valid","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-ui-invalid","title":":-moz-ui-invalid","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-user-disabled","title":":-moz-user-disabled","description":":-moz-user-disabled matches elements representing images that were not loaded because images have been entirely disabled by the user's preferences. This selector is intended for use mainly by theme developers."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/%3A-moz-window-inactive","title":":-moz-window-inactive","description":"The :-moz-window-inactive pseudo-class matches any element while it's in an inactive window. Note: Prior to the addition of this attribute, giving different styles to background windows was achieved by setting an attribute (active=\"true\") on the top level XUL chrome window. This attribute is no longer used. :-moz-window-inactive works in content HTML documents, too. Example This example alters the appearance of a box's background depending on whether its window is active or not. \r           <style type=\"text\/css\">     #mybox {       background: -moz-linear-gradient(top, blue, cyan);     }     #mybox:-moz-window-inactive {       background: cyan;     }   <\/style>    <div id=\"mybox\" style=\"width:200px; height:200px;\">     <p>This is a box!<\/p>   <\/div>\r          You can view this as a live sample here. This was implemented in bug 508482."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/@-moz-document","title":"@-moz-document","description":"The @-moz-document rule is a Gecko-specific at-rule that restricts the style rules contained within it based on the URL of the document. It is designed primarily for user style sheets. A @-moz-document rule can specify one or more matching functions. If any of the functions apply to a URL, the rule will take effect on that URL. The functions available are:  url(), which matches an exact URL url-prefix(), which matches if the document URL starts with the value provided domain(), which matches if the document URL is on the domain provided (or a subdomain of it) regexp(), which matches if the document URL is matched by the regular expression provided. The expression must match the entire URL.    Gecko 6.0 note(Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3)   Support for the regexp()function was added in Gecko 6.0 (Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3) .  Syntax The values provided to the url(), url-prefix(), and domain() functions can optionally be enclosed by single or double quotes. The values provided to the regexp() function must be enclosed in quotes. Escaped values provided to the regexp() function must additionally escaped from the CSS. For example, a . (period) matches any character in regular expressions. To match a literal period, you would first need to escape it using regular expression rules (to \\.), then escape that string using CSS rules (to \\\\.). Examples You can put this into your userContent.css file: \r           @-moz-document url(http:\/\/www.w3.org\/),                url-prefix(http:\/\/www.w3.org\/Style\/),                domain(mozilla.org),                regexp(\"^https:.*\") {   \/* CSS rules here apply to:      + The page \"http:\/\/www.w3.org\/\".      + Any page whose URL begins with \"http:\/\/www.w3.org\/Style\/\"      + Any page whose URL's host is \"mozilla.org\" or ends with        \".mozilla.org\"      + Any page whose URL starts with \"https:\" *\/    \/* make the above-mentioned pages really ugly *\/   body { color: purple; background: yellow; } }\r          Specifications  Per-site user style sheet rules. Not part of any W3C specification. CSS Conditional Rules Module Level 3  Browser compatibility Available since Mozilla 1.8 \/ Firefox 1.5."},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Multiple_backgrounds","title":"Multiple backgrounds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Scaling_of_SVG_backgrounds","title":"Scaling of SVG backgrounds","description":"The algorithm, in summary The algorithm can for the most part be summarized by these four rules. There are some edge cases that aren't covered by these rules, but this covers the majority of cases.  If background-size  specifies a fixed dimension (that is, percentages and relative units are fixed by their context), that dimension wins. If the image has an intrinsic ratio (that is, its width:height ratio is constant, such as 16:9, 4:3, 2.39:1, 1:1, and so forth), the rendered size preserves that ratio. If the image specifies a size, and the size isn't modified by constrain or cover, that specified size wins. If none of the above cases are met, the image is rendered at the same size as the background area.  It's worth noting that the sizing algorithm only cares about the image's dimensions and proportions, or lack thereof. An SVG image with fixed dimensions will be treated just like a raster image of the same size. Source image examples Before diving in to look at the results of using different kinds of source images and seeing how they look when used with background-size , it would be helpful to look at a few example source images that have different dimensions and sizing settings. In each case, we show what the source image looks like rendered in a 150x150 box, and provide a link to the SVG source. Dimensionless and proportionless This image is both dimensionless and proportionless. It doesn't care what size it is, nor does it care about remaining at a particular aspect ratio. This would make a good gradient desktop background that would work regardless of your screen size and its aspect ratio.  SVG source One specified dimension and proportionless This image specifies a width of 100 pixels but no height or intrinsic ratio. This is, basically, a thin strip of wallpaper that could be stretched across the entire height of a block.  SVG source One specified dimension with intrinsic ratio This image specifies a 100 pixel height but no width. It also specifies an intrinsic aspect ratio of 3:4. This ensures that its width:height ratio is always 3:4, unless it's deliberately scaled to a disproportionate size (that is, by explicitly specifying both width and height that aren't of that ratio). This is very much like specifying a specific width and height, since once you have one dimension and a ratio, the other dimension is implied, but it's still a useful example.  SVG source No width or height with intrinsic ratio This image doesn't specify either a width or a height; instead, it specifies an intrinsic ratio of 1:1. Think of this like a program icon. It's always square, and is usable at any size, such as 32x32, 128x128, or 512x512, for example.  SVG source Dimensionless and proportionless This image is both dimensionless and proportionless. It doesn't care what size it is, nor does it care about remaining at a particular aspect ratio. This would make a good gradient desktop background that would work regardless of your screen size and its aspect ratio.  SVG source One specified dimension and proportionless This image specifies a width of 100 pixels but no height or intrinsic ratio. This is, basically, a thin strip of wallpaper that could be stretched across the entire height of a block.  SVG source One specified dimension with intrinsic ratio This image specifies a 100 pixel height but no width. It also specifies an intrinsic aspect ratio of 3:4. This ensures that its width:height ratio is always 3:4, unless it's deliberately scaled to a disproportionate size (that is, by explicitly specifying both width and height that aren't of that ratio). This is very much like specifying a specific width and height, since once you have one dimension and a ratio, the other dimension is implied, but it's still a useful example.  SVG source No width or height with intrinsic ratio This image doesn't specify either a width or a height; instead, it specifies an intrinsic ratio of 1:1. Think of this like a program icon. It's always square, and is usable at any size, such as 32x32, 128x128, or 512x512, for example.  SVG source Scaling examples Now let's see some examples of what happens as we apply different scaling to these images. In each of the examples below, the enclosing rectangles are 300 pixels wide and 300 pixels tall. In addition, the backgrounds have background-repeat  set to no-repeat for clarity. Note: The screenshots below show the expected rendering. Not all browsers currently render these correctly. Specifying fixed lengths for both dimensions If you use background-size  to specify fixed lengths for both dimensions, those lengths are always used, per rule 1 above. In other words, the image will always get stretched to the dimensions you specify, regardless of whether or not the source image has specified its dimensions and\/or aspect ratio. Source: No dimensions or intrinsic ratio Given this CSS: background: url(no-dimensions-or-ratio.svg); background-size: 125px 175px;  The rendered output would look like this:  Source: One specified dimension, no intrinsic ratio Given this CSS: background: url(100px-wide-no-height-or-ratio.svg); background-size: 250px 150px;  The rendered output would look like this:  Source: One specified dimension with intrinsic ratio Given this CSS: background: url(100px-height-3x4-ratio.svg); background-size: 275px 125px;  The rendered output would look like this:  Source: No specified width or height with intrinsic ratio Given this CSS: background: url(no-dimensions-1x1-ratio.svg); background-size: 250px 100px;  The rendered output would look like this:  Using contain or cover Specifying cover for background-size  makes the picture as small as possible while still covering the entire background area. contain, on the other hand, makes the image as large as possible while not being clipped by the background area. For an image with an intrinsic ratio, exactly one size matches the cover\/fit criteria alone. But if there is no intrinsic ratio specified, cover\/fit isn't sufficient, so the large\/small constraints choose the resulting size. Source: No dimensions or intrinsic ratio If an image doesn't specify either dimensions or an intrinsic ratio, neither rule 2 nor rule 3 apply, so rule 4 takes over: the background image is rendered covering the entire background area. This satisfies the largest-or-smallest constraint. background: url(no-dimensions-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension, no intrinsic ratio Similarly, if the image has one dimension specified but no intrinsic ratio, rule 4 applies, and the image is scaled to cover the entire background area. background: url(100px-wide-no-height-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension with intrinsic ratio Things change when you specify an intrinsic ratio. In this case, rule 1 isn't relevant, so rule 2 is applied: we try to preserve any intrinsic ratio (while respecting contain or cover). For example, preserving a 3:4 intrinsic aspect ratio for a 300x200 box with contain means drawing a 150x200 background. contain case background: url(100px-height-3x4-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice how the entire image is rendered, fitting as best as possible into the box without clipping any of it away. cover case background: url(100px-height-3x4-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the 3:4 ratio is preserved while still stretching the image to fill the entire box. That causes the bottom of the image to be clipped away. Source: No dimensions with intrinsic ratio When using an image with no intrinsic dimensions but an intrinsic ratio, things work similarly. contain case background: url(no-dimensions-1x1-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice that the image is sized to fit the smallest dimension while preserving the 1:1 aspect ratio. cover case background: url(no-dimensions-1x1-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the image is sized so that it fills the largest dimension. The 1:1 aspect ratio has been preserved, although with this source image, that can be difficult to see. Automatic sizing using \"auto\" for both dimensions If background-size  is set to auto or auto auto, rule 2 says that rendering must preserve any intrinsic ratio that's provided. Source: No dimensions or intrinsic ratio When no intrinsic ratio or dimensions are specified by the source image, rule 4 takes effect, and the image is rendered to fill the background area. background: url(no-dimensions-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Source: One dimension and no intrinsic ratio If no intrinsic ratio is specified, but at least one dimension is specified, rule 3 takes effect, and we render the image obeying those dimensions. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Note here that the width, which is specified in the source SVG at 100 pixels, is obeyed, while the height fills the background area since it's not specified (either explicitly or by an intrinsic ratio). Source: One dimension and an intrinsic ratio If we have an intrinsic ratio with a fixed dimension, that fixes both dimensions in place. Knowing one dimension and a ratio is, as has been mentioned already, the same as specifying both dimensions explicitly. background: url(100px-height-3x4-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Since this image has an explicit 100 pixel height, the 3:4 ratio explicitly sets its width at 75 pixels, so that's how it's rendered in the auto case. Source: No fixed dimensions with intrinsic ratio When an intrinsic ratio is specified, but no dimensions, rule 4 is applied -- except that rule 2 also applies. The image is therefore rendered just like for the contain case. background: url(no-dimensions-1x1-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Using \"auto\" and one specific length Given rule 1, specified dimensions are always used, so we need to use our rules only to determine the second dimension. Source: No dimensions or intrinsic ratio If the image has no dimensions or intrinsic ratio, rule 4 applies, and we use the background area's dimension to determine the value for the auto dimension. background: url(no-dimensions-or-ratio.svg); background-size: auto 150px;   Here, the width is determined using the background area's width per rule 4, while the height is the 140px specified in the CSS. Source: One specified dimension with no intrinsic ratio If the image has one specified dimension but no intrinsic ratio, that specified dimension is used per rule 3 if that dimension is set to auto in the CSS. background: url(100px-wide-no-height-or-ratio.svg); background-size: 200px auto;   Here, the 200px specified in the CSS overrides the 100px width specified in the SVG, per rule 1. Since there's no intrinsic ratio or height provided, auto selects the height of the background area as the height for the rendered image. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto 125px;   In this case, the width is specified as auto in the CSS, so the 100px width specified in the SVG is selected, per rule 3. The height is set at 125px in the CSS, so that is selected per rule 1. Source: One specified dimension with intrinsic ratio When a dimension is specified, rule 1 applies that dimension from the SVG to the rendered background unless specifically overridden by the CSS. When an intrinsic ratio is also specified, that's used to determine the other dimension. background: url(100px-height-3x4-ratio.svg); background-size: 150px auto;   In this case, we've overridden the height of the image in the CSS to be 150px, so rule 1 is applied. The intrinsic 3:4 aspect ratio then determines the width for the auto case. Source: No specified dimensions with intrinsic ratio If no dimensions are specified in the SVG, the specified dimension in the CSS is applied, then the intrinsic ratio is used to select the other dimension, per rule 2. background: url(no-dimensions-1x1-ratio.svg); background-size: 150px auto;   The width is set by the CSS to 150px. The auto value for the height is computed using that width and the 1:1 aspect ratio to be 150px as well, resulting in the image above. Specifying fixed lengths for both dimensions If you use background-size  to specify fixed lengths for both dimensions, those lengths are always used, per rule 1 above. In other words, the image will always get stretched to the dimensions you specify, regardless of whether or not the source image has specified its dimensions and\/or aspect ratio. Source: No dimensions or intrinsic ratio Given this CSS: background: url(no-dimensions-or-ratio.svg); background-size: 125px 175px;  The rendered output would look like this:  Source: One specified dimension, no intrinsic ratio Given this CSS: background: url(100px-wide-no-height-or-ratio.svg); background-size: 250px 150px;  The rendered output would look like this:  Source: One specified dimension with intrinsic ratio Given this CSS: background: url(100px-height-3x4-ratio.svg); background-size: 275px 125px;  The rendered output would look like this:  Source: No specified width or height with intrinsic ratio Given this CSS: background: url(no-dimensions-1x1-ratio.svg); background-size: 250px 100px;  The rendered output would look like this:  Source: No dimensions or intrinsic ratio Given this CSS: background: url(no-dimensions-or-ratio.svg); background-size: 125px 175px;  The rendered output would look like this:  Source: One specified dimension, no intrinsic ratio Given this CSS: background: url(100px-wide-no-height-or-ratio.svg); background-size: 250px 150px;  The rendered output would look like this:  Source: One specified dimension with intrinsic ratio Given this CSS: background: url(100px-height-3x4-ratio.svg); background-size: 275px 125px;  The rendered output would look like this:  Source: No specified width or height with intrinsic ratio Given this CSS: background: url(no-dimensions-1x1-ratio.svg); background-size: 250px 100px;  The rendered output would look like this:  Using contain or cover Specifying cover for background-size  makes the picture as small as possible while still covering the entire background area. contain, on the other hand, makes the image as large as possible while not being clipped by the background area. For an image with an intrinsic ratio, exactly one size matches the cover\/fit criteria alone. But if there is no intrinsic ratio specified, cover\/fit isn't sufficient, so the large\/small constraints choose the resulting size. Source: No dimensions or intrinsic ratio If an image doesn't specify either dimensions or an intrinsic ratio, neither rule 2 nor rule 3 apply, so rule 4 takes over: the background image is rendered covering the entire background area. This satisfies the largest-or-smallest constraint. background: url(no-dimensions-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension, no intrinsic ratio Similarly, if the image has one dimension specified but no intrinsic ratio, rule 4 applies, and the image is scaled to cover the entire background area. background: url(100px-wide-no-height-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension with intrinsic ratio Things change when you specify an intrinsic ratio. In this case, rule 1 isn't relevant, so rule 2 is applied: we try to preserve any intrinsic ratio (while respecting contain or cover). For example, preserving a 3:4 intrinsic aspect ratio for a 300x200 box with contain means drawing a 150x200 background. contain case background: url(100px-height-3x4-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice how the entire image is rendered, fitting as best as possible into the box without clipping any of it away. cover case background: url(100px-height-3x4-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the 3:4 ratio is preserved while still stretching the image to fill the entire box. That causes the bottom of the image to be clipped away. Source: No dimensions with intrinsic ratio When using an image with no intrinsic dimensions but an intrinsic ratio, things work similarly. contain case background: url(no-dimensions-1x1-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice that the image is sized to fit the smallest dimension while preserving the 1:1 aspect ratio. cover case background: url(no-dimensions-1x1-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the image is sized so that it fills the largest dimension. The 1:1 aspect ratio has been preserved, although with this source image, that can be difficult to see. Source: No dimensions or intrinsic ratio If an image doesn't specify either dimensions or an intrinsic ratio, neither rule 2 nor rule 3 apply, so rule 4 takes over: the background image is rendered covering the entire background area. This satisfies the largest-or-smallest constraint. background: url(no-dimensions-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension, no intrinsic ratio Similarly, if the image has one dimension specified but no intrinsic ratio, rule 4 applies, and the image is scaled to cover the entire background area. background: url(100px-wide-no-height-or-ratio.svg); background-size: contain;  The rendered output looks like this:  Source: One specified dimension with intrinsic ratio Things change when you specify an intrinsic ratio. In this case, rule 1 isn't relevant, so rule 2 is applied: we try to preserve any intrinsic ratio (while respecting contain or cover). For example, preserving a 3:4 intrinsic aspect ratio for a 300x200 box with contain means drawing a 150x200 background. contain case background: url(100px-height-3x4-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice how the entire image is rendered, fitting as best as possible into the box without clipping any of it away. cover case background: url(100px-height-3x4-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the 3:4 ratio is preserved while still stretching the image to fill the entire box. That causes the bottom of the image to be clipped away. contain case background: url(100px-height-3x4-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice how the entire image is rendered, fitting as best as possible into the box without clipping any of it away. cover case background: url(100px-height-3x4-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the 3:4 ratio is preserved while still stretching the image to fill the entire box. That causes the bottom of the image to be clipped away. Source: No dimensions with intrinsic ratio When using an image with no intrinsic dimensions but an intrinsic ratio, things work similarly. contain case background: url(no-dimensions-1x1-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice that the image is sized to fit the smallest dimension while preserving the 1:1 aspect ratio. cover case background: url(no-dimensions-1x1-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the image is sized so that it fills the largest dimension. The 1:1 aspect ratio has been preserved, although with this source image, that can be difficult to see. contain case background: url(no-dimensions-1x1-ratio.svg); background-size: contain;  The rendered output looks like this:  Notice that the image is sized to fit the smallest dimension while preserving the 1:1 aspect ratio. cover case background: url(no-dimensions-1x1-ratio.svg); background-size: cover;  The rendered output looks like this:  Here, the image is sized so that it fills the largest dimension. The 1:1 aspect ratio has been preserved, although with this source image, that can be difficult to see. Automatic sizing using \"auto\" for both dimensions If background-size  is set to auto or auto auto, rule 2 says that rendering must preserve any intrinsic ratio that's provided. Source: No dimensions or intrinsic ratio When no intrinsic ratio or dimensions are specified by the source image, rule 4 takes effect, and the image is rendered to fill the background area. background: url(no-dimensions-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Source: One dimension and no intrinsic ratio If no intrinsic ratio is specified, but at least one dimension is specified, rule 3 takes effect, and we render the image obeying those dimensions. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Note here that the width, which is specified in the source SVG at 100 pixels, is obeyed, while the height fills the background area since it's not specified (either explicitly or by an intrinsic ratio). Source: One dimension and an intrinsic ratio If we have an intrinsic ratio with a fixed dimension, that fixes both dimensions in place. Knowing one dimension and a ratio is, as has been mentioned already, the same as specifying both dimensions explicitly. background: url(100px-height-3x4-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Since this image has an explicit 100 pixel height, the 3:4 ratio explicitly sets its width at 75 pixels, so that's how it's rendered in the auto case. Source: No fixed dimensions with intrinsic ratio When an intrinsic ratio is specified, but no dimensions, rule 4 is applied -- except that rule 2 also applies. The image is therefore rendered just like for the contain case. background: url(no-dimensions-1x1-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Source: No dimensions or intrinsic ratio When no intrinsic ratio or dimensions are specified by the source image, rule 4 takes effect, and the image is rendered to fill the background area. background: url(no-dimensions-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Source: One dimension and no intrinsic ratio If no intrinsic ratio is specified, but at least one dimension is specified, rule 3 takes effect, and we render the image obeying those dimensions. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Note here that the width, which is specified in the source SVG at 100 pixels, is obeyed, while the height fills the background area since it's not specified (either explicitly or by an intrinsic ratio). Source: One dimension and an intrinsic ratio If we have an intrinsic ratio with a fixed dimension, that fixes both dimensions in place. Knowing one dimension and a ratio is, as has been mentioned already, the same as specifying both dimensions explicitly. background: url(100px-height-3x4-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Since this image has an explicit 100 pixel height, the 3:4 ratio explicitly sets its width at 75 pixels, so that's how it's rendered in the auto case. Source: No fixed dimensions with intrinsic ratio When an intrinsic ratio is specified, but no dimensions, rule 4 is applied -- except that rule 2 also applies. The image is therefore rendered just like for the contain case. background: url(no-dimensions-1x1-ratio.svg); background-size: auto auto;  The rendered output looks like this:  Using \"auto\" and one specific length Given rule 1, specified dimensions are always used, so we need to use our rules only to determine the second dimension. Source: No dimensions or intrinsic ratio If the image has no dimensions or intrinsic ratio, rule 4 applies, and we use the background area's dimension to determine the value for the auto dimension. background: url(no-dimensions-or-ratio.svg); background-size: auto 150px;   Here, the width is determined using the background area's width per rule 4, while the height is the 140px specified in the CSS. Source: One specified dimension with no intrinsic ratio If the image has one specified dimension but no intrinsic ratio, that specified dimension is used per rule 3 if that dimension is set to auto in the CSS. background: url(100px-wide-no-height-or-ratio.svg); background-size: 200px auto;   Here, the 200px specified in the CSS overrides the 100px width specified in the SVG, per rule 1. Since there's no intrinsic ratio or height provided, auto selects the height of the background area as the height for the rendered image. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto 125px;   In this case, the width is specified as auto in the CSS, so the 100px width specified in the SVG is selected, per rule 3. The height is set at 125px in the CSS, so that is selected per rule 1. Source: One specified dimension with intrinsic ratio When a dimension is specified, rule 1 applies that dimension from the SVG to the rendered background unless specifically overridden by the CSS. When an intrinsic ratio is also specified, that's used to determine the other dimension. background: url(100px-height-3x4-ratio.svg); background-size: 150px auto;   In this case, we've overridden the height of the image in the CSS to be 150px, so rule 1 is applied. The intrinsic 3:4 aspect ratio then determines the width for the auto case. Source: No specified dimensions with intrinsic ratio If no dimensions are specified in the SVG, the specified dimension in the CSS is applied, then the intrinsic ratio is used to select the other dimension, per rule 2. background: url(no-dimensions-1x1-ratio.svg); background-size: 150px auto;   The width is set by the CSS to 150px. The auto value for the height is computed using that width and the 1:1 aspect ratio to be 150px as well, resulting in the image above. Source: No dimensions or intrinsic ratio If the image has no dimensions or intrinsic ratio, rule 4 applies, and we use the background area's dimension to determine the value for the auto dimension. background: url(no-dimensions-or-ratio.svg); background-size: auto 150px;   Here, the width is determined using the background area's width per rule 4, while the height is the 140px specified in the CSS. Source: One specified dimension with no intrinsic ratio If the image has one specified dimension but no intrinsic ratio, that specified dimension is used per rule 3 if that dimension is set to auto in the CSS. background: url(100px-wide-no-height-or-ratio.svg); background-size: 200px auto;   Here, the 200px specified in the CSS overrides the 100px width specified in the SVG, per rule 1. Since there's no intrinsic ratio or height provided, auto selects the height of the background area as the height for the rendered image. background: url(100px-wide-no-height-or-ratio.svg); background-size: auto 125px;   In this case, the width is specified as auto in the CSS, so the 100px width specified in the SVG is selected, per rule 3. The height is set at 125px in the CSS, so that is selected per rule 1. Source: One specified dimension with intrinsic ratio When a dimension is specified, rule 1 applies that dimension from the SVG to the rendered background unless specifically overridden by the CSS. When an intrinsic ratio is also specified, that's used to determine the other dimension. background: url(100px-height-3x4-ratio.svg); background-size: 150px auto;   In this case, we've overridden the height of the image in the CSS to be 150px, so rule 1 is applied. The intrinsic 3:4 aspect ratio then determines the width for the auto case. Source: No specified dimensions with intrinsic ratio If no dimensions are specified in the SVG, the specified dimension in the CSS is applied, then the intrinsic ratio is used to select the other dimension, per rule 2. background: url(no-dimensions-1x1-ratio.svg); background-size: 150px auto;   The width is set by the CSS to 150px. The auto value for the height is computed using that width and the 1:1 aspect ratio to be 150px as well, resulting in the image above. See also  background-size  Blog post: Properly resizing vector image backgrounds"},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Using_URL_values_for_the_cursor_property","title":"Using URL values for the cursor property","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/bleed","title":"bleed","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/repeating-linear-gradient","title":"repeating-linear-gradient","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/repeating-radial-gradient","title":"repeating-radial-gradient","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/General_sibling_selectors","title":"General sibling selectors","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Privacy_and_the_%3Avisited_selector","title":"Privacy and the :visited selector","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Media","title":"Media","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Using_media_queries_from_code","title":"Using media queries from code","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Why_use_CSS","title":"Why use CSS","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/What_is_CSS","title":"What is CSS","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/How_CSS_works","title":"How CSS works","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Cascading_and_inheritance","title":"Cascading and inheritance","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Selectors","title":"Selectors","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Readable_CSS","title":"Readable CSS","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Text_styles","title":"Text styles","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Color","title":"Color","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Content","title":"Content","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Boxes","title":"Boxes","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Lists","title":"Lists","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Layout","title":"Layout","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Tables","title":"Tables","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/JavaScript","title":"JavaScript and CSS","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/SVG_graphics","title":"SVG and CSS","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/XML_data","title":"XML data","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/XBL_bindings","title":"XBL bindings","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/XUL_user_interfaces","title":"XUL user interfaces","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Challenge_solutions","title":"Challenge solutions","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/CSS\/Getting_Started\/Why_use_CSS%3F","title":"Why use CSS?","description":"Information: Why use CSS? CSS helps you to keep the information content of a document separate from the details of how to display it. The details of how to display the document are known as its style. You keep the style separate from the content so that you can:  Avoid duplication Make maintenance easier Use the same content with different styles for different purposes   Example    Your web site might have thousands of pages that look similar. Using CSS, you store the style information in common files that all the pages share. When a user displays a web page, the user's browser loads the style information along with the content of the page. When a user prints a web page, you provide different style information that makes the printed page easy to read.     In general with CSS, you use the markup language to describe the information content of the document, not its style. You use CSS to specify its style, not its content. (Later in this tutorial, you will see some exceptions to this arrangement.)  More details    A markup language like HTML also provides some ways to specify style. For example, in HTML you can use a <B> tag to make text bold, and you can specify the background color of a page in it's <BODY> tag. When you use CSS, you normally avoid using these features of the markup language so that all your document's style information is in one place.     Action: Creating a stylesheet  Create another text file in the same directory as before. This file will be your stylesheet. Name it: style1.css In your CSS file, copy and paste this one line, then save the file:  strong {color: red;}    Linking your document to your stylesheet  To link your document to your stylesheet, edit your HTML file. Add the line shown here in bold:  <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\"> <HTML>   <HEAD>   <TITLE>Sample document<\/TITLE>   <LINK rel=\"stylesheet\" href=\"style1.css\">   <\/HEAD>   <BODY>     <P>       <STRONG>C<\/STRONG>ascading       <STRONG>S<\/STRONG>tyle       <STRONG>S<\/STRONG>heets     <\/P>   <\/BODY> <\/HTML>   Save the file and refresh your browser's display. The stylesheet makes the initial letters red, like this:    Cascading Style Sheets     Challenge    In addition to red, CSS allows some other color names. Without looking up a reference, find five more color names that work in your stylesheet.       Linking your document to your stylesheet  To link your document to your stylesheet, edit your HTML file. Add the line shown here in bold:  <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\"> <HTML>   <HEAD>   <TITLE>Sample document<\/TITLE>   <LINK rel=\"stylesheet\" href=\"style1.css\">   <\/HEAD>   <BODY>     <P>       <STRONG>C<\/STRONG>ascading       <STRONG>S<\/STRONG>tyle       <STRONG>S<\/STRONG>heets     <\/P>   <\/BODY> <\/HTML>   Save the file and refresh your browser's display. The stylesheet makes the initial letters red, like this:    Cascading Style Sheets     Challenge    In addition to red, CSS allows some other color names. Without looking up a reference, find five more color names that work in your stylesheet.       What next? If you had difficulty understanding this page, or if you have other comments about it, please contribute to its Discussion page. Now you have a sample document linked to a separate stylesheet, you are ready to learn more about how your browser combines them when it displays the document: How CSS works"}]