[alias]
  # core functionality
  c = clone
  st = status -s

  # staging and committing
  a = add
  ap = add --patch
  ca = commit --all
  cam = commit --all -m
  ci = commit
  cia = commit --amend
  cim = commit -m
  co = checkout
  r = reset
  rh = reset --hard
  rp = reset --patch
  rs = reset --soft

  # bisect
  bi = bisect start
  bib = bisect bad
  big = bisect good
  bir = bisect reset
  bis = bisect skip

  # branching
  br = branch
  brr = branch -rv
  brl = branch-list
  bra = branch-list -a

  # diff
  df = diff --color
  dfc = diff --cached --color
  dfp = !git --no-pager diff --no-color
  dfs = diff --shortstat --numstat
  dft = difftool
  dfw = diff --word-diff=color
  diff-image = !GIT_DIFF_IMAGE_ENABLED=1 git diff
  dfi = diff-image
  dfic = diff-image --cached
  dfci = diff-image --cached

  # merging/rebasing/etc
  chp = cherry-pick
  mg = merge
  mga = merge --abort
  mgs = merge --squash
  mgc = merge --continue
  mgt = mergetool
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  rbi = rebase --interactive

  # tags
  ds = describe --tags
  pst = push --tags
  t = tag -a

  # remotes
  f = fetch
  pl = plr
  pls = "!git pl && git ps"
  plr = "!git print-header 'Pull (Rebase)' && git pull --rebase"
  plm = "!git print-header 'Pull (Merge)' && git pull --no-rebase"
  ps = "!git print-header 'Push' && git push"
  psf = ps -f
  rem = remote -v
  print-header = "!printf -- \"$(tput setaf 6)───── %s ─────$(tput sgr0)\n\""

  # repo stats/info
  conflicts = diff --name-only --diff-filter=U
  current-branch = "!git symbolic-ref HEAD | sed 's!refs/heads/!!'"
  ls = ls-files
  lsu = ls-files --others --exclude-standard

  # history/log
  lg = forgit log
  logs = log --stat=100,100,25 --date=format:'%a %l:%M %p %B %d, %Y'
  sh = show --word-diff=color

  # stashes
  s = stash
  sm = stash -m
  sa = stash apply
  sd = stash drop
  sp = stash pop
  ss = forgit stash_show
  ssa = stash save

  # submodules
  sb = submodule
  sbst = submodule status
  sur = submodule update --recursive --remote
  suri = submodule update --recursive --init

  # worktrees
  w = worktree
  wa = worktree add
  wls = worktree list
  wl = worktree lock
  wmv = worktree move
  wpr = worktree prune
  wrm = worktree remove
  wul = worktree unlock

  # workflow
  new = "!f(){ git checkout -b $1; git push --set-upstream origin $1; git config branch.$1.status 'Active'; }; f"
  branch-status = "!f(){ git config branch.${2:-$(git current-branch)}.status \"$1\"; }; f"
  branch-status-list = "!f() { git config --get-regexp 'branch\\..*?\\.status' | perl -ne 'print \"$1\\n\" if /branch\\.(.*?)\\.status '\"$1\"'$/'; }; f"
  remote-branch-exists = "!f(){ git for-each-ref --format '%(refname) %(upstream:track)' \"refs/heads/$1\" | grep -qv '\\[gone\\]$'; }; f"
  branch-delete-merged = "!for branch in $(git branch-status-list 'PR Opened'); do if ! git remote-branch-exists $branch; then git br -D \"$branch\"; fi; done"
  branch-delete-reviewed = "!for branch in $(git branch-status-list 'PRs for Review'); do git br -D \"$branch\"; done"
  pr-get = "!f(){ gh pr checkout ${1:-0} && _MY_BRANCH=${2:-pr-$1-$(git current-branch)} && if git show-ref --quiet refs/heads/${_MY_BRANCH}; then git br -D ${_MY_BRANCH}; fi && git br -m ${_MY_BRANCH} && git brs 'PRs for Review'; }; f"
  pr-open = "!f(){ gh pr create --title \"${@:-PR Title Goes Here}\" --web && git brs 'PR Opened'; }; f"
  todo = "!rg -i '@todo'"

  brs = branch-status
  brdm = branch-delete-merged
  brdr = branch-delete-reviewed
  brs-ls = branch-status-list
  dmb = delete-merged-branches
  smb = show-merged-branches
  prg = pr-get
  pro = pr-open

  # fzf integration
  dff = forgit diff
  af = forgit add
  rhf = forgit reset_head
  if = forgit ignore
  rf = forgit restore
  clf = forgit clean
  chpf = forgit cherry_pick
  rbf = forgit rebase

  # misc
  au = update-index --assume-unchanged
  nau = update-index --no-assume-unchanged
  cl = clean
  root = rev-parse --show-toplevel
